/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.parser

import io.sarl.api.naming.name.ServiceName
import io.sarl.lang.core.SREClassLoader
import java.net.URI
import java.util.StringTokenizer
import org.arakhne.afc.services.IService

/** 
 * Parser of service names that is accepting URI-based syntax.
 * 
 * <p>The different types of names are: <ul>
 * <li>{@code "service:[/]{0-2}serviceName][#fragmentName]"}</li>
 * </ul>
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class ServiceSchemeNameParser extends AbstractSchemeNameParser<ServiceName> {

	/** Constructor.
	 * 
	 * @optionalparam scheme the name scheme that is supported by this parser. By default it is {@link ServiceName#SCHEME}.
	 */
	new (scheme : String = ServiceName::SCHEME) {
		super(scheme)
	}
	
	@Pure	
	override refactor(name : URI) : URI {
		return name.refactor(1, 1)
	}

	@Pure
	override decode(name : URI) : ServiceName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token = tokenizer.nextToken
			return new ServiceName(name, SREClassLoader::loadClass(token, this.class.classLoader) as Class<? extends IService>)
		}
		return null
	}

}
