/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.parser

import io.sarl.api.naming.name.BehaviorName
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.SREClassLoader
import java.net.URI
import java.util.StringTokenizer
import java.util.UUID

/** 
 * Parser of behavior names that is accepting URI-based syntax.
 * 
 * <p>The different types of names are: <ul>
 * <li>{@code "behavior:[/]{0-2}agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
 * <li>{@code "behavior:[/]{0-2}contextId/agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
 * <li>{@code "behavior:[/]{0-2}contextId/spaceId/agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
 * </ul>
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.14.0 20241106-161408
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 * @since 0.12
 */
class BehaviorSchemeNameParser extends AbstractSchemeNameParser<BehaviorName> {

	/** Constructor.
	 * 
	 * @optionalparam scheme the name scheme that is supported by this parser. By default it is {@link BehaviorName#SCHEME}.
	 */
	new (scheme : String = BehaviorName::SCHEME) {
		super(scheme)
	}

	@Pure
	override refactor(name : URI) : URI {
		return name.refactor(2, 5, true)
	}

	@Pure
	override decode(name : URI) : BehaviorName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				if (tokenizer.hasMoreTokens) {
					val token2 = tokenizer.nextToken
					if (tokenizer.hasMoreTokens) {
						val token3 = tokenizer.nextToken
						if (tokenizer.hasMoreTokens) {
							// 5 components
							val token4 = tokenizer.nextToken
							return new BehaviorName(name, UUID::fromString(token0),
								UUID::fromString(token1), UUID::fromString(token2),
								SREClassLoader::loadClass(token3, this.class.classLoader) as Class<? extends Behavior>,
								Integer.parseUnsignedInt(token4, 10))
						}
						// 4 components
						try {
							var beh = Class::forName(token2) as Class<? extends Behavior>
							return new BehaviorName(name, UUID::fromString(token0), null,
								UUID::fromString(token1), beh, Integer.parseUnsignedInt(token3, 10))
						} catch (ex : Throwable) {
							return new BehaviorName(name, UUID::fromString(token0), UUID::fromString(token1),
								UUID::fromString(token2),  Class::forName(token3) as Class<? extends Behavior>,
								-1)
						}
					}
					// 3 components
					try {
						var beh = Class::forName(token1) as Class<? extends Behavior>
						return new BehaviorName(name, null, null, UUID::fromString(token0),
							beh, Integer.parseUnsignedInt(token2, 10))
					} catch (ex : Throwable) {
						return new BehaviorName(name, UUID::fromString(token0), null,
							UUID::fromString(token1), Class::forName(token2) as Class<? extends Behavior>,
							-1)
					}
				}
				// 2 components
				return new BehaviorName(name, null, null, UUID::fromString(token0),
					Class::forName(token1) as Class<? extends Behavior>, -1)
			}
		}
		return null
	}

}
