/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.parser

import io.sarl.api.naming.name.SarlName
import java.net.URI

/** 
 * A parser of names that is accepting URI-based syntax for a specific scheme.
 * 
 * @param <N> the type of the name that is the result of the decoding.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
interface ISchemeNameParser<N extends SarlName> {

	/** Replies the name scheme that is supported by this parser.
	 *
	 * @return the scheme that is supported by the parser.
	 */
	@Pure
	def getScheme : String

	/** Refactor the given URI in order to fit the name specification.
	 *
	 * <p>The key property of an URI for name specification is that its
	 * path must start with a {@code /} character.
	 *
	 * @param name the URI to analyze for obtaining valid URI for name specification.
	 * @return the fixed URI from that corresponds to the given {@code name}.
	 */
	@Pure
	def refactor(name : URI) : URI

	/** Decode the name. The purpose is to extract from the given
	 * URI all information that is suitable for creating an
	 * instance of {@code SarlName}.
	 *
	 * <p>The provided URI must have a path that is starting with the
	 * character {@code /}. Otherwise, the returned value will be
	 * {@code null}.
	 *
	 * @param name is the URI containing all relevant information for a {@code SarlName}.
	 *     It is assumed that the provided URI is valid for name specification as it is
	 *     defined in {@link #refactor(URI)}.
	 * @return the {@code SarlName} that is recognized from the URI.
	 */
	@Pure
	def decode(name : URI) : N

}
