/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.namespace

import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentTrait
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.annotation.PrivateAPI
import java.lang.reflect.Field

/** 
 * A tool that is able to determine if a field is observable or not based on the owned
 * capacity {@link FieldAccessValidationCapacity} of an agent.
 * 
 * @author $Author: sgalland$
 * @version api.naming 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 * @since 0.12
 */
class CapacityFieldAccessValidator implements IFieldAccessValidator {

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override getFieldAccessRight(fieldOwner : Object, field : Field) : FieldAccessRight {
		var ag : Agent = null
		if (fieldOwner instanceof AgentTrait) {
			ag = fieldOwner.owner
		} else if (fieldOwner instanceof Agent) {
			ag = fieldOwner
		}
		if (ag !== null) {
			try {
				var sk = SREutils::getInternalSkill(ag, typeof(FieldAccessValidationCapacity))
				var right = sk.getFieldAccessRight(field)
				if (right !== null) {
					return right
				}
			} catch (exception : Throwable) {
				// Ignore this exception
			}
		}
		return FieldAccessRight::NONE
	}

}
