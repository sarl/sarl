/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.parser

import io.sarl.api.naming.name.ScopedDataName
import java.net.URI

/** 
 * Parser of scoped data names that is accepting URI-based syntax.
 * 
 * <p>The different types of names are: <ul>
 * <li>{@code "data:[/]{0-2}scope1/.../scopen/dataName"}, where {@code scope1} to
 *     {@code scopen} represents the segments of the data's scope; and
 *     {@code dataName} is the name of the data.</li>
 * </ul>
 * 
 * @author $Author: sgalland$
 * @author $Author: stedeschi$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
class ScopedDataSchemeNameParser extends AbstractSchemeNameParser<ScopedDataName> {

	/** Constructor.
	 * 
	 * @optionalparam scheme the name scheme that is supported by this parser. By default it is {@link ScopedDataName#SCHEME}.
	 */
	new (scheme : String = ScopedDataName::SCHEME) {
		super(scheme)
	}

	@Pure	
	override refactor(name : URI) : URI {
		return name.refactor(1, Integer::MAX_VALUE, false, false)
	}

	@Pure
	override decode(name : URI) : ScopedDataName {
		if (name === null) {
			return null
		}
		return new ScopedDataName(name)
	}

}
