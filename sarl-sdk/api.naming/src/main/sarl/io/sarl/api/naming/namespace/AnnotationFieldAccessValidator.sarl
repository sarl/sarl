/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.namespace

import java.lang.reflect.Field

/** 
 * A tool that is able to determine if a field is observable or not based
 * on the annotation {@link Observable}.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 * @since 0.12
 */
class AnnotationFieldAccessValidator implements IFieldAccessValidator {

	override getFieldAccessRight(fieldOwner : Object, field : Field) : FieldAccessRight {
		val observable = field.observableAnnotation
		if (observable !== null) {
			if (observable.writable) {
				return FieldAccessRight::WRITE
			}
			return FieldAccessRight::READ
		}
		return FieldAccessRight::NONE
	}

	private static def getObservableAnnotation(field : Field) : Observable {
		var annon : Observable = field.getAnnotation(typeof(Observable))
		if (annon !== null) {
			return annon
		}
		var container = field.declaringClass
		while (container !== null) {
			annon = container.getAnnotation(typeof(Observable))
			if (annon !== null) {
				return annon
			}
			container = container.enclosingClass
		}
		return null
	}

}
