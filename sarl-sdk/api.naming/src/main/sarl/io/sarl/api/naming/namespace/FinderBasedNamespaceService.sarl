/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.namespace

import io.sarl.api.naming.name.SarlName
import java.util.Set

/** 
 * Implementation of a namespace service that uses the namespace finders.
 * The finders are in charge of finding a specific type of element.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class FinderBasedNamespaceService extends AbstractNamespaceService {

	@SuppressWarnings("raw_type")
	val finders = <String, INamespaceFinder>newTreeMap(null)

	/** Change the set of namespace finders that is used by this service.
	 *
	 * <p>This function could be overridden and annotated in subtypes in order to be used by the Guice injector.
	 * 
	 * @param finders the set of finders.
	 */
	@SuppressWarnings("raw_type")
	def setNamespaceFinders(finders : Set<INamespaceFinder>) {
		if (finders !== null) {
			this.finders.clear
			for (finder : finders) {
				finder.addNamespaceFinder
			}
		}
	}

	/** Add a namespace finder.
	 *
	 * @param finder the namespace finder to add.
	 */
	def addNamespaceFinder(finder : INamespaceFinder<?, ?>) : void {
		this.finders.put(finder.scheme, finder)
	}

	/** Remove a namespace finder.
	 * 
	 * @param scheme the scheme of the finder to remove. 
	 */
	def removeNamespaceFinder(scheme : String) : void {
		assert !scheme.isNullOrEmpty
		this.finders.remove(scheme)
	}

	/** Find an object by ignoring the fragment component of the given name
	 *
	 * @param name the name of the element to search for.
	 * @return the element with the given name, or {@code null} it is was not found.
	 */
	def findObjectWithoutFragment(name : SarlName) : Object {
		val finder = this.finders.get(name.scheme)
		if (finder !== null) {
			return finder.find(name)
		}
		return null
	}

}
