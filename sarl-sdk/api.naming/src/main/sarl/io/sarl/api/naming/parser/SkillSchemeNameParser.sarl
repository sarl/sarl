/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.naming.parser

import io.sarl.api.naming.name.SkillName
import io.sarl.lang.core.Capacity
import io.sarl.lang.core.SREClassLoader
import java.net.URI
import java.util.StringTokenizer
import java.util.UUID

/** 
 * Parser of skill names that is accepting URI-based syntax.
 * 
 * <p>The different types of names are: <ul>
 * <li>{@code "skill:[/]{0-2}agentId/capacityName[#fragmentName]"}</li>
 * <li>{@code "skill:[/]{0-2}contextId/agentId/capacityName[#fragmentName]"}</li>
 * <li>{@code "skill:[/]{0-2}contextId/spaceId/agentId/capacityName[#fragmentName]"}</li>
 * </ul>
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.13.0 20230919-093058
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 * @since 0.12
 */
class SkillSchemeNameParser extends AbstractSchemeNameParser<SkillName> {

	/** Constructor.
	 * 
	 * @optionalparam scheme the name scheme that is supported by this parser. By default it is {@link SkillName#SCHEME}.
	 */
	new (scheme : String = SkillName::SCHEME) {
		super(scheme)
	}

	@Pure	
	override refactor(name : URI) : URI {
		return name.refactor(2, 4)
	}

	@Pure
	override decode(name : URI) : SkillName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				if (tokenizer.hasMoreTokens) {
					val token2 = tokenizer.nextToken
					if (tokenizer.hasMoreTokens) {
						val token3 = tokenizer.nextToken
						return new SkillName(name, UUID::fromString(token0), UUID::fromString(token1),
							UUID::fromString(token2), SREClassLoader::loadClass(token3, this.class.classLoader) as Class<? extends Capacity>)
					}
					return new SkillName(name, UUID::fromString(token0), null, UUID::fromString(token1),
						Class::forName(token2) as Class<? extends Capacity>)
				}
				return new SkillName(name, null, null, UUID::fromString(token0),
					Class::forName(token1) as Class<? extends Capacity>)
			}
		}
		return null
	}

}
