/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.parser

import io.sarl.api.naming.name.ContextName
import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.parser.ContextSchemeNameParser
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.assertNullOrEmpty
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertNull
import io.sarl.api.naming.parser.UriBasedNameParser

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("Context NameParser")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class ContextSchemeNameParserTest {

	protected static val CONTEXT_ID = "2a2c6de4-8327-431b-a916-97a05caafe14"

	var parser : UriBasedNameParser

	@BeforeEach
	def setUp : void {
		this.parser = new UriBasedNameParser()
		this.parser.addSchemeNameParser(new ContextSchemeNameParser)
	}

	protected static def createURI(value : String) : URI {
		URI::create(value)
	}

	protected def createNormalizedURI(value : String) : URI {
		this.parser.normalize(value.createURI)
	}

	private static def toUUID(s : String) : UUID {
		UUID::fromString(s)
	}

	private static def m(index : int, e : String*) : String{
		val b = new StringBuilder
		for (elt : e) {
			if (!elt.isNullOrEmpty) {
				b.append("/").append(elt)
			}
		}
		if (index >= 0) {
			b.append("/").append(index)
		}
		return b.toString
	}

	protected static def assertValid(uri : URI, s : String, fragment : String = null, kindex : int, elements : String*) : void {
		uri.assertNotNull
		s.assertEquals(uri.scheme)
		m(kindex, elements).assertEquals(uri.path)
		if (fragment.isNullOrEmpty) {
			uri.fragment.assertNullOrEmpty
		} else {
			fragment.assertEquals(uri.fragment)
		}
		uri.host.assertNullOrEmpty
		uri.port.assertEquals(-1)
		uri.query.assertNullOrEmpty
		uri.userInfo.assertNullOrEmpty
	}

	protected static def assertValid(name : SarlName, s : String, fragment : String = null, kindex : int, elements : String*) : void {
		name.assertNotNull
		name.toURI.assertValid(s, fragment, kindex, elements)
		if (fragment.isNullOrEmpty) {
			name.fragment.assertNullOrEmpty
		} else {
			fragment.assertEquals(name.fragment)
		}
		val n = name as ContextName
		elements.get(0).toUUID.assertEquals(n.contextId)
	}

	@Test
	def decode_String_00 {
		this.parser.decode("context:").assertNull
	}

	@Test
	def decode_String_01 {
		this.parser.decode("context://" + CONTEXT_ID).assertValid("context", -1, CONTEXT_ID)
	}

	
	@Test
	def decode_String_02 {
		this.parser.decode("context:/" + CONTEXT_ID).assertValid("context", -1, CONTEXT_ID)
	}

	@Test
	def decode_String_03 {
		this.parser.decode("context:" + CONTEXT_ID).assertValid("context", -1, CONTEXT_ID)
	}

	@Test
	def decode_String_04 {
		this.parser.decode("context://" + CONTEXT_ID +"/component2").assertNull
	}

	@Test
	def decode_String_05 {
		this.parser.decode("context:/" + CONTEXT_ID +"/component2").assertNull
	}

	@Test
	def decode_String_06 {
		this.parser.decode("context:" + CONTEXT_ID +"/component2").assertNull
	}

	@Test
	def decode_String_fragment_00 {
		this.parser.decode("context:#frag").assertNull
	}

	@Test
	def decode_String_fragment_01 {
		this.parser.decode("context://" + CONTEXT_ID + "#frag").assertValid("context", "frag", -1, CONTEXT_ID)
	}

	@Test
	def decode_String_fragment_02 {
		this.parser.decode("context:/" + CONTEXT_ID + "#frag").assertValid("context", "frag", -1, CONTEXT_ID)
	}

	@Test
	def decode_String_fragment_03 {
		this.parser.decode("context:" + CONTEXT_ID + "#frag").assertValid("context", "frag", -1, CONTEXT_ID)
	}

	@Test
	def decode_String_fragment_04 {
		this.parser.decode("context://" + CONTEXT_ID +"/component2#frag").assertNull
	}

	@Test
	def decode_String_fragment_05 {
		this.parser.decode("context:/" + CONTEXT_ID +"/component2").assertNull
	}

	@Test
	def decode_String_fragment_06 {
		this.parser.decode("context:" + CONTEXT_ID +"/component2").assertNull
	}

	@Test
	def normalize_URI_00 {
		this.parser.normalize(("context://" + CONTEXT_ID).createURI).assertValid("context", -1, CONTEXT_ID)
	}

	@Test
	def normalize_URI_01 {
		this.parser.normalize(("context:/" + CONTEXT_ID).createURI).assertValid("context", -1, CONTEXT_ID)
	}

	@Test
	def normalize_URI_02 {
		this.parser.normalize(("context:" + CONTEXT_ID).createURI).assertValid("context", -1, CONTEXT_ID)
	}

	@Test
	def normalize_URI_03 {
		this.parser.normalize(("context://" + CONTEXT_ID +"/component2").createURI).assertNull
	}

	@Test
	def normalize_URI_04 {
		this.parser.normalize(("context:/" + CONTEXT_ID +"/component2").createURI).assertNull
	}

	@Test
	def normalize_URI_05 {
		this.parser.normalize(("context:" + CONTEXT_ID +"/component2").createURI).assertNull
	}

	@Test
	def normalize_URI_fragment_00 {
		this.parser.normalize(("context://" + CONTEXT_ID + "#frag").createURI).assertValid("context", "frag", -1,
			CONTEXT_ID)
	}

	@Test
	def normalize_URI_fragment_01 {
		this.parser.normalize(("context:/" + CONTEXT_ID + "#frag").createURI).assertValid("context", "frag", -1,
			CONTEXT_ID)
	}

	@Test
	def normalize_URI_fragment_02 {
		this.parser.normalize(("context:" + CONTEXT_ID + "#frag").createURI).assertValid("context", "frag", -1,
			CONTEXT_ID)
	}

	@Test
	def normalize_URI_fragment_03 {
		this.parser.normalize(("context://" + CONTEXT_ID +"/component2#frag").createURI).assertNull
	}

	@Test
	def normalize_URI_fragment_04 {
		this.parser.normalize(("context:/" + CONTEXT_ID +"/component2").createURI).assertNull
	}

	@Test
	def normalize_URI_fragment_05 {
		this.parser.normalize(("context:" + CONTEXT_ID +"/component2").createURI).assertNull
	}

	@Test
	def decode_URI_00 {
		this.parser.decode(("context://" + CONTEXT_ID).createNormalizedURI).assertValid(
		"context", -1, CONTEXT_ID)
	}

	@Test
	def decode_URI_01 {
		this.parser.decode(("context:/" + CONTEXT_ID).createNormalizedURI).assertValid(
			"context", -1, CONTEXT_ID)
	}

	@Test
	def decode_URI_02 {
		this.parser.decode(("context:" + CONTEXT_ID).createNormalizedURI).assertValid(
			"context", -1, CONTEXT_ID)
	}

	@Test
	def decode_URI_03 {
		this.parser.decode(("context://" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_04 {
		this.parser.decode(("context:/" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_05 {
		this.parser.decode(("context:" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_fragment_00 {
		this.parser.decode(("context://" + CONTEXT_ID + "#frag").createNormalizedURI).assertValid(
			"context", "frag", -1, CONTEXT_ID)
	}

	@Test
	def decode_URI_fragment_01 {
		this.parser.decode(("context:/" + CONTEXT_ID + "#frag").createNormalizedURI).assertValid(
			"context", "frag", -1, CONTEXT_ID)
	}

	@Test
	def decode_URI_fragment_02 {
		this.parser.decode(("context:" + CONTEXT_ID + "#frag").createNormalizedURI).assertValid(
			"context", "frag", -1, CONTEXT_ID)
	}

	@Test
	def decode_URI_fragment_03 {
		this.parser.decode(("context://" + CONTEXT_ID +"/component2#frag").createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_fragment_04 {
		this.parser.decode(("context:/" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_fragment_05 {
		this.parser.decode(("context:" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
	}

}
