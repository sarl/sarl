/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.namespace

import io.sarl.api.naming.namespace.CascadeFieldAccessValidator
import io.sarl.api.naming.namespace.FieldAccessRight
import io.sarl.api.naming.namespace.IFieldAccessValidator
import io.sarl.api.naming.namespace.OwnerTypeFieldAccessValidator
import io.sarl.api.naming.namespace.PublicFieldAccessValidator
import io.sarl.api.naming.tests.namespace.mocks.MyAgent0
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior0
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.lang.reflect.Field
import java.util.stream.Stream
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import io.sarl.api.naming.tests.namespace.mocks.MySkill0
import io.sarl.api.naming.tests.namespace.mocks.MyContext0
import io.sarl.api.naming.tests.namespace.mocks.MySpace0
import io.sarl.api.naming.tests.namespace.mocks.MyService0

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("CascadeFieldAccessValidator")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class CascadeFieldAccessValidatorTest {

	private static def getField(instance : Object) : Field {
		var i = instance.class
		while (i !== null) {
			try {
				return i.getDeclaredField("myfield")
			} catch (exception : Throwable) {
				//
			}
			i = i.superclass
		}
		throw new NoSuchFieldException 
	}

	@ParameterizedTest(name = "[{index}] {0} - {2} - {3}")
	@MethodSource
	@DisplayName("getFieldAccessRight")
	def getFieldAccessRight(name : String, instance : Object, expectedRight : FieldAccessRight, validators : Iterable<IFieldAccessValidator>) : void {
		val validator = new CascadeFieldAccessValidator
		for (subvalidator : validators) {
			validator.addValidator(subvalidator)
		}
		expectedRight.assertSame(validator.getFieldAccessRight(instance, instance.field))
	}

	@SuppressWarnings("unused_private_member")
	private static def getFieldAccessRight : Stream<Arguments> {
		val val0 = new OwnerTypeFieldAccessValidator
		val val1 = new PublicFieldAccessValidator
		Stream::of(
			Arguments::of("Agent", typeof(MyAgent0).mock, FieldAccessRight::NONE, #[]),
			Arguments::of("Agent", typeof(MyAgent0).mock, FieldAccessRight::NONE, #[val0]),
			Arguments::of("Agent", typeof(MyAgent0).mock, FieldAccessRight::WRITE, #[val1]),
			Arguments::of("Agent", typeof(MyAgent0).mock, FieldAccessRight::WRITE, #[val0, val1]),
			Arguments::of("Agent", typeof(MyAgent0).mock, FieldAccessRight::WRITE, #[val1, val0]),
			Arguments::of("Behavior", typeof(MyBehavior0).mock, FieldAccessRight::NONE, #[]),
			Arguments::of("Behavior", typeof(MyBehavior0).mock, FieldAccessRight::NONE, #[val0]),
			Arguments::of("Behavior", typeof(MyBehavior0).mock, FieldAccessRight::WRITE, #[val1]),
			Arguments::of("Behavior", typeof(MyBehavior0).mock, FieldAccessRight::WRITE, #[val0, val1]),
			Arguments::of("Behavior", typeof(MyBehavior0).mock, FieldAccessRight::WRITE, #[val1, val0]),
			Arguments::of("Skill", typeof(MySkill0).mock, FieldAccessRight::NONE, #[]),
			Arguments::of("Skill", typeof(MySkill0).mock, FieldAccessRight::NONE, #[val0]),
			Arguments::of("Skill", typeof(MySkill0).mock, FieldAccessRight::WRITE, #[val1]),
			Arguments::of("Skill", typeof(MySkill0).mock, FieldAccessRight::WRITE, #[val0, val1]),
			Arguments::of("Skill", typeof(MySkill0).mock, FieldAccessRight::WRITE, #[val1, val0]),
			Arguments::of("Context", typeof(MyContext0).mock, FieldAccessRight::NONE, #[]),
			Arguments::of("Context", typeof(MyContext0).mock, FieldAccessRight::WRITE, #[val0]),
			Arguments::of("Context", typeof(MyContext0).mock, FieldAccessRight::WRITE, #[val1]),
			Arguments::of("Context", typeof(MyContext0).mock, FieldAccessRight::WRITE, #[val0, val1]),
			Arguments::of("Context", typeof(MyContext0).mock, FieldAccessRight::WRITE, #[val1, val0]),
			Arguments::of("Space", typeof(MySpace0).mock, FieldAccessRight::NONE, #[]),
			Arguments::of("Space", typeof(MySpace0).mock, FieldAccessRight::WRITE, #[val0]),
			Arguments::of("Space", typeof(MySpace0).mock, FieldAccessRight::WRITE, #[val1]),
			Arguments::of("Space", typeof(MySpace0).mock, FieldAccessRight::WRITE, #[val0, val1]),
			Arguments::of("Space", typeof(MySpace0).mock, FieldAccessRight::WRITE, #[val1, val0]),
			Arguments::of("Service", typeof(MyService0).mock, FieldAccessRight::NONE, #[]),
			Arguments::of("Service", typeof(MyService0).mock, FieldAccessRight::WRITE, #[val0]),
			Arguments::of("Service", typeof(MyService0).mock, FieldAccessRight::WRITE, #[val1]),
			Arguments::of("Service", typeof(MyService0).mock, FieldAccessRight::WRITE, #[val0, val1]),
			Arguments::of("Service", typeof(MyService0).mock, FieldAccessRight::WRITE, #[val1, val0])
		)
	}

}
