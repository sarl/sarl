/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.parser

import java.util.stream.Stream
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource

import static extension org.junit.jupiter.api.Assertions.assertNull

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@DisplayName("Behavior NameParser normalize(URI)")
class BehaviorSchemeNameParserNormalizeURITest extends AbstractBehaviorSchemeNameParserTest {

	@ParameterizedTest
	@MethodSource
	@DisplayName("normalize(URI)")
	def normalize_URI(source : String,
		expectedScheme : String, expectedIndex : int, expectedContext : String, expectedSpace : String) {
		val actual = this.parser.normalize(source.createURI)
		if (expectedScheme === null) {
			actual.assertNull
		} else if (expectedContext === null) {
			actual.assertValid(expectedScheme, expectedIndex, AGENT_ID, BEHAVIOR_ID)
		} else if (expectedSpace === null) {
			actual.assertValid(expectedScheme, expectedIndex, expectedContext, AGENT_ID, BEHAVIOR_ID)
		} else {
			actual.assertValid(expectedScheme, expectedIndex, expectedContext, expectedSpace, AGENT_ID, BEHAVIOR_ID)
		}
	}

	@SuppressWarnings("unused_private_member")
	private static def normalize_URI : Stream<Arguments> {
		Stream::of(
			Arguments::of("behavior://" + BEHAVIOR_ID,
					null, 0, null, null),
			Arguments::of("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				null, 0, null, null),
			Arguments::of("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, null, null),
			Arguments::of("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, null, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, CONTEXT_ID, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, CONTEXT_ID, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx",
				null, 0, null, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "/xxx",
				null, 0, null, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" + BEHAVIOR_IDX,
				null, 0, null, null),
			Arguments::of("behavior:/" + BEHAVIOR_ID,
				null, 0, null, null),
			Arguments::of("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				null, 0, null, null),
			Arguments::of("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, null, null),
			Arguments::of("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, null, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, CONTEXT_ID, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, CONTEXT_ID, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx",
				null, 0, null, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "/xxx",
				null, 0, null, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" + BEHAVIOR_IDX,
				null, 0, null, null),
			Arguments::of("behavior:" + BEHAVIOR_ID,
				null, 0, null, null),
			Arguments::of("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				null, 0, null, null),
			Arguments::of("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, null, null),
			Arguments::of("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, null, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, CONTEXT_ID, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, CONTEXT_ID, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID,
				"behavior", -1, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX,
				"behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx",
				null, 0, null, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "/xxx",
				null, 0, null, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" + BEHAVIOR_IDX,
				null, 0, null, null)
		)
	}

	@ParameterizedTest
	@MethodSource
	@DisplayName("normalize(URI+Fragment)")
	def normalize_URIFragment(source : String, expectedScheme : String, expectedIndex : int, expectedContext : String, expectedSpace : String) {
		val actual = this.parser.normalize(source.createURI)
		if (expectedScheme === null) {
			actual.assertNull
		} else if (expectedContext === null) {
			actual.assertValid(expectedScheme, "frag", expectedIndex, AGENT_ID, BEHAVIOR_ID)
		} else if (expectedSpace === null) {
			actual.assertValid(expectedScheme, "frag", expectedIndex, expectedContext, AGENT_ID, BEHAVIOR_ID)
		} else {
			actual.assertValid(expectedScheme, "frag", expectedIndex, expectedContext, expectedSpace, AGENT_ID, BEHAVIOR_ID)
		}
	}

	@SuppressWarnings("unused_private_member")
	private static def normalize_URIFragment : Stream<Arguments> {
		Stream::of(
			Arguments::of("behavior://" + BEHAVIOR_ID + "#frag",
					null, 0, null, null),
			Arguments::of("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					null, 0, null, null),
			Arguments::of("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, null, null),
			Arguments::of("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, null, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, CONTEXT_ID, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, CONTEXT_ID, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx#frag",
					null, 0, null, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "/xxx#frag",
					null, 0, null, null),
			Arguments::of("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" + BEHAVIOR_IDX + "#frag",
					null, 0, null, null),
			Arguments::of("behavior:/" + BEHAVIOR_ID + "#frag",
					null, 0, null, null),
			Arguments::of("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					null, 0, null, null),
			Arguments::of("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, null, null),
			Arguments::of("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, null, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, CONTEXT_ID, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, CONTEXT_ID, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx#frag",
					null, 0, null, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "/xxx#frag",
					null, 0, null, null),
			Arguments::of("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" + BEHAVIOR_IDX + "#frag",
					null, 0, null, null),
			Arguments::of("behavior:" + BEHAVIOR_ID + "#frag",
					null, 0, null, null),
			Arguments::of("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					null, 0, null, null),
			Arguments::of("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, null, null),
			Arguments::of("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, null, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, CONTEXT_ID, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, CONTEXT_ID, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag",
					"behavior", -1, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag",
					"behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx#frag",
					null, 0, null, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "/xxx#frag",
					null, 0, null, null),
			Arguments::of("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" + BEHAVIOR_IDX + "#frag",
					null, 0, null, null)
		)	
	}

}
