/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.name

import io.sarl.api.naming.name.AgentName
import io.sarl.lang.core.Agent
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("AgentName")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class AgentNameTest {

	var uri : URI

	var contextId : UUID

	var spaceId : UUID

	var agentId : UUID

	var name : AgentName

	@BeforeEach
	def setUp : void {
		this.uri = URI::create("http://www.sarl.io/001#fragment")
		this.contextId = UUID::randomUUID
		this.spaceId = UUID::randomUUID
		this.agentId = UUID::randomUUID
		this.name = (new AgentName(this.uri, this.contextId, this.spaceId, this.agentId) {
		}).spy
	}

	@Test
	@DisplayName("getContextId")
	def getContextId {
		this.contextId.assertSame(this.name.contextId)
	}

	@Test
	@DisplayName("getSpaceId")
	def getSpaceId {
		this.spaceId.assertSame(this.name.spaceId)
	}

	@Test
	@DisplayName("getAgentId")
	def getAgentId {
		this.agentId.assertSame(this.name.agentId)
	}
	
	@Test
	@DisplayName("getAssociatedObject")
	def getAssociatedObject {
		var ref = this.name.associatedObject
		ref.assertNull
	}

	@Test
	@DisplayName("setAssociatedObject")
	def setAssociatedObject {
		var spc = typeof(Agent).mock
		this.name.associatedObject = spc
		var ref = this.name.associatedObject
		spc.assertSame(ref)
	}

}
