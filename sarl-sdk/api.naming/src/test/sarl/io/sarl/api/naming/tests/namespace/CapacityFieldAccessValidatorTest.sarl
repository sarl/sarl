/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.namespace

import io.sarl.api.naming.namespace.CapacityFieldAccessValidator
import io.sarl.api.naming.namespace.FieldAccessRight
import io.sarl.api.naming.tests.namespace.mocks.MyAgentC0
import io.sarl.api.naming.tests.namespace.mocks.MyAgentC1
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior0
import io.sarl.api.naming.tests.namespace.mocks.MyContext0
import io.sarl.api.naming.tests.namespace.mocks.MyContextA0
import io.sarl.api.naming.tests.namespace.mocks.MyService0
import io.sarl.api.naming.tests.namespace.mocks.MySkill0
import io.sarl.api.naming.tests.namespace.mocks.MySpace0
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.lang.reflect.Field
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("CapacityFieldAccessValidator")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class CapacityFieldAccessValidatorTest {

	var validator : CapacityFieldAccessValidator

	@BeforeEach
	def setUp : void {
		this.validator = new CapacityFieldAccessValidator
	}

	private static def getField(instance : Object) : Field {
		return instance.class.getDeclaredField("myfield")
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) w/o skill")
	def getFieldAccessRight_Agent_noSkill : void {
		var ag = new MyAgentC0(UUID::randomUUID, UUID::randomUUID)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(ag, ag.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) w/ skill none")
	def getFieldAccessRight_Agent_none : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::NONE)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(ag, ag.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) w/ skill read")
	def getFieldAccessRight_Agent_read : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::READ)
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(ag, ag.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) w/ skill write")
	def getFieldAccessRight_Agent_write : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::WRITE)
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(ag, ag.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) w/o skill")
	def getFieldAccessRight_Behavior_noSkill : void {
		var ag = new MyAgentC0(UUID::randomUUID, UUID::randomUUID)
		var beh = new MyBehavior0(ag)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(beh, beh.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) w/ skill none")
	def getFieldAccessRight_Behavior_none : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::NONE)
		var beh = new MyBehavior0(ag)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(beh, beh.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) w/ skill read")
	def getFieldAccessRight_Behavior_read : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::READ)
		var beh = new MyBehavior0(ag)
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(beh, beh.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) w/ skill write")
	def getFieldAccessRight_Behavior_write : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::WRITE)
		var beh = new MyBehavior0(ag)
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(beh, beh.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) w/o skill")
	def getFieldAccessRight_Skill_noSkill : void {
		var ag = new MyAgentC0(UUID::randomUUID, UUID::randomUUID)
		var sk = new MySkill0(ag)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(sk, sk.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) w/ skill none")
	def getFieldAccessRight_Skill_none : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::NONE)
		var sk = new MySkill0(ag)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(sk, sk.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) w/ skill read")
	def getFieldAccessRight_Skill_read : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::READ)
		var sk = new MySkill0(ag)
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(sk, sk.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) w/ skill write")
	def getFieldAccessRight_Skill_write : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::WRITE)
		var sk = new MySkill0(ag)
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(sk, sk.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) w/o agent owner")
	def getFieldAccessRight_Context_noAgent : void {
		var ctx = new MyContext0
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(ctx, ctx.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) w/ agent owner w/o skill")
	def getFieldAccessRight_Context_agent_noSkill : void {
		var ag = new MyAgentC0(UUID::randomUUID, UUID::randomUUID)
		var ctx = new MyContextA0(ag)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(ctx, ctx.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) w/ agent owner w/ skill none")
	def getFieldAccessRight_Context_agent_none : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::NONE)
		var ctx = new MyContextA0(ag)
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(ctx, ctx.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) w/ agent owner w/ skill read")
	def getFieldAccessRight_Context_agent_read : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::READ)
		var ctx = new MyContextA0(ag)
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(ctx, ctx.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) w/ agent owner w/ skill write")
	def getFieldAccessRight_Context_agent_write : void {
		var ag = new MyAgentC1(UUID::randomUUID, UUID::randomUUID, FieldAccessRight::WRITE)
		var ctx = new MyContextA0(ag)
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(ctx, ctx.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f)")
	def getFieldAccessRight_Space : void {
		var spc = new MySpace0
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(spc, spc.field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f)")
	def getFieldAccessRight_Service : void {
		var serv = new MyService0
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(serv, serv.field))
	}

}
