/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.namespace

import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.lang.reflect.Field
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.ValueSource

import static extension io.sarl.tests.api.tools.TestAssertions.assertException
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertSame

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("FieldAccess")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class FieldAccessTest {

	private static class ObjectMock {
		public var fld : int = 34
	}

	var field : Field

	var objectMock : ObjectMock

	var nameMock : SarlName
	
	@BeforeEach
	def setUp : void {
		this.nameMock = typeof(SarlName).mock
		this.field = typeof(ObjectMock).getDeclaredField("fld")
		this.objectMock = new ObjectMock
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	def getName(writable : boolean) {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		this.nameMock.assertSame(accessor.name)
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	def getField(writable : boolean) {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		this.field.assertSame(accessor.field)
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	def getInstance(writable : boolean) {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		this.objectMock.assertSame(accessor.instance)
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	def get(writable : boolean) {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		34.assertEquals(accessor.get)
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	@DisplayName("set with valid type")
	def set_validType(writable : boolean) : void {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		if (writable) {
			var old = accessor.set(128)
			34.assertEquals(old)
			128.assertEquals(accessor.get)
			128.assertEquals(this.objectMock.fld)
		} else {
			typeof(IllegalAccessException).assertException [
				accessor.set("abc")
			]
			34.assertEquals(accessor.get)
			34.assertEquals(this.objectMock.fld)
		}
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	@DisplayName("set with invalid type")
	def set_invalidType(writable : boolean) : void {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		if (writable) {
			typeof(IllegalArgumentException).assertException [
				accessor.set("abc")
			]
		} else {
			typeof(IllegalAccessException).assertException [
				accessor.set("abc")
			]
		}
	}

	@ParameterizedTest
	@ValueSource(booleans = #[true, false])
	def toStringTest(writable : boolean) {
		var accessor = new FieldAccess(this.nameMock, this.field, this.objectMock, writable)
		"fld".assertEquals(accessor.toString)
	}

}
