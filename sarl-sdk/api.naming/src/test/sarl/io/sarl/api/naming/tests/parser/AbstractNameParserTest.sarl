/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.parser

import io.sarl.api.naming.parser.AgentSchemeNameParser
import io.sarl.api.naming.parser.BehaviorSchemeNameParser
import io.sarl.api.naming.parser.ContextSchemeNameParser
import io.sarl.api.naming.parser.ServiceSchemeNameParser
import io.sarl.api.naming.parser.SkillSchemeNameParser
import io.sarl.api.naming.parser.SpaceSchemeNameParser
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension java.net.URI.create
import static extension org.junit.jupiter.api.Assertions.*
import io.sarl.api.naming.parser.UriBasedNameParser

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("URI-based NameParser")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class NameParserTest {

	var parser : UriBasedNameParser

	@BeforeEach
	def setUp : void {
		this.parser = new UriBasedNameParser()
		this.parser.addSchemeNameParser(new ServiceSchemeNameParser)
		this.parser.addSchemeNameParser(new ContextSchemeNameParser)
		this.parser.addSchemeNameParser(new SpaceSchemeNameParser)
		this.parser.addSchemeNameParser(new SkillSchemeNameParser)
		this.parser.addSchemeNameParser(new AgentSchemeNameParser)
		this.parser.addSchemeNameParser(new BehaviorSchemeNameParser)		
	}

	@Test
	def decode_String_null {
		var v : String = null
		this.parser.decode(v).assertNull
	}

	@Test
	def decode_String_empty {
		this.parser.decode("").assertNull
	}

	@Test
	def decode_String_noScheme {
		this.parser.decode("agentName").assertNull
	}

	@Test
	def decode_String_http {
		this.parser.decode("http://sarl.io").assertNull
	}

	@Test
	def normalize_URI_null {
		this.parser.normalize(null).assertNull
	}

	@Test
	def normalize_URI_empty {
		this.parser.normalize("".create).assertNull
	}

	@Test
	def normalize_URI_http {
		this.parser.normalize("http://sarl.io".create).assertNull
	}

	@Test
	def decode_URI_null {
		var v : URI = null
		this.parser.decode(v).assertNull
	}

	@Test
	def decode_URI_empty {
		this.parser.decode("".create).assertNull
	}

	@Test
	def decode_URL_noScheme {
		this.parser.decode("agentName".create).assertNull
	}

	@Test
	def decode_URI_http {
		this.parser.decode("http://sarl.io".create).assertNull
	}

}
