/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.namespace

import io.sarl.api.naming.name.ContextName
import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.name.SpaceName
import io.sarl.api.naming.namespace.AnnotationFieldAccessValidator
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.naming.namespace.FinderBasedNamespaceService
import io.sarl.api.naming.namespace.IFieldAccessValidator
import io.sarl.api.naming.namespace.INamespaceFinder
import io.sarl.api.naming.parser.ContextSchemeNameParser
import io.sarl.api.naming.parser.INameParser
import io.sarl.api.naming.parser.ISchemeNameParser
import io.sarl.api.naming.parser.UriBasedNameParser
import io.sarl.api.naming.tests.namespace.mocks.MyContext3
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import java.util.Collections
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertNull
import static extension org.junit.jupiter.api.Assertions.assertSame
import static extension org.mockito.Mockito.spy

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("FinderBasedNamespaceService")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class FinderBasedNamespaceServiceTest {

	var service : FinderBasedNamespaceService

	var nameParser : UriBasedNameParser

	var fieldAccessValidator : AnnotationFieldAccessValidator

	@SuppressWarnings("raw_type")
	var schemeParser : ISchemeNameParser

	var finder : INamespaceFinder<SarlName, Object>

	var cid0 : UUID

	var ctx0 : AgentContext

	@SuppressWarnings("raw_type", "use_reserved_sarl_annotation")
	@BeforeEach
	@PrivateAPI(isCallerOnly = true)
	def setUp : void {
		// Default space creation
		this.cid0 = UUID::randomUUID
		this.ctx0 = new MyContext3().spy

		this.schemeParser = new ContextSchemeNameParser

		this.nameParser = new UriBasedNameParser
		this.nameParser.schemeNameParsers = Collections::singleton(this.schemeParser)

		this.fieldAccessValidator = new AnnotationFieldAccessValidator

		this.finder = typeof(INamespaceFinder).mock
		when(this.finder.scheme).thenReturn(ContextName::SCHEME)
		when(this.finder.find(any)).thenAnswer [
			val name : SarlName = it.getArgument(0)
			if (name instanceof ContextName) {
				if (name.contextId == this.cid0) {
					return this.ctx0
				}
			}
			return null
		]

		this.service = new FinderBasedNamespaceService
		this.service.nameParser = this.nameParser
		this.service.fieldAccessValidator = this.fieldAccessValidator
		this.service.namespaceFinders = Collections::singleton(this.finder)
	}

	@Test
	def getParserName : void {
		this.nameParser.assertSame(this.service.nameParser)
		var parser = typeof(INameParser).mock
		this.service.nameParser = parser
		parser.assertSame(this.service.nameParser)
	}

	@Test
	def getFieldAccessValidator : void {
		this.fieldAccessValidator.assertSame(this.service.fieldAccessValidator)
		var validator = typeof(IFieldAccessValidator).mock
		this.service.fieldAccessValidator = validator
		validator.assertSame(this.service.fieldAccessValidator)
	}

	@Test
	def findObjectWithoutFragment_00 : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		this.ctx0.assertSame(this.service.findObjectWithoutFragment(name))
	}

	@Test
	def findObjectWithoutFragment_01 : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("myfield")
		when(name.hasFragment).thenReturn(true)
		this.ctx0.assertSame(this.service.findObjectWithoutFragment(name))
	}

	@Test
	def findObjectWithoutFragment_02 : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("xyz")
		when(name.hasFragment).thenReturn(true)
		this.ctx0.assertSame(this.service.findObjectWithoutFragment(name))
	}

	@Test
	def findObjectWithoutFragment_03 : void {
		var name = typeof(SpaceName).mock
		when(name.scheme).thenReturn(SpaceName::SCHEME)
		this.service.findObjectWithoutFragment(name).assertNull
	}

	@Test
	def findObject_SarlName_00 : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		this.ctx0.assertSame(this.service.findObject(name))
	}

	@Test
	def findObject_SarlName_01 : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("myfield")
		when(name.hasFragment).thenReturn(true)
		var fld = this.service.findObject(name)
		assertInstanceOf(typeof(FieldAccess), fld)
		var fa = fld as FieldAccess
		this.ctx0.assertSame(fa.instance)
		fa.field.assertNotNull
		"myfield".assertEquals(fa.field.name)
		34.assertEquals(fa.get)
	}

	@Test
	def findObject_SarlName_02 : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("xyz")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name).assertNull
	}

	@Test
	def findObject_SarlName_03 : void {
		var name = typeof(SpaceName).mock
		when(name.scheme).thenReturn(SpaceName::SCHEME)
		this.service.findObject(name).assertNull
	}

	@Test
	def findObject_String_00 : void {
		this.ctx0.assertSame(this.service.findObject("context:" + this.cid0.toString))
	}

	@Test
	def findObject_String_01 : void {
		var fld = this.service.findObject("context:" + this.cid0.toString + "#myfield")
		assertInstanceOf(typeof(FieldAccess), fld)
		var fa = fld as FieldAccess
		this.ctx0.assertSame(fa.instance)
		fa.field.assertNotNull
		"myfield".assertEquals(fa.field.name)
		34.assertEquals(fa.get)
	}

	@Test
	def findObject_String_02 : void {
		this.service.findObject("context:" + this.cid0.toString + "#xyz").assertNull
	}

	@Test
	def findObject_String_03 : void {
		this.service.findObject("context:").assertNull
	}

	@Test
	def findObject_String_Class_00_Context : void {
		this.ctx0.assertSame(this.service.findObject("context:" + this.cid0.toString, typeof(AgentContext)))
	}

	@Test
	def findObject_String_Class_00_Object : void {
		this.ctx0.assertSame(this.service.findObject("context:" + this.cid0.toString, typeof(Object)))
	}

	@Test
	def findObject_String_Class_00_FieldAccess : void {
		this.service.findObject("context:" + this.cid0.toString, typeof(FieldAccess)).assertNull
	}

	@Test
	def findObject_SarlName_Class_00_Context : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		this.ctx0.assertSame(this.service.findObject(name, typeof(AgentContext)))
	}

	@Test
	def findObject_SarlName_Class_00_Object : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		this.ctx0.assertSame(this.service.findObject(name, typeof(Object)))
	}

	@Test
	def findObject_SarlName_Class_00_Integer : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		this.service.findObject(name, typeof(Integer)).assertNull
	}

	@Test
	def findObject_SarlName_Class_01_Context : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("myfield")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name, typeof(AgentContext)).assertNull
	}

	@Test
	def findObject_SarlName_Class_01_Object : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("myfield")
		when(name.hasFragment).thenReturn(true)
		var fld = this.service.findObject(name, typeof(Object))
		assertInstanceOf(typeof(FieldAccess), fld)
		var fa = fld as FieldAccess
		this.ctx0.assertSame(fa.instance)
		fa.field.assertNotNull
		"myfield".assertEquals(fa.field.name)
		34.assertEquals(fa.get)
	}

	@Test
	def findObject_SarlName_Class_01_FieldAccess : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("myfield")
		when(name.hasFragment).thenReturn(true)
		var fld = this.service.findObject(name, typeof(FieldAccess))
		this.ctx0.assertSame(fld.instance)
		fld.field.assertNotNull
		"myfield".assertEquals(fld.field.name)
		34.assertEquals(fld.get)
	}

	@Test
	def findObject_SarlName_Class_01_Integer : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("myfield")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name, typeof(Integer)).assertNull
	}

	@Test
	def findObject_SarlName_Class_02_Context : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("xyz")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name, typeof(AgentContext)).assertNull
	}

	@Test
	def findObject_SarlName_Class_02_Object : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("xyz")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name, typeof(Object)).assertNull
	}

	@Test
	def findObject_SarlName_Class_02_FieldAccess : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("xyz")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name, typeof(FieldAccess)).assertNull
	}

	@Test
	def findObject_SarlName_Class_02_Integer : void {
		var name = typeof(ContextName).mock
		when(name.scheme).thenReturn(ContextName::SCHEME)
		when(name.contextId).thenReturn(this.cid0)
		when(name.fragment).thenReturn("xyz")
		when(name.hasFragment).thenReturn(true)
		this.service.findObject(name, typeof(Integer)).assertNull
	}

	@Test
	def findObject_SarlName_Class_03_Context : void {
		var name = typeof(SpaceName).mock
		when(name.scheme).thenReturn(SpaceName::SCHEME)
		this.service.findObject(name, typeof(AgentContext)).assertNull
	}

	@Test
	def findObject_SarlName_Class_03_Object : void {
		var name = typeof(SpaceName).mock
		when(name.scheme).thenReturn(SpaceName::SCHEME)
		this.service.findObject(name, typeof(Object)).assertNull
	}

	@Test
	def findObject_SarlName_Class_03_FieldAccess : void {
		var name = typeof(SpaceName).mock
		when(name.scheme).thenReturn(SpaceName::SCHEME)
		this.service.findObject(name, typeof(FieldAccess)).assertNull
	}

	@Test
	def findObject_SarlName_Class_03_Integer : void {
		var name = typeof(SpaceName).mock
		when(name.scheme).thenReturn(SpaceName::SCHEME)
		this.service.findObject(name, typeof(Integer)).assertNull
	}

	private def createURI(arg : String) : URI {
		this.service.nameParser.normalize(URI::create(arg))
	}

	@Test
	def findObject_URI_00 : void {
		this.ctx0.assertSame(this.service.findObject(("context:" + this.cid0.toString).createURI))
	}

	@Test
	def findObject_URI_01 : void {
		var fld = this.service.findObject(("context:" + this.cid0.toString + "#myfield").createURI)
		assertInstanceOf(typeof(FieldAccess), fld)
		var fa = fld as FieldAccess
		this.ctx0.assertSame(fa.instance)
		fa.field.assertNotNull
		"myfield".assertEquals(fa.field.name)
		34.assertEquals(fa.get)
	}

	@Test
	def findObject_URI_02 : void {
		this.service.findObject(("context:" + this.cid0.toString + "#xyz").createURI).assertNull
	}

	@Test
	def findObject_URI_Class_00_Context : void {
		this.ctx0.assertSame(this.service.findObject(("context:" + this.cid0.toString).createURI, typeof(AgentContext)))
	}

	@Test
	def findObject_URI_Class_00_Object : void {
		this.ctx0.assertSame(this.service.findObject(("context:" + this.cid0.toString).createURI, typeof(Object)))
	}

	@Test
	def findObject_URI_Class_00_FieldAccess : void {
		this.service.findObject(("context:" + this.cid0.toString).createURI, typeof(FieldAccess)).assertNull
	}

}
