/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.namespace

import io.sarl.api.naming.namespace.FieldAccessRight
import io.sarl.api.naming.namespace.PublicFieldAccessValidator
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.AgentTrait
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Skill
import io.sarl.lang.core.Space
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import org.arakhne.afc.services.IService
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("PublicFieldAccessValidator")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class PublicFieldAccessValidatorTest {

	var validator : PublicFieldAccessValidator

	@BeforeEach
	def setUp : void {
		this.validator = new PublicFieldAccessValidator
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f)")
	def getFieldAccessRight_Agent : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(Agent).mock, null))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f)")
	def getFieldAccessRight_Behavior : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(Behavior).mock, null))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f)")
	def getFieldAccessRight_Skill : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(Skill).mock, null))
	}

	@Test
	@DisplayName("getFieldAccessRight(AgentTrait, f)")
	def getFieldAccessRight_AgentTrait : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(AgentTrait).mock, null))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f)")
	def getFieldAccessRight_Context : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(AgentContext).mock, null))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f)")
	def getFieldAccessRight_Space : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(Space).mock, null))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f)")
	def getFieldAccessRight_Service : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(IService).mock, null))
	}

}
