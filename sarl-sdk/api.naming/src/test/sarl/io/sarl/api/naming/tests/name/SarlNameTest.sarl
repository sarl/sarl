/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.name

import io.sarl.api.naming.name.SarlName
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*
import static extension io.sarl.tests.api.tools.TestAssertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.naming 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("SarlName")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class SarlNameTest {

	var uri : URI

	var name : SarlName

	@BeforeEach
	def setUp : void {
		this.uri = URI::create("space://0001/0001#fragment")
		this.name = (new SarlName(this.uri) {
		}).spy
	}

	@Test
	@DisplayName("compareTo(equal)")
	def compareTo_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		this.name.compareTo(name2).assertZero
	}

	@Test
	@DisplayName("compareTo(upper)")
	def compareTo_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		this.name.compareTo(name2).assertStrictlyNegative
	}

	@Test
	@DisplayName("compareTo(lower)")
	def compareTo_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		this.name.compareTo(name2).assertStrictlyPositive
	}

	@Test
	@DisplayName("this <=> equal")
	def operator_spaceship_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name <=> name2).assertZero
	}

	@DisplayName("this <=> upper")
	def operator_spaceship_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name <=> name2).assertStrictlyNegative
	}

	@Test
	@DisplayName("this <=> lower")
	def operator_spaceship_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name <=> name2).assertStrictlyPositive
	}

	@Test
	@DisplayName("this < equal")
	def operator_lessThan_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name < name2).assertFalse
	}

	@Test
	@DisplayName("this < upper")
	def operator_lessThan_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name < name2).assertTrue
	}

	@Test
	@DisplayName("this < lower")
	def operator_lessThan_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name < name2).assertFalse
	}

	@Test
	@DisplayName("this > equal")
	def operator_greaterThan_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name > name2).assertFalse
	}

	@Test
	@DisplayName("this > upper")
	def operator_greaterThan_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name > name2).assertFalse
	}

	@Test
	@DisplayName("this > lower")
	def operator_greaterThan_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name > name2).assertTrue
	}

	@Test
	@DisplayName("this <= equal")
	def operator_lessEqualsThan_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name <= name2).assertTrue
	}

	@Test
	@DisplayName("this <= upper")
	def operator_lessEqualsThan_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name <= name2).assertTrue
	}

	@Test
	@DisplayName("this <= lower")
	def operator_lessEqualsThan_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name <= name2).assertFalse
	}

	@Test
	@DisplayName("this >= equal")
	def operator_greaterEqualsThan_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name >= name2).assertTrue
	}

	@Test
	@DisplayName("this >= upper")
	def operator_greaterEqualsThan_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name >= name2).assertFalse
	}

	@Test
	@DisplayName("this >= lower")
	def operator_greaterEqualsThan_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name >= name2).assertTrue
	}

	@Test
	@DisplayName("this == equal")
	def operator_equals_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name == name2).assertTrue
	}

	@Test
	@DisplayName("this == upper")
	def operator_equals_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name == name2).assertFalse
	}

	@Test
	@DisplayName("this == lower")
	def operator_equals_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name == name2).assertFalse
	}

	@Test
	@DisplayName("this != equal")
	def operator_notEquals_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name != name2).assertFalse
	}

	@Test
	@DisplayName("this != upper")
	def operator_notEquals_upper {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name != name2).assertTrue
	}

	@Test
	@DisplayName("this != lower")
	def operator_notEquals_lower {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		(this.name != name2).assertTrue
	}

	@Test
	@DisplayName("toURI")
	def toURI {
		this.uri.assertSame(this.name.toURI)
	}

	@Test
	@DisplayName("getFragment")
	def getFragment {
		this.uri.fragment.assertSame(this.name.getFragment)
	}

	@Test
	@DisplayName("hasFragment")
	def hasFragment {
		this.name.hasFragment.assertTrue
	}

	@Test
	@DisplayName("getScheme")
	def getScheme {
		"space".assertEquals(this.name.scheme)
	}

}
