/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.name

import io.sarl.api.naming.name.ScopedDataName
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version api.naming 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@DisplayName("ScopedDataName")
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class ScopedDataNameTest {

	var kname : String

	var kscope : String[]

	@BeforeEach
	def setUp : void {
		this.kname = UUID::randomUUID.toString
		this.kscope = #{
			UUID::randomUUID.toString,
			UUID::randomUUID.toString,
			UUID::randomUUID.toString
		}
	}

	def createURI {
		URI::create("data:/" + this.kscope.get(0) + "/" + this.kscope.get(1) + "/" + this.kscope.get(2) + "/" + this.kname)
	}

	@Test
	@DisplayName("getName")
	def getName_slashSlash {
		var name = new ScopedDataName(createURI) {}
		this.kname.assertEquals(name.name)
	}

	@Test
	@DisplayName("getScope")
	def getScope_slashSlash {
		var name = new ScopedDataName(createURI) {}
		this.kscope.assertArrayEquals(name.scope)
	}

	@Test
	@DisplayName("buildURI()")
	def buildURI_empty {
	}

	@Test
	@DisplayName("buildURI(\"a\")")
	def buildURI_a {
		var uri = ScopedDataName::buildURI("a")
		
		uri.assertNotNull
		"data".assertEquals(uri.scheme)
		"/a".assertEquals(uri.path)
		uri.authority.isNullOrEmpty.assertTrue
		uri.fragment.isNullOrEmpty.assertTrue
		"/a".assertEquals(uri.schemeSpecificPart)
	}

	@Test
	@DisplayName("buildURI(\"a\", \"b\")")
	def buildURI_a_b {
	}

	@Test
	@DisplayName("buildURI(\"a\", \"b\", \"c\")")
	def buildURI_a_b_c {
	}

}
