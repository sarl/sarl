/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.namespace

import io.sarl.api.naming.namespace.AnnotationFieldAccessValidator
import io.sarl.api.naming.namespace.FieldAccessRight
import io.sarl.api.naming.tests.namespace.mocks.MyAgent0
import io.sarl.api.naming.tests.namespace.mocks.MyAgent1
import io.sarl.api.naming.tests.namespace.mocks.MyAgent2
import io.sarl.api.naming.tests.namespace.mocks.MyAgent3
import io.sarl.api.naming.tests.namespace.mocks.MyAgent4
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior0
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior1
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior2
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior3
import io.sarl.api.naming.tests.namespace.mocks.MyBehavior4
import io.sarl.api.naming.tests.namespace.mocks.MyContext0
import io.sarl.api.naming.tests.namespace.mocks.MyContext1
import io.sarl.api.naming.tests.namespace.mocks.MyContext2
import io.sarl.api.naming.tests.namespace.mocks.MyContext3
import io.sarl.api.naming.tests.namespace.mocks.MyContext4
import io.sarl.api.naming.tests.namespace.mocks.MyService0
import io.sarl.api.naming.tests.namespace.mocks.MyService1
import io.sarl.api.naming.tests.namespace.mocks.MyService2
import io.sarl.api.naming.tests.namespace.mocks.MyService3
import io.sarl.api.naming.tests.namespace.mocks.MyService4
import io.sarl.api.naming.tests.namespace.mocks.MySkill0
import io.sarl.api.naming.tests.namespace.mocks.MySkill1
import io.sarl.api.naming.tests.namespace.mocks.MySkill2
import io.sarl.api.naming.tests.namespace.mocks.MySkill3
import io.sarl.api.naming.tests.namespace.mocks.MySkill4
import io.sarl.api.naming.tests.namespace.mocks.MySpace0
import io.sarl.api.naming.tests.namespace.mocks.MySpace1
import io.sarl.api.naming.tests.namespace.mocks.MySpace2
import io.sarl.api.naming.tests.namespace.mocks.MySpace3
import io.sarl.api.naming.tests.namespace.mocks.MySpace4
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.lang.reflect.Field
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version api.naming 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("AnnotationFieldAccessValidator")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class AnnotationFieldAccessValidatorTest {

	var validator : AnnotationFieldAccessValidator

	@BeforeEach
	def setUp : void {
		this.validator = new AnnotationFieldAccessValidator
	}

	private def getField(type : Class<?>) : Field {
		return type.getDeclaredField("myfield")
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) no annotation")
	def getFieldAccessRight_Agent_noAnnotation : void {
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(typeof(MyAgent0).mock, typeof(MyAgent0).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) field annotation")
	def getFieldAccessRight_Agent_fieldAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyAgent1).mock, typeof(MyAgent1).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) field annotation writable")
	def getFieldAccessRight_Agent_fieldAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyAgent2).mock, typeof(MyAgent2).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) agent annotation")
	def getFieldAccessRight_Agent_agentAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyAgent3).mock, typeof(MyAgent3).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Agent, f) agent annotation writable")
	def getFieldAccessRight_Agent_agentAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyAgent4).mock, typeof(MyAgent4).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) no annotation")
	def getFieldAccessRight_Behavior_noAnnotation : void {
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(typeof(MyBehavior0).mock, typeof(MyBehavior0).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) field annotation")
	def getFieldAccessRight_Behavior_fieldAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyBehavior1).mock, typeof(MyBehavior1).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) field annotation writable")
	def getFieldAccessRight_Behavior_fieldAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyBehavior2).mock, typeof(MyBehavior2).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) behavior annotation")
	def getFieldAccessRight_Behavior_behaviorAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyBehavior3).mock, typeof(MyBehavior3).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Behavior, f) behavior annotation writable")
	def getFieldAccessRight_Behavior_behaviorAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyBehavior4).mock, typeof(MyBehavior4).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) no annotation")
	def getFieldAccessRight_Skill_noAnnotation : void {
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(typeof(MySkill0).mock, typeof(MySkill0).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) field annotation")
	def getFieldAccessRight_Skill_fieldAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MySkill1).mock, typeof(MySkill1).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) field annotation writable")
	def getFieldAccessRight_Skill_fieldAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MySkill2).mock, typeof(MySkill2).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) skill annotation")
	def getFieldAccessRight_Skill_skillAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MySkill3).mock, typeof(MySkill3).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Skill, f) skill annotation writable")
	def getFieldAccessRight_Skill_skillAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MySkill4).mock, typeof(MySkill4).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) no annotation")
	def getFieldAccessRight_Context_noAnnotation : void {
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(typeof(MyContext0).mock, typeof(MyContext0).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) field annotation")
	def getFieldAccessRight_Context_fieldAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyContext1).mock, typeof(MyContext1).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) field annotation writable")
	def getFieldAccessRight_Context_fieldAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyContext2).mock, typeof(MyContext2).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) context annotation")
	def getFieldAccessRight_Context_contextAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyContext3).mock, typeof(MyContext3).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Context, f) context annotation writable")
	def getFieldAccessRight_Context_contextAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyContext4).mock, typeof(MyContext4).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f) no annotation")
	def getFieldAccessRight_Space_noAnnotation : void {
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(typeof(MySpace0).mock, typeof(MySpace0).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f) field annotation")
	def getFieldAccessRight_Space_fieldAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MySpace1).mock, typeof(MySpace1).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f) field annotation writable")
	def getFieldAccessRight_Space_fieldAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MySpace2).mock, typeof(MySpace2).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f) space annotation")
	def getFieldAccessRight_Space_spaceAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MySpace3).mock, typeof(MySpace3).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Space, f) space annotation writable")
	def getFieldAccessRight_Space_spaceAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MySpace4).mock, typeof(MySpace4).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f) no annotation")
	def getFieldAccessRight_Service_noAnnotation : void {
		FieldAccessRight::NONE.assertSame(this.validator.getFieldAccessRight(typeof(MyService0).mock, typeof(MyService0).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f) field annotation")
	def getFieldAccessRight_Service_fieldAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyService1).mock, typeof(MyService1).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f) field annotation writable")
	def getFieldAccessRight_Service_fieldAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyService2).mock, typeof(MyService2).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f) service annotation")
	def getFieldAccessRight_Service_serviceAnnotation_read : void {
		FieldAccessRight::READ.assertSame(this.validator.getFieldAccessRight(typeof(MyService3).mock, typeof(MyService3).field))
	}

	@Test
	@DisplayName("getFieldAccessRight(Service, f) service annotation writable")
	def getFieldAccessRight_Service_serviceAnnotation_write : void {
		FieldAccessRight::WRITE.assertSame(this.validator.getFieldAccessRight(typeof(MyService4).mock, typeof(MyService4).field))
	}

}
