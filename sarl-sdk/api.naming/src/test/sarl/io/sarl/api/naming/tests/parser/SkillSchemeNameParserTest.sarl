/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.naming.tests.parser

import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.name.SkillName
import io.sarl.api.naming.parser.UriBasedNameParser
import io.sarl.api.naming.parser.SkillSchemeNameParser
import io.sarl.api.naming.tests.mocks.CapacityMock
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.assertNullOrEmpty
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertNull

/** 
 * @author $Author: sgalland$
 * @version api.naming 0.13.0 20230919-093058
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.naming
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension)
])
@DisplayName("Skill NameParser")
@Tag("unit")
@Tag("api")
@Tag("api-naming")
class SkillSchemeNameParserTest {

	protected static val CONTEXT_ID = "2a2c6de4-8327-431b-a916-97a05caafe14"

	protected static val SPACE_ID = "bb0d92be-1730-4453-a284-bd66d31b853f"

	protected static val AGENT_ID = "a0875b30-cff3-4461-9b96-f501e6c6a788"

	protected static val SKILL_ID = typeof(CapacityMock).name

	@Nullable
	var parser : UriBasedNameParser

	@BeforeEach
	def setUp : void {
		this.parser = new UriBasedNameParser
		this.parser.addSchemeNameParser(new SkillSchemeNameParser)
	}

	protected static def createURI(value : String) : URI {
		URI::create(value)
	}

	protected def createNormalizedURI(value : String) : URI {
		this.parser.normalize(value.createURI)
	}

	private static def toUUID(s : String) : UUID {
		UUID::fromString(s)
	}

	private static def m(index : int, e : String*) : String{
		val b = new StringBuilder
		for (elt : e) {
			if (!elt.isNullOrEmpty) {
				b.append("/").append(elt)
			}
		}
		if (index >= 0) {
			b.append("/").append(index)
		}
		return b.toString
	}

	protected static def assertValid(uri : URI, s : String, fragment : String = null, kindex : int, elements : String*) : void {
		uri.assertNotNull
		s.assertEquals(uri.scheme)
		m(kindex, elements).assertEquals(uri.path)
		if (fragment.isNullOrEmpty) {
			uri.fragment.assertNullOrEmpty
		} else {
			fragment.assertEquals(uri.fragment)
		}
		uri.host.assertNullOrEmpty
		uri.port.assertEquals(-1)
		uri.query.assertNullOrEmpty
		uri.userInfo.assertNullOrEmpty
	}

	protected static def assertValid(name : SarlName, s : String, fragment : String = null, kindex : int, elements : String*) : void {
		name.assertNotNull
		name.toURI.assertValid(s, fragment, kindex, elements)
		if (fragment.isNullOrEmpty) {
			name.fragment.assertNullOrEmpty
		} else {
			fragment.assertEquals(name.fragment)
		}
		val n = name as SkillName
		if (n.contextId === null) {
			2.assertEquals(elements.length)
			elements.get(0).toUUID.assertEquals(n.agentId)
			n.contextId.assertNull
			n.spaceId.assertNull
			elements.get(1).assertEquals(n.^capacity.name)
		} else if (n.spaceId === null) {
			3.assertEquals(elements.length)
			elements.get(0).toUUID.assertEquals(n.contextId)
			elements.get(1).toUUID.assertEquals(n.agentId)
			n.spaceId.assertNull
			elements.get(2).assertEquals(n.^capacity.name)
		} else {
			4.assertEquals(elements.length)
			elements.get(0).toUUID.assertEquals(n.contextId)
			elements.get(1).toUUID.assertEquals(n.spaceId)
			elements.get(2).toUUID.assertEquals(n.agentId)
			elements.get(3).assertEquals(n.^capacity.name)
		}
	}

	@Test
	def decode_String_00 {
		this.parser.decode("skill:").assertNull
	}

	@Test
	def decode_String_01 {
		this.parser.decode("skill://" + SKILL_ID).assertNull
	}

	@Test
	def decode_String_02 {
		this.parser.decode("skill://" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_03 {
		this.parser.decode("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_04 {
		this.parser.decode("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_05 {
		this.parser.decode("skill:/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_06 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_07 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_08 {
		this.parser.decode("skill:" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_09 {
		this.parser.decode("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_10 {
		this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_11 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx").assertNull
	}

	@Test
	def decode_String_12 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/").assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_00 {
		this.parser.decode("skill:#frag").assertNull
	}

	@Test
	def decode_String_fragment_01 {
		this.parser.decode("skill://" + SKILL_ID + "#frag").assertNull
	}

	@Test
	def decode_String_fragment_02 {
		this.parser.decode("skill://" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_03 {
		this.parser.decode("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_04 {
		this.parser.decode("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_05 {
		this.parser.decode("skill:/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_06 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_07 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_08 {
		this.parser.decode("skill:" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_09 {
		this.parser.decode("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
			"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_10 {
		this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_String_fragment_11 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx#frag").assertNull
	}

	@Test
	def decode_String_fragment_12 {
		this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/#frag").
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_00 {
		this.parser.normalize(("skill://" + SKILL_ID).createURI).assertNull
	}

	@Test
	def normalize_URI_01 {
		this.parser.normalize(("skill://" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, AGENT_ID,
			SKILL_ID)
	}

	@Test
	def normalize_URI_02 {
		this.parser.normalize(("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).
			assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_03 {
		this.parser.normalize(("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_04 {
		this.parser.normalize(("skill:/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, AGENT_ID,
			SKILL_ID)
	}

	@Test
	def normalize_URI_05 {
		this.parser.normalize(("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, CONTEXT_ID,
			AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_06 {
		this.parser.normalize(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_07 {
		this.parser.normalize(("skill:" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, AGENT_ID,
			SKILL_ID)
	}

	@Test
	def normalize_URI_08 {
		this.parser.normalize(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).
			assertValid("skill", -1,
			CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_09 {
		this.parser.normalize(("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).
			assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_10 {
		this.parser.normalize(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx").createURI).
			assertNull
	}

	@Test
	def normalize_URI_11 {
		this.parser.normalize(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/").createURI).
			assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_00 {
		this.parser.normalize(("skill://" + SKILL_ID + "#frag").createURI).assertNull
	}

	@Test
	def normalize_URI_fragment_01 {
		this.parser.normalize(("skill://" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid("skill",
		"frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_02 {
		this.parser.normalize(("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid("skill",
			"frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_03 {
		this.parser.normalize(("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_04 {
		this.parser.normalize(("skill:/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_05 {
		this.parser.normalize(("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_06 {
		this.parser.normalize(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_07 {
		this.parser.normalize(("skill:" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_08 {
		this.parser.normalize(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def normalize_URI_fragment_09 {
		this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}


	@Test
	def normalize_URI_fragment_10 {
		this.parser.normalize(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx#frag").createURI).
			assertNull
	}

	@Test
	def normalize_URI_fragment_11 {
		this.parser.normalize(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/#frag").createURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_00 {
		this.parser.decode(("skill://" + SKILL_ID).createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_01 {
		this.parser.decode(("skill://" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).assertValid("skill", -1,
			AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_02 {
		this.parser.decode(("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
			assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_03 {
		this.parser.decode(
			("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
			assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_04 {
		this.parser.decode(("skill:/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).assertValid("skill", -1,
			AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_05 {
		this.parser.decode(("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
			assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_06 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
			assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_07 {
		this.parser.decode(("skill:" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).assertValid("skill", -1,
			AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_08 {
		this.parser.decode(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
			assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_09 {
		this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
			"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_10 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx").
			createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_11 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/").createNormalizedURI).
			assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_00 {
		this.parser.decode(("skill://" + SKILL_ID + "#frag").createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_fragment_01 {
		this.parser.decode(("skill://" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).
			assertValid("skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_02 {
		this.parser.decode(
			("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_03 {
		this.parser.decode(
			("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
			createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_04 {
		this.parser.decode(("skill:/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_05 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).assertValid(
			"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_06 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
			createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_07 {
		this.parser.decode(("skill:" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).assertValid(
			"skill", "frag", -1, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_08 {
		this.parser.decode(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).
			assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_09 {
		this.parser.decode(
			("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
			createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

	@Test
	def decode_URI_fragment_10 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx#frag").
			createNormalizedURI).assertNull
	}

	@Test
	def decode_URI_fragment_11 {
		this.parser.decode(
			("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/#frag").
			createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
	}

}
