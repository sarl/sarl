/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.util

import jakarta.inject.Inject
import java.util.EventListener
import java.util.function.Consumer
import org.arakhne.afc.util.ListenerCollection

/** A smart implementation of an event listeners' collection.
 * This collection knows how to schedule the calls to the listeners. 
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@SuppressWarnings("manual_inline_definition")
class SmartListenerCollection<T extends EventListener> extends ListenerCollection<T> implements ListenerNotifier {

	val notifier : ListenerNotifier

	/** Constructor.
	 * 
	 * @param notifier is the notifier to the listeners that must be used by this collection.
	 */
	@Inject
	new (notifier : ListenerNotifier) {
		this.notifier = notifier
	}

	override notifyListeners(listeners : L[], action : Consumer<L>) with L extends EventListener {
		this.notifier.notifyListeners(listeners, action)
	}

	/** Build a call policy for the given list of listeners and call them.
	 * 
	 * @param <L> the type of event listener to support.
	 * @param type the type of the listeners to be called.
	 * @param action is the action to apply on each listener.
	 */
	def notifyListeners(type : Class<L>, action : Consumer<L>) with L extends EventListener {
		type.getListeners.notifyListeners(action)
	}

}
