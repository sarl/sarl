/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.util

import io.sarl.lang.core.SARLVersion
import io.sarl.lang.core.annotation.SarlSpecification
import org.osgi.framework.Version

/** Check if a given agent class follows a specific version of the SARL specifications.
 *
 * @author $Author: sgalland$
 * @version api.util 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.util
 * @since 0.5
 */
interface SarlSpecificationChecker {

	/** Replies the supported SARL specification version of the given type.
	 *
	 * @param type the type from which the SARL specification version should be extracted.
	 * @return The SARL specification version. The version is a floating-point number. The value {@link Float#NaN} is replied
	 *     if the given type has no marker related to the SARL specification version.
	 * @deprecated since 0.10, see #getSarlSpecificationVersionObject(Class)
	 */
	@Deprecated(since = "0.10", forRemoval = true)
	def getSarlSpecificationVersion(type : Class<?>) : float {
		throw new UnsupportedOperationException
	}

	/** Replies the supported SARL specification version of the given type.
	 *
	 * @param type the type from which the SARL specification version should be extracted.
	 * @return The SARL specification version. The version is a {@code Version}. The value {@code null} is replied
	 *     if the given type has no marker related to the SARL specification version.
	 * @since 0.10
	 */
	def getSarlSpecificationVersionObject(type : Class<?>) : Version {
		if (type !== null) {
			var annotationInstance = type.getAnnotation(typeof(SarlSpecification))
			if (annotationInstance !== null) {
				val versionString = annotationInstance.value
				val version = Version::parseVersion(versionString)
				if (Version::emptyVersion != version) {
					return version
				}
			}
		}
		return null
	}

	/** Compare the SARL specification version associated to the given type to the version of the
	 * current SARL.
	 *
	 * @param type the type to test.
	 * @return a negative integer value if the type's version is lower than the version of the current SARL,
	 *     zero if the two versions are equal, a positive integer value if type's version is greater
	 *     than the version of the current SARL.
	 */
	def compareToSarlSpecificationVersion(type : Class<?>) : int {
		var v = type.sarlSpecificationVersionObject
		if (v !== null) {
			return v <=> Version::parseVersion(SARLVersion::SPECIFICATION_RELEASE_VERSION_STRING)
		}
		return Integer::MAX_VALUE
	}

	/** Replies if the given type is a SARL element that is following the specification of the current SARL version.
	 *
	 * @param type the type to test.
	 * @return {@code true} if the given type follows the specification of the current version.
	 */
	def isValidSarlElement(type : Class<?>) : boolean {
		// TODO: Unless we have reach the version 1.0, all the versions are incompatible.
		type.sarlSpecificationVersionObject == Version::parseVersion(SARLVersion::SPECIFICATION_RELEASE_VERSION_STRING)
	}

}


/** Check if a given agent class follows a specific version of the SARL specifications.
 *
 * <p>This implementation uses the default implementation given by the interface.
 *
 * @author $Author: sgalland$
 * @version api.util 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.util
 * @since 0.5
 */
final class StandardSarlSpecificationChecker implements SarlSpecificationChecker {
	//
}
