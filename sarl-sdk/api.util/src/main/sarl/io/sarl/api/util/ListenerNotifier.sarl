/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.util

import java.util.EventListener
import java.util.function.Consumer

/** This interface represents an object that is able to provide a notification policy
 * for calling Java event listeners.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.util 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.util
 * @since 0.10
 */
interface ListenerNotifier {

	/** Build a call policy for the given list of listeners and call them.
	 * 
	 * @param <L> the type of event listener to support.
	 * @param listeners is the list of listeners to call.
	 * @param action is the action to apply on each listener.
	 */
	def notifyListeners(listeners : L[], action : Consumer<L>) with L extends EventListener

}

/** This class implements a sequence execution mechanism for notifying the event listeners.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.util 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.util
 * @since 0.10
 */
class SequenceListenerNotifier implements ListenerNotifier {

	override notifyListeners(listeners : L[], action : Consumer<L>) with L extends EventListener {
		for (listener : listeners) {
			action.accept(listener)
		}
	}

}
