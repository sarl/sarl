/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.util

import java.io.ObjectInputStream
import java.io.ObjectOutputStream
import java.io.Serializable
import java.util.AbstractCollection
import java.util.ArrayList
import java.util.Collection
import java.util.Iterator

/** Utilities on collections.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.util 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.util
 */
final class Collections3 {

	/** Replies a serializable collection.
	 * If the wrapped collection is serializable, it is replied itself without wrapping.
	 * If the wrapped collection is not serializable, it is wrapped into a collection
	 * that supports serialization of the collection elements.
	 *
	 * @param <T> - type of the elements in the collection.
	 * @param elements the set to transform as unmodifiable collection.
	 * @return an unmodifiable synchronized set.
	 * @since 0.8.6
	 */
	static def serializableCollection(elements : Collection<T>) : Collection<T> with T {
		if (elements instanceof Serializable) {
			return elements
		}
		return new SerializableCollectionWrapper(elements)
	}

	/** Unmodifiable synchronized iterable.
	 * 
	 * @param <E> the type of the elements in the collection.
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version api.util 0.15.0 20250909-115748
	 * @mavengroupid io.sarl.sdk
	 * @mavenartifactid api.util
	 * @since 0.8.6
	 */
	private static class SerializableCollectionWrapper<E> extends AbstractCollection<E> implements Serializable {

		transient var collection : Collection<E>

		package new (collection : Collection<E>) {
			this.collection = collection
		}

		override iterator : Iterator<E> {
			this.collection.iterator
		}

		override size : int {
			this.collection.size
		}

		@SuppressWarnings("unused_private_member")
		private def writeObject(stream : ObjectOutputStream) {
			stream.defaultWriteObject
			stream.writeInt(collection.size);
			for (element : this.collection) {
				stream.writeObject(element);
			}
		}

		@SuppressWarnings("unused_private_member")
		private def readObject(stream : ObjectInputStream) {
			stream.defaultReadObject
			val s = stream.readInt
			this.collection = new ArrayList(s)
			for (var i = 0; i < s; i++) {
				this.collection.add(stream.readObject as E)
			}
		}

	}


}
