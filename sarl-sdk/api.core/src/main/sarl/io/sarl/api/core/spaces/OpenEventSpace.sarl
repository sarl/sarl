/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.core.spaces

import io.sarl.api.core.ParticipantJoined
import io.sarl.api.core.ParticipantLeft
import io.sarl.lang.core.Address
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.annotation.WarningOnCall

/**
 * Event driven interaction space where participants (agents, etc) are free register and unregister themselves.
 * A participant should only register once in this type of space.
 *
 * <p>A participant is a software entity that is registered in order to receive the events that are emitted into
 * the space. A participant is usually an agent, but not restricted to this type of software entity.
 * It could be also a user-interface module.
 *
 * <p>A weak participant is participant that could be considered as not a first-order member of the space.
 * When a participant is weak, it is not considered by functions such as {@link #isPseudoEmpty(java.lang.UUID)}.
 *
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version api.core 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
interface OpenEventSpace extends EventSpace {

	/**
	 * Registers the participant inside this space.
	 * After registering a new participant, the Space should emit a ParticipantJoined
	 * event where the source is the address of the newly registered agent.
	 *
	 * <p>If the agent is already registered the address is return, but the listener is not replaced.
	 *
	 * @param participant the participant to register.
	 * @return the entity's address in this space
	 * @fires ParticipantJoined in its enclosing Context default space.
	 * @deprecated since 0.12, see {@link #registerStrongParticipant(EventListener)} and
	 *     {@link #registerStrongParticipant(EventListener)}.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@WarningOnCall("Prefer calling registerStrongParticipant() or registerWeakParticipant()")
	@Deprecated(since = "0.12")
	def register(participant : EventListener, weakParticipant : boolean = false) : Address fires ParticipantJoined {
		if (weakParticipant) {
			participant.registerWeakParticipant
		} else {
			participant.registerStrongParticipant
		}
	}

	/** 
	 * Registers the strong participant inside this space.
	 * A Weak participant will not prevent the space from begin destroyed if it is the only one staying in it, a Strong participant will prevent the space destruction.
	 * A space containing only Weak participants will be destroyed by the SRE Kernel.
	 * After registering a new participant, the Space should emit a ParticipantJoined
	 * event where the source is the address of the newly registered agent.
	 * 
	 * <p>If the agent is already registered the address is return, but the listener is not replaced.
	 * 
	 * @param participant the participant to register.
	 * @return the entity's address in this space
	 * @fires ParticipantJoined in its enclosing Context default space.
	 * @since 0.12
	 */
	def registerStrongParticipant(participant : EventListener) : Address fires ParticipantJoined

	/** 
	 * Registers the weak participant inside this space.
	 * A Weak participant will not prevent the space from begin destroyed if it is the only one staying in it, a Strong participant will prevent the space destruction.
	 * A space containing only Weak participants will be destroyed by the SRE Kernel.
	 * After registering a new participant, the Space should emit a ParticipantJoined
	 * event where the source is the address of the newly registered agent.
	 * 
	 * <p>If the agent is already registered the address is return, but the listener is not replaced.
	 * 
	 * @param participant the participant to register.
	 * @return the entity's address in this space
	 * @fires ParticipantJoined in its enclosing Context default space.
	 * @since 0.12
	 */
	def registerWeakParticipant(participant : EventListener) : Address fires ParticipantJoined

	
	/** 
	 * Unregisters the entity inside this space.
	 * After unregistering an agent, the Space should emit a ParticipantLeft
	 * event where the source is the address of the unregistered agent.
	 *
	 * @param participant the participant to unregister.
	 * @return the former entity's address
	 * @fires ParticipantJoined in its enclosing Context default space.
	 */
	def unregister(participant : EventListener) : Address fires ParticipantLeft

}
