/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.core

import io.sarl.lang.core.Agent
import io.sarl.lang.core.SRESpecificDataContainer
import io.sarl.lang.core.annotation.PrivateAPI

/**
 * Description of a task an agent has schedule to be performed at a later time.
 * This class is not thread-safe.
 *
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version api.core 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
class AgentTask extends SRESpecificDataContainer {

	/** A guard that is always true.
	 */
	public static val TRUE_GUARD : (Agent) => boolean = [ true ]

	/** A guard that is always false.
	 */
	public static val FALSE_GUARD : (Agent) => boolean = [ false ]

	var name : String

	var guard : (Agent) => boolean

	var procedure : (Agent) => void

	val initiator : Object

	/** Construct an AgentTask with the given initiator.
	 *
	 * @param name the name of the task.
	 * @param initiator the object that has initiated the execution of this task.
	 *     If the value is {@code null} (the default value of the argument), the agent is assumed to
	 *     be the initiator.
	 */
	new(name : String, initiator : Object = null) {
		assert name !== null
		this.name = name
		this.initiator = initiator
	}

	/** Replies the procedure that is associated to this task.
	 *
	 * @return the procedure to run.
	 */
	def getProcedure : (Agent) => void {
		this.procedure
	}

	/** Change the procedure associated to this task.
	 *
	 * @param procedure code of the procedure to associate to the task.
	 */
	def setProcedure(procedure : (Agent) => void) : void {
		this.procedure = procedure
	}

	/** Replies the guard of this task.
	 *
	 * @return the guard.
	 */
	def getGuard : (Agent) => boolean {
		this.guard
	}

	/** Change the guard of this task.
	 *
	 * @param guard the code of the function that is the predicate associated to the guard.
	 * @see #unless
	 * @see #ifTrue
	 */
	def setGuard(guard : (Agent) => boolean) : void {
		this.guard = guard
	}

	/** Replies the name of this task.
	 *
	 * @return the name.
	 */
	def getName : String {
		return this.name
	}

	/** Change the name of this task.
	 *
	 * @param name name of the task.
	 * @since 0.7, it is part of the private API.
	 * @privateapi
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI
	def setTaskName(name : String) : void {
		assert name !== null
		this.name = name
	}

	/** Change the guard of this that with the negation of the given predicate.
	 *
	 * @param predicate the code of the function that is the predicate to test.
	 * @return {@code this}.
	 * @see #setGuard
	 */
	def unless(predicate : (Agent) => boolean) : AgentTask {
		if (predicate === null) {
			this.guard = FALSE_GUARD
		} else {
			this.guard = [ !predicate.apply(it) ]
		}
		return this
	}

	/** Change the guard to the given predicate.
	 *
	 * @param predicate the code of the function that is the predicate to test.
	 * @return {@code this}.
	 * @see #setGuard
	 */
	def ifTrue(predicate : (Agent) => boolean) : AgentTask {
		if (predicate === null) {
			this.guard = null
		} else {
			this.guard = predicate
		}
		return this
	}

	override toString : String {
		"AgentTask: " + this.name
	}

	/**
	 * Replies the object that has initiated the execution of this task.
	 * If the value replied by this function is {@code null}, the agent is assumed to be the initiator.
	 * 
	 * @return the initiator, or {@code null} if the initiator is the agent itself.
	 * @since 0.5
	 */
	def getInitiator : Object {
		this.initiator
	}

}
