/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.core.spaces

import io.sarl.api.core.IssueCodes
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.annotation.PrivateAPI
import jakarta.inject.Inject
import java.text.MessageFormat
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.ConcurrentMap
import java.util.function.Supplier
import java.util.logging.Level
import java.util.logging.Logger
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract implementation of an event space.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version api.core 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 * @since 0.1 in Janus SRE
 * @since 0.15 in SARL SDK
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
abstract class AbstractEventSpace extends AbstractSpace implements EventSpace, SpaceWithParticipants {

	val loggerSupplier : Supplier<Logger>

	var logger : Logger

	/** Router of the events.
	 * @since 0.8
	 */
	@Accessors(PUBLIC_GETTER)
	var eventTransportService : EventTransportService

	/** Listener on platform events related to space participants.
	 * @since 0.10
	 */
	@Accessors(PUBLIC_GETTER)
	var spaceParticipantListener : SpaceParticipantListener

	val strongRepository : ConcurrentMap<UUID, Participant>

	val weakRepository : ConcurrentMap<UUID, Participant>

	/** Constructor.
	 * 
	 * @param spaceId identifier of the space.
	 * @param participantListener the platform listener on participant events.
	 * @param spaceLogger the logger to be used by the space.
	 */
	new (spaceId : SpaceID, participantListener : SpaceParticipantListener, spaceLogger : Supplier<Logger>) {
		this(spaceId, participantListener, spaceLogger, null, null)
	}

	/** Constructor.
	 * 
	 * @param spaceId identifier of the space.
	 * @param participantListener the platform listener on participant events.
	 * @param spaceLogger the logger to be used by the space.
	 * @param strongRepository collection of strong participants to the space.
	 * @param weakRepository collection of weak participants to the space.
	 */
	new (
		spaceId : SpaceID,
		participantListener : SpaceParticipantListener,
		spaceLogger : Supplier<Logger>,
		strongRepository : ConcurrentMap<UUID, Participant>,
		weakRepository : ConcurrentMap<UUID, Participant>) {
		super(spaceId)
		this.spaceParticipantListener = participantListener
		this.loggerSupplier = spaceLogger
		if (strongRepository === null) {
			this.strongRepository = new ConcurrentHashMap
		} else {
			this.strongRepository = strongRepository
		}
		if (weakRepository === null) {
			this.weakRepository = new ConcurrentHashMap
		} else {
			this.weakRepository = weakRepository
		}
	}

	/** 
	 * Logging service.
	 */
	synchronized final def getLogger : Logger {
		var log = this.logger
		if (log === null) {
			log = this.loggerSupplier.get()
			this.logger = log
		}
		return log
	}

	/** Set the event router.
	 * 
	 * @param router the router.
	 * @since 0.8
	 */
	@Inject
	def setEventTransportService(router : EventTransportService) {
		this.eventTransportService = router
	}

	/**
	 * Register the specified entity on this space
	 * @param entity - the entity to be registered
	 * @param weakParticipant - boolean specifying if the specified entity may prevent the space 
	 * from the destruction if it is the only remaining entity within this space. 
	 * A Weak participant will not prevent the space from begin destroyed if it is the only one staying in it, a Strong participant will prevent it.
	 * A space containing only Weak participants will be destroyed by the SRE Kernel  
	 */
	protected final def registerToSpace(entity : EventListener, weakParticipant : boolean) : Address {
		assert entity !== null
		var id = entity.ID
		var address = new Address(this.spaceID, id)
		var participant = Participant::createAndInit(address, entity)
		assert(id !== null)
		assert(participant !== null)
		if (weakParticipant) {
			assert !this.strongRepository.containsKey(id), "You cannot register a space participant as weak and strong at the same time"
			assert !this.weakRepository.containsKey(id), "Multiple registration of the same space participant"
			this.weakRepository.put(id, participant)
		} else {
			assert !this.weakRepository.containsKey(id), "You cannot register a space participant as weak and strong at the same time"
			assert !this.strongRepository.containsKey(id), "Multiple registration of the same space participant"
			this.strongRepository.put(id, participant)
		}

		getSpaceParticipantListener?.participantJoined(participant)
		return address
	}

	protected final def unregisterFromSpace(entity : EventListener) : Address {
		assert entity !== null
		var participant : Participant = null
		var becomesEmpty : boolean

		var structure = this.strongRepository
		participant = structure.remove(entity.ID)
		becomesEmpty = structure.empty
		if (participant === null) {
			// Try a weak listener
			structure = this.weakRepository
			participant = structure.remove(entity.ID)
		}

		if (participant !== null) {
			if (becomesEmpty) {
				fireDestroyableSpace
			}
			getSpaceParticipantListener?.participantLeft(participant)
			return participant.address
		}
		return null
	}

	def getAddress(id : UUID) : Address {
		assert id !== null
		var participant : Participant = null

		participant = this.strongRepository.get(id)
		if (participant !== null) {
			return participant.address
		}

		participant = this.weakRepository?.get(id)
		if (participant !== null) {
			return participant.address
		}

		return null
	}

	final def emit(eventSource : UUID, ^event : Event, scope : Scope<Address>) {
		assert ^event !== null
		ensureEventSource(eventSource, ^event)
		assert this.spaceID == ^event.source.spaceID, "The source address must belong to this space"
		try {
			var mts = getEventTransportService
			if (mts === null || mts.routeEvent(^event, this, scope)) {
				^event.emitLocally(scope)
			}
		} catch (e : Throwable) {
			getLogger.log(Level::SEVERE, e) [
				MessageFormat::format(Messages::AbstractEventSpace_0, IssueCodes::CANNOT_EMIT_IN_SPACE, ^event, scope, e)
			]
		}
	}

	/** Ensure that the given event has a source.
	 * 
	 * @param eventSource the source of the event.
	 * @param event the event to emit.
	 * @since 0.6.0
	 */
	protected def ensureEventSource(eventSource : UUID, ^event : Event) {
		if (^event.source === null) {
			if (eventSource !== null) {
				^event.source = new Address(spaceID, eventSource)
			} else {
				throw new AssertionError("Every event must have a source")
			}
		}
	}

	/** Replies the participants that matches the given scope.
	 * 
	 * @param scope the scope.
	 * @return the matching participants.
	 */
	def getScopedParticipants(scope : Scope<? super Address>) : ConcurrentLinkedDeque<Participant> {
		val scopedParticipants = new ConcurrentLinkedDeque
		if (scope === null) {
			// No scope => add all the strong and weak participants
			scopedParticipants += this.strongRepository.values
			scopedParticipants += this.weakRepository.values
		} else {
			// Scope => add the strong and weak participants that are matching the scope
			this.strongRepository.forEach [key, element |
				if (scope.matches(element.address)) {
					scopedParticipants += element
				}
			]
			this.weakRepository.forEach [ key, element |
				if (scope.matches(element.address)) {
					scopedParticipants += element
				}
			]
		}
		return scopedParticipants
	}

	/** 
	 * Do the emission of the event.
	 * 
	 * <p>This function emits the event <strong>only on the internal event bus</strong> of the listeners.
	 * 
	 * <p>This function launch a task for each matching listener.
	 * 
	 * @param event the event to emit.
	 * @param scope description of the scope of the event, i.e. the receivers of the event.
	 */
	protected def emitLocally(^event : Event, scope : Scope<? super Address>) {
		assert ^event !== null
		// Distinguish the emit and reception processes into two different tasks.
		// The emit process is run in the current thread.
		// The reception process should be treated into a separate thread in order
		// to never block the sender process.
		getLogger.fine[MessageFormat::format(Messages::AbstractEventSpace_1, ^event, scope)]
		val participants = scope.scopedParticipants
		assert participants !== null
		for (it : participants) {
			it.getParticipant.receiveEvent(^event)
		}
	}

	@Pure
	override getNumberOfStrongParticipants : int {
		this.strongRepository.size
	}

	@Pure
	def getNumberOfWeakParticipants : int {
		this.weakRepository.size
	}


	@Pure
	override isPseudoEmpty(id : UUID) : boolean {
		val struct = this.strongRepository
		val sz = struct.size
		if (sz <= 0) {
			return true
		}
		if (id !== null) {
			return sz === 1 && struct.containsKey(id)
		}
		return false
	}

	override forEachStrongParticipant(callback : (UUID)=>void) {
		this.strongRepository.forEach[id, participant|callback.apply(id)]
	}

	override forEachWeakParticipant(callback : (UUID)=>void) {
		this.weakRepository.forEach[id, participant|callback.apply(id)]
	}

	override forEachStrongParticipant(callback : (UUID, Participant)=>void) {
		this.strongRepository.forEach[id, participant|callback.apply(id, participant)]
	}

	override forEachWeakParticipant(callback : (UUID, Participant)=>void) {
		this.weakRepository.forEach[id, participant|callback.apply(id, participant)]		
	}

	override getListenerFromStrongParticipant(target : UUID) : EventListener {
		var participant = this.strongRepository?.get(target)
		return participant?.participant		
	}
	
}
