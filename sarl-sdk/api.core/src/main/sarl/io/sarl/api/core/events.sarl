/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.core

import io.sarl.lang.core.Address
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.annotation.EarlyExit
import java.util.UUID

/**
 * Initialization event.
 * The source of this event is the agent itself.
 *
 * <h2>For an Agent</h2>
 * This event is received by the agent's native behavior when the agent is spawned.
 *
 * <h2>For a Behavior</h2>
 * Each Behavior instance within the agent receives this event when it is registered for the first time.
 *
 * <h2>For a Skill</h2>
 * No skill receives this event.
 *
 * <h2>For Agent Members</h2>
 * The member agents do not receive this event from the parent agent because they are not yet created when the agent is spawned.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event Initialize {

	/** The initialization parameters.
	 * Usually, they are the arguments passed to the agent spawning function.
	 */
	val parameters : Object[]

	/** Identifier of the agent, which has spawned the under-initialization agent.
	 * If the under-initialization agent was spawned by the SARL run-time environment
	 * (and not by another agent), the identifier is {@code null}.
	 *
	 * @since 0.5
	 */
	val spawner : UUID

	/** Constructor.
	 *
	 * @param spawner the identifier of the spawner of the under-initialization agent.
	 * @param params the initialization parameters to give to the under-initialization agent.
	 * @since 0.5
	 */
	new(spawner : UUID, params : Object*) {
		this(null, spawner, params)
	}

	/** Constructor.
	 *
	 * @param source address of the agent that is emitting this event.
	 * @param spawner the identifier of the spawner of the under-initialization agent.
	 * @param params the initialization parameters to give to the under-initialization agent.
	 * @since 0.5
	 */
	new(source : Address, spawner : UUID, params : Object*) {
		super(source)
		this.spawner = spawner
		this.parameters = params
	}

}

/**
 * Notifies the destruction of an element.
 * The source of this event is the agent itself.
 * This event is marked as an early exit event. It means that any action that is firing this
 * event is supposed to never return, e.g. the {@code killMe} action.
 *
 * <h2>For an Agent</h2>
 * This event is received by the agent's native behavior when the agent is destroyed, usually after
 * a call to {@code killMe}.
 * All the agent behaviors of the agent are unregistered prior to the firing of this events.
 * All the agent tasks are canceled prior to the firing of this events.
 * Agent skills are uninstalled after the {@code Destroy} event handler is ran.
 *
 * <h2>For a Behavior</h2>
 * Each Behavior instance within the agent receives this event when it is unregistered for the last time.
 *
 * <h2>For a Skill</h2>
 * No skill receives this event, except if you have registered the skill as an event listener on the
 * agent internal event bus. In the last case, the skill will receive the {@code Destroy} event because
 * is will be uninstalled after its firing.
 *
 * <h2>For Agent Members</h2>
 * The member agents do not receive this event from the parent agent because the parent agent cannot be
 * destroyed if it has agent members.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
@EarlyExit
final event Destroy

/**
 * Informs the creation of a new agent in a spawning context.
 * The event is fired within the default space of the spawning context, i.e. the context in which the agent was created.
 * The spawned agent does not receive this event.
 * The source of the event is the spawning agent.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event AgentSpawned {

	/** Identifier of the spawned agent.
	 */
	val agentID : UUID

	/** Fully qualifiedname of the type of the agent.
	 */
	val agentType : String

	/** Constuct the event.
	 *
	 * @param source the address of the emitter.
	 * @param agentID : the identifier of the spawned agent.
	 * @param agentType fully qualified name of the type of the agent.
	 */
	new (source : Address, agentID : UUID, agentType : String) {
		setSource(source)
		this.agentID = agentID
		this.agentType = agentType
	}

}

/**
 * Informs an agent has been killed.
 * The event is fires within all the external contexts (including the default context) of the killed agent.
 * The killed agent does not receive this event.
 * The source of the event is the killed agent.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event AgentKilled {

	/** The fully qualified name of the type of the killed agent.
	 */
	val agentType : String

	/** The object that is the cause of the killing of the agent or explains the cause
	 * of the "abnormal" killing.
	 * If it is {@code null}, the agent has committed a suicide in "normal" situation.
	 *
	 * @since 0.12
	 */
	val terminationCause : Object

	/** Construct the event.
	 *
	 * @param source the address of the emitter.
	 * @param agentType fully qualified name of the type of the agent.
	 * @param terminationCause cause of the termination of the agent, or {@code null} if there is
	 *      no specific termination cause.
	 */
	new (source : Address, agentType : String, terminationCause : Object) {
		setSource(source)
		this.agentType = agentType
		this.terminationCause = terminationCause
	}

}

/**
 * Informs the creation of a new space in a given context.
 * The event is fired within the default space of the context in which the space was created.
 * The source of the event is the parent agent.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event SpaceCreated {

	/** Identifier of the created space.
	 */
	val spaceID : SpaceID

	/** Construct the event.
	 *
	 * @param source the address of the emitter.
	 * @param spaceID the identifier of the space.
	 */
	new (source : Address, spaceID : SpaceID) {
		setSource(source)
		this.spaceID = spaceID
	}

}

/** Informs the destruction of a space in a given context.
 * The event is fired within the default space of the context from  which the space was removed.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 * The source of the event is the parent agent.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event SpaceDestroyed {

	/** The identifier of the destroyed space.
	 */
	val spaceID : SpaceID

	/** Construct the event.
	 *
	 * @param source the address of the emitter.
	 * @param spaceID the identifier of the space.
	 */
	new (source : Address, spaceID : SpaceID) {
		setSource(source)
		this.spaceID = spaceID
	}

}

/** Notifies the other members that the member with the identifier agentID has effectively 
 * integrated the holon context.
 * The event is fired within the default space of the context in which the new agent entered.
 * The joining agent does not receive this event.
 * The source of the event is the parent agent.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event MemberJoined {

	/** The identifier of the agent that has joined the context.
	 */
	val agentID : UUID

	/** The fully qualified name of the type of the agent.
	 */
	val agentType : String

	/** Construct the event.
	 *
	 * @param source the address of the emitter.
	 * @param agentID the identifier of the agent.
	 * @param agentType fully qualified name of the type of the agent.
	 */
	new (source : Address, agentID : UUID, agentType : String) {
		setSource(source)
		this.agentID = agentID
		this.agentType = agentType
	}

}

/** Notifies the other other members that the member with the identifier agentID was 
 * excluded (forced to leave) the holon context parentContextID.
 * The event is fired within the default space of the context from which the agent was excluded.
 * The excluded agent does not receive this event.
 * The source of the event is the parent agent.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event MemberExcluded {

	/** The identifier of the agent that was excluded from the context.
	 */
	val agentID : UUID

	/** The fully qualified name of the type of the agent.
	 */
	val agentType : String

	/** Construct the event.
	 *
	 * @param source the address of the emitter.
	 * @param agentID the identifier of the agent.
	 * @param agentType fully qualified name of the type of the agent.
	 */
	new (source : Address, agentID : UUID, agentType : String) {
		setSource(source)
		this.agentID = agentID
		this.agentType = agentType
	}

}

/** Notifies the other members that the member with the identifier agentID has left the holon context.
 * The event is fired within the default space of the context from which the agent has left.
 * The left agent does not receive this event.
 * The source of the event is the parent agent.
 * The context id can be retrieved via {@code ev.source.spaceID.contextID}.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event MemberLeft {

	/** The identifier of the agent that has left the holon context.
	 */
	val agentID : UUID

	/** The fully qualified name of the type of the agent.
	 */
	val agentType : String

	/** Construct the event.
	 *
	 * @param source the address of the emitter.
	 * @param agentID the identifier of the agent.
	 * @param agentType fully qualified name of the type of the agent.
	 */
	new (source : Address, agentID : UUID, agentType : String) {
		setSource(source)
		this.agentID = agentID
		this.agentType = agentType
	}

}

/** Notifies the behaviors of the agent that it has joined a new super-holon.
 * The event is fired within the internal bus of the agent that have joined a super-holon.
 * The source of the event is the agent itself.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event ContextJoined {

	/** The identifier of the context in the super-holon.
	 */
	val holonContextID : UUID

	/** The identifier of the default space in the super-holon context.
	 */
	val defaultSpaceID : UUID

	/** Construct the event.
	 *
	 * @param contextID the identifier of the context.
	 * @param defaultSpaceID the identifier of the default space.
	 */
	new (contextID : UUID, defaultSpaceID : UUID) {
		this.holonContextID = contextID
		this.defaultSpaceID = defaultSpaceID
	}

}

/**
 * Notifies the behaviors of the agent that it has left a super-holon.
 * The event is fired within the internal bus of the agent that have left a super-holon.
 * The source of the event is the agent itself.
 *
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 */
final event ContextLeft {

	/** The identifier of the context in the super-holon.
	 */
	val holonContextID : UUID

	/** Construct the event.
	 *
	 * @param contextID the identifier of the context.
	 */
	new (contextID : UUID) {
		this.holonContextID = contextID
	}

}

/** Notifies other participants that a member has effectively 
 * integrated the space.
 * The event is fired within the default space of the context in which the agent entered a new space.
 * The joining agent does not receive this event.
 * The source of the event is the entering agent.
 *
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 * @since 0.10
 */
final event ParticipantJoined {

	/** The identifier of the space in which the agent is entering.
	 */
	val spaceID : SpaceID

	/** Construct the event.
	 * 
	 * @param source the address of the emitter.
	 * @param spaceID the identifier of the space.
	 */
	new (source : Address, spaceID : SpaceID) {
		this.source = source
		this.spaceID = spaceID
	}

}

/** Notifies other participants that the member has effectively 
 * left the space.
 * The event is fired within the default space of the context in which the agent left the space.
 * The leaving agent does not receive this event.
 * The source of the event is the leaving agent.
 *
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @version api.core 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.core
 * @since 0.10
 */
final event ParticipantLeft {

	/** The identifier of the space the agent just left.
	 */
	val spaceID : SpaceID

	/** Construct the event.
	 * 
	 * @param source the address of the emitter.
	 * @param spaceID the identifier of the space.
	 */
	new (source : Address, spaceID : SpaceID) {
		this.source = source
		this.spaceID = spaceID
	}

}
