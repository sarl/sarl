/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.experienceindex

import java.io.ByteArrayOutputStream
import java.io.File
import java.io.FileReader
import java.io.FileWriter
import java.lang.reflect.Array
import java.net.InetSocketAddress
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.text.MessageFormat
import java.util.Random
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream
import javax.crypto.Cipher
import javax.crypto.spec.DESKeySpec
import javax.crypto.spec.SecretKeySpec

/** This class computes the SARL Experience Index (SEI) of your machine.
 *
 * <p>The SEI is inspirated by the <a href="https://en.wikipedia.org/wiki/Windows_System_Assessment_Tool">Windows
 * Experience Index</a>.
 * The SEI measures the capability of your computer's hardware and
 * software configuration and expresses this measurement as a number
 * called a base score. A higher base score generally means that your
 * computer will perform better and faster than a computer with a
 * lower base score.
 *
 * <h2>Global Base Score</h2>
 *
 * <p>The base score is a value between 1.0 and 5.9.
 * The base score is based on the sub scores of sub components.
 *
 * <p>The model logic is tolerant of one subscore being below the threshold for
 * a particular level by 0.1.  For example, assume that in the above example,
 * the memory score was 4.0 and the processor score 3.9.
 * This would mean that the processor score would marginally be the only item
 * keeping the base score below level 4. The model addresses this issue by
 * rounding up a single value that is below the next round level by 0.1.
 *
 * <p>After the sub scores are normalized, the global base score is the average
 * score of the sub components.
 *
 * <h2>CPU Score</h2>
 *
 * <p>The CPU score was created to measure the processor performance when tasked with common Janus
 * usage activities. The processor is assessed on the following items:<ol>
 * <li>Compression and decompression using the Zip compression algorithm</li>
 * <li>Encryption and decryption assessment</li>
 * <li>Arithmetic Operations</li>
 * </ol>
 * The results are normalized and weight averaged in order to arrive at the final CPU sub score.
 *
 * <h2>Memory Score</h2>
 *
 * <p>The memory score measures the bandwidth of moving data into and out of memory in
 * Mega Bytes per Second. The higher the bandwidth, the better the memory.
 * Not having enough memory is a limiting factor on performance. As a result,
 * the amount of memory in the system constrains the score value.
 * The amount of memory limits are:
 * <table>
 * <caption>Memory Scores</caption>
 * <thead>
 * <tr><th>Amount of memory</th><th>Highest possible score</th></tr>
 * </thead>
 * <tbody>
 * <tr><td>64 MB or less</td><td>1.0</td></tr>
 * <tr><td>Less than 128 MB</td><td>2.0</td></tr>
 * <tr><td>Less than 256 MB</td><td>3.0</td></tr>
 * <tr><td>Less than 512 MB</td><td>4.0</td></tr>
 * <tr><td>Less than 1 GB</td><td>5.0</td></tr>
 * </tbody>
 * </table>
 *
 * <h2>Disk Score</h2>
 *
 * <p>The disk score measures disk bandwidth (in Mega Bytes per Second). The conversion
 * to an index number is set up in a way that all modern disks will score at least 2.0.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.experienceindex 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.experienceindex
 * @since 0.6
 */
final class SarlExperienceIndex {

	/** Version of the SEI.
	 */
	public static val VERSION = "1.0"

	static val LOWER_COMPRESSION_DELAY = 3.secs

	static val LOWER_ENCRYPTION_DELAY = 4.secs

	static val LOWER_ARITHMETIC_DELAY = 30.secs

	static val LOWER_MEMORY_DELAY = 1.secs

	static val LOWER_DISK_DELAY = 5.secs

	static val HIGHER_PROCESSOR_COUNT = 16

	static val NS = 1000f * 1000f * 1000f

	private static def secs(s : float) {
		s * NS
	}

	private static def megaBytes(m : float) : float {
		m * 1024 * 1024
	}

	private static def wrap(v : float) : String {
 		if (Float::isNaN(v)) {
 			Messages::SarlExperienceIndex_0
		} else {
			Float::toString(v)
		}
	}

	private static def clamp(v : float, min : float, max : float) : float {
		if (v < min) {
			return min
		}
		if (v > max) {
			return max
		}
		return v
	}

	private static def normalize(value : float) : float {
		if (Float::isNaN(value)) {
			return Float.NaN
		}
		Math::round(value * 10f) / 10f
	}

	private static def normalize(scores : float*) : void {
		for (var i = 0; i < scores.length; i++) {
			var s = scores.get(i)
			if (!Float::isNaN(s)) {
				for (var j = 0; j < scores.length; j++) {
					if (j !== i) {
						var score = scores.get(j)
						if (s >= (score - 0.1f) && s <= score) {
							s = score
						}
					}
				}
			}
			scores.set(i, s)
		}
	}

	private static def avg(scores : float*) : float {
		var n = 0
		var score = 0f
		for (subscore : scores) {
			if (!Float::isNaN(subscore)) {
				score += subscore
				n++
			}
		}
		if (n > 0) {
			score /= n
			score = score.normalize
		} else {
			score = Float::NaN
		}
		return score
	}

	private static def garbage : void {
		val r = Runtime::runtime
		for (var i = 0; i < 6; i++) {
			r.gc
		}
	}

	private static def wrap(canceller : SeiCanceler) : SeiCanceler {
		if (canceller === null) [ false ] else canceller
	}

	/** This class contains the different SEI of your machine.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version api.experienceindex 0.15.1 20250911-224825
	 * @mavengroupid io.sarl.sdk
	 * @mavenartifactid api.experienceindex
	 */
	static class SEI {

		var base = Float::NaN
		var cpu = Float::NaN
		var memory = Float::NaN
		var disk = Float::NaN

		package new {
		}

		/** Set the base score.
		 * 
		 * @param score
		 */
		package def setBaseScore(score : float) : void {
			this.base = score
		}

		/** Replies the base score.
		 * 
		 * @return the base score, or {@link Float#NaN} if
		 * the score was not computed.
		 */
		def getBaseScore : float {
			this.base
		}

		/** Set the CPU score.
		 * 
		 * @param score
		 */
		package def setCpuScore(score : float) : void {
			this.cpu = score
		}

		/** Replies the CPU score.
		 * 
		 * @return the CPU score, or {@link Float#NaN} if
		 * the score was not computed.
		 */
		def getCpuScore : float {
			this.cpu
		}
		/** Set the Memory score.
		 * 
		 * @param score
		 */
		package def setMemoryScore(score : float) : void {
			this.memory = score
		}

		/** Replies the Memory score.
		 * 
		 * @return the memory score, or {@link Float#NaN} if
		 * the score was not computed.
		 */
		def getMemoryScore : float {
			this.memory
		}

		/** Set the disk score.
		 * 
		 * @param score
		 */
		package def setDiskScore(score : float) : void {
			this.disk = score
		}

		/** Replies the disk score.
		 * 
		 * @return the disk score, or {@link Float#NaN} if
		 * the score was not computed.
		 */
		def getDiskScore : float {
			this.disk
		}

	}

	static val SEI_SINGLETON = new SEI

	private new {
	}

	/** Run the SEI from the command-line.
	 *
	 * @param args no used.
	 */
	@SuppressWarnings("discouraged_reference")
	static def main(args : String*) : void {
		println(MessageFormat::format(Messages::SarlExperienceIndex_1, VERSION))
		val SEI = janusExperienceIndex
		println(MessageFormat::format(Messages::SarlExperienceIndex_2, SEI.baseScore.wrap))
		println(MessageFormat::format(Messages::SarlExperienceIndex_3, SEI.cpuScore))
		println(MessageFormat::format(Messages::SarlExperienceIndex_4, SEI.memoryScore))
		println(MessageFormat::format(Messages::SarlExperienceIndex_5, SEI.diskScore))
		println(Messages::SarlExperienceIndex_6)
	}

	/** Replies the current SEI.
	 *
	 * @param canceller the object that permits to stop the computation before its end.
	 * @return the current SEI.
	 */
	static def getJanusExperienceIndex(canceller : SeiCanceler = null) : SEI {
		baseScore(canceller)
		SEI_SINGLETON
	}

	/** Compute the global SEI.
	 *
	 * @param canceller the object that permits to stop the computation before its end.
	 * @return the global SEI.
	 */
	static def baseScore(canceller : SeiCanceler = null) : float {
		var clr = canceller.wrap
		var score = SEI_SINGLETON.baseScore
		if (!clr.canceled && Float::isNaN(score)) {
			// Ensure sub scores are computed
			val scores = #[
					cpuScore(canceller),
					memoryScore(canceller),
					diskScore(canceller)
			]

			if (clr.canceled) return Float::NaN 

			scores.normalize
			score = scores.avg

			SEI_SINGLETON.cpuScore = scores.get(0)
			SEI_SINGLETON.memoryScore = scores.get(1)
			SEI_SINGLETON.diskScore = scores.get(2)
			SEI_SINGLETON.baseScore = score
		}
		return score
	}

	/** Compute the CPU score.
	 * 
	 * @param canceller the object that permits to stop the computation before its end.
	 * @return the CPU score.
	 */
	static def cpuScore(canceller : SeiCanceler = null) : float {
		val clr = canceller.wrap
		var score = SEI_SINGLETON.cpuScore
		if (!clr.canceled && Float::isNaN(score)) {
			var scores = #[
					computeCompressionScore(canceller),
					computeEncryptionScore(canceller),
					computeArithmeticScore(canceller),
					computeMultiProcessorScore(canceller)
			]
			score = scores.avg
			score = score.normalize
			SEI_SINGLETON.cpuScore = score
		}
		return score
	}

	private static def computeMultiProcessorScore(canceller : SeiCanceler) : float {
		try {
			var r = Runtime::runtime
			var n = r.availableProcessors
			clamp(n * 5f / HIGHER_PROCESSOR_COUNT + 1f, 1, 6)
		} catch (e : Exception) {
			Float::NaN
		}
	}

	@SuppressWarnings("unused_local_variable")
	private static def computeArithmeticScore(canceller : SeiCanceler) : float {
		try {
			var s = System::nanoTime
			for (var i = 0; i < 100000000; i++) {
				var atanResult = Math::atan2(123, 456)
				if (canceller.canceled) return Float::NaN
			}
			var e = System::nanoTime

			var arithDelay = e - s

			garbage

			var score = arithDelay * 5f / LOWER_ARITHMETIC_DELAY
			score = 6 - score

			clamp(score, 1, 6)
		} catch (e : Exception) {
			Float::NaN
		}
	}

	private static def computeEncryptionScore(canceller : SeiCanceler) : float {
		try {
			var rnd = new Random
			var t = new StringBuilder
			for (var i = 0; i < 6000; i++) {
				for(var j = 0; j < 1024; j++) {
					t.append(rnd.nextInt as char)
					if (canceller.canceled) return Float::NaN
				}
			}
			t.trimToSize
			var buffer = t.toString.getBytes

			garbage

			var p = System.getProperties
			var seed =	p.getProperty("user.name")
								+ '@'
								+ new InetSocketAddress(0).hostName
								+ ":jdk_"
								+ p.getProperty("java.version")
								+ ":os_"
								+ p.getProperty("os.name")
								+ '-'
								+ p.getProperty("os.version")
			var original = seed.md5.getBytes("UTF8")
			var bkey = Array.newInstance(typeof(byte), DESKeySpec.DES_KEY_LEN) as byte[]
			for (var i = 0; i < DESKeySpec.DES_KEY_LEN; i++) {
				bkey.set(i, original.get(i % original.length))
				if (canceller.canceled) return Float::NaN
			}

			var kkey = new SecretKeySpec(bkey, "DES")
			var cipher = Cipher::getInstance("DES")

			var s = System::nanoTime
	        //MD5
			MessageDigest::getInstance("MD5").digest(buffer)
			if (canceller.canceled) return Float::NaN
	        //SHA
			MessageDigest::getInstance("SHA").digest(buffer)
			if (canceller.canceled) return Float::NaN
			//DES Encryption
			cipher.init(Cipher::ENCRYPT_MODE, kkey)
			if (canceller.canceled) return Float::NaN
			var output = cipher.doFinal(buffer)
			if (canceller.canceled) return Float::NaN
			//DES Decryption
			cipher.init(Cipher::DECRYPT_MODE, kkey)
			if (canceller.canceled) return Float::NaN
			cipher.doFinal(output)
			if (canceller.canceled) return Float::NaN
	        var e = System::nanoTime

	        var encryptionDelay = e - s

			garbage

			var score = encryptionDelay * 5f / LOWER_ENCRYPTION_DELAY
			score = 6 - score

			clamp(score, 1, 6)
		} catch (e : Exception) {
			Float::NaN
		}
	}
	
	private static def md5(str : String) : String {
		if (str === null) return ""
        var uniqueKey = str.bytes
        var hash : byte[] = null

        try {
        	hash = MessageDigest::getInstance("MD5").digest(uniqueKey)
        } catch (e : NoSuchAlgorithmException) {
        	throw new Error(Messages::SarlExperienceIndex_7, e)
        }

        var hashString = new StringBuilder

        for (var i = 0; i < hash.length; i++) {
	        var hex = Integer::toHexString(hash.get(i))
	        if ( hex.length === 1 ) {
	            hashString.append('0')
	            hashString.append(hex.charAt(hex.length - 1))
	        } else {
	            hashString.append(hex.substring(hex.length - 2))
	        }
        }
        hashString.toString
	}

	private static def computeCompressionScore(canceller : SeiCanceler) : float {
		try {
			var rnd = new Random
			var t = new StringBuilder
			for (var i = 0; i < 6000; i++) {
				for(var j = 0; j < 1024; j++) {
					t.append(rnd.nextInt as char)
					if (canceller.canceled) return Float::NaN
				}
			}
			t.trimToSize
			var buffer = t.toString.bytes

			garbage

			var compressionDelay : long
			var zos = new ZipOutputStream(new ByteArrayOutputStream())
			try {
				var s = System.nanoTime
				zos.putNextEntry(new ZipEntry("test.bin"))
				zos.write(buffer, 0, buffer.length)
				var e = System.nanoTime
				compressionDelay = e - s
			} finally {
				zos.close
			}

			if (canceller.canceled) return Float::NaN

			garbage

			var score = compressionDelay * 5f / LOWER_COMPRESSION_DELAY
			score = 6 - score

			clamp(score, 1, 6)
		} catch (e : Exception) {
			Float::NaN
		}
	}
	
	/** Compute the Memory score.
	 *
	 * @param canceller the object that permits to stop the computation before its end.
	 * @return the Memory score.
	 */
	@SuppressWarnings("unused_local_variable")
	static def memoryScore(canceller : SeiCanceler = null) : float {
		val clr = canceller.wrap
		var score = SEI_SINGLETON.memoryScore
		if (!clr.canceled && Float::isNaN(score)) {
			var s = System::nanoTime
			var tab = Array.newInstance(typeof(byte), 10.megaBytes as int) as byte[]
			for (var i = 0; i < tab.length; i++) {
				if (clr.canceled) return Float::NaN
				tab.set(i, 123 as byte)
				var t : byte
				if (i > 0) t = tab.get(i - 1)
				if (i < (tab.length - 1)) t = tab.get(i + 1)
			}
			for (var i = 0; i < 10000; i++) {
				new String("ABSD")
				if (clr.canceled) return Float::NaN
			}
			var e = System::nanoTime

			garbage

			score = (e - s) * 5f / LOWER_MEMORY_DELAY
			score = 6 - score

			var r = Runtime::runtime
			if (r.maxMemory <= 64.megaBytes) score = 1f
			else if (r.maxMemory <= 128.megaBytes) score = clamp(score, 1, 2)
			else if (r.maxMemory <= 256.megaBytes) score = clamp(score, 1, 3)
			else if (r.maxMemory <= 512.megaBytes) score = clamp(score, 1, 4)
			else if (r.maxMemory <= 1024.megaBytes) score = clamp(score, 1, 5)
			else score = clamp(score, 1, 6)

			score = score.normalize
			SEI_SINGLETON.memoryScore = score
		}
		return score
	}

	/** Compute the disk score.
	 *
	 * @param canceller the object that permits to stop the computation before its end.
	 * @return the disk score.
	 */
	static def diskScore(canceller : SeiCanceler = null) : float {
		val clr = canceller.wrap
		var score = SEI_SINGLETON.diskScore
		if (!clr.canceled && Float::isNaN(score)) {
			try {
				var tempFile = File::createTempFile("SEI", ".bin")
				tempFile.deleteOnExit

				var s = System::nanoTime

				var fw = new FileWriter(tempFile)
				try {
					for (var i = 0; i < 1024 * 1024 * 20; i++) {
						fw.write('A')
						if (clr.canceled) return Float::NaN
					}
					fw.flush
				} finally {
					fw.close
				}

				var fr = new FileReader(tempFile)
				try {
					while (fr.read != -1) {
						if (clr.canceled) return Float::NaN
					}
				} finally {
					fr.close
				}

				var e = System::nanoTime

				tempFile.delete
				score = (e - s) * 5f / LOWER_DISK_DELAY
				score = 6 - score
				score = clamp(score, 1, 6)
				score = score.normalize
			} catch (exception : Exception) {
				score = Float::NaN
			}
			SEI_SINGLETON.diskScore = score
		}
		return score
	}

}

/** This interace is a tool for canceling the SEI computation.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.experienceindex 0.15.1 20250911-224825
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.experienceindex
 */
interface SeiCanceler {
	/**
	 * Returns whether cancelation of current operation has been requested.
	 * Long-running operations should poll to see if cancelation
	 * has been requested.
	 *
	 * @return {@code true} if cancellation has been requested,
	 *    and {@code false} otherwise.
	 */
	def isCanceled : boolean
}
