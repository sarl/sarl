/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.javafx

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.MemberLeft
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.lang.core.Agent
import java.util.concurrent.atomic.AtomicBoolean

/** Specific behavior for an agent that supports killing from a JavaFX application.  
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7
 */
behavior FXKillSupportBehavior {

	uses Lifecycle, InnerContextAccess

	val exited = new AtomicBoolean(false)

	/** Kill itself on Exit signal when no inner agent.
	 */
	on AppExit [!hasMemberAgent] {
		exited.set(true)
		killMe
	}

	/** Transmit Exit signal to all inner agent.
	 */
	on AppExit [!exited.get && hasMemberAgent] {
		exited.set(true)
		innerContext.defaultSpace.emit(ID, new AppExit)
	}

	on MemberLeft [exited.get && it.inInnerDefaultSpace && !hasMemberAgent] {
		killMe
	}

}

/** Specific behavior for an agent that enables it to interact with
 * a JavaFX user interface.  
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7
 */
behavior FXBehavior extends FXKillSupportBehavior {

	uses Behaviors

	val uiSpace : OpenEventSpace
	
	/** Constructor.
	 *
	 * @param owner the owner (agent) of the behavior.
	 * @param controller the JavaFX controller to be linked to.
	 */
	new (owner : Agent, controller : FxViewerController) {
		super(owner)
		this.uiSpace = controller.UISpace
	}
	
	/** Installation.
	 */
	on Initialize {
		this.uiSpace.registerStrongParticipant(asEventListener)
	}

	/** Uninstallation.
	on Destroy {
		this.uiSpace.unregister(asEventListener)
	}

	/** Replies the space that is dedicated to the UI.
	 *
	 * @return the space for UI.
	 */
	def getUISpace : OpenEventSpace {
		this.uiSpace
	}

}
