/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.javafx

import javafx.application.Application
import javafx.fxml.FXMLLoader
import javafx.stage.Stage

/**
 * Abstract implementation of a JavaFX application that is embedding SARL agents.
 *
 * @author $Author: sgalland$
 * @version api.javafx 0.15.0 20250909-115748
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.javafx
 * @since 0.7
 */
abstract class FxApplication extends Application {

	/** The JavaFX loader.
	 */
	var loader : FXMLLoader

	/** Start the JavaFX application.
	 *
	 * @param stage the JavaFX stage.
	 */
	final override start(stage : Stage) {
		this.loader = stage.doApplicationStart
		stage.show
	}
 
 	/** Kill the agents and stop the JavaFX application.
 	 */
	override stop {
		if (loader !== null && loader.controller instanceof FxViewerController) {
			(loader.controller as FxViewerController).safeExit
		}
		super.stop
	}

	/** Start the application. This function must be overridden within the application software
	 * in order to initialize the JavaFX user interface that is dedicated to the application.
	 *
	 * @param stage the JavaFX stage. That is used for initializing JavaFX.
	 * @return the loader of FXML, i.e. of uuser interface, that is dedicated to the application.
	 */
	protected abstract def doApplicationStart(stage : Stage) : FXMLLoader

}
