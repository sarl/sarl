/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.api.game.tgob

import java.util.List

/** 
 * Skill that implements the standard action selection algorithm that is defined for
 * the game time-based goal-oriented behaviors.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version api.gametgob 0.14.0 20241106-161408
 * @mavengroupid io.sarl.sdk
 * @mavenartifactid api.gametgob
 * @since 0.13
 */
skill StandardActionSelectionSkill implements SelectAction {

	override selectAction(actions : List<? extends Action>, goals : List<? extends Goal>) : Action {
		val iterator = actions.iterator
		var bestAction = iterator.next
		var bestValue = bestAction.calculateDiscontentment(goals)
		while (iterator.hasNext) {
			val action = iterator.next
			var value = action.calculateDiscontentment(goals)
			if (value < bestValue) {
				bestValue = value
				bestAction = action
			}
		}
		return bestAction
	}

	/** Calculate the discontentment for the given action
	 */
	protected def calculateDiscontentment(action : Action, goals : List<? extends Goal>) {
		var discontentment = 0.0
		for (goal : goals) {
			var newInsistence = goal.insistence + action.getInsistenceChangeFor(goal)
			newInsistence += action.duration * goal.insistenceChangePerTimeUnit
			discontentment += goal.getDiscontentmentFor(newInsistence)
		}
		return discontentment
	}

}
