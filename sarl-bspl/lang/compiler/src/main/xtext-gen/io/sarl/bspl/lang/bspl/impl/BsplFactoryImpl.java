/**
 * $Id$
 * 
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.bspl.lang.bspl.impl;

import io.sarl.bspl.lang.bspl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BsplFactoryImpl extends EFactoryImpl implements BsplFactory
{
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static BsplFactory init()
	{
		try
		{
			BsplFactory theBsplFactory = (BsplFactory)EPackage.Registry.INSTANCE.getEFactory(BsplPackage.eNS_URI);
			if (theBsplFactory != null)
			{
				return theBsplFactory;
			}
		}
		catch (Exception exception)
		{
			EcorePlugin.INSTANCE.log(exception);
		}
		return new BsplFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BsplFactoryImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass)
	{
		switch (eClass.getClassifierID())
		{
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION: return createBsplProtocolSpecification();
			case BsplPackage.BSPL_PROTOCOL: return createBsplProtocol();
			case BsplPackage.BSPL_PROTOCOL_MEMBER: return createBsplProtocolMember();
			case BsplPackage.BSPL_PROTOCOL_ARGUMENT: return createBsplProtocolArgument();
			case BsplPackage.BSPL_PROTOCOL_ROLE: return createBsplProtocolRole();
			case BsplPackage.BSPL_PROTOCOL_PARAMETER: return createBsplProtocolParameter();
			case BsplPackage.BSPL_PROTOCOL_MESSAGE: return createBsplProtocolMessage();
			case BsplPackage.BSPL_PROTOCOL_PROTOCOL_CALL: return createBsplProtocolProtocolCall();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolSpecification createBsplProtocolSpecification()
	{
		BsplProtocolSpecificationImpl bsplProtocolSpecification = new BsplProtocolSpecificationImpl();
		return bsplProtocolSpecification;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocol createBsplProtocol()
	{
		BsplProtocolImplCustom bsplProtocol = new BsplProtocolImplCustom();
		return bsplProtocol;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolMember createBsplProtocolMember()
	{
		BsplProtocolMemberImplCustom bsplProtocolMember = new BsplProtocolMemberImplCustom();
		return bsplProtocolMember;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolArgument createBsplProtocolArgument()
	{
		BsplProtocolArgumentImplCustom bsplProtocolArgument = new BsplProtocolArgumentImplCustom();
		return bsplProtocolArgument;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolRole createBsplProtocolRole()
	{
		BsplProtocolRoleImplCustom bsplProtocolRole = new BsplProtocolRoleImplCustom();
		return bsplProtocolRole;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolParameter createBsplProtocolParameter()
	{
		BsplProtocolParameterImplCustom bsplProtocolParameter = new BsplProtocolParameterImplCustom();
		return bsplProtocolParameter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolMessage createBsplProtocolMessage()
	{
		BsplProtocolMessageImplCustom bsplProtocolMessage = new BsplProtocolMessageImplCustom();
		return bsplProtocolMessage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplProtocolProtocolCall createBsplProtocolProtocolCall()
	{
		BsplProtocolProtocolCallImpl bsplProtocolProtocolCall = new BsplProtocolProtocolCallImpl();
		return bsplProtocolProtocolCall;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BsplPackage getBsplPackage()
	{
		return (BsplPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static BsplPackage getPackage()
	{
		return BsplPackage.eINSTANCE;
	}

} //BsplFactoryImpl
