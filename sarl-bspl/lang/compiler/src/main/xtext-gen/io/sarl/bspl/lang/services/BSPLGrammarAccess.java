/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.bspl.lang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BSPLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProtocolSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ProtocolSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBsplProtocolSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Assignment cBsplProtocolsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBsplProtocolsProtocolParserRuleCall_3_0 = (RuleCall)cBsplProtocolsAssignment_3.eContents().get(0);
		
		//ProtocolSpecification returns BsplProtocolSpecification:
		//    {BsplProtocolSpecification}
		//    ('package' package=QualifiedName ';'?)?
		//    importSection=XImportSection?
		//    bsplProtocols+=Protocol*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocolSpecification}
		//('package' package=QualifiedName ';'?)?
		//importSection=XImportSection?
		//bsplProtocols+=Protocol*
		public Group getGroup() { return cGroup; }
		
		//{BsplProtocolSpecification}
		public Action getBsplProtocolSpecificationAction_0() { return cBsplProtocolSpecificationAction_0; }
		
		//('package' package=QualifiedName ';'?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'package'
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }
		
		//package=QualifiedName
		public Assignment getPackageAssignment_1_1() { return cPackageAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_1_0() { return cPackageQualifiedNameParserRuleCall_1_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }
		
		//bsplProtocols+=Protocol*
		public Assignment getBsplProtocolsAssignment_3() { return cBsplProtocolsAssignment_3; }
		
		//Protocol
		public RuleCall getBsplProtocolsProtocolParserRuleCall_3_0() { return cBsplProtocolsProtocolParserRuleCall_3_0; }
	}
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBsplProtocolAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersProtocolVisibilityModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Keyword cProtocolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRoleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMembersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMembersProtocolRoleParserRuleCall_5_1_0 = (RuleCall)cMembersAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMembersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMembersProtocolRoleParserRuleCall_5_2_1_0 = (RuleCall)cMembersAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cMembersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cMembersProtocolFirstParameterParserRuleCall_6_0_0 = (RuleCall)cMembersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cMembersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cMembersProtocolFollowingParameterParserRuleCall_6_1_1_0 = (RuleCall)cMembersAssignment_6_1_1.eContents().get(0);
		private final Assignment cMembersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMembersProtocolMessageParserRuleCall_7_0 = (RuleCall)cMembersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Protocol returns BsplProtocol:
		//    {BsplProtocol}
		//    // Recognize the original syntax for BSPL
		//    modifiers+=ProtocolVisibilityModifier* 'protocol'? name=ValidID '{'
		//        ( 'role'? members+=ProtocolRole (',' members+=ProtocolRole)* )*
		//        ( members+=ProtocolFirstParameter ( ',' members+=ProtocolFollowingParameter )* )*
		//        ( members+=ProtocolMessage )*
		//        /*( members+=ProtocolCall )**/
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocol}
		//// Recognize the original syntax for BSPL
		//modifiers+=ProtocolVisibilityModifier* 'protocol'? name=ValidID '{'
		//    ( 'role'? members+=ProtocolRole (',' members+=ProtocolRole)* )*
		//    ( members+=ProtocolFirstParameter ( ',' members+=ProtocolFollowingParameter )* )*
		//    ( members+=ProtocolMessage )*
		//    /*( members+=ProtocolCall )**/
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{BsplProtocol}
		public Action getBsplProtocolAction_0() { return cBsplProtocolAction_0; }
		
		//// Recognize the original syntax for BSPL
		//modifiers+=ProtocolVisibilityModifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//ProtocolVisibilityModifier
		public RuleCall getModifiersProtocolVisibilityModifierParserRuleCall_1_0() { return cModifiersProtocolVisibilityModifierParserRuleCall_1_0; }
		
		//'protocol'?
		public Keyword getProtocolKeyword_2() { return cProtocolKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//( 'role'? members+=ProtocolRole (',' members+=ProtocolRole)* )*
		public Group getGroup_5() { return cGroup_5; }
		
		//'role'?
		public Keyword getRoleKeyword_5_0() { return cRoleKeyword_5_0; }
		
		//members+=ProtocolRole
		public Assignment getMembersAssignment_5_1() { return cMembersAssignment_5_1; }
		
		//ProtocolRole
		public RuleCall getMembersProtocolRoleParserRuleCall_5_1_0() { return cMembersProtocolRoleParserRuleCall_5_1_0; }
		
		//(',' members+=ProtocolRole)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//members+=ProtocolRole
		public Assignment getMembersAssignment_5_2_1() { return cMembersAssignment_5_2_1; }
		
		//ProtocolRole
		public RuleCall getMembersProtocolRoleParserRuleCall_5_2_1_0() { return cMembersProtocolRoleParserRuleCall_5_2_1_0; }
		
		//( members+=ProtocolFirstParameter ( ',' members+=ProtocolFollowingParameter )* )*
		public Group getGroup_6() { return cGroup_6; }
		
		//members+=ProtocolFirstParameter
		public Assignment getMembersAssignment_6_0() { return cMembersAssignment_6_0; }
		
		//ProtocolFirstParameter
		public RuleCall getMembersProtocolFirstParameterParserRuleCall_6_0_0() { return cMembersProtocolFirstParameterParserRuleCall_6_0_0; }
		
		//( ',' members+=ProtocolFollowingParameter )*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//members+=ProtocolFollowingParameter
		public Assignment getMembersAssignment_6_1_1() { return cMembersAssignment_6_1_1; }
		
		//ProtocolFollowingParameter
		public RuleCall getMembersProtocolFollowingParameterParserRuleCall_6_1_1_0() { return cMembersProtocolFollowingParameterParserRuleCall_6_1_1_0; }
		
		//( members+=ProtocolMessage )*
		public Assignment getMembersAssignment_7() { return cMembersAssignment_7; }
		
		//ProtocolMessage
		public RuleCall getMembersProtocolMessageParserRuleCall_7_0() { return cMembersProtocolMessageParserRuleCall_7_0; }
		
		//    /*( members+=ProtocolCall )**/
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ProtocolRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ProtocolRole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBsplProtocolRoleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cMinAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMinINTTerminalRuleCall_2_1_0_0 = (RuleCall)cMinAssignment_2_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cMaxAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMaxINTTerminalRuleCall_2_2_0 = (RuleCall)cMaxAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ProtocolRole returns BsplProtocolRole:
		//    {BsplProtocolRole}
		//    name=ValidID ('[' (min=INT '..')? max=INT ']')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocolRole}
		//name=ValidID ('[' (min=INT '..')? max=INT ']')?
		public Group getGroup() { return cGroup; }
		
		//{BsplProtocolRole}
		public Action getBsplProtocolRoleAction_0() { return cBsplProtocolRoleAction_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('[' (min=INT '..')? max=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(min=INT '..')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//min=INT
		public Assignment getMinAssignment_2_1_0() { return cMinAssignment_2_1_0; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_2_1_0_0() { return cMinINTTerminalRuleCall_2_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_1_1() { return cFullStopFullStopKeyword_2_1_1; }
		
		//max=INT
		public Assignment getMaxAssignment_2_2() { return cMaxAssignment_2_2; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_2_2_0() { return cMaxINTTerminalRuleCall_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	public class ProtocolFirstParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ProtocolFirstParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBsplProtocolParameterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cModifiersAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cModifiersPrivateKeyword_0_1_0_0 = (Keyword)cModifiersAssignment_0_1_0.eContents().get(0);
		private final Keyword cParameterKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cModifiersAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cModifiersParameterModifierParserRuleCall_0_1_2_0 = (RuleCall)cModifiersAssignment_0_1_2.eContents().get(0);
		private final Assignment cNameAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_0_1_3_0 = (RuleCall)cNameAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_0_1_4 = (Group)cGroup_0_1.eContents().get(4);
		private final Keyword cColonKeyword_0_1_4_0 = (Keyword)cGroup_0_1_4.eContents().get(0);
		private final Assignment cTypeAssignment_0_1_4_1 = (Assignment)cGroup_0_1_4.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_1_4_1_0 = (RuleCall)cTypeAssignment_0_1_4_1.eContents().get(0);
		private final Assignment cModifiersAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final Keyword cModifiersKeyKeyword_0_1_5_0 = (Keyword)cModifiersAssignment_0_1_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cModifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cModifiersPublicKeyword_1_0_0 = (Keyword)cModifiersAssignment_1_0.eContents().get(0);
		private final Keyword cParameterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cModifiersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cModifiersParameterModifierParserRuleCall_1_2_0 = (RuleCall)cModifiersAssignment_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cColonKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cTypeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_4_1_0 = (RuleCall)cTypeAssignment_1_4_1.eContents().get(0);
		private final Assignment cModifiersAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final Keyword cModifiersKeyKeyword_1_5_0 = (Keyword)cModifiersAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cParameterKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModifiersParameterModifierParserRuleCall_2_1_0 = (RuleCall)cModifiersAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cTypeAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_3_1_0 = (RuleCall)cTypeAssignment_2_3_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final Keyword cModifiersKeyKeyword_2_4_0 = (Keyword)cModifiersAssignment_2_4.eContents().get(0);
		
		//ProtocolFirstParameter returns BsplProtocolParameter:
		//    {BsplProtocolParameter}
		//    (
		//        modifiers+='private' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//    ) | (
		//        modifiers+='public' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//    ) | (
		//        'parameter' modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocolParameter}
		//(
		//    modifiers+='private' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//) | (
		//    modifiers+='public' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//) | (
		//    'parameter' modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BsplProtocolParameter}
		//(
		//    modifiers+='private' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//)
		public Group getGroup_0() { return cGroup_0; }
		
		//{BsplProtocolParameter}
		public Action getBsplProtocolParameterAction_0_0() { return cBsplProtocolParameterAction_0_0; }
		
		//(
		//    modifiers+='private' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//modifiers+='private'
		public Assignment getModifiersAssignment_0_1_0() { return cModifiersAssignment_0_1_0; }
		
		//'private'
		public Keyword getModifiersPrivateKeyword_0_1_0_0() { return cModifiersPrivateKeyword_0_1_0_0; }
		
		//'parameter'?
		public Keyword getParameterKeyword_0_1_1() { return cParameterKeyword_0_1_1; }
		
		//modifiers+=ParameterModifier*
		public Assignment getModifiersAssignment_0_1_2() { return cModifiersAssignment_0_1_2; }
		
		//ParameterModifier
		public RuleCall getModifiersParameterModifierParserRuleCall_0_1_2_0() { return cModifiersParameterModifierParserRuleCall_0_1_2_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_1_3() { return cNameAssignment_0_1_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_3_0() { return cNameValidIDParserRuleCall_0_1_3_0; }
		
		//(':' type=JvmTypeReference)?
		public Group getGroup_0_1_4() { return cGroup_0_1_4; }
		
		//':'
		public Keyword getColonKeyword_0_1_4_0() { return cColonKeyword_0_1_4_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_0_1_4_1() { return cTypeAssignment_0_1_4_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_1_4_1_0() { return cTypeJvmTypeReferenceParserRuleCall_0_1_4_1_0; }
		
		//modifiers+='key'?
		public Assignment getModifiersAssignment_0_1_5() { return cModifiersAssignment_0_1_5; }
		
		//'key'
		public Keyword getModifiersKeyKeyword_0_1_5_0() { return cModifiersKeyKeyword_0_1_5_0; }
		
		//(
		//       modifiers+='public' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//   )
		public Group getGroup_1() { return cGroup_1; }
		
		//modifiers+='public'
		public Assignment getModifiersAssignment_1_0() { return cModifiersAssignment_1_0; }
		
		//'public'
		public Keyword getModifiersPublicKeyword_1_0_0() { return cModifiersPublicKeyword_1_0_0; }
		
		//'parameter'?
		public Keyword getParameterKeyword_1_1() { return cParameterKeyword_1_1; }
		
		//modifiers+=ParameterModifier*
		public Assignment getModifiersAssignment_1_2() { return cModifiersAssignment_1_2; }
		
		//ParameterModifier
		public RuleCall getModifiersParameterModifierParserRuleCall_1_2_0() { return cModifiersParameterModifierParserRuleCall_1_2_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_3_0() { return cNameValidIDParserRuleCall_1_3_0; }
		
		//(':' type=JvmTypeReference)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//':'
		public Keyword getColonKeyword_1_4_0() { return cColonKeyword_1_4_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_4_1() { return cTypeAssignment_1_4_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_4_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_4_1_0; }
		
		//modifiers+='key'?
		public Assignment getModifiersAssignment_1_5() { return cModifiersAssignment_1_5; }
		
		//'key'
		public Keyword getModifiersKeyKeyword_1_5_0() { return cModifiersKeyKeyword_1_5_0; }
		
		//(
		//       'parameter' modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//   )
		public Group getGroup_2() { return cGroup_2; }
		
		//'parameter'
		public Keyword getParameterKeyword_2_0() { return cParameterKeyword_2_0; }
		
		//modifiers+=ParameterModifier*
		public Assignment getModifiersAssignment_2_1() { return cModifiersAssignment_2_1; }
		
		//ParameterModifier
		public RuleCall getModifiersParameterModifierParserRuleCall_2_1_0() { return cModifiersParameterModifierParserRuleCall_2_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_0() { return cNameValidIDParserRuleCall_2_2_0; }
		
		//(':' type=JvmTypeReference)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//':'
		public Keyword getColonKeyword_2_3_0() { return cColonKeyword_2_3_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_3_1() { return cTypeAssignment_2_3_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_3_1_0() { return cTypeJvmTypeReferenceParserRuleCall_2_3_1_0; }
		
		//modifiers+='key'?
		public Assignment getModifiersAssignment_2_4() { return cModifiersAssignment_2_4; }
		
		//'key'
		public Keyword getModifiersKeyKeyword_2_4_0() { return cModifiersKeyKeyword_2_4_0; }
	}
	public class ProtocolFollowingParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ProtocolFollowingParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBsplProtocolParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersParameterModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Assignment cModifiersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cModifiersKeyKeyword_4_0 = (Keyword)cModifiersAssignment_4.eContents().get(0);
		
		//ProtocolFollowingParameter returns BsplProtocolParameter:
		//    {BsplProtocolParameter}
		//    modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocolParameter}
		//modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
		public Group getGroup() { return cGroup; }
		
		//{BsplProtocolParameter}
		public Action getBsplProtocolParameterAction_0() { return cBsplProtocolParameterAction_0; }
		
		//modifiers+=ParameterModifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//ParameterModifier
		public RuleCall getModifiersParameterModifierParserRuleCall_1_0() { return cModifiersParameterModifierParserRuleCall_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(':' type=JvmTypeReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_1_0() { return cTypeJvmTypeReferenceParserRuleCall_3_1_0; }
		
		//modifiers+='key'?
		public Assignment getModifiersAssignment_4() { return cModifiersAssignment_4; }
		
		//'key'
		public Keyword getModifiersKeyKeyword_4_0() { return cModifiersKeyKeyword_4_0; }
	}
	public class ProtocolMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ProtocolMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBsplProtocolMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromValidIDParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersMessageTargetModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToValidIDParserRuleCall_4_0 = (RuleCall)cToAssignment_4.eContents().get(0);
		private final Assignment cModifiersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModifiersMessageTargetModifierParserRuleCall_5_0 = (RuleCall)cModifiersAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMessageAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMessageValidIDParserRuleCall_7_0 = (RuleCall)cMessageAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cArgumentsAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cArgumentsArgumentDefParserRuleCall_8_1_0_0 = (RuleCall)cArgumentsAssignment_8_1_0.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentDefParserRuleCall_8_1_1_1_0 = (RuleCall)cArgumentsAssignment_8_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//ProtocolMessage returns BsplProtocolMessage:
		//    {BsplProtocolMessage}
		//    from=ValidID
		//            '->' modifiers+=MessageTargetModifier* to=ValidID modifiers+=MessageTargetModifier*
		//            ':' message=ValidID
		//            ( '[' ( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?  ']' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocolMessage}
		//from=ValidID
		//        '->' modifiers+=MessageTargetModifier* to=ValidID modifiers+=MessageTargetModifier*
		//        ':' message=ValidID
		//        ( '[' ( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?  ']' )?
		public Group getGroup() { return cGroup; }
		
		//{BsplProtocolMessage}
		public Action getBsplProtocolMessageAction_0() { return cBsplProtocolMessageAction_0; }
		
		//from=ValidID
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//ValidID
		public RuleCall getFromValidIDParserRuleCall_1_0() { return cFromValidIDParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//modifiers+=MessageTargetModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }
		
		//MessageTargetModifier
		public RuleCall getModifiersMessageTargetModifierParserRuleCall_3_0() { return cModifiersMessageTargetModifierParserRuleCall_3_0; }
		
		//to=ValidID
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//ValidID
		public RuleCall getToValidIDParserRuleCall_4_0() { return cToValidIDParserRuleCall_4_0; }
		
		//modifiers+=MessageTargetModifier*
		public Assignment getModifiersAssignment_5() { return cModifiersAssignment_5; }
		
		//MessageTargetModifier
		public RuleCall getModifiersMessageTargetModifierParserRuleCall_5_0() { return cModifiersMessageTargetModifierParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//message=ValidID
		public Assignment getMessageAssignment_7() { return cMessageAssignment_7; }
		
		//ValidID
		public RuleCall getMessageValidIDParserRuleCall_7_0() { return cMessageValidIDParserRuleCall_7_0; }
		
		//( '[' ( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?  ']' )?
		public Group getGroup_8() { return cGroup_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_0() { return cLeftSquareBracketKeyword_8_0; }
		
		//( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//arguments+=ArgumentDef
		public Assignment getArgumentsAssignment_8_1_0() { return cArgumentsAssignment_8_1_0; }
		
		//ArgumentDef
		public RuleCall getArgumentsArgumentDefParserRuleCall_8_1_0_0() { return cArgumentsArgumentDefParserRuleCall_8_1_0_0; }
		
		//(',' arguments+=ArgumentDef)*
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }
		
		//','
		public Keyword getCommaKeyword_8_1_1_0() { return cCommaKeyword_8_1_1_0; }
		
		//arguments+=ArgumentDef
		public Assignment getArgumentsAssignment_8_1_1_1() { return cArgumentsAssignment_8_1_1_1; }
		
		//ArgumentDef
		public RuleCall getArgumentsArgumentDefParserRuleCall_8_1_1_1_0() { return cArgumentsArgumentDefParserRuleCall_8_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_2() { return cRightSquareBracketKeyword_8_2; }
	}
	public class ArgumentDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ArgumentDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBsplProtocolArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersParameterModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cModifiersKeyKeyword_3_0 = (Keyword)cModifiersAssignment_3.eContents().get(0);
		
		///*ProtocolCall returns BsplProtocolProtocolCall:
		//    {BsplProtocolProtocolCall}
		//    target=JvmTypeReference '('
		//        ( roles+=ValidID (',' roles+=ValidID)* )? ('|' ( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?)?
		//    ')'
		//;*/
		//ArgumentDef returns BsplProtocolArgument:
		//    {BsplProtocolArgument}
		//    modifiers+=ParameterModifier* name=ValidID modifiers+='key'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BsplProtocolArgument}
		//modifiers+=ParameterModifier* name=ValidID modifiers+='key'?
		public Group getGroup() { return cGroup; }
		
		//{BsplProtocolArgument}
		public Action getBsplProtocolArgumentAction_0() { return cBsplProtocolArgumentAction_0; }
		
		//modifiers+=ParameterModifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//ParameterModifier
		public RuleCall getModifiersParameterModifierParserRuleCall_1_0() { return cModifiersParameterModifierParserRuleCall_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//modifiers+='key'?
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }
		
		//'key'
		public Keyword getModifiersKeyKeyword_3_0() { return cModifiersKeyKeyword_3_0; }
	}
	public class ParameterModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ParameterModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNilKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOptKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ParameterModifier:
		//        'out' | 'in' | 'nil' | 'any' | 'opt'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' | 'in' | 'nil' | 'any' | 'opt'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'nil'
		public Keyword getNilKeyword_2() { return cNilKeyword_2; }
		
		//'any'
		public Keyword getAnyKeyword_3() { return cAnyKeyword_3; }
		
		//'opt'
		public Keyword getOptKeyword_4() { return cOptKeyword_4; }
	}
	public class MessageTargetModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.MessageTargetModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MessageTargetModifier:
		//        'out' | 'in'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' | 'in'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
	}
	public class ProtocolVisibilityModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.sarl.bspl.lang.BSPL.ProtocolVisibilityModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ProtocolVisibilityModifier:
		//        'public' | 'package'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'public' | 'package'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
	}
	
	
	private final ProtocolSpecificationElements pProtocolSpecification;
	private final ProtocolElements pProtocol;
	private final ProtocolRoleElements pProtocolRole;
	private final ProtocolFirstParameterElements pProtocolFirstParameter;
	private final ProtocolFollowingParameterElements pProtocolFollowingParameter;
	private final ProtocolMessageElements pProtocolMessage;
	private final ArgumentDefElements pArgumentDef;
	private final ParameterModifierElements pParameterModifier;
	private final MessageTargetModifierElements pMessageTargetModifier;
	private final ProtocolVisibilityModifierElements pProtocolVisibilityModifier;
	
	private final Grammar grammar;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public BSPLGrammarAccess(GrammarProvider grammarProvider,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pProtocolSpecification = new ProtocolSpecificationElements();
		this.pProtocol = new ProtocolElements();
		this.pProtocolRole = new ProtocolRoleElements();
		this.pProtocolFirstParameter = new ProtocolFirstParameterElements();
		this.pProtocolFollowingParameter = new ProtocolFollowingParameterElements();
		this.pProtocolMessage = new ProtocolMessageElements();
		this.pArgumentDef = new ArgumentDefElements();
		this.pParameterModifier = new ParameterModifierElements();
		this.pMessageTargetModifier = new MessageTargetModifierElements();
		this.pProtocolVisibilityModifier = new ProtocolVisibilityModifierElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.sarl.bspl.lang.BSPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//ProtocolSpecification returns BsplProtocolSpecification:
	//    {BsplProtocolSpecification}
	//    ('package' package=QualifiedName ';'?)?
	//    importSection=XImportSection?
	//    bsplProtocols+=Protocol*
	//;
	public ProtocolSpecificationElements getProtocolSpecificationAccess() {
		return pProtocolSpecification;
	}
	
	public ParserRule getProtocolSpecificationRule() {
		return getProtocolSpecificationAccess().getRule();
	}
	
	//Protocol returns BsplProtocol:
	//    {BsplProtocol}
	//    // Recognize the original syntax for BSPL
	//    modifiers+=ProtocolVisibilityModifier* 'protocol'? name=ValidID '{'
	//        ( 'role'? members+=ProtocolRole (',' members+=ProtocolRole)* )*
	//        ( members+=ProtocolFirstParameter ( ',' members+=ProtocolFollowingParameter )* )*
	//        ( members+=ProtocolMessage )*
	//        /*( members+=ProtocolCall )**/
	//    '}'
	//;
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	//ProtocolRole returns BsplProtocolRole:
	//    {BsplProtocolRole}
	//    name=ValidID ('[' (min=INT '..')? max=INT ']')?
	//;
	public ProtocolRoleElements getProtocolRoleAccess() {
		return pProtocolRole;
	}
	
	public ParserRule getProtocolRoleRule() {
		return getProtocolRoleAccess().getRule();
	}
	
	//ProtocolFirstParameter returns BsplProtocolParameter:
	//    {BsplProtocolParameter}
	//    (
	//        modifiers+='private' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
	//    ) | (
	//        modifiers+='public' 'parameter'? modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
	//    ) | (
	//        'parameter' modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
	//    )
	//;
	public ProtocolFirstParameterElements getProtocolFirstParameterAccess() {
		return pProtocolFirstParameter;
	}
	
	public ParserRule getProtocolFirstParameterRule() {
		return getProtocolFirstParameterAccess().getRule();
	}
	
	//ProtocolFollowingParameter returns BsplProtocolParameter:
	//    {BsplProtocolParameter}
	//    modifiers+=ParameterModifier* name=ValidID (':' type=JvmTypeReference)? modifiers+='key'?
	//;
	public ProtocolFollowingParameterElements getProtocolFollowingParameterAccess() {
		return pProtocolFollowingParameter;
	}
	
	public ParserRule getProtocolFollowingParameterRule() {
		return getProtocolFollowingParameterAccess().getRule();
	}
	
	//ProtocolMessage returns BsplProtocolMessage:
	//    {BsplProtocolMessage}
	//    from=ValidID
	//            '->' modifiers+=MessageTargetModifier* to=ValidID modifiers+=MessageTargetModifier*
	//            ':' message=ValidID
	//            ( '[' ( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?  ']' )?
	//;
	public ProtocolMessageElements getProtocolMessageAccess() {
		return pProtocolMessage;
	}
	
	public ParserRule getProtocolMessageRule() {
		return getProtocolMessageAccess().getRule();
	}
	
	///*ProtocolCall returns BsplProtocolProtocolCall:
	//    {BsplProtocolProtocolCall}
	//    target=JvmTypeReference '('
	//        ( roles+=ValidID (',' roles+=ValidID)* )? ('|' ( arguments+=ArgumentDef (',' arguments+=ArgumentDef)* )?)?
	//    ')'
	//;*/
	//ArgumentDef returns BsplProtocolArgument:
	//    {BsplProtocolArgument}
	//    modifiers+=ParameterModifier* name=ValidID modifiers+='key'?
	//;
	public ArgumentDefElements getArgumentDefAccess() {
		return pArgumentDef;
	}
	
	public ParserRule getArgumentDefRule() {
		return getArgumentDefAccess().getRule();
	}
	
	//ParameterModifier:
	//        'out' | 'in' | 'nil' | 'any' | 'opt'
	//;
	public ParameterModifierElements getParameterModifierAccess() {
		return pParameterModifier;
	}
	
	public ParserRule getParameterModifierRule() {
		return getParameterModifierAccess().getRule();
	}
	
	//MessageTargetModifier:
	//        'out' | 'in'
	//;
	public MessageTargetModifierElements getMessageTargetModifierAccess() {
		return pMessageTargetModifier;
	}
	
	public ParserRule getMessageTargetModifierRule() {
		return getMessageTargetModifierAccess().getRule();
	}
	
	//ProtocolVisibilityModifier:
	//        'public' | 'package'
	//;
	public ProtocolVisibilityModifierElements getProtocolVisibilityModifierAccess() {
		return pProtocolVisibilityModifier;
	}
	
	public ParserRule getProtocolVisibilityModifierRule() {
		return getProtocolVisibilityModifierAccess().getRule();
	}
	
	//XAnnotation :
	//    {XAnnotation}
	//    '@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('
	//        (
	//            elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)*
	//        |    value=XAnnotationElementValueOrCommaList
	//        )?
	//    ')')?
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair :
	//    =>(element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//      =>({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression )*)? ']'
	//    | XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression )+)?
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//XAnnotationElementValue returns xbase::XExpression :
	//      =>({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression )*)? ']'
	//    | XAnnotationOrExpression
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotationOrExpression returns xbase::XExpression:
	//    XAnnotation |
	//    XExpression
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
