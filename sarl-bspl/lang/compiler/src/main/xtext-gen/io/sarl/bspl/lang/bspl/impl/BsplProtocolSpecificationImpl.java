/**
 * $Id$
 * 
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.bspl.lang.bspl.impl;

import io.sarl.bspl.lang.bspl.BsplPackage;
import io.sarl.bspl.lang.bspl.BsplProtocol;
import io.sarl.bspl.lang.bspl.BsplProtocolSpecification;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.xtype.XImportSection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Protocol Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.sarl.bspl.lang.bspl.impl.BsplProtocolSpecificationImpl#getPackage <em>Package</em>}</li>
 *   <li>{@link io.sarl.bspl.lang.bspl.impl.BsplProtocolSpecificationImpl#getImportSection <em>Import Section</em>}</li>
 *   <li>{@link io.sarl.bspl.lang.bspl.impl.BsplProtocolSpecificationImpl#getBsplProtocols <em>Bspl Protocols</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BsplProtocolSpecificationImpl extends MinimalEObjectImpl.Container implements BsplProtocolSpecification
{
	/**
	 * The default value of the '{@link #getPackage() <em>Package</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPackage()
	 * @generated
	 * @ordered
	 */
	protected static final String PACKAGE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getPackage() <em>Package</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPackage()
	 * @generated
	 * @ordered
	 */
	protected String package_ = PACKAGE_EDEFAULT;

	/**
	 * The cached value of the '{@link #getImportSection() <em>Import Section</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getImportSection()
	 * @generated
	 * @ordered
	 */
	protected XImportSection importSection;

	/**
	 * The cached value of the '{@link #getBsplProtocols() <em>Bspl Protocols</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBsplProtocols()
	 * @generated
	 * @ordered
	 */
	protected EList<BsplProtocol> bsplProtocols;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BsplProtocolSpecificationImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return BsplPackage.Literals.BSPL_PROTOCOL_SPECIFICATION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getPackage()
	{
		return package_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPackage(String newPackage)
	{
		String oldPackage = package_;
		package_ = newPackage;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BsplPackage.BSPL_PROTOCOL_SPECIFICATION__PACKAGE, oldPackage, package_));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public XImportSection getImportSection()
	{
		return importSection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetImportSection(XImportSection newImportSection, NotificationChain msgs)
	{
		XImportSection oldImportSection = importSection;
		importSection = newImportSection;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION, oldImportSection, newImportSection);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setImportSection(XImportSection newImportSection)
	{
		if (newImportSection != importSection)
		{
			NotificationChain msgs = null;
			if (importSection != null)
				msgs = ((InternalEObject)importSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION, null, msgs);
			if (newImportSection != null)
				msgs = ((InternalEObject)newImportSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION, null, msgs);
			msgs = basicSetImportSection(newImportSection, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION, newImportSection, newImportSection));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<BsplProtocol> getBsplProtocols()
	{
		if (bsplProtocols == null)
		{
			bsplProtocols = new EObjectContainmentEList<BsplProtocol>(BsplProtocol.class, this, BsplPackage.BSPL_PROTOCOL_SPECIFICATION__BSPL_PROTOCOLS);
		}
		return bsplProtocols;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION:
				return basicSetImportSection(null, msgs);
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__BSPL_PROTOCOLS:
				return ((InternalEList<?>)getBsplProtocols()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__PACKAGE:
				return getPackage();
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION:
				return getImportSection();
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__BSPL_PROTOCOLS:
				return getBsplProtocols();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__PACKAGE:
				setPackage((String)newValue);
				return;
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION:
				setImportSection((XImportSection)newValue);
				return;
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__BSPL_PROTOCOLS:
				getBsplProtocols().clear();
				getBsplProtocols().addAll((Collection<? extends BsplProtocol>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__PACKAGE:
				setPackage(PACKAGE_EDEFAULT);
				return;
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION:
				setImportSection((XImportSection)null);
				return;
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__BSPL_PROTOCOLS:
				getBsplProtocols().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__PACKAGE:
				return PACKAGE_EDEFAULT == null ? package_ != null : !PACKAGE_EDEFAULT.equals(package_);
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__IMPORT_SECTION:
				return importSection != null;
			case BsplPackage.BSPL_PROTOCOL_SPECIFICATION__BSPL_PROTOCOLS:
				return bsplProtocols != null && !bsplProtocols.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString()
	{
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (package: ");
		result.append(package_);
		result.append(')');
		return result.toString();
	}

} //BsplProtocolSpecificationImpl
