/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.protocol.impl

import io.sarl.api.core.spaces.AbstractSpaceSpecification
import io.sarl.api.core.spaces.SpaceParticipantListener
import io.sarl.lang.core.SpaceID
import java.util.function.Supplier
import java.util.logging.Logger

import static io.sarl.lang.core.SRE.*

/**
 * Abstract implementation of a space specification that serves as a base
 * for the implementation of all the protocols.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
abstract class AbstractProtocolSpaceSpecification extends AbstractSpaceSpecification<ProtocolSpace> {

	/** Replies the list of the roles that are supported by the protocol. This function must be overriden by the subclasses that are implementing a specific protocol.
	 *
	 * @return a not-empty list of roles.
	 */	
	abstract def getRoles : ProtocolRole[] 

	/** Replies the name of the protocol that is supported by this space specification. This function must be overridden by the subclasses that are implementing a specific protocol.
	 *
	 * @return the protocol type.
	 */	
	abstract def getProtocolName : String 

	/** Create an instance of the protocol space.
	 *
	 * @param id the identifier of the space that should be created. It cannot be {@code null}.
	 * @param parameters list of arguments that may be passed for creating the protocol space. By default, none is needed.
	 */	
	def create(id : SpaceID, parameters : Object*) : ProtocolSpace {
		val logger = getLoggerProvider.apply(id)
		val listener = getSpaceParticipantListenerFactory.create(getDefaultSpace, logger)
		val ^space = id.createProtocolSpace(listener) [ logger ]
		getBootstrap.injectMembers(^space)
		listener.defaultSpace = ^space
		return ^space
	}

	/** Create an instance of the protocol space.
	 *
	 * @param id the identifier of the space that should be created. It cannot be {@code null}.
	 * @param listener the listener on the participant changes. It cannot be {@code null}.
	 * @param logger a supplier of logger for the space. It cannot be {@code null}.
	 * @return the space instance.
	 */	
	protected def createProtocolSpace(id : SpaceID, listener : SpaceParticipantListener, logger : Supplier<Logger>) : ProtocolSpace {
		new ProtocolSpace(getProtocolName, id, listener, logger, getRoles)
	}

}
