/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.protocol.impl

import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Skill

/**
 * Represents the role played by an agent in a BSPL protocol.
 *
 * <p>A role is associated to an name in the BSPL protocol. In the SARL
 * implementation, the role is associated to a specific agent capacity
 * and skill.
 *
 * <p>In the SARL implementation, a role is associated to cardinalities
 * that represent the minimum and maximum number of players for a specific
 * instance.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
interface ProtocolRole {

	/** Replies the type of the capacity that should be used by the agent to play this role
	 * in the protocol instance.
	 *
	 * @return the type of the capacity, never {@code null}.
	 */
	def getProtocolCapacity : Class<? extends ProtocolCapacity> {
		null
	}
	
	/** Replies the skill that should be used by the agent to play this role
	 * in the protocol instance represented by the given space.
	 *
	 * @param space the space that is supporting the protocol instance.
	 * @return the skill, never {@code null}.
	 */
	def getProtocolSkill(^space : ProtocolSpace) : Skill {
		null
	}

	/** Replies the behavior that should be used by the agent to run the
	 * dynamic behavior associated to the role in the protocol instance.
	 *
	 * <p>Usually, the behavior associated to the protocol instance defines
	 * the behavior units for supporting the protocol.
	 *
	 * @param agent the agent that must run the protocol behavior.
	 * @return the protocol's behavior, never {@code null}.
	 */
	def getProtocolBehavior(^agent : Agent) : Behavior {
		null
	}

	/** Register the given agent as a player of this role to the given protocol.
	 *
	 * @param protocolInstance the space that is supporting the protocol instance.
	 * @param agent the agent to register for the role.
	 */
	def registerRole(protocolInstance : ProtocolSpace, ^agent : EventListener) {
		protocolInstance.register(this, ^agent)
	}

	/** Unregister the given agent as a player of this role to the given protocol.
	 *
	 * @param protocolInstance the space that is supporting the protocol instance.
	 * @param agent the agent to unregister for the role.
	 */
	def unregisterRole(protocolInstance : ProtocolSpace, ^agent : EventListener) {
		protocolInstance.unregister(this, ^agent);
	}
	
	/** Replies the minimum number of players for this role in a protocol instance.
	 *
	 * @return the minimum number of role players. By default, it is {@code 1}.
	 */
	def getMinCardinality : int {
		1
	}
	
	/** Replies the maximum number of players for this role in a protocol instance.
	 *
	 * @return the maximum number of role players. By default, there is no limit.
	 */
	def getMaxCardinality : int {
		Integer.MAX_VALUE
	}

}
