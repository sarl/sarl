/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.protocol.impl

import io.sarl.api.core.spaces.OpenLocalEventSpace
import io.sarl.api.core.spaces.SpaceParticipantListener
import io.sarl.bspl.api.protocol.events.ProtocolFailed
import io.sarl.bspl.api.protocol.events.ProtocolReady
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.SpaceID
import java.util.List
import java.util.UUID
import java.util.function.Supplier
import java.util.logging.Logger
import java.util.stream.Stream
import org.eclipse.xtend.lib.annotations.Accessors
import java.util.Collections

/**
 * This space supports the interaction between agents in the context of a specific protocol.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
class ProtocolSpace extends OpenLocalEventSpace {

	/** Replies the players of the roles for the protocol instance.
	 *
	 * @return the role players that is a list of all the event listeners per protocol role.
	 *     Each event listener is associated to an agent that is playing the protocol role.
	 */
	@Accessors
	val rolePlayers = <ProtocolRole, List<EventListener>>newHashMap

	/** Replies the name of protocol that is implemented by this protocol space.
	 */
	@Accessors
	val protocolName : String

	/** Constructor.
	 *
	 * @param protocolName the name of the protocol that is supported by this protocol space.
	 * @param spaceId the identifier of the protocol space.
	 * @param participantListener listener on changes in the participants' list.
	 * @param loggerProvider the provider of a logger that is used by the protocol space for logging out mesages.
	 * @param roles list of the roles that are supported by the protocol, and consequently the protocol space.
	 */
	new(protocolName : String,
			spaceId : SpaceID, participantListener : SpaceParticipantListener,
			loggerProvider : Supplier<Logger>, roles : ProtocolRole*) {
		super(spaceId, participantListener, loggerProvider)
		this.protocolName = protocolName
		for (role : roles) {
			rolePlayers.put(role, newArrayList)
		}
	}

	/** Replies the list of the players of the given role in the protocol instance.
	 *
	 * @param role the role to search for.
	 * @return the list of identifiers of the players.
	 */
	synchronized def getRolePlayers(role : ProtocolRole) : Stream<UUID> {
		val res = this.rolePlayers.get(role)
		if (res === null) {
			return Collections.emptyList.stream
		}
		return res.stream.map [it.ID]
	}

	/** Register the given agent as a role player of the given role in the current protocol instance.
	 *
	 * @param role the role to register for.
	 * @param ^agent the event listener of the agent which will play the given role.
	 * @throws InvalidRolePlayerCardinalityException is thrown when the maximal number of role players is already reached.
	 */
	synchronized def register(role : ProtocolRole, ^agent : EventListener) {
		val currentPlayers = this.rolePlayers.computeIfAbsent(role) [ throw new UnexpectedRoleException(role) ]
		if (role.maxCardinality <= currentPlayers.size) {
			throw new InvalidRolePlayerCardinalityException(role.minCardinality, role.maxCardinality)
		}
		currentPlayers += ^agent
		registerStrongParticipant(^agent)
		emitIfReady
	}

	/** Unregister the given agent as a role player of the given role from the current protocol instance.
	 *
	 * @param role the role to unregister for.
	 * @param ^agent the event listener of the agent which is playing the given role.
	 * @throws UnexpectedRoleException is thrown when the given role is not played in the protocol instance.
	 */
	synchronized def unregister(role : ProtocolRole, ^agent : EventListener) {
		val currentPlayers = this.rolePlayers.computeIfAbsent(role) [ throw new UnexpectedRoleException(role) ]
		if (!currentPlayers.remove(^agent)) {
			throw new UnexpectedRolePlayerException
		}
		unregister(^agent)
		if (role.minCardinality > currentPlayers.size) {
			val identifier = spaceID.ID
			emit(identifier, new ProtocolFailed(identifier, getProtocolName))
		}
	}

	/** Emit the {@code ProtocolReady} event is the numbers of role players have
	 * reached the minimum numbers that are specified in each role.
	 */
	private def emitIfReady : void {
		for (role : rolePlayers.entrySet) {
			if (role.key.minCardinality > role.value.size) {
				// Not enough players for a role
				return
			}
		}
		val identifier = spaceID.ID
		emit(identifier, new ProtocolReady(identifier, getProtocolName))
	}

}
