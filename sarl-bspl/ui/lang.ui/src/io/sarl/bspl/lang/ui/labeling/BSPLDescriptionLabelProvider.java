/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.bspl.lang.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.xtext.common.types.JvmIdentifiableElement;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;
import org.eclipse.xtext.xbase.ui.labeling.XbaseDescriptionLabelProvider;
import org.eclipse.xtext.xbase.ui.labeling.XbaseImageAdornments;

import io.sarl.bspl.lang.bspl.BsplProtocol;
import io.sarl.bspl.lang.bspl.BsplProtocolMessage;
import io.sarl.bspl.lang.bspl.BsplProtocolParameter;
import io.sarl.bspl.lang.bspl.BsplProtocolRole;
import io.sarl.bspl.lang.bspl.BsplProtocolSpecification;

/**
 * Provides labels for a IEObjectDescriptions and IResourceDescriptions.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 * @see "http://www.eclipse.org/Xtext/documentation.html#labelProvider"
 */
@SuppressWarnings("restriction")
public class BSPLDescriptionLabelProvider extends XbaseDescriptionLabelProvider {

	@Inject
	private BSPLImages images;

	@Inject
	private IJvmModelAssociations jvmModelAssociations;

	@Inject
	private XbaseImageAdornments adornments;

	@Override
	public Object image(IEObjectDescription element) {
		return doGetImage(element.getEObjectOrProxy());
	}

	/** Replies the image for a BSPL specification.
	 *
	 * @param specification the BSPL specification.
	 * @return the image descriptor.
	 */
	public ImageDescriptor image(BsplProtocolSpecification specification) {
		return this.images.forFile();
	}

	/** Replies the image for a protocol.
	 *
	 * @param protocol describes the protocol.
	 * @return the image descriptor.
	 */
	public ImageDescriptor image(BsplProtocol protocol) {
		final var jvmElement = this.jvmModelAssociations.getPrimaryJvmElement(protocol);
		final var adornments = jvmElement instanceof JvmIdentifiableElement id ? this.adornments.get(id) : 0;
		return this.images.forProtocol(BSPLImages.toJvmVisibility(protocol), adornments);
	}

	/** Replies the image for a protocol role.
	 *
	 * @param role describes the protocol role.
	 * @return the image descriptor.
	 */
	public ImageDescriptor image(BsplProtocolRole role) {
		final var jvmElement = this.jvmModelAssociations.getPrimaryJvmElement(role);
		final var adornments = jvmElement instanceof JvmIdentifiableElement id ? this.adornments.get(id) : 0;
		return this.images.forRole(adornments);
	}

	/** Replies the image for a protocol parameter.
	 *
	 * @param role describes the protocol parameter.
	 * @return the image descriptor.
	 */
	public ImageDescriptor image(BsplProtocolParameter parameter) {
		final var jvmElement = this.jvmModelAssociations.getPrimaryJvmElement(parameter);
		final var adornments = jvmElement instanceof JvmIdentifiableElement id ? this.adornments.get(id) : 0;
		if (parameter.isKey()) {
			return this.images.forKeyParameter(BSPLImages.toJvmVisibility(parameter), adornments);
		}
		return this.images.forParameter(BSPLImages.toJvmVisibility(parameter), adornments);
	}

	/** Replies the image for a protocol message.
	 *
	 * @param message describes the protocol message.
	 * @return the image descriptor.
	 */
	public ImageDescriptor image(BsplProtocolMessage message) {
		final var jvmElement = this.jvmModelAssociations.getPrimaryJvmElement(message);
		final var adornments = jvmElement instanceof JvmIdentifiableElement id ? this.adornments.get(id) : 0;
		return this.images.forMessage(adornments);
	}

}
