/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.bspl.lang.ui.labeling;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.common.types.JvmIdentifiableElement;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;
import org.eclipse.xtext.xbase.ui.labeling.XbaseImageAdornments;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;

import io.sarl.bspl.lang.sarl_bspl.BsplProtocol;
import io.sarl.bspl.lang.sarl_bspl.BsplProtocolSpecification;

/**
 * Provides labels for a EObjects.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 * @see "https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider"
 */
@SuppressWarnings("restriction")
@Singleton
public class SARL_BSPLLabelProvider extends XbaseLabelProvider {

	@Inject
	private SARL_BSPLImages images;

	@Inject
	private IJvmModelAssociations jvmModelAssociations;

	@Inject
	private XbaseImageAdornments adornments;

	@Inject
	public SARL_BSPLLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	/** Replies the image for the given element.
	 *
	 * <p>This function is a Xtext dispatch function for {@link #imageDescriptor(Object)}.
	 *
	 * @param specification the element.
	 * @return the image descriptor.
	 * @see #imageDescriptor(Object)
	 */
	protected ImageDescriptor imageDescriptor(BsplProtocolSpecification specification) {
		return this.images.forFile();
	}

	/** Replies the image for the given element.
	 *
	 * <p>This function is a Xtext dispatch function for {@link #imageDescriptor(Object)}.
	 *
	 * @param element the element.
	 * @return the image descriptor.
	 * @see #imageDescriptor(Object)
	 */
	protected ImageDescriptor imageDescriptor(BsplProtocol element) {
		final var jvmElement = this.jvmModelAssociations.getPrimaryJvmElement(element);
		final JvmVisibility visibility;
		if (element.isPrivateVisibility()) {
			visibility = JvmVisibility.PRIVATE;
		} else if (element.isPackageVisibility()) {
			visibility = JvmVisibility.DEFAULT;
		} else if (element.isProtectedVisibility()) {
			visibility = JvmVisibility.PROTECTED;
		} else if (element.isPublicVisibility()) {
			visibility = JvmVisibility.PUBLIC;
		} else {
			visibility = element.getDefaultVisibility();
		}
		final var adornments = jvmElement instanceof JvmIdentifiableElement id ? this.adornments.get(id) : 0;
		return this.images.forProtocol(visibility, adornments);
	}

	/** Replies the text for the given element.
	 *
	 * @param element the element.
	 * @return the text.
	 */
	protected StyledString text(BsplProtocol element) {
		return convertToStyledString(element.getName());
	}

}
