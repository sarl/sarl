/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.services

import com.hazelcast.collection.ISet
import com.hazelcast.collection.ItemEvent
import com.hazelcast.collection.ItemListener
import com.hazelcast.core.HazelcastInstance
import com.hazelcast.topic.ITopic
import com.hazelcast.topic.Message
import com.hazelcast.topic.MessageListener
import io.sarl.api.naming.name.SpaceName
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.AbstractEventSpace
import io.sarl.sre.janus.spaces.EventTransportService
import java.io.Serializable
import java.text.MessageFormat
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.logging.Level
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Singleton
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Implementation of a MTS using Hazeclast topics to distribute messages over a network of SARL's SREs. 
 * For EventSpace, the Hazelcast topics' messages contains events
 * 
 * <p>Topics' naming conventions (based on io.sarl.api.naming): <ul>
 * <li>Context: io.sarl.topics.context.contextId</li>
 * <li>Space: io.sarl.topics.space.contextId.spaceId</li>
 * <li>Agent: io.sarl.topics.agent.contextId.spaceId.agentId</li>
 * <li>Skill: io.sarl.topics.skill.contextId.spaceId.agentId.capacityType</li>
 * <li>Behavior: io.sarl.topics.behavior.contextId.spaceId.agentId.behaviorType.behaviorIndex</li>
 * <li>Skill: io.sarl.topics.service.serviceType</li>
 * </ul>
 *
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @version janus.network 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
@Singleton
class HazelcastEventTransportService implements EventTransportService {

	/** 
	 * Local Hazelcast instance
	 */
	@Accessors(PUBLIC_GETTER)
	var hazelcastInstance : HazelcastInstance;

	/** 
	 * Distributed Set of all existing topics defined with the network of existing SARL SRE instances
	 */
	var availableTopicsName : ISet<String>

	/** 
	 * Map associating to each locally defined topic its corresponding listener ID
	 */
	var topicListenerIDs : ConcurrentHashMap<String, UUID>

	/** 
	 * ContextService used to check if the enclosing context exists when creating a new local space according to netwrok space creation event
	 */
	var contextService : ContextService

	/** 
	 * SRE Kernel logger
	 */
	var kernelLogger : Logger

	public static val HAZELCAST_SARL_TOPICS_NAME_SET = "io.sarl.topics.distributedset"

	public static val HAZELCAST_SARL_TOPICS_ROOTWILCARD = "io.sarl.topics."

	@Inject
	new(iHazelcastInstance : HazelcastInstance, icontextService : ContextService,
		logger : LoggingService) {
		contextService = icontextService
		hazelcastInstance = iHazelcastInstance

		kernelLogger = logger.getKernelModuleLogger(Messages::HazelcastEventTransportService_1)

		topicListenerIDs = new ConcurrentHashMap<String, UUID>();
		this.availableTopicsName = this.hazelcastInstance.getSet(HAZELCAST_SARL_TOPICS_NAME_SET);

		availableTopicsName.addItemListener(new TopicNameListener(this.kernelLogger,this.hazelcastInstance,this.topicListenerIDs,this.contextService), true)
		
		// Registering topic for the defaultSpace of defaultContext		
		var defaultSpaceRootContextTopicName : String = getTopicNameFromSpaceID(icontextService.rootContext.defaultSpace.spaceID)
		this.availableTopicsName.add(defaultSpaceRootContextTopicName)
		var defaultSpaceRootContextTopic : ITopic<TopicMessage> = this.hazelcastInstance.getReliableTopic(
			defaultSpaceRootContextTopicName); // useful to ensure initialization of the topic before sending message
		var listenerID = defaultSpaceRootContextTopic.addMessageListener(
			new TopicMessageListener(this.kernelLogger, defaultSpaceRootContextTopicName, contextService))
		topicListenerIDs.put(defaultSpaceRootContextTopicName, listenerID)
		
	}

	def routeEvent(^event : Event, ^space : EventSpace, scope : Scope<? super Address>) : boolean {
		// FIXME Extract topic name creation in a dedicated function
		var topicName : String = getTopicNameFromSpaceID(^space.spaceID)
		var spaceTopic : ITopic<TopicMessage> = this.hazelcastInstance.getReliableTopic(topicName);
		kernelLogger.log(Level::INFO, MessageFormat::format(Messages::HazelcastEventTransportService_0,
				^event.class, ^space.spaceID.ID, ^space.spaceID.contextID, topicName))
		spaceTopic.publish(new TopicMessage(^event, scope))
		true
	}

	static def getTopicNameFromSpaceID(spaceID : SpaceID) : String {
		(HAZELCAST_SARL_TOPICS_ROOTWILCARD + SpaceName.SCHEME + "." + spaceID.contextID + "." + spaceID.ID)		
	}

	/** Envelope for Hazelcast messages.
	 *
	 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
	 * @version janus.network 3.0.14.0 20241106-161408
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.network
	 * @since 0.12
	 */
	static class TopicMessage implements Serializable {

		@Accessors
		val transferredEvent : Event

		@Accessors
		val trasnferredScope : Scope<? super Address>

		new(e : Event, s : Scope<? super Address>) {
			transferredEvent = e
			trasnferredScope = s
		}

	}

	/** Listener on Hazelcast events.
	 *
	 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
	 * @version janus.network 3.0.14.0 20241106-161408
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.network
	 * @since 0.12
	 */
	protected static class TopicNameListener implements ItemListener<String> {

		/** 
		 * SRE Kernel logger
		 */
		var kernelLogger : Logger;

		/** 
		 * Local Hazelcast instance
		 */
		var hazelcastInstance : HazelcastInstance;

		/** 
		 * Map associating to each locally defined topic its corresponding listener ID
		 */
		var topicListenerIDs : ConcurrentHashMap<String, UUID>

		/** 
		 * ContextService used to check if the enclosing context exists when creating a new local space according to netwrok space creation event
		 */
		var contextService : ContextService

		new(logger : Logger, hzl : HazelcastInstance, itopicListenerIDs : ConcurrentHashMap<String, UUID>,
			icontextService : ContextService) {
			kernelLogger = logger
			hazelcastInstance = hzl
			topicListenerIDs = itopicListenerIDs
			contextService=icontextService
		}

		def itemAdded(newTopicName : ItemEvent<String>) {
			kernelLogger.log(Level::INFO, MessageFormat::format(Messages::TopicNameListener_0, newTopicName.item))

			if (!topicListenerIDs.containsKey(newTopicName.item)) {
				kernelLogger.log(Level::INFO, MessageFormat::format(Messages::TopicNameListener_1, newTopicName.item))
				var topic : ITopic<TopicMessage> = this.hazelcastInstance.getReliableTopic(newTopicName.item)
				var listenerID = topic.addMessageListener(new TopicMessageListener(this.kernelLogger,newTopicName.item,contextService))
				topicListenerIDs.put(newTopicName.item, listenerID)
			}
		}

		def itemRemoved(removedTopicName : ItemEvent<String>) {			
			kernelLogger.log(Level::INFO, MessageFormat::format(Messages::TopicNameListener_2, removedTopicName.item))
			var topic : ITopic<Event> = this.hazelcastInstance.getReliableTopic(removedTopicName.item)
			var existingListenerID = topicListenerIDs.get(removedTopicName.item)
			topic.removeMessageListener(existingListenerID)
			topicListenerIDs.remove(existingListenerID)

		}

	}

	/** Envelope for Hazelcast topic messages.
	 *
	 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
	 * @version janus.network 3.0.14.0 20241106-161408
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.network
	 * @since 0.12
	 */
	protected static class TopicMessageListener implements MessageListener<TopicMessage> {

		/** 
		 * SRE Kernel logger
		 */
		var kernelLogger : Logger;
		
		var listenTopicName : String

		/** 
		 * ContextService used to check if the enclosing context exists when creating a new local space according to netwrok space creation event
		 */
		var contextService : ContextService

		new(logger : Logger, topicName : String, icontextService : ContextService) {
			kernelLogger = logger;
			listenTopicName = topicName
			contextService = icontextService
		}

		def onMessage(incomingMessage : Message<TopicMessage>) {
			// Space: io.sarl.topics.space.contextId.spaceId
			var eventToDispatchLocally = incomingMessage.messageObject.transferredEvent
			var contextUIIDString = listenTopicName.substring(21, 57)
			var spaceUIIDString = listenTopicName.substring(58, 94)
			var contextUUID : UUID = UUID.fromString(contextUIIDString)
			var spaceUIID = UUID.fromString(spaceUIIDString)

			var context : Context = contextService.getContext(contextUUID)
			if (context !== null) {
				for (localSpace : context.spaces) {
					if (localSpace.spaceID.ID.equals(spaceUIID)) {
						kernelLogger.log(Level::INFO, MessageFormat::format(Messages::TopicMessageListener_0, 
							spaceUIID, contextUUID))
						(localSpace as AbstractEventSpace).emit(eventToDispatchLocally.source.ID,
							eventToDispatchLocally, incomingMessage.messageObject.trasnferredScope as Scope<Address>)
					}
				}
			} else {
				kernelLogger.log(Level::SEVERE, MessageFormat::format(Messages::TopicMessageListener_1, spaceUIID, contextUUID))
			}
		}

	}

}
