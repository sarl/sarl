
/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.boot.configs

import io.bootique.BQModuleMetadata;
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.config.ConfigurationFactory
import io.bootique.di.Binder;
import io.bootique.di.BQModule;
import io.bootique.di.Injector
import io.bootique.di.Provides
import io.bootique.meta.application.OptionMetadata
import io.sarl.sre.janus.boot.configs.SreConfig
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import java.util.UUID
import java.util.regex.Pattern
import javax.inject.Inject
import javax.inject.Singleton
import org.arakhne.afc.bootique.variables.VariableDecls
import org.arakhne.afc.bootique.variables.VariableNames
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.network.boot.configs.SreNetworkConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the networking features of the SRE. 
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.network 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
@BQConfig("Configuration for the SRE networking feature")
class SreNetworkConfig {

	/**
	 * Default name of the program.
	 */
	public static val DEFAULT_PROGRAM_NAME = "janusnode"

	/** 
	 * Prefix for the configuration entries of the modules.
	 */
	public static val PREFIX = "srenetwork"

	/** 
	 * Name of the property that enable or disable the networking features.
	 */
	public static val ENABLE_NAME = PREFIX + ".enable"; // $NON-NLS-1$

	/** 
	 * Default value for the enabling state of the networking feature outside
	 * the Eclipse environment.
	 */
	public static val DEFAULT_ENABLE_VALUE = false

	/** 
	 * Name of the property that contains the name of the Hazelcast cluster.
	 */
	public static val CLUSTER_NAME_NAME = PREFIX + ".clusterName"; // $NON-NLS-1$

	/** 
	 * Prefix for the default cluster name.
	 */
	public static val CLUSTER_NAME_PREFIX = "io.sarl.sre-hazelcast-"; // $NON-NLS-1$

	/** 
	 * Default value for the explicit cluster name.
	 */
	public static val DEFAULT_CLUSTER_NAME_VALUE = ""; // $NON-NLS-1$

	/** 
	 * Name of the property that indicates the method for cluster joins.
	 */
	public static val JOIN_METHOD_NAME = PREFIX + ".joinMethod"; // $NON-NLS-1$

	/**
	 * Name of the property that enable or disable the auto-increment of the port numbers.
	 */
	public static val PORT_AUTO_INCREMENT_NAME = PREFIX + ".portAutoIncrement"; // $NON-NLS-1$

	/** 
	 * Default flag for the auto-increment of the port numbers.
	 */
	public static val DEFAULT_PORT_AUTO_INCREMENT_VALUE = true

	/**
	 * Name of the property that contains the minimal number of hazelcast nodes before starting.
	 */
	public static val MIN_CLUSTER_SIZE_NAME = PREFIX + ".minClusterSize"; // $NON-NLS-1$

	/** 
	 * Default value for the minimal number of hazelcast nodes before starting.
	 */
	public static val DEFAULT_MIN_CLUSTER_SIZE_VALUE = 1

	public static val IP_LIST_CLUSTER = PREFIX + ".clusterMemberIPs"; // $NON-NLS-1$

	/** 
	 * Default value for the eArray of Cluster members IP addresses represented as Strings.
	 */
	public static val DEFAULT_IP_LIST_CLUSTER = "127.0.0.1"

	/**
	 * Name of the property that enable or disable the special configuration for
	 * a local instance of Hazelcast. If this property is evaluated to {@code true},
	 * it overrides all the other hazelcast configuration.
	 */
	public static val LOCAL_HAZELCAST_INSTANCE_NAME = PREFIX + ".localHazelcastInstance"; // $NON-NLS-1$

	/** 
	 * Default value of the property that enable or disable the special configuration for
	 * a local instance of Hazelcast. If this property is evaluated to {@code true},
	 * it overrides all the other hazelcast configuration.
	 */
	public static val DEFAULT_LOCAL_HAZELCAST_INSTANCE_VALUE = false

	/** 
	 * Regexp of a quarter of an IP adress
	 */
	static val ZERO_TO_255 : String = "([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])"
	
	/**
	 * Regexp of a full IP address
	 */
	static val IP_REGEXP : String = ZERO_TO_255 + "\\." + ZERO_TO_255 + "\\." + ZERO_TO_255 + "\\." + ZERO_TO_255	

	/**
	 * Regexp of IP list separator
	 */
	static val IP_SEPARATOR_REGEXP : String = "[^0-9\\.]+"	

	/**
	 * Default separator for IP list separator
	 */
	static val IP_SEPARATOR : String = ","	

	var enable : boolean = DEFAULT_ENABLE_VALUE

	var localHazelcastInstance : boolean = DEFAULT_LOCAL_HAZELCAST_INSTANCE_VALUE

	var clusterName : String

	var joinMethod : JoinMethod

	var memberList : String
	
	var memberListArray : String[]

	@Accessors(PUBLIC_GETTER)
	var portAutoIncrement : boolean = DEFAULT_PORT_AUTO_INCREMENT_VALUE

	@Accessors(PUBLIC_GETTER)
	var minClusterSize : int = DEFAULT_MIN_CLUSTER_SIZE_VALUE

	var generalConfiguration : SreConfig
	
	@Inject
	new (generalConfiguration : SreConfig) {
		this.generalConfiguration = generalConfiguration
	}

	/** Replies the flag that enable or disable the networking features.
	 * 
	 * @return the enabling state of the enabling state of the networking extension.
	 */
	def getEnable : boolean {
		// This function is not defined with the name "isEnable" because it is not compatible with
		// the Bootique API.
		this.enable
	}

	/** Change the flag that enable or disable the networking features.
	 * 
	 * @param enable the flag value.
	 */
	@BQConfigProperty("Enable or disable the networking features.")
	def setEnable(enable : boolean) {
		this.enable = enable
	}

	/** Replies the property that enable or disable the special configuration for
	 * a local instance of Hazelcast. If this property is evaluated to {@code true},
	 * it overrides all the other hazelcast configuration.
	 * 
	 * @return the enabling state for local Hazelcast instance.
	 */
	def getLocalHazelcastInstance : boolean {
		// This function is not defined with the name "isEnable" because it is not compatible with
		// the Bootique API.
		this.localHazelcastInstance
	}

	/** Change the property that enable or disable the special configuration for
	 * a local instance of Hazelcast. If this property is evaluated to {@code true},
	 * it overrides all the other hazelcast configuration.
	 * 
	 * @param enable the enabling state.
	 */
	@BQConfigProperty("Enable or disable the local Hazelcast instance.")
	def setLocalHazelcastInstance(enable : boolean) {
		this.localHazelcastInstance = enable
	}

	/** Replies a cluster name following the standard naming convention.
	 *
	 * @param rootContextId is the identifier of the root context of the SRE.
	 * @return the cluster name.
	 */
	static def createStandardClusterName(rootContextId : UUID) : String {
		rootContextId.toString.createStandardClusterName
	}

	/** Replies a cluster name following the standard naming convention.
	 *
	 * @param rootContextId is the identifier of the root context of the SRE.
	 * @return the cluster name.
	 */
	static def createStandardClusterName(rootContextId : String) : String {
		CLUSTER_NAME_PREFIX + rootContextId
	}
	
	/** Replies the name of the Hazelcast cluster name that is explicitly provided into the configuration.
	 * 
	 * @return the cluster name.
	 */
	def getClusterName : String {
		var explicitName = this.clusterName
		if (explicitName.isNullOrEmpty) {
			val id = this.generalConfiguration.boot.rootContextID
			explicitName = id.createStandardClusterName
			this.clusterName = explicitName
		}
		return explicitName
	}

	/** Replies the list of IP addresses of Hazelcast Cluster members as Strings.
	 * 
	 * @return the list of IP addresses of Hazelcast Cluster members.
	 * @see #setClusterMemberIPs(String)
	 * @see #setClusterMemberIPsArray(String[])
	 * @see #getClusterMemberIPsArray()
	 */
	def getClusterMemberIPs : String {
		if (this.memberList.isNullOrEmpty) {
			this.memberList = DEFAULT_IP_LIST_CLUSTER
		}
		return this.memberList
	}

	/** Replies the list of IP addresses of Hazelcast Cluster members as Strings.
	 * 
	 * @return the list of IP addresses of Hazelcast Cluster members.
	 * @see #getClusterMemberIPs()
	 * @see #setClusterMemberIPs(String)
	 * @see #setClusterMemberIPsArray(String[])
	 */
	def getClusterMemberIPsArray : String[] {
		if (this.memberListArray === null) {
			val list = newArrayList
			val pattern = Pattern.compile(IP_REGEXP)
			for (ip : getClusterMemberIPs.trim.split(IP_SEPARATOR_REGEXP)) {
				val matcher = pattern.matcher(ip)
				if (matcher.matches) {
					list += ip
				}
			}
			val tab = newArrayOfSize(list.size)
			list.toArray(tab)
			this.memberListArray = tab
		}
		return this.memberListArray
	}

	/** Set the list of IP addresses of Hazelcast Cluster members as Strings.
	 * 
	 * @param ips the list of IP addresses of Hazelcast Cluster members as Strings.
	 * @see #getClusterMemberIPs()
	 * @see #getClusterMemberIPsArray()
	 * @see #setClusterMemberIPsArray(String[])
	 */
	@BQConfigProperty("Specify the list of the IP adresses for the members that are allowed to be in the cluster. This configuration is used only if the join method is configured to TCP/IP.")
	def setClusterMemberIPs(ips : String) {
		this.memberList = ips;
		this.memberListArray = null
	}
	
	/** Set the list of IP addresses of Hazelcast Cluster members as Strings.
	 * 
	 * @param ips the list of IP addresses of Hazelcast Cluster members as Strings.
	 * @see #getClusterMemberIPs()
	 * @see #setClusterMemberIPs(String)
	 * @see #getClusterMemberIPsArray()
	 */
	def setClusterMemberIPsArray(ips : String*) {
		val buf = new StringBuilder
		val pattern = Pattern.compile(IP_REGEXP)
		val list = newArrayList
		for (ip : ips) {
			val matcher = pattern.matcher(ip)
			if (matcher.matches) {
				if (buf.length > 0) {
					buf.append(IP_SEPARATOR);
				}
				buf.append(ip)
				list += ip
			}
		}
		this.memberList = buf.toString
		val tab = newArrayOfSize(list.size)
		list.toArray(tab)
		this.memberListArray = tab
	}

	/** Validate the given string of character for being a list of IP addresses.
	 *
	 * @param ips is the list of IPs to check.
	 * @return {@code true} if the given {@code ips} is valid.
	 */
	static def validateClusterMemberIPsArray(ips : String) : boolean {
		val ipsArray = ips.trim.split(IP_SEPARATOR_REGEXP)
		val pattern = Pattern.compile(IP_REGEXP)
		for (ip : ipsArray) {
			val matcher = pattern.matcher(ip)
			if (!matcher.matches) {
				return false
			}
		}
		return true
	}

	/** Change the name of the Hazelcast cluster name.
	 * 
	 * @param name the new cluster name.
	 * @see #getClusterName()
	 */
	@BQConfigProperty("Name of the Hazelcast cluster. By default, this name is based on the identifier of the agent root context.")
	def setClusterName(name : String) {
		this.clusterName = name
	}

	/** 
	 * Replies the method for cluster joining.
	 * 
	 * @return the join method.
	 */
	def getJoinMethod() : JoinMethod {
		ensureJoinMethod
		return this.joinMethod
	}

	/** 
	 * Set the method for cluster joining.
	 * 
	 * @param type the type of join method.
	 */
	@BQConfigProperty("Specify the method for joining the Hazelcast cluster over the computer network")
	def setJoinMethod(type : JoinMethod) {
		this.joinMethod = type
		ensureJoinMethod
	}
	/** 
	 * Set the minimum number of nodes into the cluster before starting the SRE.
	 * 
	 * @param clusterSize the minimum number of nodes into the cluster.
	 */
	@BQConfigProperty("Specify the minimal number of nodes to wait for starting in the cluster before really launching the SARL Run-time Environment")
	def setMinClusterSize(clusterSize : int) {
		if (clusterSize < 1) {
			this.minClusterSize = 1
		} else {
			this.minClusterSize = clusterSize
		}
	}

	private def ensureJoinMethod : void {
		if (this.joinMethod === null) {
			this.joinMethod = JoinMethod::^default
		}
	}

	/** Change the flag that enable or disable the auto-increment of the port numbers.
	 * 
	 * @param enable the flag value.
	 */
	@BQConfigProperty("Enable or disable the auto-incrementation of the Hazelcast port numbers.")
	def setPortAutoIncrement(enable : boolean) {
		this.portAutoIncrement = enable
	}

	/** Replies the configuration for the networking features of the SRE.
	 * 
	 * @param configFactory the general configuration factory.
	 * @return the configuration.
	 */
	static def getConfiguration(configFactory : ConfigurationFactory) : SreNetworkConfig {
		assert configFactory !== null
		var config = configFactory.config(typeof(SreNetworkConfig), PREFIX)
		return config
	}

}

/** 
 * Module for creating and configuring the networking features of the SRE.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.network 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class SreNetworkConfigModule implements BQModule {

	public static val NETWORK_LONG_OPTION = "network"

	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(ENABLE_NAME)
		//
		val cpDescription = MessageFormat::format(Messages::SreNetworkConfigModule_1, DEFAULT_ENABLE_VALUE.toString,
				VariableNames::toEnvironmentVariableName(ENABLE_NAME))
		binder.extend.addOption(OptionMetadata::builder(NETWORK_LONG_OPTION, cpDescription)
				.valueRequired(Messages::SreNetworkConfigModule_0)
				.build)
				.mapConfigPath(NETWORK_LONG_OPTION, ENABLE_NAME)
		//
		VariableDecls::extend(binder).declareVar(LOCAL_HAZELCAST_INSTANCE_NAME)
	}

	/** Replies the instance of the network configuration.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @param injector the current injector.
	 * @return the configuration accessor.
	 */
	@Provides
	@Singleton
	def provideSreNetworkConfig(configFactory : ConfigurationFactory, injector : Injector) : SreNetworkConfig  {
		val config = getConfiguration(configFactory)
		injector.injectMembers(config)
		return config
	}

}

/** Provider of the module for creating and configuring the networking features of the SRE.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.network 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class SreNetworkConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new SreNetworkConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(SreNetworkConfig))
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::SreNetworkConfigModuleProvider_0);
	}

}
