/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.services

import com.hazelcast.collection.ISet
import com.hazelcast.core.EntryEvent
import com.hazelcast.core.EntryListener
import com.hazelcast.core.HazelcastInstance
import com.hazelcast.map.IMap
import com.hazelcast.map.MapEvent
import io.bootique.di.Injector
import io.sarl.api.naming.name.SpaceName
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.context.LocalSpaceRepository
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.SreSpaceSpecificationFactory
import java.text.MessageFormat
import java.util.UUID
import java.util.logging.Level
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Provider
import java.util.Map
import org.eclipse.xtend.lib.annotations.Accessors

/** Implementation of a space repository that is connected to remote SRE with Hazelcast framework.
 *
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version janus.network 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class HazelcastSpaceRepository extends LocalSpaceRepository {

	/** 
	 * Local Hazelcast instance
	 */
	@Accessors(PUBLIC_GETTER)
	var hazelcastInstance : HazelcastInstance;

	/** 
	 * The set of the id of all spaces stored in this repository This set must be
	 * distributed and synchronized all over the network.
	 */
	var spaceIDs : IMap<SpaceID, Object[]>

	/** 
	 * ContextService used to check if the enclosing context exists when creating a new local space according to netwrok space creation event
	 */
	var contextService : ContextService

	/** 
	 * ID of the listener defined on spaceIDs map
	 */
	var spaceIDsListernerID : UUID

	/** 
	 * Set of existing distributed topics (at least one per space)
	 */
	var availableTopicsName : ISet<String>

	public static val HAZELCAST_SPACE_ID_MAP_NAME = "io.sarl.network.distributedSpaceIDMapName"

	@Inject
	new(injector : Injector, executor : ExecutorService,
		loggingService : LoggingService, config : SreConfig,
		specificationFactory : SreSpaceSpecificationFactory,
		icontextService : ContextService,
		factories : Provider<Factories>,
		iHazelcastInstance : HazelcastInstance,
		internalStructure0 : Map<UUID, SpaceDescription> = null,
		internalStructure1 : IMap<SpaceID, Object[]> = null) {
		super(injector, executor, loggingService, config, specificationFactory, internalStructure0, factories)
		contextService = icontextService
		hazelcastInstance = iHazelcastInstance
		this.logger.log(Level::INFO, Messages::HazelcastSpaceRepository_0)
		availableTopicsName = this.hazelcastInstance.getSet(
			HazelcastEventTransportService.HAZELCAST_SARL_TOPICS_NAME_SET);
		spaceIDs = internalStructure1 ?: this.hazelcastInstance.getMap(HAZELCAST_SPACE_ID_MAP_NAME);

		var spaceIDsListerner = new EntryListener<SpaceID, Object[]>() {

			override entryAdded(^event : EntryEvent<SpaceID, Object[]>) {
				assert spaceIDs.containsKey(^event.getKey());
				ensureLocalSpaceDefinition(^event.getKey(), ^event.value);
			}

			override entryEvicted(^event : EntryEvent<SpaceID, Object[]>) {
				assert !spaceIDs.containsKey(^event.getKey());
				removeLocalSpaceDefinition(^event.getKey(), false);
			}

			override entryRemoved(^event : EntryEvent<SpaceID, Object[]>) {
				assert !spaceIDs.containsKey(^event.getKey());
				removeLocalSpaceDefinition(^event.getKey(), false);
			}

			override entryUpdated(^event : EntryEvent<SpaceID, Object[]>) {
				//
			}

			override mapCleared(^event : MapEvent) {
				removeLocalSpaceDefinitions
			}

			override mapEvicted(^event : MapEvent) {
			}

			override entryExpired(^event : EntryEvent<SpaceID, Object[]>) {
			}

		}
		spaceIDsListernerID = spaceIDs.addEntryListener(spaceIDsListerner, true)
		this.logger.log(Level::INFO, Messages::HazelcastSpaceRepository_1)
	}

	protected override createLogger(loggingService : LoggingService) : Logger {
		loggingService.getKernelModuleLogger(Messages::HazelcastSpaceRepository_5)
	}

	protected override createSpaceFirstInstance(spec : Class<? extends SpaceSpecification<S>>, spaceID : SpaceID,
		creationParams : Object[]) : S with S extends Space {

		// checking that the enclosing context of this new space already exists locally before creating the space
		var localContext = contextService.getContext(spaceID.contextID)
		if (localContext === null) {
			this.logger.log(Level::SEVERE, Messages::HazelcastSpaceRepository_2)
		}
		this.spaceIDs.putIfAbsent(spaceID, creationParams);
		// FIXME Extract topic name creation in a dedicated function
		var topicName : String = HazelcastEventTransportService.getTopicNameFromSpaceID(spaceID)
		this.logger.log(Level::INFO, MessageFormat::format(Messages::HazelcastSpaceRepository_3, spaceID, topicName))
		this.availableTopicsName.add(topicName)

		return super.createSpaceFirstInstance(spec, spaceID, creationParams);

	}

	/** 
	 * Add the existing, but not yet known, spaces into this repository.
	 * 
	 * @param id identifier of the space
	 * @param initializationParameters parameters for initialization.
	 */
	protected def ensureLocalSpaceDefinition(id : SpaceID, initializationParameters : Object[]) with S extends Space {
		if (!hasSpace(id.ID)) {
			var spec : Class<? extends SpaceSpecification<S>> = id.
				spaceSpecification as Class<? extends SpaceSpecification<S>>
			super.createSpace(id, spec, initializationParameters)
		}
	}

	protected def removeLocalSpaceDefinition(id : SpaceID, isLocalDestruction : boolean) {
		// FIXME Extract topic name creation in a dedicated function
		var topicName : String = HazelcastEventTransportService.HAZELCAST_SARL_TOPICS_ROOTWILCARD + SpaceName.SCHEME +
			"." + id.contextID + "." + id.ID
		this.logger.log(Level::INFO, MessageFormat::format(Messages::HazelcastSpaceRepository_4, topicName))
		this.availableTopicsName.remove(topicName)
		super.removeSpaceIfEmpty(id.ID)
	}

	/** 
	 * Remove all the local/remote spaces.
	 * 
	 */
	protected def removeLocalSpaceDefinitions {
		// FIXME update this.availableTopicsName to remove all empty spaces that are effectively empty all over the network
		removeEmptySpaces
	}

	protected override destroyThreadUnsafe {
		super.destroyThreadUnsafe
		// TODO check if it is really necessary to clean this distributed map of spaces, because it will impact other kernels staying active on the network
		this.spaceIDs.clear
		this.spaceIDs.removeEntryListener(this.spaceIDsListernerID);
	}

}
