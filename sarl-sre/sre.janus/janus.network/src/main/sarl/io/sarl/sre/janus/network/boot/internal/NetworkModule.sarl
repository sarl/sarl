/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.network.boot.internal

import com.hazelcast.config.Config
import com.hazelcast.core.Hazelcast
import com.hazelcast.core.HazelcastInstance
import com.hazelcast.logging.LogEvent
import com.hazelcast.logging.LogListener
import io.bootique.BQModuleMetadata;
import io.bootique.BQModuleProvider
import io.bootique.di.Binder;
import io.bootique.di.BQModule;
import io.bootique.di.Injector
import io.bootique.di.Provides
import io.sarl.apputils.bootiqueapp.config.LogConfig
import io.sarl.sre.janus.boot.internal.services.ContextServiceModule
import io.sarl.sre.janus.network.boot.configs.JoinMethod
import io.sarl.sre.janus.network.boot.configs.SreNetworkConfig
import io.sarl.sre.janus.network.services.HazelcastContextService
import io.sarl.sre.janus.network.services.HazelcastEventTransportService
import io.sarl.sre.janus.network.services.HazelcastSpaceRepository
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.context.LocalSpaceRepository
import io.sarl.sre.janus.services.context.MemoryBasedContextService
import io.sarl.sre.janus.services.context.SpaceRepository
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.EventTransportService
import io.sarl.sre.janus.spaces.LocalEventTransportService
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Arrays
import java.util.Collection
import java.util.Collections
import java.util.Map
import java.util.logging.Level
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Singleton

import static io.sarl.sre.janus.network.boot.configs.SreNetworkConfig.PREFIX

/** 
 * The module for injected the network features of Janus.
 * 
 * @author $Author: ngaud$
 * @version janus.network 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class NetworkModule implements BQModule {

	override configure(binder : Binder) {
		//
	}

	@Provides
	def provideSpaceRepository(injector : Injector, netConfig : SreNetworkConfig) : SpaceRepository {
		var instanceType : Class<? extends SpaceRepository>
		if (netConfig.enable) {
			instanceType = typeof(HazelcastSpaceRepository)
		} else {
			instanceType = typeof(LocalSpaceRepository)
		}
		return injector.getInstance(instanceType)
	}

	@Provides
	@Singleton
	def provideContextService(injector : Injector, netConfig : SreNetworkConfig) : ContextService {
		var instanceType : Class<? extends ContextService>
		if (netConfig.enable) {
			instanceType = typeof(HazelcastContextService)
		} else {
			instanceType = typeof(MemoryBasedContextService)
		}
		return injector.getInstance(instanceType)
	}

	@Provides
	@Singleton
	def provideEventTransportService(injector : Injector, netConfig : SreNetworkConfig) : EventTransportService {
		var instanceType : Class<? extends EventTransportService>
		if (netConfig.enable) {
			instanceType = typeof(HazelcastEventTransportService)
		} else {
			instanceType = typeof(LocalEventTransportService)
		}
		return injector.getInstance(instanceType)
	}

	@Provides
	@Singleton
	def provideHazelcastInstance(logger : LoggingService, netConfig : SreNetworkConfig, logConfig : LogConfig) : HazelcastInstance {
		//FIXME config a two hazelcast instances on the same node
		//FIXME config the log for hazelcast to trace error at startup		
		val config = new Config()
		val cname = netConfig.getClusterName
		config.clusterName = cname
		logger.kernelLogger.log(Level::FINE) [MessageFormat::format(Messages::NetworkModule_3, cname)]
		if (netConfig.localHazelcastInstance) {
			// Special instance configuration for local Hazelcast implementation (for tests for example).
			config.networkConfig.join.multicastConfig.enabled = false
		    config.networkConfig.join.tcpIpConfig.enabled = true
		    config.networkConfig.join.tcpIpConfig.members = #["127.0.0.1"]
		} else {
			val jmethod = netConfig.joinMethod
			logger.kernelLogger.log(Level::FINE) [MessageFormat::format(Messages::NetworkModule_4, jmethod)]
			if (jmethod === JoinMethod::MULTICAST) {
				config.networkConfig.join.multicastConfig.enabled = true
				config.networkConfig.join.tcpIpConfig.enabled = false
			} else {
				config.networkConfig.join.multicastConfig.enabled = false
				config.networkConfig.join.tcpIpConfig.enabled = true
				
				var iplist = netConfig.clusterMemberIPsArray
				
				if (iplist !== null) {
					logger.kernelLogger.log(Level::FINE) [MessageFormat::format(Messages::NetworkModule_5, Arrays::toString(iplist))]			
				}
				
				//Mandatory to have the following line if you want to be sure that two distinct hazelcast instances running in two distinct jvm on the same node/computer join the same cluster
				// config.networkConfig.join.tcpIpConfig.addMember("127.0.0.1")
				for (memberIp : iplist) {
					config.networkConfig.join.tcpIpConfig.addMember(memberIp)
				}
				
			}
			
			config.networkConfig.portAutoIncrement = netConfig.portAutoIncrement
			//The following line imposes that at least two hazelcast instance been laucnhed on the same cluster before doing anything
			val minNumber = netConfig.minClusterSize
			config.setProperty("hazelcast.initial.min.cluster.size", minNumber.toString);

			var otherNumber = minNumber - 1
			var startLogMsg : String
			if (otherNumber > 1) {
				startLogMsg = MessageFormat::format(Messages::NetworkModule_2, otherNumber.toString)
			} else if (otherNumber > 0) {
				startLogMsg = MessageFormat::format(Messages::NetworkModule_1, otherNumber.toString)
			} else {
				startLogMsg = Messages::NetworkModule_0
			}
			logger.kernelLogger.info(startLogMsg)
		}

		val hzlInstance = Hazelcast.newHazelcastInstance(config)

		hzlInstance.loggingService.addLogListener(logConfig.level.toJul, new HazelcastLogListener(logger))
		return hzlInstance
	}

}

/**
 * Log listener for Hazelcast.
 *
 * @author $Author: ngaud$
 * @version janus.network 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class HazelcastLogListener implements LogListener {

	/** 
	 * SRE Kernel logger
	 */
	var logger : Logger
	
	@Inject
	new(logger : LoggingService) {
		this.logger = logger.getKernelModuleLogger(Messages::HazelcastLogListener_1)
	}
	
	
	def log(logEvent : LogEvent) {		
		this.logger.log(logEvent.logRecord.level,
			MessageFormat::format(Messages::HazelcastLogListener_0, logEvent.member, logEvent.logRecord.message))
	}
	
}

/**
 * Bootique module provider for the network features of Janus.
 *
 * @author $Author: ngaud$
 * @version janus.network 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class NetworkModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new NetworkModule
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(Messages::NetworkModuleProvider_0)
	}
	
	override overrides : Collection<Class<? extends BQModule>> {
		#[typeof(ContextServiceModule)]
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(SreNetworkConfig))
	}

}
