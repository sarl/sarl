/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.tests.framework

import io.sarl.sre.test.framework.^extension.SreRunExtension
import java.net.URLClassLoader
import org.junit.jupiter.api.^extension.ExtensionContext
import org.junit.jupiter.api.^extension.ParameterContext

import static extension java.lang.Boolean.*

/** JUnit 5 extension that is running the SRE with Hazelcast.
 *
 * @author $Author: sgalland$
 * @version janus.network 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 * @since 0.12
 */
class HazelcastRunExtension extends SreRunExtension {

	override supportsParameter(parameterContext : ParameterContext, extensionContext : ExtensionContext) : boolean {
		if (parameterContext.index === 0) {
			if (parameterContext.parameter.type.name == typeof(HazelcastRunContext).name) {
				val prop = SKIP_PROPERTY.getBoolean
				return !prop
			}
			if (parameterContext.parameter.type.name == typeof(MultiHazelcastRunContext).name) {
				val prop = SKIP_PROPERTY.getBoolean
				return !prop
			}
		}
		return super.supportsParameter(parameterContext, extensionContext)
	}

	def createIsolatedClassLoader : ClassLoader {
		val scl = ClassLoader::systemClassLoader as URLClassLoader
		val classpath = scl.URLs
		return new URLClassLoader(classpath, ClassLoader::systemClassLoader.parent)
	}

	override resolveParameter(parameterContext : ParameterContext, extensionContext : ExtensionContext) : Object {
		val name = parameterContext.declaringExecutable.declaringClass.name + "#" + parameterContext.declaringExecutable.name
		if (parameterContext.parameter.type.name == typeof(HazelcastRunContext).name) {
			return HazelcastRunContextImpl::newInstance(name)
		}
		if (parameterContext.parameter.type.name == typeof(MultiHazelcastRunContext).name) {
			return new MultiHazelcastRunContextImpl(name)
		}
		return super.resolveParameter(parameterContext, extensionContext)
	}

}
