/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.tests.runtime

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.network.tests.framework.HazelcastRunExtension
import io.sarl.sre.janus.network.tests.framework.MultiHazelcastRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.assertNotNull

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.network 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(HazelcastRunExtension)
])
@DisplayName("run: Event Exchange")
@Tag("sre-run")
@Tag("janus")
class EventExchangeTest {

	@Test
	def test(rc : MultiHazelcastRunContext) : void {
		val rc0 = rc.firstHazelcastInstance
		assertNotNull(rc0)
		//rc0.commandLineArguments = #["-C"]
		//rc0.runCommandLineBehavior(Level::FINE, LogTrackingMode::STANDARD_LOGGER_BEHAVIOR)
		/*TODO: val kernel0 = rc0.setupTheSreKernel(null, LogTrackingMode::STANDARD_LOGGER_BEHAVIOR)
		val id0 = UUID::randomUUID
		rc0.waitForAgentSpawned(id0) [
			kernel0.startAgentWithID(typeof(ReceiverAgent), id0, rc0.agentInitializationParameters)
		]
		//
		val rc1 = rc.secondHazelcastInstance
		rc1.runSre(typeof(EmitterAgent), LogTrackingMode::STANDARD_LOGGER_BEHAVIOR)
		//
		rc0.waitForTheKernel(STANDARD_TIMEOUT)
		fail("to-do")*/
	}

}
