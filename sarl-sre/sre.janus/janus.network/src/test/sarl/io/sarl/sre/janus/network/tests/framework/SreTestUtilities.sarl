/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.tests.framework

import io.sarl.api.util.SequenceListenerNotifier
import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.core.util.DefaultConcurrentCollectionFactory
import io.sarl.sre.janus.internal.Factories
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock

import static extension org.mockito.Mockito.*

/** Various utilities for helping to set up the tests for the SRE.
 * These utilities are specific to the Janus framework.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
final class SreTestUtilities {

	/** Create an instance of factories. */
	static def newFactories : Factories {
		new Factories(
			[
				new DefaultConcurrentCollectionFactory
			],
			[
				val lock = typeof(ReadWriteLock).mock
				when(lock.writeLock).thenAnswer [typeof(Lock).mock]
				when(lock.readLock).thenAnswer [typeof(Lock).mock]
				return lock
			],
			[
				typeof(Lock).mock
			],
			[
				new SmartListenerCollection(new SequenceListenerNotifier).spy
			])
	}

}
