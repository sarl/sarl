/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.network.tests.services

import com.hazelcast.collection.ISet
import com.hazelcast.collection.ItemListener
import com.hazelcast.core.HazelcastInstance
import com.hazelcast.topic.ITopic
import com.hazelcast.topic.MessageListener
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.janus.network.services.HazelcastEventTransportService
import io.sarl.sre.janus.network.services.HazelcastEventTransportService.TopicMessage
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.tests.api.Nullable
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*
import static extension org.mockito.ArgumentCaptor.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.network 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.network
 */
@DisplayName("unit: HazelcastEventTransportService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@Tag("sre-network")
@SuppressWarnings("raw_type")
class HazelcastEventTransportServiceTest {

	@Nullable
	var ets : HazelcastEventTransportService
	
	@Nullable
	var hazelcast : HazelcastInstance

	@Nullable
	var context : ContextService

	@Nullable
	var logging : LoggingService

	@Nullable
	var internalSet : ISet
	
	@Nullable
	var internalTopic : ITopic

	@Nullable
	var expectedTopicName : String

	@Nullable
	var spaceId : SpaceID

	@BeforeEach
	def setUp : void {
		val cid = UUID::randomUUID
		val sid = UUID::randomUUID
		this.spaceId = new SpaceID(cid, sid, typeof(OpenEventSpaceSpecification))
		//
		this.expectedTopicName = "io.sarl.topics.space." + cid + "." + sid
		//
		this.internalSet = typeof(ISet).mock
		//
		this.internalTopic = typeof(ITopic).mock
		when(this.internalTopic.addMessageListener(any)).thenAnswer [UUID::randomUUID]
		//
		this.hazelcast = typeof(HazelcastInstance).mock
		when(this.hazelcast.getSet(anyString)).thenReturn(this.internalSet)
		when(this.hazelcast.getReliableTopic(this.expectedTopicName)).thenReturn(this.internalTopic)
		//
		val rootSpace = typeof(OpenEventSpace).mock
		when(rootSpace.spaceID).thenReturn(spaceId)
		val rootContext = typeof(Context).mock
		when(rootContext.defaultSpace).thenReturn(rootSpace)
		this.context = typeof(ContextService).mock
		when(this.context.rootContext).thenReturn(rootContext)
		//
		val logger = typeof(Logger).mock
		this.logging = typeof(LoggingService).mock
		when(this.logging.getKernelModuleLogger(anyString)).thenReturn(logger)
		//
		this.ets = new HazelcastEventTransportService(
			this.hazelcast,
			this.context,
			this.logging).spy
	}

	@Test
	@DisplayName("initialization of the service")
	def initialization : void {
		val listener = typeof(ItemListener).forClass
		verify(this.internalSet).addItemListener(listener.capture, eq(true))
		listener.value.assertNotNull
		//
		val name = typeof(String).forClass
		verify(this.internalSet).add(name.capture)
		this.expectedTopicName.assertEquals(name.value)
		//
		val listener1 = typeof(MessageListener).forClass
		verify(this.internalTopic).addMessageListener(listener1.capture)
		listener1.value.assertNotNull
	}

	@Test
	@DisplayName("getTopicNameFromSpaceID")
	def getTopicNameFromSpaceID : void {
		this.expectedTopicName.assertEquals(HazelcastEventTransportService::getTopicNameFromSpaceID(this.spaceId))
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("routeEvent")
	def routeEvent : void {
		val ^event = typeof(Event).mock
		val ^space = typeof(EventSpace).mock
		when(^space.spaceID).thenReturn(this.spaceId.clone)
		val scope = typeof(Scope).mock
		//
		val result = this.ets.routeEvent(^event, ^space, scope)
		//
		result.assertTrue
		//
		val capmsg = typeof(Object).forClass
		verify(this.internalTopic).publish(capmsg.capture)
		val v = capmsg.value
		v.assertNotNull
		typeof(TopicMessage).assertInstanceOf(v)
		val tm = v as TopicMessage
		^event.assertSame(tm.transferredEvent)
		scope.assertSame(tm.trasnferredScope)
	}	

}
