/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug973

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1000.bug973.mocks.AgentBug973
import io.sarl.sre.janus.itests.bugs.to1000.bug973.mocks.AgentBug973b
import io.sarl.sre.janus.itests.bugs.to1000.bug973.mocks.AgentBug973c
import io.sarl.sre.janus.itests.bugs.to1000.bug973.mocks.SkillBug973
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*

/** Tests for issue #973: Skill uninstall is invoked too much times.
 *
 * <p>See: https://github.com/sarl/sarl/issues/973
 *
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/973"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #973")
@Tag("sre-run")
@Tag("janus")
class Bug973IT {

	@Test
	def killInParallelTask(extension rc : SreRunContext) : void {
		typeof(AgentBug973).runSre
		var ^skill = typeof(SkillBug973).getResult(0)
		^skill.assertNotNull
		1.assertEquals(^skill.countBefore.get)
		1.assertEquals(^skill.countAfter.get)
	}

	@Test
	def killAtTheEndOfInitialization(extension rc : SreRunContext) : void {
		typeof(AgentBug973b).runSre
		var ^skill = typeof(SkillBug973).getResult(0)
		^skill.assertNotNull
		1.assertEquals(^skill.countBefore.get)
		1.assertEquals(^skill.countAfter.get)
	}

	@Test
	def killDuringInitialization(extension rc : SreRunContext) : void {
		typeof(AgentBug973c).runSre

		// Since the agent is died into the "on Initialize" the bootAgent ID is unknown
		var all = allResultsPerAgent
		all.assertNotNull
		1.assertEquals(all.size)

		var list = all.values.get(0)
		list.assertNotNull
		1.assertEquals(list.size)

		var skill0 = list.get(0)
		skill0.assertNotNull
		typeof(SkillBug973).assertInstanceOf(skill0)

		var skill1 = skill0 as SkillBug973
		1.assertEquals(skill1.countBefore.get)
		1.assertEquals(skill1.countAfter.get)
	}

}
