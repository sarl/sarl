/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1000.bug794.mocks

import io.sarl.api.core.AgentKilled
import io.sarl.api.core.AgentSpawned
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see https://github.com/sarl/sarl/issues/794
 */
abstract agent AbstractSpawnerAgent {

	uses Lifecycle, InnerContextAccess

	abstract def getAgentsToSpawn : int

	uses TestingCapacity

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		spawnChildren
	}

	private def spawnChildren {
		spawnInContext(getAgentsToSpawn,
			typeof(SpawnerAgent),
			getInnerContext,
			buildAgentInitializationParameters)
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AgentSpawned [occurrence.source.ID == ID] {
		addResult(occurrence.agentID)		
	}

	on AgentKilled {
		val children = getMemberAgentCount
		if (children <= 1) {
			killMe
		}
	}

}