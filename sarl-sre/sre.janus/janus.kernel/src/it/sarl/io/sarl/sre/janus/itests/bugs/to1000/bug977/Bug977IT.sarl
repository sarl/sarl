/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug977

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1000.bug977.mocks.HelloChildAgent
import io.sarl.sre.janus.itests.bugs.to1000.bug977.mocks.SharedGuardEvaluationAgent0
import io.sarl.sre.janus.itests.bugs.to1000.bug977.mocks.SharedGuardEvaluationAgent1
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.events.Bye
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.tests.api.tools.TestAssertions.*

/** Tests for issue #977: Problem with multiple initialize event in Behavior inheritance demos.
 *
 * <p>See: https://github.com/sarl/sarl/issues/977
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/977"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #977")
@Tag("sre-run")
@Tag("janus")
class Bug977IT {

	@RepeatedTest(10)
	@DisplayName("Inheritance of event handlers and functions")
	def runInheritanceBehaviorExampleCode(extension rc : SreRunContext) : void {
		var kern = setupTheSreKernel(null, null)

		val id0 = UUID::randomUUID
		waitForAgentSpawned(id0) [
			kern.startAgentWithID(typeof(HelloChildAgent), id0, buildAgentInitializationParameters(1, null))
		]

		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)

		waitForTheKernel(STANDARD_TIMEOUT)

		val all = getResults(id0)

		all.assertContains(
			// Execute: on Initialize
			"1", "2", "3", "4", "5",
			// Execute: on Destroy (two executions, one in super type, one in child type)
			"6", "6"
		)
	}

	@RepeatedTest(10)
	@DisplayName("Shared guard evaluation without value change")
	def runSharedGuardEvaluationWithoutValueChange(extension rc : SreRunContext) : void {
		var kern = setupTheSreKernel(null, null)

		val id0 = UUID::randomUUID
		waitForAgentSpawned(id0) [
			kern.startAgentWithID(typeof(SharedGuardEvaluationAgent0), id0, agentInitializationParameters)
		]

		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)

		waitForTheKernel(STANDARD_TIMEOUT)

		val all = getResults(bootAgentId)

		all.assertContains("a", "c", "d", "f")
	}

	@RepeatedTest(10)
	@DisplayName("Shared guard evaluation with value change")
	def runSharedGuardEvaluationWithValueChange(extension rc : SreRunContext) : void {
		var kern = setupTheSreKernel(null, null)

		val id0 = UUID::randomUUID
		waitForAgentSpawned(id0) [
			kern.startAgentWithID(typeof(SharedGuardEvaluationAgent1), id0, agentInitializationParameters)
		]

		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)

		waitForTheKernel(STANDARD_TIMEOUT)

		val all = getResults(bootAgentId)

		all.assertContains("a", "c", "d", "f")
	}

}
