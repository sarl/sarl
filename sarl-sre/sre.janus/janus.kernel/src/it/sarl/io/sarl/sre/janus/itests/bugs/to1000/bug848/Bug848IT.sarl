/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1000.bug848

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1000.bug848.mocks.TAgent1a
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.exception.SreTimeoutException
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.arakhne.afc.util.Triplet
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*
import static org.junit.jupiter.api.Assertions.*

import static extension io.sarl.tests.api.tools.TestAssertions.*

/** Tests for issue #848: Event AgentSpawned being received by spawned agent.
 *
 * <p>See: https://github.com/sarl/sarl/issues/848
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see "https://github.com/sarl/sarl/issues/848"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #848")
@Tag("sre-run")
@Tag("janus")
class Bug848IT {

	@Test
	def agentSpawnedReceiving_01(extension rc : SreRunContext) {
		// The MAS may never stops because TAgent1b calls "killMe" if it receives "AgentSpawned". But it should never occur.
		typeof(SreTimeoutException).whenException [
			typeof(TAgent1a).runSre(SHORT_TIMEOUT)
		].verify [
			var bootAgent = bootAgentId
			assertEquals(1, getNumberOfResults(bootAgent))
			var spawnEvents1 : Triplet<Boolean, UUID, UUID> = getResult(bootAgent, typeof(Triplet), 0)
			assertNotNull(spawnEvents1)
			assertTrue(spawnEvents1.a.booleanValue)
			assertEquals(bootAgent, spawnEvents1.b)

			var childAgent = spawnEvents1.c
			assertEquals(0, getNumberOfResults(childAgent))
		]
	}

}
