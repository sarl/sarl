/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.boot.boot

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import io.sarl.sre.janus.boot.configs.subconfigs.RootContextType
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*
import io.sarl.sre.janus.itests.boot.boot.mocks.BootAgent0
import io.sarl.sre.janus.itests.boot.boot.mocks.BootAgent1

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Boot test")
@Tag("sre-run")
@Tag("janus")
class BootIT {

	@Nullable
	var defaultID : UUID

	@Nullable
	var bootID0 : UUID

	@Nullable
	var bootID1 : UUID
	
	@BeforeEach
	def setUp : void {
		this.defaultID = UUID::fromString(BootConfig::ROOT_CONTEXT_ID_VALUE)
		this.bootID0 = UUID::nameUUIDFromBytes(typeof(BootAgent0).name.bytes)
		this.bootID1 = UUID::nameUUIDFromBytes(typeof(BootAgent1).name.bytes)
	}

	@Test
	def bootAgentId_killInOnInitialize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::DEFAULT.name)
		typeof(BootAgent0).runSre
		assertNotNull(bootOrFirstAgentId)
	}

	@Test
	def bootAgentId_killAfterOnInitialize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::DEFAULT.name)
		typeof(BootAgent1).runSre
		assertNotNull(bootAgentId)
	}
	
	@Test
	def defaultContextUUID_killInOnInitalize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::DEFAULT.name)
		typeof(BootAgent0).runSre
		var id = getResult(bootOrFirstAgentId, typeof(UUID), 0)
		assertEquals(UUID::fromString(BootConfig::ROOT_CONTEXT_ID_VALUE), id)
	}

	@Test
	def defaultContextUUID_killAfterOnInitalize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::DEFAULT.name)
		typeof(BootAgent1).runSre
		var id = getResult(typeof(UUID), 0)
		assertEquals(defaultID, id)
		assertNotEquals(bootID0, id)
		assertNotEquals(bootID1, id)
	}

	@Test
	def bootContextUUID_killInOnInitialize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::BOOT_AGENT_NAME.name)
		System::setProperty(VariableNames::toPropertyName(BootConfig::BOOT_AGENT_NAME), typeof(BootAgent0).name)
		typeof(BootAgent0).runSre
		var id = getResult(bootOrFirstAgentId, typeof(UUID), 0)
		var expected = UUID::nameUUIDFromBytes(typeof(BootAgent0).name.bytes)
		assertEquals(expected, id)
	}

	@Test
	def bootContextUUID_killAfterOnInitialize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::BOOT_AGENT_NAME.name)
		System::setProperty(VariableNames::toPropertyName(BootConfig::BOOT_AGENT_NAME), typeof(BootAgent1).name)
		typeof(BootAgent1).runSre
		var id = getResult(typeof(UUID), 0)
		assertNotEquals(defaultID, id)
		assertNotEquals(bootID0, id)
		assertEquals(bootID1, id)
	}

	
	@Test
	def randomContextUUID_killInOnInitialize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::RANDOM.name)
		typeof(BootAgent0).runSre
		var id = getResult(bootOrFirstAgentId, typeof(UUID), 0)
		assertNotNull(id)
	}

	@Test
	def randomContextUUID_killAfterOnInitialize(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::RANDOM.name)
		typeof(BootAgent1).runSre
		var id = getResult(typeof(UUID), 0)
		assertNotEquals(defaultID, id)
		assertNotEquals(bootID0, id)
		assertNotEquals(bootID1, id)
	}

}
