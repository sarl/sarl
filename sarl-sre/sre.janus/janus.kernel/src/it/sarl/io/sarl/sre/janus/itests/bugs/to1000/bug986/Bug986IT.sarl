/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug986

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1000.bug986.mock.Bug986A
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.List
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*

import static extension io.sarl.tests.api.tools.TestAssertions.*

/** Tests for issue #986: AgentSpawned of the creating agent is received by the created agent.
 *
 * <p>See: https://github.com/sarl/sarl/issues/986
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/986"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #986")
@Tag("sre-run")
@Tag("janus")
class Bug986IT {

	@SuppressWarnings("potential_inefficient_value_conversion")
	def extractIdFromResults(results : List<Object>, prefix : String) : UUID {
		for (res : results) {
			val s = res.toString
			if (s.startsWith(prefix)) {
				val v = s.substring(prefix.length) as UUID
				if (v !== null) {
					return v
				}
				fail("Illegal UUID value for prefix: " + prefix)
			}
		}
		fail("Cannot find the value for prefix: " + prefix)
	}

	@RepeatedTest(10)
	@DisplayName("test")
	def run(extension rc : SreRunContext) : void {
		typeof(Bug986A).runSre
		
		val id1 = results.extractIdFromResults("ID1 = ")
		val id2 = results.extractIdFromResults("ID2 = ")

		var res2 = getResults(id2)
		
		results.assertContainsCollection(#[
			"ID1 = " + id1,
			"ID2 = " + id2,
			"B (" + id2 + ") is spawn from A"
		]) [ "ID1="+id1+"\nID2="+id2 ]

		if (!res2.isNullOrEmpty) {
			res2.assertContainsCollection(#[
				"B (" + id1 + ") is spawn from B"
			]) [ "ID1="+id1+"\nID2="+id2 ]
		}
	}

}
