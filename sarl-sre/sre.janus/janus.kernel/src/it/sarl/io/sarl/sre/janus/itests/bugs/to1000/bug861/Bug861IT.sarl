/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug861

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1000.bug861.mocks.BootAgent0
import io.sarl.sre.janus.itests.bugs.to1000.bug861.mocks.BootAgent1
import io.sarl.sre.janus.itests.bugs.to1000.bug861.mocks.EmptyAgent0
import io.sarl.sre.janus.itests.bugs.to1000.bug861.mocks.Initialized
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.events.Bye
import io.sarl.sre.test.framework.exception.SreTimeoutException
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/** Tests for issue #861: Cannot use emit function in the Initialize handler.
 *
 * <p>See: https://github.com/sarl/sarl/issues/861
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see "https://github.com/sarl/sarl/issues/861"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #861")
@Tag("sre-run")
@Tag("janus")
class Bug861IT {

	@Test
	@DisplayName("Emit without scope")
	def runWithoutScope(extension rc : SreRunContext) : void {
		var kern = setupTheSreKernel(null, null)

		val id0 = UUID::randomUUID
		waitForAgentSpawned(id0) [
			kern.startAgentWithID(typeof(BootAgent0), id0, agentInitializationParameters)
		]

		val id1 = UUID::randomUUID
		waitForAgentSpawned(id1) [
			kern.startAgentWithID(typeof(EmptyAgent0), id1, agentInitializationParameters)
		]
	
		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)
		
		waitForTheKernel(STANDARD_TIMEOUT)
		
		assertEquals(2, getNumberOfResults(id0))

		val childAgent = getFirstResultOfType(id0, typeof(UUID))
		childAgent.assertNotNull
		id1.assertEquals(childAgent)

		val initEvent0 = getFirstResultOfType(id0, typeof(Initialized))
		initEvent0.assertNotNull
		childAgent.assertEquals(initEvent0.source.ID)
	}

	@Test
	@DisplayName("Emit with scope")
	def runWithScope(extension rc : SreRunContext) : void {
		typeof(SreTimeoutException).whenException [
			typeof(BootAgent1).runSre(VERY_SHORT_TIMEOUT)
		].verify [
			assertEquals(2, getNumberOfResults(bootAgentId))

			val childAgent = getFirstResultOfType(bootAgentId, typeof(UUID))
			childAgent.assertNotNull

			val initEvent0 = getFirstResultOfType(bootAgentId, typeof(Initialized))
			initEvent0.assertNotNull
			childAgent.assertEquals(initEvent0.source.ID)

			assertEquals(0, getNumberOfResults(childAgent))
		]
	}

}
