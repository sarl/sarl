/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal

import io.sarl.api.core.ParticipantJoined
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.lang.core.SpaceID
import io.sarl.sre.janus.itests.internal.mocks.JoinerAgent0
import io.sarl.sre.janus.itests.internal.mocks.JoinerAgent2
import io.sarl.sre.janus.itests.internal.mocks.SpyAgent0
import io.sarl.sre.janus.itests.internal.mocks.SpyAgent2
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: on ParticipantJoined test")
@Tag("sre-run")
@Tag("janus")
class OnParticipantJoinedIT {

	@Test
	@DisplayName("ParticipantJoined in default space")
	@SuppressWarnings("discouraged_reference")
	def runParticipantJoinedInDefaultSpace(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)

		val id1 = UUID::randomUUID
		val id2 = UUID::randomUUID

		var w1 = waitForAgentSpawned(id1)

		kern.startAgentWithID(typeof(SpyAgent0), id1, agentInitializationParameters)

		w1.doWait

		kern.startAgentWithID(typeof(JoinerAgent0), id2, agentInitializationParameters)

		waitForTheKernel(STANDARD_TIMEOUT)
		
		var evt = getResult(id1, typeof(ParticipantJoined), 0)
		evt.assertNotNull

		var spcid = getResult(id1, typeof(SpaceID), 1)
		spcid.assertNotNull

		id2.assertEquals(evt.source.ID)
		spcid.assertEquals(evt.spaceID)
	}

	@Test
	@DisplayName("ParticipantJoined in other space")
	@SuppressWarnings("discouraged_reference")
	def runParticipantJoinedInOtherSpace(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)

		val id1 = UUID::randomUUID
		val id2 = UUID::randomUUID

		var w1 = waitForAgentSpawned(id1)

		kern.startAgentWithID(typeof(SpyAgent2), id1, agentInitializationParameters)

		w1.doWait

		kern.startAgentWithID(typeof(JoinerAgent2), id2, agentInitializationParameters)

		waitForTheKernel(STANDARD_TIMEOUT)

		var evt = getResult(id1, typeof(ParticipantJoined), 0)
		evt.assertNotNull

		var spcid0 = getResult(id1, typeof(SpaceID), 1)
		spcid0.assertNotNull

		var spcid1 = getResult(id2, typeof(SpaceID), 0)
		spcid1.assertNotNull

		spcid0.assertNotEquals(spcid1)

		id2.assertEquals(evt.source.ID)
		spcid1.assertEquals(evt.spaceID)
	}

}
