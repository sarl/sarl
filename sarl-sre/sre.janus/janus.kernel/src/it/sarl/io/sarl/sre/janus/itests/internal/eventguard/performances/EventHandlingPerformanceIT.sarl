/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal.eventguard.performances

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.lang.core.Agent
import io.sarl.sre.janus.boot.configs.subconfigs.EventBusType
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.itests.internal.eventguard.performances.mocks.Agent0
import io.sarl.sre.janus.itests.internal.eventguard.performances.mocks.Agent1
import io.sarl.sre.janus.itests.internal.eventguard.performances.mocks.Agent2
import io.sarl.sre.janus.itests.internal.eventguard.performances.mocks.Agent3
import io.sarl.sre.janus.itests.internal.eventguard.performances.mocks.Agent4
import io.sarl.sre.janus.itests.internal.eventguard.performances.mocks.Agent5
import io.sarl.sre.test.framework.Constants
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.exception.SreTimeoutException
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.io.StringWriter
import java.util.Collection
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.TimeoutException
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.params.shadow.com.univocity.parsers.csv.CsvWriter
import org.junit.jupiter.params.shadow.com.univocity.parsers.csv.CsvWriterSettings

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: measure performances of event handling methods")
@Tag("sre-run")
@Tag("janus")
@Disabled
@SuppressWarnings("all")
class EventHandlingPerformanceIT {

	private static def stats(writer : CsvWriter, dataList : Collection<Double>, method : String, context : String, nbHandlers : int, nbEvents : int) {
		var sum = 0.0
		for (data : dataList) {
			sum += data
		}
		val average = sum / dataList.size
		val sqAverage = average * average
		sum = 0.0
		for (data : dataList) {
			sum += (data * data) - sqAverage
		}
		val variance = sum / dataList.size
		val deviation = Math::sqrt(variance)
		writer.writeRow(
			method,
			context,
			nbEvents,
			nbHandlers,
			average,
			variance,
			deviation
		)
		writer.flush
	}

	static val reflectWakeData2 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val polymorphicWakeData2 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val reflectEmitData2 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val polymorphicEmitData2 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>

	static val reflectWakeData21 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val polymorphicWakeData21 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val reflectEmitData21 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val polymorphicEmitData21 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>

	static val reflectWakeData41 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val polymorphicWakeData41 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val reflectEmitData41 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>
	static val polymorphicEmitData41 = new ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>

	@AfterAll
	static def shutdownTests : void {
		val output = new StringWriter
		val writer = new CsvWriter(output, new CsvWriterSettings)
		try {
			writer.writeHeaders("Method", "Context", "Events", "# Handlers", "Average (ms)", "Var. (ms)", "Deviation (ms)")

			for (entry : reflectWakeData2.entrySet) {
				writer.stats(entry.value, "reflect", "wake", 2, entry.key)
			}
			for (entry : polymorphicWakeData2.entrySet) {
				writer.stats(entry.value, "polymorphic", "wake", 2, entry.key)
			}
			for (entry : reflectEmitData2.entrySet) {
				writer.stats(entry.value, "reflect", "emit", 2, entry.key)
			}
			for (entry : polymorphicEmitData2.entrySet) {
				writer.stats(entry.value, "polymorphic", "emit", 2, entry.key)
			}

			for (entry : reflectWakeData21.entrySet) {
				writer.stats(entry.value, "reflect", "wake", 21, entry.key)
			}
			for (entry : polymorphicWakeData21.entrySet) {
				writer.stats(entry.value, "polymorphic", "wake", 21, entry.key)
			}
			for (entry : reflectEmitData21.entrySet) {
				writer.stats(entry.value, "reflect", "emit", 21, entry.key)
			}
			for (entry : polymorphicEmitData21.entrySet) {
				writer.stats(entry.value, "polymorphic", "emit", 21, entry.key)
			}

			for (entry : reflectWakeData41.entrySet) {
				writer.stats(entry.value, "reflect", "wake", 41, entry.key)
			}
			for (entry : polymorphicWakeData41.entrySet) {
				writer.stats(entry.value, "polymorphic", "wake", 41, entry.key)
			}
			for (entry : reflectEmitData41.entrySet) {
				writer.stats(entry.value, "reflect", "emit", 41, entry.key)
			}
			for (entry : polymorphicEmitData41.entrySet) {
				writer.stats(entry.value, "polymorphic", "emit", 41, entry.key)
			}
		} finally {
			writer.close
		}
		System::out.println(output.toString)
	}

	private def runTest(extension rc : SreRunContext, typeAgent : Class<? extends Agent>, nbEvents : int, type : EventBusType,
		dataSet : ConcurrentHashMap<Integer, ConcurrentLinkedQueue<Double>>) : double {
		System::setProperty(VariableNames::toPropertyName(LifecycleConfig::EVENT_BUS_TYPE_NAME), type.toJsonString)
		val kern = setupTheSreKernel(null, null)
		bootstrap.startAgent(typeAgent, buildAgentInitializationParameters(nbEvents))
		try {
			waitForTheKernel(Constants::STANDARD_TIMEOUT)
			var all = allResults
			4.assertEquals(all.size)
			"START".assertEquals(all.get(0))
			val startTime : long = all.get(1) as Long
			"END".assertEquals(all.get(2))
			val endTime : long = all.get(3) as Long
			val durationMs = endTime - startTime
			val duration = Math::max(0.0, durationMs) / nbEvents
			val rawData = dataSet.computeIfAbsent(nbEvents) [
				new ConcurrentLinkedQueue
			]
			rawData += duration
			return duration
		} catch (exception : SreTimeoutException | TimeoutException) {
			try {
				kern.shutdown(Constants::STANDARD_TIMEOUT.seconds as int)
			} catch (exception0 : Throwable) {
				//
			}
			throw exception
		}
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 10 events 2 handlers")
	def reflectMethodWithWake10_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent0), 10, EventBusType::REFLECT, reflectWakeData2)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 10 events 2 handlers")
	def polymorphicMethodWithWake10_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent0), 10, EventBusType::POLYMORPHIC, polymorphicWakeData2)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 100 events 2 handlers")
	def reflectMethodWithWake100_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent0), 100, EventBusType::REFLECT, reflectWakeData2)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 100 events 2 handlers")
	def polymorphicMethodWithWake100_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent0), 100, EventBusType::POLYMORPHIC, polymorphicWakeData2)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 1000 events 2 handlers")
	def reflectMethodWithWake1000_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent0), 1000, EventBusType::REFLECT, reflectWakeData2)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 1000 events 2 handlers")
	def polymorphicMethodWithWake1000_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent0), 1000, EventBusType::POLYMORPHIC, polymorphicWakeData2)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 10 events 2 handlers")
	def reflectMethodWithEmit10_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent1), 10, EventBusType::REFLECT, reflectEmitData2)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 10 events 2 handlers")
	def polymorphicMethodWithEmit10_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent1), 10, EventBusType::POLYMORPHIC, polymorphicEmitData2)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 100 events 2 handlers")
	def reflectMethodWithEmit100_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent1), 100, EventBusType::REFLECT, reflectEmitData2)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 100 events 2 handlers")
	def polymorphicMethodWithEmit100_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent1), 100, EventBusType::POLYMORPHIC, polymorphicEmitData2)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 1000 events 2 handlers")
	def reflectMethodWithEmit1000_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent1), 1000, EventBusType::REFLECT, reflectEmitData2)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 1000 events 2 handlers")
	def polymorphicMethodWithEmit1000_2(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent1), 1000, EventBusType::POLYMORPHIC, polymorphicEmitData2)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 10 events 21 handlers")
	def reflectMethodWithWake10_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent2), 10, EventBusType::REFLECT, reflectWakeData21)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 10 events 21 handlers")
	def polymorphicMethodWithWake10_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent2), 10, EventBusType::POLYMORPHIC, polymorphicWakeData21)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 100 events 21 handlers")
	def reflectMethodWithWake100_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent2), 100, EventBusType::REFLECT, reflectWakeData21)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 100 events 21 handlers")
	def polymorphicMethodWithWake100_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent2), 100, EventBusType::POLYMORPHIC, polymorphicWakeData21)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 1000 events 21 handlers")
	def reflectMethodWithWake1000_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent2), 1000, EventBusType::REFLECT, reflectWakeData21)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 1000 events 21 handlers")
	def polymorphicMethodWithWake1000_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent2), 1000, EventBusType::POLYMORPHIC, polymorphicWakeData21)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 10 events 21 handlers")
	def reflectMethodWithEmit10_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent3), 10, EventBusType::REFLECT, reflectEmitData21)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 10 events 21 handlers")
	def polymorphicMethodWithEmit10_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent3), 10, EventBusType::POLYMORPHIC, polymorphicEmitData21)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 100 events 21 handlers")
	def reflectMethodWithEmit100_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent3), 100, EventBusType::REFLECT, reflectEmitData21)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 100 events 21 handlers")
	def polymorphicMethodWithEmit100_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent3), 100, EventBusType::POLYMORPHIC, polymorphicEmitData21)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 1000 events 21 handlers")
	def reflectMethodWithEmit1000_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent3), 1000, EventBusType::REFLECT, reflectEmitData21)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 1000 events 21 handlers")
	def polymorphicMethodWithEmit1000_21(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent3), 1000, EventBusType::POLYMORPHIC, polymorphicEmitData21)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 10 events 41 handlers")
	def reflectMethodWithWake10_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent4), 10, EventBusType::REFLECT, reflectWakeData41)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 10 events 41 handlers")
	def polymorphicMethodWithWake10_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent4), 10, EventBusType::POLYMORPHIC, polymorphicWakeData41)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 100 events 41 handlers")
	def reflectMethodWithWake100_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent4), 100, EventBusType::REFLECT, reflectWakeData41)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 100 events 41 handlers")
	def polymorphicMethodWithWake100_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent4), 100, EventBusType::POLYMORPHIC, polymorphicWakeData41)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method inside agent 1000 events 41 handlers")
	def reflectMethodWithWake1000_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent4), 1000, EventBusType::REFLECT, reflectWakeData41)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method inside agent 1000 events 41 handlers")
	def polymorphicMethodWithWake1000_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent4), 1000, EventBusType::POLYMORPHIC, polymorphicWakeData41)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 10 events 41 handlers")
	def reflectMethodWithEmit10_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent5), 10, EventBusType::REFLECT, reflectEmitData41)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 10 events 41 handlers")
	def polymorphicMethodWithEmit10_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent5), 10, EventBusType::POLYMORPHIC, polymorphicEmitData41)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 100 events 41 handlers")
	def reflectMethodWithEmit100_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent5), 100, EventBusType::REFLECT, reflectEmitData41)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 100 events 41 handlers")
	def polymorphicMethodWithEmit100_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent5), 100, EventBusType::POLYMORPHIC, polymorphicEmitData41)
	}

	@RepeatedTest(50)
	@DisplayName("Reflect method outside agent 1000 events 41 handlers")
	def reflectMethodWithEmit1000_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent5), 1000, EventBusType::REFLECT, reflectEmitData41)
	}

	@RepeatedTest(50)
	@DisplayName("Polymorphic method outside agent 1000 events 41 handlers")
	def polymorphicMethodWithEmit1000_41(extension rc : SreRunContext) : void {
		rc.runTest(typeof(Agent5), 1000, EventBusType::POLYMORPHIC, polymorphicEmitData41)
	}

}
