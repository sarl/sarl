/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal.inject

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.internal.inject.mocks.InjectableBehaviorAgent
import io.sarl.sre.janus.itests.internal.inject.mocks.InjectableDirectBehaviorAgent
import io.sarl.sre.janus.itests.internal.inject.mocks.NotInjectableBehaviorAgent
import io.sarl.sre.janus.itests.internal.inject.mocks.NotInjectableDirectBehaviorAgent
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: behavior injection test")
@Tag("sre-run")
@Tag("janus")
class BehaviorInjectionTest {

	@Test
	@DisplayName("not injectable registered behavior")
	def runNotInjectable(extension rc : SreRunContext) {
		typeof(NotInjectableBehaviorAgent).runSre
		results.assertContainsCollection(#["DATA = null"])
	}

	@Test
	@DisplayName("injectable registered behavior")
	def runInjectable(extension rc : SreRunContext) {
		typeof(InjectableBehaviorAgent).runSre
		results.assertContainsCollection(#["DATA = My-Entity"])
	}

	@Test
	@DisplayName("not injectable direct-access behavior")
	def runNotInjectableDirect(extension rc : SreRunContext) {
		typeof(NotInjectableDirectBehaviorAgent).runSre
		results.assertContainsCollection(#["DATA = null"])
	}

	@Test
	@DisplayName("injectable direct-access behavior")
	def runInjectableDirect(extension rc : SreRunContext) {
		typeof(InjectableDirectBehaviorAgent).runSre
		results.assertContainsCollection(#["DATA = My-Entity"])
	}

}
