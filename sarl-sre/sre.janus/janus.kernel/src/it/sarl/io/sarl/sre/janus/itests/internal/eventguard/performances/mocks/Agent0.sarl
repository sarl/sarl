/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal.eventguard.performances.mocks

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.concurrent.atomic.AtomicInteger
import java.util.concurrent.atomic.AtomicLong

agent Agent0 {

	uses Schedules, Lifecycle, Behaviors

	uses TestingCapacity

	val counter = new AtomicInteger(0)
	val max = new AtomicInteger(0)
	val startTime = new AtomicLong

	@SuppressWarnings("io.sarl.lang.validation.IssueCodes.potential_inefficient_value_conversion")
	on Initialize {
		this.max.set(occurrence.parameters.get(1) as Integer)
		setSkill(new TestingSkill(occurrence))
		in(1000) [
			emitEvents
		]
	}

	def emitEvents : void {
		this.startTime.set(System::currentTimeMillis)
		for (i : 1..this.max.get) {
			new Event0().wake
		}
	}

	on Event0 {
		val n = this.counter.incrementAndGet
		if (n === this.max.get) {
			var endTime = System::currentTimeMillis
			addResult("START")
			addResult(this.startTime.get)
			addResult("END")
			addResult(endTime)
			killMe
		}
	}

}
