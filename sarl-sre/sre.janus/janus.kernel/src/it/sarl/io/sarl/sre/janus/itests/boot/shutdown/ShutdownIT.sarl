/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.boot.shutdown

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent1Mock
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent2Mock
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent3Mock
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent4Mock
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent5Mock
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent6Mock
import io.sarl.sre.janus.itests.boot.shutdown.mocks.ShutdownAgent7Mock
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.test.framework.Constants
import io.sarl.sre.test.framework.agents.InfiniteLifeTestingAgent
import io.sarl.sre.test.framework.context.LogTrackingMode
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.exception.SreTimeoutException
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*
import static io.sarl.tests.api.tools.TestTimeout.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Kernel shutdown test")
@Tag("sre-run")
@Tag("janus")
@SuppressWarnings("all")
class ShutdownIT {

	val DELAY = 500

	@RepeatedTest(5)
	@DisplayName("Without agent")
	def shutdownWithoutAgent(extension rc : SreRunContext) : void {
		setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			bootstrap.shutdown(true)
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("1 killing agent")
	def shutdownWithKillingAgent(extension rc : SreRunContext) : void {
		typeof(ShutdownAgent1Mock).setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("infinite-loop agent")
	def shutdownWithAliveAgent(extension rc : SreRunContext) : void {
		typeof(InfiniteLifeTestingAgent).setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			bootstrap.shutdown(Constants::SHORT_TIMEOUT)
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("2 infinite-loop agents")
	def shutdownWithAliveAgents(extension rc : SreRunContext) : void {
		var sre = typeof(InfiniteLifeTestingAgent).setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		sre.startAgent(typeof(InfiniteLifeTestingAgent), agentInitializationParameters)
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			bootstrap.shutdown(Constants::SHORT_TIMEOUT)
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("Failing agent during initialization")
	def shutdownWithFailingAgentDuringInitialization(extension rc : SreRunContext) : void {
		typeof(ShutdownAgent3Mock).setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("Agent kill during initialization")
	def shutdownWithKillingAgentDuringInitialization(extension rc : SreRunContext) : void {
		typeof(ShutdownAgent4Mock).setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("Failing agent and another short life agent")
	def shutdownWithFailingAgentDuringInitializationAndShortLifeAgent(extension rc : SreRunContext) : void {
		typeof(ShutdownAgent5Mock).setupTheSreKernel(null, null)
		val exec = rc.bootstrap.getService(typeof(ExecutorService))
		exec.assertNotNull
		Thread::sleep(DELAY)
		startTimeOut(Constants::VERY_SHORT_TIMEOUT, false) [
			return !bootstrap.isRunning
		].run
		0.assertEquals(exec.getTaskCount)
	}

	@RepeatedTest(5)
	@DisplayName("Failing agent and another infinite life agent - no shutdown")
	def shutdownWithFailingAgentDuringInitializationAndInfiniteLifeAgent_noShutdown(extension rc : SreRunContext) : void {
		typeof(SreTimeoutException).assertException [
			typeof(ShutdownAgent6Mock).runSre(LogTrackingMode::SILENT, SHORT_TIMEOUT)
		]
	}

	@RepeatedTest(5)
	@DisplayName("Killing agent and another infinite life agent - no shutdown")
	def shutdownWithKillingAgentDuringInitializationAndInfiniteLifeAgent_noShutdown(extension rc : SreRunContext) : void {
		typeof(SreTimeoutException).assertException [
			typeof(ShutdownAgent2Mock).runSre(VERY_SHORT_TIMEOUT)
		]
	}

	@RepeatedTest(5)
	@DisplayName("Killing agent and another failing agent - no shutdown")
	def shutdownWithFailingAgentDuringInitializationAndInfiniteLifeAgent_shutdown(extension rc : SreRunContext) : void {
		typeof(SreTimeoutException).assertException [
			typeof(ShutdownAgent7Mock).runSre(LogTrackingMode::SILENT, SHORT_TIMEOUT)
		]
	}

}
