/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1500.bug1047.mocks

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.concurrent.atomic.AtomicBoolean

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@SuppressWarnings("all")
agent MyAgent0 {

    uses DefaultContextInteractions, Lifecycle, Schedules
    uses TestingCapacity

	val ready = new AtomicBoolean(false)

    on Initialize {
    	setSkill(new TestingSkill(occurrence))
    	val task = "rendez-vous".task
    	task.every(500) [
    		if (this.ready.get) {
    			task.cancel
    			killMe
    		} else {
	    		emit(new RendezVous) [it.ID != this.ID]
	    	}
    	]
    }

	on RendezVousAccepted {
		this.ready.set(true)
	}

}