/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package io.sarl.sre.janus.itests.bugs.to1500.bug1063.mocks

import io.sarl.api.core.AgentKilled
import io.sarl.api.core.AgentSpawned
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID
import java.util.concurrent.ConcurrentSkipListSet

@SuppressWarnings("potential_field_synchronization_problem")
agent BootAgent {
	uses Lifecycle, DefaultContextInteractions
	uses TestingCapacity

	val ids = new ConcurrentSkipListSet<UUID>

	val sids = new ConcurrentSkipListSet<UUID>

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		val spaceId = UUID::randomUUID
		val id1 = UUID::randomUUID
		val id2 = UUID::randomUUID
		this.ids += id1
		this.ids += id2
		this.sids += id1
		this.sids += id2
		addResult("BID = " + ID)
		addResult("ID1 = " + id1)
		addResult("ID2 = " + id2)
		addResult("SID = " + spaceId)
		typeof(PongAgent).spawnWithID(id2, buildAgentInitializationParameters(spaceId))
		typeof(PingAgent).spawnWithID(id1, buildAgentInitializationParameters(id2, spaceId))
	}

	on AgentSpawned {
		this.sids -= occurrence.agentID
		if (this.sids.isNullOrEmpty) {
			emit(new StartPingPong)
		}
	}

	on AgentKilled {
		this.ids -= occurrence.source.ID
		if (this.ids.isNullOrEmpty) {
			killMeSoon
		}
	}

}
