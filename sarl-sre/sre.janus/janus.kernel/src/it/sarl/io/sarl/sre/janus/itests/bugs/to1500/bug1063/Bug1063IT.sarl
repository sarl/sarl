/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1500.bug1063

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1500.bug1063.mocks.BootAgent
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import java.util.concurrent.ConcurrentMap
import java.util.concurrent.CopyOnWriteArrayList
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*

/** Testing class for issue: Bug on Context.getOrCreateSpaceWithSpec in concurrent applications
 * (but without the network, local context).
 *
 * <p>https://github.com/sarl/sarl/issues/1063
 *
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/1063"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #1063")
@Tag("sre-run")
@Tag("janus")
class Bug1063IT {

	def extractIdFromResults(results : ConcurrentMap<UUID, CopyOnWriteArrayList<Object>>, id : UUID, prefix : String) : String {
		val ares = results.get(id)
		ares.assertNotNull ["Unable to find results provided by the agent " + id + "\nin: " + results]
		for (res : ares) {
			val s = res.toString
			if (s.startsWith(prefix)) {
				val v = s.substring(prefix.length)
				if (v !== null) {
					return v
				}
				fail("Illegal UUID value for prefix: " + prefix + "\nin: " + results.toString)
			}
		}
		fail("Cannot find the value for prefix: " + prefix + "\nin: " + results.toString)
	}

	@SuppressWarnings("potential_inefficient_value_conversion")
	def extractBootIdFromResults(results : ConcurrentMap<UUID, CopyOnWriteArrayList<Object>>) : UUID {
		for (entry : results.entrySet) {
			for (value : entry.value) {
				val s = value.toString
				if (s.startsWith("BID = ")) {
					val v = s.substring("BID = ".length)
					if (v !== null) {
						return v as UUID
					}
					fail("Illegal UUID value for BID: " + results.toString)
				}
			}
		}
		fail("Cannot find the BID value: " + results.toString)
	}

	@RepeatedTest(20)
	@DisplayName("run Ping-Pong 5 times")
	@SuppressWarnings("potential_inefficient_value_conversion")
	def run(extension rc : SreRunContext) : void {
		typeof(BootAgent).runSre

		val ar = allResultsPerAgent

		val bid = ar.extractBootIdFromResults

		val id1 = ar.extractIdFromResults(bid, "ID1 = ") as UUID
		val id2 = ar.extractIdFromResults(bid, "ID2 = ") as UUID
		val sid = ar.extractIdFromResults(bid, "SID = ") as UUID

		val s1 = ar.extractIdFromResults(id1, "SID = ") as UUID
		val s2 = ar.extractIdFromResults(id2, "SID = ") as UUID

		sid.assertEquals(s1) [ "Unexpected space identifier is Ping agent"]
		sid.assertEquals(s2) [ "Unexpected space identifier is Pong agent"]

		val o1 = ar.extractIdFromResults(id1, "SPACE = ")
		val o2 = ar.extractIdFromResults(id2, "SPACE = ")

		o1.assertEquals(o2) [ "Space objects are not the same"]
	}

}
