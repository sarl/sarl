/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug848.mocks

import io.sarl.api.core.AgentSpawned
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import org.arakhne.afc.util.Triplet

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
agent TAgent1a {

	uses Lifecycle, Schedules

	val done = new AtomicBoolean

	uses TestingCapacity

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		in(1.seconds) [
			typeof(TAgent1b).spawn(buildAgentInitializationParameters)
		]
	}

	on AgentSpawned {
		var pair = new Triplet<Boolean, UUID, UUID>(
			occurrence.isFromMe, occurrence.source.ID, occurrence.agentID)
		addResult(pair)
		if (this.done.getAndSet(true)) {
			killMe
		}
	}

	on TEvent {
		if (this.done.getAndSet(true)) {
			killMe
		}
	}

}
