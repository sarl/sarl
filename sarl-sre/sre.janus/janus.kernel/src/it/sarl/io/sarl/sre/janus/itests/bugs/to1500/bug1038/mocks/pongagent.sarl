/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1500.bug1038.mocks

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.lang.core.AgentContext
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference

@SuppressWarnings("all")
agent PongAgent {

	uses DefaultContextInteractions, Behaviors, ExternalContextAccess, Lifecycle
	uses TestingCapacity

	val uniq = new AtomicBoolean(true)
	val context = new AtomicReference<AgentContext>
	val comSpace = new AtomicReference<OpenEventSpace>

	var sharedSpaceID : UUID	

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		val ctx = defaultContext
		assert ctx !== null, "Default context cannot be null"
		this.context.set(ctx)
		this.uniq.set(false)
	}

	on RendezVous {
		if (!this.uniq.getAndSet(true)) {
			val ctx = this.context.get
			assert ctx !== null, "Context reference cannot be null"
			val spc = ctx.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification), occurrence.spaceID)
			assert spc !== null, "Space cannot be null"
			this.comSpace.set(spc)
			spc.registerStrongParticipant(asEventListener)
			ctx.defaultSpace.emit(new RendezVousAccepted) [it.ID == occurrence.source.ID]
		}
	}

	on Ping [occurrence.isInSpace(this.comSpace.get)] {
		this.comSpace.get.emit(new Pong) [it.ID == occurrence.source.ID]
	}

	on JoinContextQuery [occurrence.isInSpace(this.comSpace.get)] {
		val cID = occurrence.subContextID
		val sID = occurrence.subContextDefaultSpaceID
		val newContext = join(cID, sID)
		assert newContext !== null, "Joined context cannot be null"
		this.context.set(newContext)
		assert this.context.get === newContext, "Invalid storage of the new context reference"
		this.uniq.set(false)
	}

	on Bye {
		"PongFinished".addResult
		killMe
	}

}
