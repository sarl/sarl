/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.internal.mocks.MemberLeftAgent0
import io.sarl.sre.janus.itests.internal.mocks.MemberLeftAgent1
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.events.Bye
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.sre.janus.tests.framework.SreTestUtilities.*
import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: on MemberLeft test")
@Tag("sre-run")
@Tag("janus")
class OnMemberLeftIT {

	//@RepeatedTest(20)
	@Test
	@DisplayName("In default context")
	def inDefaultContext(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)

		val id0 = UUID::randomUUID
		waitForAgentSpawned(id0) [
			kern.startAgentWithID(typeof(MemberLeftAgent0), id0, buildAgentInitializationParameters(1, false))
		]

		val id1 = UUID::randomUUID
		waitForAgentSpawned(id1) [
			kern.startAgentWithID(typeof(MemberLeftAgent0), id1, buildAgentInitializationParameters(2, true))
		]

		val id2 = UUID::randomUUID
		waitForAgentSpawned(id2) [
			kern.startAgentWithID(typeof(MemberLeftAgent0), id2, buildAgentInitializationParameters(3, false))
		]

		// Kill one agent to generate the MemberLeft event
		waitForAgentKilled(id1) [
			rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)[it.ID == id1]
		]

		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)

		waitForTheKernel(STANDARD_TIMEOUT)

		allResults.assertContainsAtLeastMsg(
			[
				"id0 => " + id0 + "\nid1 => " + id1 + "\nid2 => " + id2
			],
			"AG1: joined MemberLeftAgent0 " + id1 + " in default space",
			"AG3: joined MemberLeftAgent0 " + id1 + " in default space"
		)
	}

	@RepeatedTest(20)
	@DisplayName("In other context")
	def inOtherContext(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)

		val id0 = UUID::randomUUID
		id0.waitForAgentSpawned [
			kern.startAgentWithID(typeof(MemberLeftAgent1), id0, buildAgentInitializationParameters(1, null))
		]

		val innerContext = rc.getInnerContextForAgent(id0)
		innerContext.assertNotNull

		val id1 = UUID::randomUUID
		id1.waitForAgentSpawned [
			kern.startAgentWithID(typeof(MemberLeftAgent1), id1, buildAgentInitializationParameters(2, innerContext))
		]

		val id2 = UUID::randomUUID
		id2.waitForAgentSpawned [
			kern.startAgentWithID(typeof(MemberLeftAgent1), id2, buildAgentInitializationParameters(3, innerContext))
		]

		// Kill the inner agents, first
		id1.waitForAgentKilled [
			innerContext.defaultSpace.emit(UUID::randomUUID, new Bye) [it.ID == id1]
		]
		id2.waitForAgentKilled [
			innerContext.defaultSpace.emit(UUID::randomUUID, new Bye)[it.ID == id2]
		]

		// Kill the containing agent, second
		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)

		waitForTheKernel(STANDARD_TIMEOUT)

		allResults.assertContains(
			"AG1: memberLeft MemberLeftAgent1 " + id1 + " in default space",
			"AG1: memberLeft MemberLeftAgent1 " + id1 + " in inner space",
			"AG1: memberLeft MemberLeftAgent1 " + id2 + " in default space",
			"AG1: memberLeft MemberLeftAgent1 " + id2 + " in inner space",
			"AG3: memberLeft MemberLeftAgent1 " + id1 + " in default space",
			"AG3: memberLeft MemberLeftAgent1 " + id1 + " in other space"
		)
	}

}
