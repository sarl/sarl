/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.services.namespace

import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.services.namespace.mocks.ChangeField
import io.sarl.sre.janus.itests.services.namespace.mocks.NamespaceTestAgent
import io.sarl.sre.janus.itests.services.namespace.mocks.StopTest
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractNamespaceServiceIT {

	protected def startTestingFramework(extension rc : SreRunContext) : NamespaceService {
		runTestCase_prepare
		var kern = setupTheSreKernel(null, null)
		var service = kern.getService(typeof(NamespaceService))
		service.assertNotNull
		return service
	}

	@SuppressWarnings("discouraged_reference")
	protected def runTestCase(extension rc : SreRunContext, type : Class<T>, 
		throwIfNull : boolean = true, urlBuilder : (UUID)=>String) : T with T {
		
		var service = rc.startTestingFramework

		val bid = UUID::randomUUID
		
		var w0 = waitForAgentSpawned(bid)
		
		rc.bootstrap.startAgentWithID(typeof(NamespaceTestAgent), bid, getAgentInitializationParameters)

		w0.doWait

		val namedObject = service.findObject(urlBuilder.apply(bid))
		if (namedObject === null) {
			if (throwIfNull) {
				namedObject.assertNotNull
			} else {
				return null				
			}
		}

		service.runTestCase_beforeChangeField(namedObject)
		rootContext.defaultSpace.emit(UUID::randomUUID, new ChangeField)
		service.runTestCase_beforeStopTest(namedObject)
		Thread::sleep(1.seconds)
		rootContext.defaultSpace.emit(UUID::randomUUID, new StopTest)
		service.runTestCase_afterStopTest(namedObject)

		waitForTheKernel(STANDARD_TIMEOUT)

		return type.cast(namedObject)
	}

	protected def runTestCase_prepare {
	}

	protected def runTestCase_beforeChangeField(service : NamespaceService, namedObject : Object) {
	}

	protected def runTestCase_beforeStopTest(service : NamespaceService, namedObject : Object) {
	}

	protected def runTestCase_afterStopTest(service : NamespaceService, namedObject : Object) {
	}

}
