/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1000.bug934

import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Space
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1000.bug934.mocks.WithIdAgent
import io.sarl.sre.janus.itests.bugs.to1000.bug934.mocks.WithSpecAgent
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*

/** Tests for issue #934: Agents communication enabled through space without being registered to it.
 * 
 * <p>See: https://github.com/sarl/sarl/issues/934
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/934"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #934")
@Tag("sre-run")
@Tag("janus")
class Bug934IT {

	@Test
	def withSpec(extension rc : SreRunContext) {
		typeof(WithSpecAgent).runSre(SHORT_TIMEOUT)

		var id = getBootAgentId
		5.assertEquals(id.numberOfResults)
		
		var defaultSpace = id.getResult(typeof(EventSpace), 0)
		defaultSpace.assertNotNull
		
		var spaceId1 = id.getResult(typeof(UUID), 1)
		defaultSpace.spaceID.ID.assertNotEquals(spaceId1)
		
		var otherSpace1 = id.getResult(typeof(Space), 2)
		otherSpace1.assertNotNull
		spaceId1.assertEquals(otherSpace1.spaceID.ID)
		defaultSpace.assertNotSame(otherSpace1)
		defaultSpace.spaceID.assertNotEquals(otherSpace1.spaceID)
		defaultSpace.spaceID.ID.assertNotEquals(otherSpace1.spaceID.ID)
		
		var spaceId2 = id.getResult(typeof(UUID), 3)
		defaultSpace.spaceID.ID.assertNotEquals(spaceId2)
		spaceId1.assertNotEquals(spaceId2)
		
		var otherSpace2 = id.getResult(typeof(Space), 4)
		otherSpace2.assertNotNull
		spaceId1.assertEquals(otherSpace2.spaceID.ID)
		defaultSpace.assertNotSame(otherSpace2)
		defaultSpace.spaceID.assertNotEquals(otherSpace2.spaceID)
		defaultSpace.spaceID.ID.assertNotEquals(otherSpace2.spaceID.ID)
		otherSpace1.assertSame(otherSpace2)
	}

	@Test
	def withId(extension rc : SreRunContext) {
		typeof(WithIdAgent).runSre(SHORT_TIMEOUT)

		var id = getBootAgentId
		5.assertEquals(id.numberOfResults)
		
		var defaultSpace = id.getResult(typeof(EventSpace), 0)
		defaultSpace.assertNotNull
		
		var spaceId1 = id.getResult(typeof(UUID), 1)
		defaultSpace.spaceID.ID.assertNotEquals(spaceId1)
		
		var otherSpace1 = id.getResult(typeof(Space), 2)
		otherSpace1.assertNotNull
		spaceId1.assertEquals(otherSpace1.spaceID.ID)
		defaultSpace.assertNotSame(otherSpace1)
		defaultSpace.spaceID.assertNotEquals(otherSpace1.spaceID)
		defaultSpace.spaceID.ID.assertNotEquals(otherSpace1.spaceID.ID)
		
		var spaceId2 = id.getResult(typeof(UUID), 3)
		defaultSpace.spaceID.ID.assertNotEquals(spaceId2)
		spaceId1.assertNotEquals(spaceId2)
		
		var otherSpace2 = id.getResult(typeof(Space), 4)
		otherSpace2.assertNotNull
		spaceId2.assertEquals(otherSpace2.spaceID.ID)
		defaultSpace.assertNotSame(otherSpace2)
		defaultSpace.spaceID.assertNotEquals(otherSpace2.spaceID)
		defaultSpace.spaceID.ID.assertNotEquals(otherSpace2.spaceID.ID)
		otherSpace1.assertNotSame(otherSpace2)
		otherSpace1.spaceID.assertNotEquals(otherSpace2.spaceID)
		otherSpace1.spaceID.ID.assertNotEquals(otherSpace2.spaceID.ID)
	}

}
