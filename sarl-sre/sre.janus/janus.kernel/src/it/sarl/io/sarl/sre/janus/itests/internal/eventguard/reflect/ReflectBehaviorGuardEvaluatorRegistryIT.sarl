/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal.eventguard.reflect

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.subconfigs.EventBusType
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.itests.internal.eventguard.reflect.mocks.Agent1
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: event and function overriding test w/ reflect method")
@Tag("sre-run")
@Tag("janus")
class ReflectBehaviorGuardEvaluatorRegistryIT {
		
	@BeforeEach
	def setUp : void {
		System::setProperty(VariableNames::toPropertyName(LifecycleConfig::EVENT_BUS_TYPE_NAME),
			EventBusType::REFLECT.toJsonString)
	}
		
	@Test
	@DisplayName("Override of event handler and action")
	def overrideOfEventHanderAndMethod(extension rc : SreRunContext) {
		typeof(Agent1).runSre
		
		var all = allResults
		2.assertEquals(all.size)
		
		// These is two data into the results because there is 2 "on Event0".
		// The data are the same because of the function overriding.
		all.assertContains("myfunction in Agent1", "myfunction in Agent1")
	}

}
