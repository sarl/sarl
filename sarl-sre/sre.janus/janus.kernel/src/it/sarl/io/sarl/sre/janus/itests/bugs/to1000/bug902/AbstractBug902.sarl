/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug902

import io.sarl.lang.core.Agent
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.subconfigs.EventBusType
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.itests.bugs.to1000.bug902.mocks.TopAgentDoubleDouble
import io.sarl.sre.janus.itests.bugs.to1000.bug902.mocks.TopAgentDoubleFloat
import io.sarl.sre.janus.itests.bugs.to1000.bug902.mocks.TopAgentStringDouble
import io.sarl.sre.janus.itests.bugs.to1000.bug902.mocks.TopAgentStringFloat
import io.sarl.sre.janus.itests.bugs.to1000.bug902.mocks.TopAgentUUIDInteger
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.Arrays
import java.util.UUID
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*

/** Tests for issue #902: Possibility to have a Generic <T> in an Event.
 *
 * <p>See: https://github.com/sarl/sarl/issues/902
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/902"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@Tag("sre-run")
@Tag("janus")
abstract class AbstractBug902 {

	protected var eventBusType : EventBusType

	protected def startTest(extension rc : SreRunContext, agentType : Class<? extends Agent>, expected : String*) : void {
		// Force the type of event bus to be used by Janus
		System::setProperty(VariableNames::toPropertyName(LifecycleConfig::EVENT_BUS_TYPE_NAME), this.eventBusType.toJsonString)
		// Run the test in Janus
		agentType.runSre(NO_TIMEOUT)
		var aid = bootAgentId.getResult(typeof(UUID), 0)
		assertNotNull(aid)
		var res = aid.results
		assertNotNull(res)
		val expected0 = expected.stream.sorted[a, b|a <=> b].toList
		val res0 = res.stream.map[it.toString].sorted[a, b|a <=> b].toList
		//System.out.println("EXPECTED=" + Arrays::toString(expected0));
		//System.out.println("ACTUAL  =" + Arrays::toString(res0));
		expected0.assertArrayEquals(res0.toArray, "Array is: " + Arrays::toString(res0))
	}

	@Test
	@DisplayName("Emit <Double, Double>")
	def run_01(extension rc : SreRunContext) {
		rc.startTest(typeof(TopAgentDoubleDouble), "Super:RAW", "Super:<Double>", "RAW", "<?,?>", "<Number,?>",
			"<? extends Number,?>", "<Double,?>")
	}

	@Test
	@DisplayName("Emit <Double, Float>")
	def run_02(extension rc : SreRunContext) {
		rc.startTest(typeof(TopAgentDoubleFloat), "Super:RAW", "Super:<Float>", "RAW", "<?,?>", "<Number,?>",
			"<? extends Number,?>", "<Double,?>", "<?,Float>")
	}

	@Test
	@DisplayName("Emit <String, Double>")
	def run_03(extension rc : SreRunContext) {
		rc.startTest(typeof(TopAgentStringDouble), "<?,?>", "<String,?>/1", "<String,?>/2", "RAW", "Super:<Double>",
			"Super:RAW")
	}

	@Test
	@DisplayName("Emit <String, Float>")
	def run_04(extension rc : SreRunContext) {
		rc.startTest(typeof(TopAgentStringFloat), "Super:RAW", "Super:<Float>", "RAW", "<?,?>", "<String,?>/1",
			"<String,?>/2", "<?,Float>", "<String,Float>")
	}

	@Test
	@DisplayName("Emit <UUID, Integer>")
	def run_05(extension rc : SreRunContext) {
		rc.startTest(typeof(TopAgentUUIDInteger),
		"Super:RAW", "RAW", "<?,?>")
	}

}
