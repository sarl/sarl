/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.services.executor

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.services.executor.mocks.AtFixedDelayAgent
import io.sarl.sre.janus.itests.services.executor.mocks.CancelTaskAgent
import io.sarl.sre.janus.itests.services.executor.mocks.EveryAgent
import io.sarl.sre.janus.itests.services.executor.mocks.ExecuteAgent
import io.sarl.sre.janus.itests.services.executor.mocks.GetActiveTasksAgent
import io.sarl.sre.janus.itests.services.executor.mocks.InAgent
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.List
import java.util.UUID
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*
import static io.sarl.tests.api.tools.TestAssertions.*

import static extension io.sarl.tests.api.tools.TestUtils.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractExecutorServiceRunIT {

	@Test
	def execute(extension rc : SreRunContext) : void {
		typeof(ExecuteAgent).runSre
		var all = allResults
		assertEquals(1, all.size)
		assertInstanceOf(typeof(UUID), all.get(0))
	}

	@Test
	def in(extension rc : SreRunContext) : void {
		typeof(InAgent).runSre
		var all = allResults
		assertEquals(1, all.size)
		assertInstanceOf(typeof(UUID), all.get(0))
	}

	/** Every task should be stopped when kill me is invoked
	 */
	@Test
	def every_00(extension rc : SreRunContext) : void {
		typeof(EveryAgent).runSre
		var all = allResults
		assertEquals(2, all.size)
		all.get(0).assertNotNull
		assertEquals(2, all.get(1))
	}

	/** Every task should be stopped when kill me is invoked
	 */
	@Test
	def every_01(extension rc : SreRunContext) : void {
		val kern = setupTheSreKernel(null, null)
		val id = UUID::randomUUID
		kern.startAgentWithID(typeof(EveryAgent), id, getAgentInitializationParameters)

		waitForTheKernel(STANDARD_TIMEOUT)

		var all = getResults(id)
		id.assertEquals(all.get(0))
		2. assertEquals(all.get(1))
	}
	
	@Test
	def atFixedDelay(extension rc : SreRunContext) : void {
		typeof(AtFixedDelayAgent).runSre
		var all = allResults
		assertEquals(1, all.size)
		assertEquals(2, all.get(0))
	}

	@Test
	def getActiveTasks(extension rc : SreRunContext) : void {
		typeof(GetActiveTasksAgent).runSre
		var all = allResults
		assertEquals(3, all.size)
		var actives1 = all.elementAt(typeof(List), 0)
		assertContains(actives1, "T1")
		var actives2 = all.elementAt(typeof(List), 1)
		assertContains(actives2, "T1", "T2")
		var actives3 = all.elementAt(typeof(List), 2)
		assertContains(actives3)
	}

	@Test
	def cancel_00(extension rc : SreRunContext) : void {
		typeof(CancelTaskAgent).runSre
		var all = allResults
		assertEquals(4, all.size)
		// After creating T1
		var actives1 = all.elementAt(typeof(List), 0)
		assertContains(actives1, "T1")
		// After creating T1 and T2
		var actives2 = all.elementAt(typeof(List), 1)
		assertContains(actives2, "T1", "T2")
		// After cancel T1. T2 is still active
		var actives3 = all.elementAt(typeof(List), 2)
		assertContains(actives3, "T2")
		// Inside on destroy
		var actives4 = all.elementAt(typeof(List), 3)
		assertContains(actives4)
	}

}
