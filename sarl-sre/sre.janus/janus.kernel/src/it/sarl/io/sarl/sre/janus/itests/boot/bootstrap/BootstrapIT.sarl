/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.boot.bootstrap

import io.sarl.lang.core.SREBootstrap
import io.sarl.lang.core.SREListener
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import io.sarl.sre.janus.boot.configs.subconfigs.RootContextType
import io.sarl.sre.janus.itests.boot.bootstrap.mocks.BootAgent1
import io.sarl.sre.janus.itests.boot.bootstrap.mocks.TestIdAgent0
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*
import static org.mockito.ArgumentMatchers.*

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bootstrap test")
@Tag("sre-run")
@Tag("janus")
class BootstrapIT {

	@Nullable
	var defaultID : UUID

	@Nullable
	var bootID : UUID

	@BeforeEach
	def setUp : void {
		this.defaultID = UUID::fromString(BootConfig::ROOT_CONTEXT_ID_VALUE)
		this.bootID = UUID::nameUUIDFromBytes(typeof(BootAgent1).name.bytes)
	}

	@RepeatedTest(5)
	@DisplayName("Default context ID")
	def defaultContextUUID(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::^default.name)
		typeof(BootAgent1).runSre
		var id = getResult(typeof(UUID), 0)
		assertNotNull(id)
		assertEquals(defaultID, id)
	}

	@RepeatedTest(5)
	@DisplayName("Name-based context ID")
	def bootContextUUID(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::BOOT_AGENT_NAME.name)
		System::setProperty(VariableNames::toPropertyName(BootConfig::BOOT_AGENT_NAME), typeof(BootAgent1).name)
		typeof(BootAgent1).runSre
		var id = getResult(typeof(UUID), 0)
		assertNotNull(id)
		assertEquals(bootID, id)
	}

	@RepeatedTest(5)
	@DisplayName("Random context ID")
	def randomContextUUID(extension rc : SreRunContext) {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::RANDOM.name)
		typeof(BootAgent1).runSre
		var id = getResult(typeof(UUID), 0)
		assertNotNull(id)
		assertNotEquals(defaultID, id)
		assertNotEquals(bootID, id)
	}

	@RepeatedTest(5)
	@DisplayName("startAgentWithID(Class, UUID)")
	def startAgentWithID(extension rc : SreRunContext) {
		val kern = setupTheSreKernel(null, null)
		val id = UUID::randomUUID
		kern.startAgentWithID(typeof(TestIdAgent0), id, agentInitializationParameters)
		waitForTheKernel(SHORT_TIMEOUT)
		
		var actual = getFirstResultOfType(id, typeof(UUID))
		actual.assertNotNull
		id.assertEquals(actual)
	}

	@RepeatedTest(5)
	@DisplayName("sreStopped")
	def sreStartedStopped(extension rc : SreRunContext) {
		val observer = typeof(SREListener).mock
		
		val kern = setupTheSreKernel(null, null)
		kern.addSREListener(observer)

		val id = UUID::randomUUID
		kern.startAgentWithID(typeof(TestIdAgent0), id, agentInitializationParameters)
		waitForTheKernel(SHORT_TIMEOUT)

		var arg = typeof(SREBootstrap).forClass

		// Never called because the event is fired before setupTheSreKernel returns
		observer.verify(never).sreStarted(any)

		observer.verify(1.times).sreStopped(arg.capture)
		kern.assertSame(arg.value)
	}

}
