/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.services.context

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.lang.core.AgentContext
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import io.sarl.sre.janus.itests.services.context.mocks.GetContextTestAgent
import io.sarl.sre.janus.itests.services.context.mocks.GetRootContextTestAgent
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractContextServiceIT {

	@Test
	def getRootContext(extension rc : SreRunContext) : void {
		typeof(GetRootContextTestAgent).runSre
		var results = getResults
		assertEquals(1, results.size)
		var res = results.get(0)
		if (res instanceof Throwable) {
			throw new Exception(res)
		}
		assertInstanceOf(typeof(AgentContext), results.get(0))
		assertEquals(UUID::fromString(BootConfig::ROOT_CONTEXT_ID_VALUE), (results.get(0) as AgentContext).ID)
	}

	@Test
	@SuppressWarnings("io.sarl.lang.validation.IssueCodes.potential_inefficient_value_conversion")
	def getContext(extension rc : SreRunContext) : void {
		typeof(GetContextTestAgent).runSre
		var results = getResults
		assertEquals(2, results.size)
		assertInstanceOf(typeof(UUID), results.get(0))
		var agentId = results.get(0) as UUID
		assertEquals(bootAgentId, agentId)
		assertInstanceOf(typeof(AgentContext), results.get(1))
		assertEquals(UUID::fromString(BootConfig::ROOT_CONTEXT_ID_VALUE), (results.get(1) as AgentContext).ID)
	}

}
