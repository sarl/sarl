/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.services.probing

import io.sarl.api.probing.Probe
import io.sarl.api.probing.ProbeService
import io.sarl.lang.core.Agent
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.subconfigs.ServicesConfig
import io.sarl.sre.janus.itests.services.probing.mocks.ChangeFieldForProbe
import io.sarl.sre.janus.itests.services.probing.mocks.ProbedAgent
import io.sarl.sre.janus.itests.services.probing.mocks.ProbedObservableAgent
import io.sarl.sre.janus.services.probing.service.AsynchronousProbeService
import io.sarl.sre.test.framework.context.BooleanWait
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@DisplayName("run: AsynchronousProbe service test")
@Tag("sre-run")
@Tag("janus")
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
class AsynchronousProbeServiceIT {

	protected def runProbeTest(extension rc : SreRunContext, agentType : Class<? extends Agent>) : Probe<Integer> {
		System::setProperty(VariableNames::toPropertyName(ServicesConfig::ASYNCHRONOUS_PROBE_UPDATE_NAME), Boolean.TRUE.toString)
		//
		var kernel = setupTheSreKernel(null, null)
		var service = kernel.getService(typeof(ProbeService))
		//
		typeof(AsynchronousProbeService).assertInstanceOf(service)
		val aservice = service as AsynchronousProbeService
		//
		val id = UUID::randomUUID
		var w = waitForAgentSpawned(id)
		kernel.startAgentWithID(agentType, id, agentInitializationParameters)
		w.doWait
		//
		var probe = service.probe("agent:" + id + "#myfield", typeof(Integer))
		//
		val changed = new AtomicBoolean(false)
		if (probe !== null) {
			probe.addProbeListener [
				if ($0.value == 24) {
					changed.set(true)
				}
			]
		}
		//
		if (probe !== null) {
			val w0 = new BooleanWait(new AtomicBoolean(true), null)
			w0.doWait(STANDARD_TIMEOUT) [aservice.isAsynchronousSynchronizationRunning]
		}
		//
		waitForAgentKilled(id) [
			rootContext.defaultSpace.emit(id, new ChangeFieldForProbe) [it.ID == id]
		]
		//
		if (probe !== null) {
			val w1 = new BooleanWait(new AtomicBoolean(true), null)
			w1.doWait(STANDARD_TIMEOUT) [changed.get]
		}
		//
		waitForTheKernel(STANDARD_TIMEOUT)
		return probe
	}

	@Test
	@DisplayName("Observable agent")
	def observableAgent(rc : SreRunContext) : void {
		rc.runProbeTest(typeof(ProbedObservableAgent))
	}

	@Test
	@DisplayName("Agent")
	def ^agent(rc : SreRunContext) : void {
		var probe = rc.runProbeTest(typeof(ProbedAgent))
		probe.assertNull
	}

}
