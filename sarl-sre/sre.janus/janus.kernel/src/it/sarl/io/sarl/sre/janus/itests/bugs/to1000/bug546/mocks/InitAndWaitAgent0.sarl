/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1000.bug546.mocks

import io.sarl.api.core.AgentKilled
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.concurrent.atomic.AtomicInteger

import static io.sarl.sre.janus.itests.bugs.to1000.bug546.Constants.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see https://github.com/sarl/sarl/issues/546
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent InitAndWaitAgent0 {

	uses Lifecycle, DefaultContextInteractions

	var nbKilled = new AtomicInteger

	uses TestingCapacity

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		for (i : 0 ..< NB_AGENTS) {
			typeof(ChildAgent).spawn(buildAgentInitializationParameters(ID))
		}
	}

	on Hello {
		emit(new KillYou) [it.ID == occurrence.source.ID]
	}

	on AgentKilled {
		var n = this.nbKilled.incrementAndGet
		if (n >= NB_AGENTS) {
			killMe
		}
	}

}
