/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.services.lifecycle

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.services.lifecycle.mocks.DestroyKillTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.EventHanlderKillTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.InitializeKillTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.InitializeSpawnKillTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.KernelStopAgent0
import io.sarl.sre.janus.itests.services.lifecycle.mocks.KernelStopAgent1
import io.sarl.sre.janus.itests.services.lifecycle.mocks.NoChildInnerContextIsKillableTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.NoChildNoInnerContextIsKillableTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.OneAgentSpawnTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.TaskKillTestAgent
import io.sarl.sre.janus.itests.services.lifecycle.mocks.ThreeAgentsSpawnTestAgent
import io.sarl.sre.test.framework.agents.InfiniteLifeTestingAgent
import io.sarl.sre.test.framework.agents.ShortLifeTestingAgent
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.exception.SreTimeoutException
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractLifecycleServiceIT {

	protected abstract def runTestCase_prepare
	
	@BeforeEach
	def setUp : void {
		runTestCase_prepare
	}

	@RepeatedTest(10)
	@DisplayName("spawnAgent 1 agent")
	def spawnAgent_1(extension rc : SreRunContext) {
		typeof(OneAgentSpawnTestAgent).runSre(-1)
		var results = allResults
		results.assertNotNull
		results.assertContains("SPAWNED#1")
	}

	@RepeatedTest(10)
	@DisplayName("spawnAgent 3 agents")
	def spawnAgent_3(extension rc : SreRunContext) : void {
		typeof(ThreeAgentsSpawnTestAgent).runSre
		var results = allResults
		results.assertNotNull
		3.assertEquals(results.size)
		results.assertContains("SPAWNED#1", "SPAWNED#1", "SPAWNED#1")
	}

	@RepeatedTest(10)
	@DisplayName("killAgent during on Initialize")
	def killAgent_duringInitialize(extension rc : SreRunContext) : void {
		typeof(InitializeKillTestAgent).runSre
		var results = allResults
		results.assertNotNull
		1.assertEquals(results.size)
		results.assertContains("1")
	}

	@RepeatedTest(10)
	@DisplayName("killAgent during on Initialize after spawn")
	def killAgent_duringInitializeAfterSpawn(extension rc : SreRunContext) {
		typeof(InitializeSpawnKillTestAgent).runSre
		var results = allResults
		results.assertNotNull
		assertEquals(3, results.size)
		results.assertContains("1", "2", "SPAWNED")
	}

	@RepeatedTest(10)
	@DisplayName("killAgent in behavior unit")
	def killAgent_duringEventHandling(extension rc : SreRunContext) {
		typeof(EventHanlderKillTestAgent).runSre
		var results = allResults
		results.assertNotNull
		2.assertEquals(results.size)
		results.assertContains("1", "2")
	}

	@RepeatedTest(10)
	@DisplayName("killAgent during parallel task")
	def killAgent_duringTask(extension rc : SreRunContext) {
		typeof(TaskKillTestAgent).runSre
		var results = allResults
		results.assertNotNull
		2.assertEquals(results.size)
		results.assertContains("1", "2")
	}

	@RepeatedTest(10)
	@DisplayName("killAgent during on Destroy")
	def killAgent_duringDestroy(extension rc : SreRunContext) {
		typeof(DestroyKillTestAgent).runSre
		var results = allResults
		results.assertNotNull
		2.assertEquals(results.size)
		results.assertContains("1", "2")
	}

	@RepeatedTest(10)
	@DisplayName("isKillableAgent without child without inner context instance")
	def isKillableAgent_noChild_noInnerContext(extension rc : SreRunContext) {
		typeof(NoChildNoInnerContextIsKillableTestAgent).runSre
		var results = allResults
		results.assertNotNull
		2.assertEquals(results.size)
		results.assertContains("1", "2")
	}

	@RepeatedTest(10)
	@DisplayName("isKillableAgent without child with inner context instance")
	def isKillableAgent_noChild_innerContext(extension rc : SreRunContext) {
		typeof(NoChildInnerContextIsKillableTestAgent).runSre(-1)
		var results = allResults
		results.assertNotNull
		2.assertEquals(results.size)
		results.assertContains("1", "2")
	}

	@RepeatedTest(10)
	@DisplayName("kernelStop w/ 1 success agent")
	def kernelStop_successAgent(extension rc : SreRunContext) {
		typeof(SreTimeoutException).assertException [
			typeof(InfiniteLifeTestingAgent).runSre(VERY_SHORT_TIMEOUT)
		]
	}

	@RepeatedTest(10)
	@DisplayName("kernelStop w/ 1 failing agent")
	def kernelStop_failingAgent(extension rc : SreRunContext) : void {
		typeof(ShortLifeTestingAgent).runSre(-1/*SHORT_TIMEOUT*/)
	}

	@RepeatedTest(10)
	@DisplayName("kernelStop w/ 1 failing agent w/ 1 success brother agent")
	def kernelStop_failingAgent_brotherAgent0(extension rc : SreRunContext) : void {
		typeof(SreTimeoutException).assertException [
			typeof(KernelStopAgent0).runSre(VERY_SHORT_TIMEOUT)
		]
	}

	@RepeatedTest(10)
	@DisplayName("kernelStop w/ 1 failing agent w/ 1 failing brother agent")
	def kernelStop_failingAgent_brotherAgent1(extension rc : SreRunContext) : void {
		typeof(KernelStopAgent1).runSre(SHORT_TIMEOUT)
	}

}
