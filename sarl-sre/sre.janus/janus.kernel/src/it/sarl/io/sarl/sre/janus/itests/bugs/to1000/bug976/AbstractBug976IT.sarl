/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.itests.bugs.to1000.bug976

import io.sarl.apputils.bootiqueapp.config.Level
import io.sarl.lang.core.Agent
import io.sarl.sre.test.framework.context.LogTrackingMode
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.exception.SreTimeoutException
import java.util.UUID

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.tests.api.tools.TestAssertions.*

/** Tests for issue #976: UnimplementedCapacityException when getting logging capacity.
 *
 * <p>See: https://github.com/sarl/sarl/issues/976
 *
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/976"
 */
abstract class AbstractBug976IT {

	protected def run(extension rc : SreRunContext, agentType : Class<? extends Agent>,
		nb : int, timeout : int = EXTRA_TIMEOUT) : void {
		var kern = setupTheSreKernel(Level::ERROR, LogTrackingMode::ADD_TO_AGENT_RESULTS)

		val id0 = UUID::randomUUID
		kern.startAgentWithID(agentType, id0, buildAgentInitializationParameters(nb))

		try {
			waitForTheKernel(timeout)
		} catch (ex : SreTimeoutException) {
			// Ignore this exception because the BootScalableAgent could not be able
			// to spawn the huge number of agents into the given time.
			// The speed of the spawning is not the purpose of this test. Only the
			// fact that the UnimplementedCapacityException is thrown is under interest.
		}
		
		// No error should be logged
		rc.assertNoError(false)
		
		val r = allResults
		r.assertContains("all-spawn", "nb-spawn-" + nb)
	}

	protected def runDefaultSpace(extension rc : SreRunContext, agentType : Class<? extends Agent>, nb : int) : void {
		var kern = setupTheSreKernel(Level::ERROR, LogTrackingMode::ADD_TO_AGENT_RESULTS)

		val id0 = UUID::randomUUID
		kern.startAgentWithID(agentType, id0, buildAgentInitializationParameters(nb))

		try {
			waitForTheKernel(EXTRA_TIMEOUT)
		} catch (ex : SreTimeoutException) {
			// Ignore this exception because the BootScalableAgent could not be able
			// to spawn the huge number of agents into the given time.
			// The speed of the spawning is not the purpose of this test. Only the
			// fact that the UnimplementedCapacityException is thrown is under interest.
		}
		
		// No error should be logged
		rc.assertNoError(false)
		
		val r = allResults
		r.assertContains("all-spawn", "nb-spawn-" + nb)
	}

	protected def runInnerSpace(extension rc : SreRunContext, agentType : Class<? extends Agent>, nb : int) : void {
		var kern = setupTheSreKernel(Level::ERROR, LogTrackingMode::ADD_TO_AGENT_RESULTS)

		val id0 = UUID::randomUUID
		kern.startAgentWithID(agentType, id0, buildAgentInitializationParameters(nb))

		try {
			waitForTheKernel(EXTRA_TIMEOUT)
		} catch (ex : SreTimeoutException) {
			// Ignore this exception because the BootScalableAgent could not be able
			// to spawn the huge number of agents into the given time.
			// The speed of the spawning is not the purpose of this test. Only the
			// fact that the UnimplementedCapacityException is thrown is under interest.
		}
		
		// No error should be logged
		rc.assertNoError(false)
		
		val r = allResults
		r.assertContains("all-spawn", "nb-spawn-" + nb)
	}

}
