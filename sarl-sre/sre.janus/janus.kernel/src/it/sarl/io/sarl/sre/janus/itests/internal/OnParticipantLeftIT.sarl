/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal

import io.sarl.api.core.ParticipantLeft
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.lang.core.SpaceID
import io.sarl.sre.janus.itests.internal.mocks.JoinerAgent1
import io.sarl.sre.janus.itests.internal.mocks.JoinerAgent3
import io.sarl.sre.janus.itests.internal.mocks.SpyAgent1
import io.sarl.sre.janus.itests.internal.mocks.SpyAgent3
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: on ParticipantLeft test")
@Tag("sre-run")
@Tag("janus")
class OnParticipantLeftIT {

	@Test
	@DisplayName("ParticipantLeft in default space")
	@SuppressWarnings("discouraged_reference")
	def runParticipantLeftInDefaultSpace(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)

		val id1 = UUID.randomUUID
		val id2 = UUID.randomUUID

		val lock = id1.waitForAgentSpawned

		kern.startAgentWithID(typeof(SpyAgent1), id1, agentInitializationParameters)

		lock.doWait

		kern.startAgentWithID(typeof(JoinerAgent1), id2, agentInitializationParameters)

		waitForTheKernel(STANDARD_TIMEOUT)

		var evt0 = id1.getResult(typeof(ParticipantLeft), 0)
		evt0.assertNotNull

		var spcid0 = id1.getResult(typeof(SpaceID), 1)
		spcid0.assertNotNull

		var evt1 = id2.getResult(typeof(ParticipantLeft), 0)
		evt1.assertNull

		id2.assertEquals(evt0.source.ID)
		spcid0.assertEquals(evt0.spaceID)
	}

	@Test
	@DisplayName("ParticipantLeft in other space")
	@SuppressWarnings("discouraged_reference")
	def runParticipantLeftInOtherSpace(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)

		val id1 = UUID.randomUUID
		val id2 = UUID.randomUUID

		val lock = id1.waitForAgentSpawned

		kern.startAgentWithID(typeof(SpyAgent3), id1, agentInitializationParameters)

		lock.doWait

		kern.startAgentWithID(typeof(JoinerAgent3), id2, agentInitializationParameters)

		waitForTheKernel(STANDARD_TIMEOUT)

		var evt0 = getResult(id1, typeof(ParticipantLeft), 0)
		evt0.assertNotNull

		var spcid0 = getResult(id1, typeof(SpaceID), 1)
		spcid0.assertNotNull

		var spcid1 = getResult(id2, typeof(SpaceID), 0)
		spcid1.assertNotNull

		var evt1 = getResult(id2, typeof(ParticipantLeft), 1)
		evt1.assertNotNull
		
		spcid0.assertNotEquals(spcid1)
		evt0.assertNotSame(evt1)

		spcid0.assertEquals(evt0.source.spaceID)
		id2.assertEquals(evt0.source.ID)
		spcid1.assertEquals(evt0.spaceID)

		spcid0.assertEquals(evt1.source.spaceID)
		id1.assertEquals(evt1.source.ID)
		spcid0.assertEquals(evt1.spaceID)
	}

}
