/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.bugs.to1500.bug1038

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.bugs.to1500.bug1038.mocks.BootAgent
import io.sarl.sre.janus.itests.bugs.to1500.bug1038.mocks.TestAgent1
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/** Testing class for issue: getContext is null after a join and it must not be.
 *
 * <p>https://github.com/sarl/sarl/issues/1038
 *
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see "https://github.com/sarl/sarl/issues/1038"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #1038")
@Tag("sre-run")
@Tag("janus")
class Bug1038IT {

	@RepeatedTest(20)
	@DisplayName("Join inner context")
	def joinInnerContext(extension rc : SreRunContext) : void {
		typeof(TestAgent1).runSre(STANDARD_TIMEOUT)

		val r = allResultsPerAgent
		2.assertEquals(r.size)
		
		val agent1id = bootAgentId
		val agent2id = r.keySet.filter[it != agent1id].iterator.next

		val data1 = r.get(agent1id)
		data1.assertContains("participant-joined" + agent2id.toString)

		val data2 = r.get(agent2id)
		data2.assertContains("joined="+agent1id.toString, "context null = true")
	}

	@RepeatedTest(20)
	@DisplayName("Holonic joins")
	def holonicJoins(extension rc : SreRunContext) : void {
		typeof(BootAgent).runSre(STANDARD_TIMEOUT)
		allResults.assertContainsAtLeast("PongFinished", "LeafPingFinished")
	}

}
