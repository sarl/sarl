/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.itests.internal

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.itests.internal.mocks.Data
import io.sarl.sre.janus.itests.internal.mocks.MyWaiterAgent4
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*

import static extension io.sarl.tests.api.tools.TestUtils.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: on SpaceCreated test")
@Tag("sre-run")
@Tag("janus")
class OnSpaceCreatedIT {

	@RepeatedTest(5)
	@DisplayName("run")
	def run(extension rc : SreRunContext) {
		typeof(MyWaiterAgent4).runSre
		
		var all = allResults
		assertEquals(2, all.size)
		var data1 = all.elementAt(typeof(Data), 0)
		var data2 = all.elementAt(typeof(Data), 1)

		var rest = validateSpawner(data1, data2)
		rest.validateSpawned
	}

	private def validateSpawner(d1 : Data, d2 : Data) : Data {
		var sdata : Data 
		var rdata : Data
		if (d1.label == "SPAWNER") {
			sdata = d1
			rdata = d2
		} else {
			sdata = d2
			rdata = d1 
		}
		assertNotNull(rdata.createdSpace)
		assertEquals("SPAWNER", sdata.label)
		assertEquals(rdata.createdSpace.spaceID, sdata.spaceID)
		assertEquals(rdata.defaultSpaceID, sdata.source.spaceID)
		assertEquals(rdata.defaultSpaceID.contextID, sdata.source.ID)
		return rdata
	}

	private def validateSpawned(d : Data) {
		assertNotNull(d.createdSpace)
		assertEquals("SPAWNED", d.label)
		assertEquals(d.createdSpace.spaceID, d.spaceID)
		assertEquals(d.defaultSpaceID, d.source.spaceID)
		assertEquals(d.defaultSpaceID.contextID, d.source.ID)
	}

}
