/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor

import java.util.concurrent.Callable
import java.util.function.Consumer
import java.util.logging.Level
import java.util.logging.Logger
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract implementation of a task that could be run on the JRE executor service.
 * See {@link Runnables} for creating an instance.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6
 * @see Runnables
 */
abstract class SreExecutable {

	protected volatile var exception : Throwable

	val logger : Logger

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param logger the logger to use.
	 */
	protected new (logger : Logger) {
		this.logger = logger
	}

	/** Replies the logger.
	 * 
	 * @return the logger, or {@code null} if the platform logger should be used.
	 */
	def getLogger : Logger {
		this.logger
	}

	/** Replies a not-empty message for the given exception.
	 *
	 * @param ex the exception.
	 * @return the error message.
	 */
	protected static def exceptionMessage(ex : Throwable) {
		if (ex !== null) {
			val msg = ex.localizedMessage
			if (!msg.nullOrEmpty) {
				return msg
			}
		}
		var msg = ex.class.simpleName
		return msg
	}

	/** Replies the root cause of the given exception.
	 *
	 * @param ex the exception for which the root cause msut be determined.
	 * @return the root cause, never null.
	 */
	protected static def getRootCause(ex : Throwable) : Throwable {
		assert ex !== null
		var root = ex
		while (root.cause !== null && root.cause !== root && root.cause !== ex) {
			root = root.cause
		}
		return root
	}

	/** Replies if the task was finished on a success.
	 * 
	 * @return {@code true} if the task if finished and successful. {@code false}
	 * if the task is not not finished or successful.
	 */
	def isSuccess : boolean {
		this.exception === null
	}

	/** Replies the exception that has stopped the task.
	 * 
	 * @return the exception or {@code null} if the task was successfully finished.
	 * @since 0.11
	 */
	def getException : Throwable {
		this.exception
	}

	/** Invoked when an error occurs into the task and after this error is logged out.
	 * The default implementation does nothing.
	 * 
	 * @param error the error.
	 * @return {@code true} if the error should be thrown in the current thread.
	 *     {@code false} if the exception is not thrown.
	 * @since 0.11
	 */
	protected def onError(error : Throwable) : boolean {
		return true
	}

	/** Invoked when the task is finished whatever it is successful or failing.
	 * The default implementation does nothing.
	 * 
	 * @since 0.11
	 */
	protected def onFinished {
	}

}

/** 
 * A specific SRE runnable that is catching the {@link EarlyExitException}.
 * See {@link Runnables} for creating an instance.
 * 
 * <p>The behavior of this runnable regarding the exceptions depends on the
 * definition of the logger. If a logger is defined, the exceptions are logged out but never
 * thrown to the Java execution layer. If a logger is not defined, the exceptions are thrown
 * to the Java execution layer. 
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6
 * @see Runnables
 */
class SreRunnable extends SreExecutable implements Runnable {

	val runnable : Runnable

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param runnable the wrapped task.
	 * @param logger the logger to use.
	 */
	protected new (runnable : Runnable, logger : Logger) {
		super(logger)
		assert runnable !== null
		this.runnable = runnable
	}

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param logger the logger to use.
	 */
	protected new (logger : Logger) {
		super(logger)
		this.runnable = null
	}

	/** Replies the wrapped task.
	 * 
	 * @return the runnable.
	 */
	def getWrappedRunnable : Runnable {
		this.runnable
	}

	/** Run the task. The default implementation runs the attached Runnable. */
	protected def internalRun {
		wrappedRunnable?.run
	}

	@SuppressWarnings("discouraged_reference")
	final def run {
		try {
			this.exception = null
			internalRun
		} catch (ex : EarlyExitException) {
			ex.runPostTreatment(this.logger)
		} catch (ex : InterruptedException) {
			// Ignore this exception
			// Clear the interrupted flag
			Thread::interrupted
		} catch (ex : Throwable) {
			val cause = ex.rootCause
			if (cause instanceof EarlyExitException) {
				cause.runPostTreatment(this.logger)
			} else if (cause instanceof InterruptedException) {
				// Ignore this exception
				// Clear the interrupted flag
				Thread::interrupted
			} else {
				this.exception = cause
				val doThrown = onError(cause)
				val log = getLogger
				if (log !== null) {
					log.log(Level::SEVERE, cause) [cause.exceptionMessage]
				} else if (doThrown) {
					throw cause
				}
			}
		} finally {
			onFinished
		}
	}
	
	def toString : String {
		wrappedRunnable?.toString
	}

	def equals(obj : Object) : boolean {
		wrappedRunnable == obj
	}

	def hashCode : int {
		val r = wrappedRunnable
		if (r !== null) r.hashCode else 0
	}

}

/** 
 * A specific SRE callable that is catching the {@link EarlyExitException}.
 * See {@link Runnables} for creating an instance.
 * 
 * <p>The behavior of this callable regarding the exceptions depends on the
 * definition of the logger. If a logger is defined, the exceptions are logged out but never
 * thrown to the Java execution layer. If a logger is not defined, the exceptions are thrown
 * to the Java execution layer. 
 * 
 * @param <T> the type of the result.
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6
 * @see Runnables
 */
class SreCallable<T> extends SreExecutable implements Callable<T> {

	val callable : Callable<T>

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param callable the wrapped task.
	 * @param logger the logger to use.
	 */
	protected new (callable : Callable<T>, logger : Logger) {
		super(logger)
		assert callable !== null
		this.callable = callable
	}

	/** 
	 * @param logger the logger to use.
	 */
	new (logger : Logger) {
		super(logger)
		this.callable = null
	}

	/** Replies the wrapped task.
	 * 
	 * @return the callable.
	 */
	def getWrappedCallable : Callable<T> {
		this.callable
	}

	/** Run the task. The default implementation runs the attached Runnable.
	 *
	 * @return the result of the computation
	 */
	protected def internalCall : T {
		wrappedCallable?.call
	}

	final def call : T {
		try {
			this.exception = null
			return internalCall
		} catch (ex : EarlyExitException) {
			ex.runPostTreatment(this.logger)
			return null
		} catch (ex : InterruptedException) {
			// Ignore this exception
			return null
		} catch (ex : Throwable) {
			val cause = ex.rootCause
			if (cause instanceof EarlyExitException) {
				cause.runPostTreatment(this.logger)
			} else if (cause instanceof InterruptedException) {
				// Ignore this exception
			} else {
				this.exception = cause
				val doThrown = onError(cause)
				val log = getLogger
				if (log !== null) {
					log.log(Level::SEVERE, cause) [cause.exceptionMessage]
				} else if (doThrown) {
					throw cause
				}
			}
			return null
		} finally {
			onFinished
		}
	}

	def toString : String {
		wrappedCallable?.toString
	}

	def equals(obj : Object) : boolean {
		wrappedCallable == obj
	}

	def hashCode : int {
		var c = wrappedCallable
		if (c !== null) c.hashCode else 0
	}

}

/** 
 * A specific SRE consumer that is catching the {@link EarlyExitException}.
 * 
 * @param <T> the type of the result.
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.7
 * @see Runnables
 */
class SreConsumer<T> extends SreExecutable implements Consumer<T> {

	val consumer : Consumer<T>

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param consumer the wrapped task.
	 * @param logger the logger to use.
	 */
	protected new (consumer : Consumer<T>, logger : Logger) {
		super(logger)
		assert consumer !== null
		this.consumer = consumer
	}

	/** 
	 * @param logger the logger to use.
	 */
	new (logger : Logger) {
		super(logger)
		this.consumer = null
	}

	/** Replies the wrapped task.
	 * 
	 * @return the consumer.
	 */
	def getWrappedConsumer : Consumer<T> {
		this.consumer
	}

	/** Run the task. The default implementation runs the attached Runnable.
	 * 
	 * @param t the element to accept
	 */
	protected def internalAccept(t : T) {
		wrappedConsumer?.accept(t)
	}

	final def accept(t : T) {
		try {
			this.exception = null
			internalAccept(t)
		} catch (ex : EarlyExitException) {
			ex.runPostTreatment(this.logger)
		} catch (ex : InterruptedException) {
			// Ignore this exception
		} catch (ex : Throwable) {
			val cause = ex.rootCause
			if (cause instanceof EarlyExitException) {
				cause.runPostTreatment(this.logger)
			} else if (cause instanceof InterruptedException) {
				// Ignore this exception
			} else {
				this.exception = cause
				val doThrown = onError(cause)
				val log = getLogger
				if (log !== null) {
					log.log(Level::SEVERE, cause) [cause.exceptionMessage]
				} else if (doThrown) {
					throw cause
				}
			}
		} finally {
			onFinished
		}
	}

	def toString : String {
		wrappedConsumer?.toString
	}

	def equals(obj : Object) : boolean {
		wrappedConsumer == obj
	}

	def hashCode : int {
		val c = wrappedConsumer
		if (c !== null) c.hashCode else 0
	}
	
}

/** 
 * A specific SRE runnable for kernel tasks.
 * See {@link Runnables} for creating an instance.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 * @see Runnables
 */
class SreKernelRunnable implements Runnable {

	@Accessors(PUBLIC_GETTER)
	val source : Runnable

	@Accessors(PUBLIC_GETTER)
	val name : String

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param source the runnable to wrap.
	 * @param name the name of the thread.
	 */
	protected new (source : Runnable, name : String) {
		assert source !== null
		this.source = source
		this.name = name
	}

	@SuppressWarnings("discouraged_reference")
	override run {
		val th = Thread::currentThread
		val oldName = th.name
		try {
			if (this.name !== null) {
				th.name = this.name
			}
			this.source.run
		} finally {
			th.name = oldName
		}
	}

	def toString : String {
		this.source?.toString
	}

	def equals(obj : Object) : boolean {
		this.source == obj
	}

	def hashCode : int {
		val r = this.source
		if (r !== null) r.hashCode else 0
	}

}
