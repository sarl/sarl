/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.context

import io.bootique.di.Injector
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.SreSpaceSpecificationFactory
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.Map
import java.util.TreeMap
import java.util.UUID

/** 
 * A repository of spaces specific to a given context.
 * 
 * <p>This repository is thread-safe.
 * 
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class LocalSpaceRepository extends SpaceRepository {

	val spaces : Map<UUID, SpaceDescription>

	/** Constructor.
	 * 
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 * @param loggingService the logging service.
	 * @param config accessor to the configuration.
	 * @param specificationFactory the factory of space specifications.
	 * @param factories the provider of factories tool.
	 */
	@Inject
	new (injector : Injector, executor : ExecutorService, loggingService : LoggingService, config : SreConfig,
		specificationFactory : SreSpaceSpecificationFactory,
		factories : Provider<Factories>) {
		this(injector, executor, loggingService, config, specificationFactory, null, factories)
	}

	/** Constructor.
	 * 
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 * @param loggingService the logging service.
	 * @param config the configuration.
	 * @param specificationFactory the factory of space specifications.
	 * @param factories the provider of factories tool.
	 */
	new (injector : Injector, executor : ExecutorService,
		loggingService : LoggingService, config : SreConfig,
		specificationFactory : SreSpaceSpecificationFactory,
		internalStructure : Map<UUID, SpaceDescription>,
		factories : Provider<Factories>) {
		super(injector, executor, loggingService, config, specificationFactory, factories)
		if (internalStructure !== null) {
			this.spaces = internalStructure
		} else {
			this.spaces = new TreeMap<UUID, SpaceDescription>
		}
	}

	@Pure
	protected override getSharedStructure : Map<UUID, SpaceDescription> {
		this.spaces
	}

}
