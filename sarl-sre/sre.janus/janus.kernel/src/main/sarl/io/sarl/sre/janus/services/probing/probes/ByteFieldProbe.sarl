/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.probing.probes

import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.probing.IProbeReleaseListener
import io.sarl.sre.janus.internal.Factories
import java.net.URI
import javax.inject.Provider

/** 
 * Probe implementation is linked to a primitive byte field, or a field that
 * could be assimilated to a byte primitive. A probe is thread-safe.
 * This probe make a buffer of the values. In order to be updated, the
 * {@link #sync()} function must be invoked. Then, the new value is read
 * from the associated field, and the probe listeners are notified.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
class ByteFieldProbe extends AbstractFieldProbe<Byte> {

	/** Constructor.
	 * 
	 * @param manager the creator of this probe, and its manager.
	 * @param name the name of the probe
	 * @param uri the UI of the field.
	 * @param field the accessor to the probed field.
	 * @param factories the provider of factories tool.
	 */
	new (manager : IProbeReleaseListener, name : String, uri : URI, field : FieldAccess, factories : Provider<Factories>) {
		super(manager, name, uri, typeof(Byte), field, factories)
	}
	
	protected override areEqualValues(newValue : Byte, oldValue : Byte) : boolean {
		(newValue === null && oldValue === null)
		|| (newValue !== null && oldValue !== null && newValue.byteValue === oldValue.byteValue)
	}

	@SuppressWarnings("io.sarl.lang.validation.IssueCodes.potential_inefficient_value_conversion")
	protected override toT(value : Object, concreteType : Class<?>) : Byte {
		switch (concreteType) {
			case typeof(byte),
			case typeof(Byte): {
				return value as Byte
			}
			default: {
				return null
			}
		}
	}
	
	@SuppressWarnings("io.sarl.lang.validation.IssueCodes.potential_inefficient_value_conversion")
	protected override prepareFieldWriting(newValue : Byte, concreteType : Class<?>, currentValue : Object) : Object {
		switch (concreteType) {
			case typeof(byte): {
				if (newValue === null) {
					return 0 as byte
				}
				return newValue
			}
			case typeof(Byte): {
				return newValue
			}
			default: {
				return newValue
			}
		}
	}

}
