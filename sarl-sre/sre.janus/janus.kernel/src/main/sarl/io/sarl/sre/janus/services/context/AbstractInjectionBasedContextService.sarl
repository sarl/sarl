/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.context

import io.bootique.di.Injector
import io.sarl.lang.core.Agent
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.logging.LoggingService
import java.util.UUID
import javax.inject.Provider

/** 
 * A service managing the root context and enabling the creation of contexts by injection.
 *
 * <p>This service is thread-safe.
 *  
 * @author $Author: ngaud$
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
abstract class AbstractInjectionBasedContextService extends AbstractContextService {

	val injector : Injector

	val contextFactory : ContextFactory

	/** Constructor.
	 *
	 * @param rootContext the root context.
	 * @param logger the logging service to be used.
	 * @param injector is the injector.
	 * @param factory is the factory of contexts.
	 * @param factories the provider of factories tool.
	 */
	protected new(rootContext : Context, logger : LoggingService,
		injector : Injector, factory : ContextFactory, factories : Provider<Factories>) {
		super(rootContext, logger, factories)
		this.injector = injector
		this.contextFactory = factory
	}

	protected override newContextInstance(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context {
		var context = this.contextFactory.newInstance(contextID, defaultSpaceID, owner)
		this.injector.injectMembers(context)
		return context
	}

}
