/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.services.context

import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.AgentTrait
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.OutParameter
import io.sarl.sre.janus.KernelScope
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.logging.LoggingService
import java.text.MessageFormat
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Provider
import org.eclipse.xtext.xbase.lib.util.ToStringBuilder

/** 
 * Implementation of an agent context in the SRE platform.
 * 
 * <p>This class is thread-safe.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class Context extends AgentTrait implements AgentContext {

	val id : UUID

	val defaultSpaceID : UUID

	var repositoryInstance : SpaceRepository

	var defaultSpaceInstance : OpenEventSpace

	val repositoryProvider : Provider<SpaceRepository>

	val logger : Logger

	/** Emitter of the platform events: SpaceCreated, SpaceDestroy
	 */
	var platformEventEmitter : SpaceRepositoryListener

	val spaceEventEmitterFactory : SpaceRepositoryListenerFactory

	val lock : ReadWriteLock

	/** 
	 * Constructs a {@code Context}.
	 * 
	 * @param id identifier of the context.
	 * @param defaultSpaceID identifier of the default space in the context.
	 * @param owner is the owner of the context. If {@code null}, it is the root context.
	 * @param spaceRepositoryProvider the provider of space repository
	 * @param factories the provider of factories.
	 * @param loggingService the logging service.
	 * @param listenerFactory the factory of space listeners.
	 */
	new (id : UUID, defaultSpaceID : UUID, owner : Agent, spaceRepositoryProvider : Provider<SpaceRepository>,
		factories : Provider<Factories>, loggingService : LoggingService, listenerFactory : SpaceRepositoryListenerFactory) {
		super(owner)
		this.id = id
		this.defaultSpaceID = defaultSpaceID
		this.repositoryProvider = spaceRepositoryProvider
		this.logger = loggingService.getKernelModuleLogger(Messages::Context_1)
		this.spaceEventEmitterFactory = listenerFactory
		this.lock = factories.get.newReadWriteLock
	}

	/** Replies the lock to be used.
	 */
	@Pure
	protected def getLock : ReadWriteLock {
		return this.lock
	}

	@Pure
	override isRootContext : boolean {
		this.owner === null
	}

	@Pure
	def getID : UUID {
		this.id
	}

	@Pure
	override toString(builder : ToStringBuilder) {
		builder.add("id", getID)
		builder.add("owner", getOwner)
	}

	/** Replies the space repository and creates it if it does not exist.
	 *
	 * <p>This function is thread-safe.
	 * 
	 * @param defaultSpaceCallback the call back for default space.
	 * @return the space repository.
	 */
	protected def ensureRepository(defaultSpaceCallback : (OpenEventSpace) => void = null) : SpaceRepository {
		var listener : SpaceRepositoryListener = null
		var instance : SpaceRepository
		var ds : OpenEventSpace
		val rlock = getLock.readLock
		rlock.lock
		try {
			instance = this.repositoryInstance
			ds = this.defaultSpaceInstance
		} finally {
			rlock.unlock
		}

		if (instance === null || ds === null) {
			val wlock = getLock.writeLock
			wlock.lock
			try {
				instance = this.repositoryInstance
				ds = this.defaultSpaceInstance
				if (instance === null || ds === null) {
					var addListener = false
					val id = ID
					if (instance === null) {
						instance = this.repositoryProvider.get
						this.repositoryInstance = instance
						addListener = true
					}
					if (ds === null) {
						var spaceID = new SpaceID(id, this.defaultSpaceID, typeof(OpenEventSpaceSpecification))
						this.defaultSpaceInstance = instance.createDefaultSpace(spaceID)
						ds = this.defaultSpaceInstance
					}
					if (addListener) {
						listener = this.platformEventEmitter
						if (listener === null) {
							listener = this.spaceEventEmitterFactory.create(id, ds, this.logger)
							this.platformEventEmitter = listener
						}
					}
				}
			} finally {
				wlock.unlock
			}
		}

		if (listener !== null) {
			instance.addSpaceRepositoryListener(listener)
		}

		if (defaultSpaceCallback !== null) {
			defaultSpaceCallback.apply(ds)
		}

		return instance
	}

	/** 
	 * Initialize the context when it is published to the agents.
	 */
	def initialize {
		//
	}

	/** 
	 * Destroy any associated resources.
	 */
	def destroy : void {
		val wlock = getLock.writeLock
		wlock.lock
		try {
			val emitter = this.platformEventEmitter
			this.platformEventEmitter = null
			this.defaultSpaceInstance = null
			var instance = this.repositoryInstance
			if (instance !== null) {
				instance.destroy
				if (emitter !== null) {
					instance.removeSpaceRepositoryListener(emitter)
				}
			}
			this.repositoryInstance = null
		} finally {
			wlock.unlock
		}
	}

	override getDefaultSpace : OpenEventSpace {
		val ds = new OutParameter<OpenEventSpace>
		ensureRepository [
			ds.set(it)
		]
		return ds.get
	}

	override getSpace(spaceUUID : UUID) : S with S extends Space {
		var repo = ensureRepository
		if (this.defaultSpaceID == spaceUUID) {
			return this.defaultSpaceInstance as S
		}
		var spaceID = new SpaceID(ID, spaceUUID, null)
		return repo.getSpace(spaceID) as S
	}

	override getSpaces(spec : Class<? extends SpaceSpecification<S>>) : ConcurrentCollection<S> with S extends Space {
		ensureRepository.getSpaces(spec)
	}

	override getSpaces : ConcurrentCollection<? extends Space> {
		ensureRepository.getSpaces
	}

	override createSpace(spec : Class<? extends SpaceSpecification<S>>, spaceUUID : UUID,
		creationParams : Object*) : S with S extends Space {
		// If the space identifier corresponds to the default space, get the default space (by accessing the cache attribute)
		val ds = new OutParameter<OpenEventSpace>
		var instance = ensureRepository [ds.set(it)]
		if (spaceUUID == this.defaultSpaceID) {
			return ds.get as S
		}
		val contextId = ID
		var spaceID = new SpaceID(contextId, spaceUUID, spec)
		this.logger.fine[MessageFormat::format(Messages::Context_0, contextId, spaceUUID)]
		return instance.createSpace(spaceID, spec, creationParams)
	}

	override getOrCreateSpaceWithSpec(spec : Class<? extends SpaceSpecification<S>>, spaceUUID : UUID,
		creationParams : Object*) : S with S extends Space {
		var instance = ensureRepository
		var spaceID = new SpaceID(ID, spaceUUID, spec)
		return instance.getOrCreateSpaceWithSpec(spaceID, spec, creationParams)
	}

	override getOrCreateSpaceWithID(spec : Class<? extends SpaceSpecification<S>>, spaceUUID : UUID,
		creationParams : Object*) : S with S extends Space {
		val ds = new OutParameter<OpenEventSpace>
		var instance = ensureRepository [ds.set(it)]
		if (this.defaultSpaceID == spaceUUID) {
			return ds.get as S
		}
		var spaceID = new SpaceID(ID, spaceUUID, spec)
		return instance.getOrCreateSpaceWithID(spaceID, spec, creationParams)
	}

	/** Add listener on the space repository changes.
	 * 
	 * @param listener the listener to be added.
	 */
	def addSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		ensureRepository.addSpaceRepositoryListener(listener)
	}

	/** Remove listener on the space repository changes.
	 * 
	 * @param listener the listener to be removed.
	 */
	def removeSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		var instance : SpaceRepository
		val rlock = getLock.readLock
		rlock.lock
		try {
			instance = this.repositoryInstance
		} finally {
			rlock.unlock
		}
		if (instance !== null) {
			instance.removeSpaceRepositoryListener(listener)
		}
	}

}

/** 
 * Factory of SRE contexts.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
interface ContextFactory {

		/** Create an instance of SRE context.
		 * 
		 * @param contextID the identifier of the context.
		 * @param defaultSpaceID the identifier of the defualt space into the context.
		 * @param owner is the owner of the context. If {@code null}, the context is the root context.
		 */
	def newInstance(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context

}

/** 
 * Factory of SRE contexts.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
class DefaultContextFactory implements ContextFactory {

	val spaceRepositoryProvider : Provider<SpaceRepository>
	val logger : LoggingService
	val listenerFactory : Provider<SpaceRepositoryListenerFactory>
	val factories : Provider<Factories>

	/** Constructor with injected parameters.
	 * 
	 * @param spaceRepositoryProvider the provider of space repository.
	 * @param logger the logging service.
	 * @param listenerFactory the factory of space listeners.
	 * @param factories the provider of factories tool.
	 */
	@Inject
	new (spaceRepositoryProvider : Provider<SpaceRepository>,
		logger : LoggingService,
		@KernelScope listenerFactory : Provider<SpaceRepositoryListenerFactory>,
		factories : Provider<Factories>) {
		this.spaceRepositoryProvider = spaceRepositoryProvider
		this.logger = logger
		this.listenerFactory = listenerFactory
		this.factories = factories
	}

	override newInstance(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context {
		new Context(contextID, defaultSpaceID, owner, this.spaceRepositoryProvider,
			this.factories, this.logger, this.listenerFactory.get)
	}

}
