/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.logging.jul

import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.LoggingConfig
import java.util.logging.Formatter
import java.util.logging.Level
import java.util.logging.LogManager
import java.util.logging.Logger
import javax.inject.Provider
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Helper for creating a JUL logger.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class JulLoggerCreator {

	/** Prefix for the logger names. */
	public static val PLATFORM_LOGGER_NAME_PREFIX = "Janus-SRE-"

	@Accessors
	val defaultLevel : Level

	val configProvider : Provider<SreConfig>

	val loggerProvider : (String)=>Logger

	var config : LoggingConfig

	var defaultProgramName : String

	var platformFormatter : Formatter

	/** Build a logger creator.
	 *
	 * @param defaultLevel the logging level for new loggers.
	 * @param configProvider the provider of SRE configuration.
	 * @param loggerProvider the provider of loggers to use; if {@code null}, the default JUL log manager is used.
	 */
	new (defaultLevel : Level, configProvider : Provider<SreConfig>, loggerProvider : (String)=>Logger = null) {
		this.defaultLevel = defaultLevel
		this.configProvider = configProvider
		if (loggerProvider === null) {
			this.loggerProvider = [ Logger::getLogger(it) ]
		} else {
			this.loggerProvider = loggerProvider
		}
	}

	/** Replies the log formatter for the SRE kernel.
	 * 
	 * @return the log formatter, never {@code null}.
	 */
	synchronized def getPlatformFormatter : Formatter {
		if (this.platformFormatter === null) {
			this.platformFormatter = createPlatformFormatter
		}
		return this.platformFormatter
	}

	/** Change the log formatter for the SRE kernel.
	 * 
	 * @param formatter the log formatter, or {@code null} to use the default.
	 */
	synchronized def setPlatformFormatter(formatter : Formatter) {
		this.platformFormatter = formatter
	}

	/** Create a formatter for the SRE kernel.
	 * 
	 * @return the newly created instance of formatter.
	 */
	protected def createPlatformFormatter : Formatter {
		new SreJulPatternFormatter(this.loggingConfig.platformMessageFormat)
	}

	protected def getLoggingConfig : LoggingConfig {
		if (this.config === null) {
			this.config = this.configProvider.get.services.logging
		}
		return this.config
	}

	protected def getProgramName : String {
		if (this.defaultProgramName.isNullOrEmpty) {
			this.defaultProgramName = this.configProvider.get.boot.programName
		}
		return this.defaultProgramName
	}
	
	/** 
	 * Create a logger for the platform.
	 * 
	 * @return the logger.
	 * @since 0.7.0
	 */
	def createPlatformLogger() : Logger {
		LogManager::logManager.reset
		val kernelId = this.configProvider.get.boot.rootContextID
		val loggerName = PLATFORM_LOGGER_NAME_PREFIX + kernelId
		val logger = this.loggerProvider.apply(loggerName)
		assert logger !== null
		val formatter = getPlatformFormatter
		assert formatter !== null
		val stderr = new JulStandardErrorOutputConsoleHandler(formatter)
		stderr.level = Level::ALL
		val stdout = new JulStandardOutputConsoleHandler(formatter)
		stdout.level = Level::ALL
		var allHandlers = logger.handlers
		if (allHandlers !== null) {
			for (handler : allHandlers) {
				logger.removeHandler(handler)
			}
		}
		logger.addHandler(stderr)
		logger.addHandler(stdout)
		logger.useParentHandlers = false
		logger.level = this.defaultLevel
		return logger
	}

	/** 
	 * Create a logger with the given name for a platform module (kernel or agent).
	 * 
	 * @param name the name of the new logger. If {@code null}, the default program name is used.
	 * @param parent the parent logger.
	 * @return the logger.
	 * @since 0.7.0
	 */
	def createModuleLogger(name : String = null, parent : Logger) : Logger {
		val thename = if (name.isNullOrEmpty) {
			this.programName
		} else {
			name
		}
		val logger = this.loggerProvider.apply(thename)
		if (parent !== null) {
			logger.parent = parent
			logger.useParentHandlers = true
			if (parent.level.intValue <= this.defaultLevel.intValue) {
				logger.level = this.defaultLevel
			} else {
				logger.level = parent.level			
			}
		} else {
			logger.level = this.defaultLevel
		}
		return logger
	}

}
