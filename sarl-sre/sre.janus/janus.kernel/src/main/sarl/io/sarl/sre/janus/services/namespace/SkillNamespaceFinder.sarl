/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.namespace

import io.sarl.api.naming.name.SkillName
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.core.UnimplementedCapacityException
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.janus.services.context.ContextService
import jakarta.inject.Inject
import jakarta.inject.Singleton

/** 
 * Implementation of a finder of skill into the namespaces.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Singleton
class SkillNamespaceFinder extends AbstractNamespaceFinder<SkillName, Skill> {

	/** Constructor.
	 * 
	 * @param service the service that is managing the contexts and the spaces.
	 */
	@Inject
	new (service : ContextService) {
		super(service)
	}
	
	override getScheme : String {
		SkillName::SCHEME
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override find(name : SkillName) : Skill {
		if (name === null) {
			return null
		}
		var ^capacity = name.^capacity
		if (^capacity !== null) {
			var ^agent = findAgent(name.contextId, name.spaceId, name.agentId)
			if (^agent !== null) {
				try {
					var ^skill = SREutils::getInternalSkill(^agent, ^capacity)
					if (^skill instanceof Skill) {
						return ^skill
					}
				} catch (ex : UnimplementedCapacityException) {
					//
				}
			}
		}
		return null
	}
	
}
