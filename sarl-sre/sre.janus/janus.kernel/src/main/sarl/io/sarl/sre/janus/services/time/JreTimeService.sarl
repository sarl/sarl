/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.time

import io.sarl.api.util.SmartListenerCollection
import jakarta.inject.Inject
import jakarta.inject.Singleton
import java.util.concurrent.TimeUnit

/**
 * Time service based on the JRE standard time.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
@Singleton
class JreTimeService extends AbstractTimeService {

	/** Constructor.
	 * 
	 * @param listeners the empty collection of listeners that must be used by this service. 
	 */
	@Inject
	new (listeners : SmartListenerCollection<TimeListener>) {
		super(listeners)
	}
	
	def getOSCurrentTime : long {
		System::currentTimeMillis	
	}

	def getTimePrecision : TimeUnit {
		TimeUnit::MILLISECONDS
	}

	def getTime(timeUnit : TimeUnit) : double {
		val currentTime = this.OSCurrentTime
		val tu = timeUnit ?: TimeUnit::SECONDS
		if (tu == TimeUnit::MILLISECONDS) {
			return currentTime
		}
		return currentTime.convertFromTo(TimeUnit::MILLISECONDS, tu)
	}

	def getOSTimeFactor : double {
		1.0
	}

	def evolveTimeIfPossible(timeDelta : double) : boolean {
		fireTimeChanged
		return false
	}

	def setTimeIfPossible(time : double) : boolean {
		false
	}
	
}
