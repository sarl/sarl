/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.bootique.di.Injector
import io.sarl.api.util.SarlSpecificationChecker
import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.sre.janus.KernelScope
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import java.util.UUID
import javax.inject.Inject
import javax.inject.Provider

/** 
 * Implementation of a spawning service that is using injection mechanism
 * for creating the agent.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class InjectionBasedLifecycleService extends AbstractLifecycleService {

	/**
	 * Constructs the service with the given (injected) injector.
	 * 
	 * @param injector
	 * the injector that should be used by this service for creating the agents.
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param factories the provider of factories tool.
	 * @param agentLevelInjector the dynamic injector for the agent level.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param sreConfig the configuration of the SRE.
	 */
	@Inject
	new (injector : Injector, sarlSpecificationChecker : SarlSpecificationChecker,
		@KernelScope lifecycleListener : Provider<LifecycleServiceListener>,
		@KernelScope externalContextListener : Provider<ExternalContextMemberListener>,
		factories : Provider<Factories>,
		agentLevelInjector : Provider<ConfigurableAgentInjector>,
		skillProvider : DynamicSkillProvider,
		skillUninstaller : SkillUninstaller,
		executor : ExecutorService,
		logger : LoggingService,
		sreConfig : SreConfig) {
		this(sarlSpecificationChecker, new CreatorFactory(injector),
			lifecycleListener, externalContextListener, factories, agentLevelInjector,
			skillProvider, skillUninstaller, executor, logger, sreConfig.services.lifecycle)
	}

	/** 
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param factories the provider of factories tool.
	 * @param agentLevelInjector the dynamic injector for the agent level.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param lifecycleConfig the configuration of the lifecycle service.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider,
		lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>,
		factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>,
		skillProvider : DynamicSkillProvider,
		skillUninstaller : SkillUninstaller, executor : ExecutorService, logger : LoggingService,
		lifecycleConfig : LifecycleConfig) {
		super(sarlSpecificationChecker, creator,
			lifecycleListener, externalContextListener, factories, agentLevelInjector,
			skillProvider, skillUninstaller, executor, logger, lifecycleConfig)
	}

	/** 
	 * An injection module that is able to inject the parent ID and agent ID when creating an agent.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.14.0 20241106-161408
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static class CreatorFactory extends AbtractAgentCreatorProvider {

		val injector : Injector

		new (injector : Injector) {
			this.injector = injector
		}

		override getAgentCreator(agentType : Class<? extends Agent>, parent : UUID, nbAgents : int,
				skillProviders : DynamicSkillProvider*) : (UUID)=>Agent {
			val cons = agentType.agentConstructor
			return [
				val ^agent = cons.createAgent(agentType, parent, it, skillProviders)
				this.injector.injectMembers(^agent)
				return ^agent
			]
		}

	}

}
