/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard.polymorphic

import io.sarl.lang.core.Event
import io.sarl.lang.core.IBehaviorGuardEvaluatorReceiver
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluator
import java.util.Collection
import org.eclipse.xtend.lib.annotations.Accessors

import static extension io.sarl.lang.core.SREutils.*

/**
 * Describes an object that has the ability to receive SARL events, and consequently to evaluate the
 * guard associated to a given event and returns the list of behaviors' runnable that must be
 * executed according to the result of the guard evaluation.
 *
 * <p>The {@code BehaviorGuardEvaluator} is comparable in order to be storable into a collection (usually a sorted set) that
 * needs the elements to be comparable.
 *
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
class PolymorphicBehaviorGuardEvaluator implements IBehaviorGuardEvaluator {

	/** The object with the event receiving method.
	 */
	val target : IBehaviorGuardEvaluatorReceiver

	/** The filter to apply.
	 */
	@Accessors
	val filter : (Event)=>boolean

	/** The type of event for which this evaluator is created. */
	val eventType : Class<? extends Event>

	/** Creates a {@code Subscriber}.
	 * 
	 * @param target the listener
	 * @param eventType the type of event for which this evaluator is created
	 * @param filter the filter
	 */
	new (target : IBehaviorGuardEvaluatorReceiver, eventType : Class<? extends Event>, filter : (Event) => boolean) {
		assert target !== null
		this.target = target
		this.eventType = eventType
		this.filter = filter
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override evaluateGuard(^event : Object, behaviorsMethodsToExecute : Collection<Runnable>) {
		getTarget.doEvaluateBehaviorGuards(this.eventType, ^event, behaviorsMethodsToExecute)
	}

	override getTarget : IBehaviorGuardEvaluatorReceiver {
		this.target
	}

	override hashCode : int {
		return System::identityHashCode(this.target)
	}

	override equals(obj : Object) : boolean {
		if (obj instanceof PolymorphicBehaviorGuardEvaluator) {
			// Use == so that different equal instances will still receive events.
			// We only guard against the case that the same object is registered
			// multiple times
			return this.target === obj.target
		}
		return false
	}

	override compareTo(otherEvaluator : IBehaviorGuardEvaluator) : int {
		val other = otherEvaluator as PolymorphicBehaviorGuardEvaluator
		if (other === null) {
			return 1
		}
		val id0 = System::identityHashCode(this.target)
		val id1 = System::identityHashCode(other.target)
		return id0 <=> id1
	}

}
