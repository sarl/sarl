/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.configs.subconfigs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.meta.application.OptionMetadata
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the agent lifecycle management.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
@BQConfig("Configuration of the lifecycle service")
class LifecycleConfig {

	/** 
	 * Prefix for the configuration entries of the lifecycle configuration.
	 */
	public static val PREFIX : String = ServicesConfig::PREFIX + ".lifecycle"

	/** 
	 * Name of property that indicates if agents must be created by an injector.
	 * 
	 * @see #CREATE_AGENT_WITH_INJECTOR_VALUE
	 */
	public static val CREATE_AGENT_WITH_INJECTOR_NAME = PREFIX + ".createAgentsWithInjector"
	
	/** 
	 * Indicates if the agents must be created with an injector by default.
	 * 
	 * @see #CREATE_AGENT_WITH_INJECTOR_NAME
	 */
	public static val CREATE_AGENT_WITH_INJECTOR_VALUE = false

	/** 
	 * Name of property that indicates if the support of the {@code @Injectable} is enable
	 * when the creation of the agents is not injection based.
	 * 
	 * @see #ENABLE_INJECTABLE_ANNOTATION_VALUE
	 * @since 0.12
	 */
	public static val ENABLE_INJECTABLE_ANNOTATION_NAME = PREFIX + ".enableInjectableAnnotation"
	
	/** 
	 * Indicates if the support of the {@code @Injectable} is enable
	 * when the creation of the agents is not injection based.
	 * 
	 * @see #ENABLE_INJECTABLE_ANNOTATION_NAME
	 * @since 0.12
	 */
	public static val ENABLE_INJECTABLE_ANNOTATION_VALUE = true

	/** 
	 * Name of property that indicates the maximal number of agents that could be spawn by a single
	 * thread of the lifecycle service. This value is used to create threads that are spawning
	 * blocks of agents.
	 * 
	 * @see #AGENT_SPAWNING_COUNT_PER_THREAD_VALUE
	 * @since 0.11
	 */
	public static val AGENT_SPAWNING_COUNT_PER_THREAD_NAME = PREFIX + ".agentSpawningCountPerThread"

	/** 
	 * Indicates the maximal number of agents that could be spawn by a single
	 * thread of the lifecycle service. This value is used to create threads that are spawning
	 * blocks of agents.
	 * 
	 * @see #AGENT_SPAWNING_COUNT_PER_THREAD_NAME
	 * @since 0.11
	 */
	public static val AGENT_SPAWNING_COUNT_PER_THREAD_VALUE = 128

	/** 
	 * Name of property that indicates the type of the event bus to create for each agent.
	 * 
	 * @see #EVENT_BUS_TYPE_VALUE
	 * @since 0.12
	 */
	public static val EVENT_BUS_TYPE_NAME = PREFIX + ".eventBusType"
	
	/** 
	 * Indicates the type of event bus to create for each agent.
	 * 
	 * @see #EVENT_BUS_TYPE_NAME
	 * @since 0.12
	 */
	public static val EVENT_BUS_TYPE_VALUE = EventBusType::^default



	@Accessors(PUBLIC_GETTER)
	var createAgentsWithInjector : boolean = CREATE_AGENT_WITH_INJECTOR_VALUE

	@Accessors(PUBLIC_GETTER)
	var enableInjectableSupport : boolean = ENABLE_INJECTABLE_ANNOTATION_VALUE

	@Accessors(PUBLIC_GETTER)
	var agentSpawningCountPerThread : int = AGENT_SPAWNING_COUNT_PER_THREAD_VALUE

	@Accessors(PUBLIC_GETTER)
	var eventBusType : EventBusType = EVENT_BUS_TYPE_VALUE

	/** Change the type of event bus to be created for each agent.
	 * 
	 * @param type the type of event bus.
	 * @since 0.12
	 */
	@BQConfigProperty("Specify the type of event bus to be created by each agent")
	def setEventBusType(type : EventBusType) : void {
		this.eventBusType = type ?: EventBusType.^default
	}

	/** Change the flag that indicates if the agents must be created with injector, or not.
	 *
	 * @param useInjector is {@code true} if the agents should be created by an injector.
	 */
	@BQConfigProperty("Is agents created with the injection mechanism")
	def setCreateAgentsWithInjector(useInjector : boolean) : void {
		this.createAgentsWithInjector = useInjector
	}

	/** Change the flag that indicates the {@code @Injectable} annotation is supported
	 * when the agents are not created with an injector.
	 *
	 * @param enableInjectable is {@code true} if agents ar injected if their are annoted with {@code @Injectable}.
	 * @since 0.12
	 */
	@BQConfigProperty("Is agents injected when they are not created with injector but annotated with @Injectable")
	def setEnableInjectableSupport(enableInjectable : boolean) : void {
		this.enableInjectableSupport = enableInjectable
	}

	/** Change the maximal number of agents that could be spawn by a single
	 * thread of the lifecycle service. This value is used to create threads that are spawning
	 * blocks of agents.
	 * 
	 * @param number is the number of agent to be spawned.
	 * @since 0.11
	 */
	@BQConfigProperty("Maximum number of agents to be spawn by a single thread")
	def setAgentSpawningCountPerThread(number : int) : void {
		this.agentSpawningCountPerThread = if(number > 0) number else 1
	}

}

/** 
 * Module for the agent lifecycle configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
class LifecycleConfigModule implements BQModule {

	static val INJECTAGENT_OPTION = "inject-agents"

	static val EVENTBUSTYPE_OPTION = "event-bus"

	static val AGENTSPAWNINGCOUNTPERTHREAD = "agent-spawns-per-thread"
	
	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(CREATE_AGENT_WITH_INJECTOR_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(INJECTAGENT_OPTION,
				MessageFormat::format(Messages::LifecycleConfigModule_0, CREATE_AGENT_WITH_INJECTOR_VALUE))
			.valueRequired(Messages::LifecycleConfigModule_1).build).mapConfigPath(INJECTAGENT_OPTION,
			CREATE_AGENT_WITH_INJECTOR_NAME)

		VariableDecls::extend(binder).declareVar(AGENT_SPAWNING_COUNT_PER_THREAD_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(AGENTSPAWNINGCOUNTPERTHREAD,
				MessageFormat::format(Messages::LifecycleConfigModule_2, AGENT_SPAWNING_COUNT_PER_THREAD_VALUE)).valueRequired(
				Messages::LifecycleConfigModule_3).build).mapConfigPath(AGENTSPAWNINGCOUNTPERTHREAD,
			AGENT_SPAWNING_COUNT_PER_THREAD_NAME)

		VariableDecls::extend(binder).declareVar(EVENT_BUS_TYPE_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(EVENTBUSTYPE_OPTION,
				MessageFormat::format(Messages::LifecycleConfigModule_4, EVENT_BUS_TYPE_VALUE.toJsonString))
				.valueRequired(MessageFormat::format(Messages::LifecycleConfigModule_5, EventBusType::jsonLabels))
				.build)
				.mapConfigPath(EVENTBUSTYPE_OPTION, EVENT_BUS_TYPE_NAME)
	}

}

/** Provider of the module for the agent lifecycle configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
class LifecycleConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new LifecycleConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(LifecycleConfig))
	}
	
	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LifecycleConfigModuleProvider_0);
	}

}
