/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.bic

import io.sarl.api.core.ExternalContextAccess
import io.sarl.lang.core.Address
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Skill
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.sre.janus.KernelScope
import io.sarl.sre.janus.capacities.InternalEventBusCapacity
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.context.InternalContextMembershipListener
import io.sarl.sre.janus.services.context.InternalContextMembershipListenerFactory
import io.sarl.sre.janus.services.lifecycle.ContextReference
import java.util.UUID
import javax.inject.Inject
import javax.inject.Provider

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*

/** 
 * Skill that permits to access to the context in which the agent is located.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill ExternalContextAccessSkill extends Skill implements ExternalContextAccess {

	uses InternalEventBusCapacity

	val contextService : ContextService

	val externalEventEmitter : ExternalContextMemberListener

	val innerContextProvider : InternalContextMembershipListenerFactory

	var internalEventEmitter : InternalContextMembershipListener

	var factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>

	/** Constructor.
	 */
	@Inject
	new (service : ContextService, @KernelScope outerContextProvider : Provider<ExternalContextMemberListener>,
		@KernelScope innerContextProvider : InternalContextMembershipListenerFactory,
		factories : Provider<Factories>,
		agentLevelInjector : Provider<ConfigurableAgentInjector>) {
		super()
		this.contextService = service
		this.externalEventEmitter = outerContextProvider.get
		this.innerContextProvider = innerContextProvider
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
	}

	protected override install {
		this.internalEventEmitter = this.innerContextProvider.create(owner)
	}

	protected override uninstall {
		var life = getAgentLifeOrNull(owner)
		if (life !== null) {
			// Unregister from the external context.
			// The unregistration to the default context is be done into the AgentLife class.
			var contexts = life.externalContexts
			var identifiers = <UUID>newArrayList

			identifiers += contexts.map[it.context.ID]

			for (id : identifiers) {
				id.leave
			}
		}
	}

	def getUniverseContext : AgentContext {
		this.contextService.rootContext
	}

	def getContext(contextID : UUID) : AgentContext {
		assert contextID !== null
		var life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life === null) {
			return null
		}
		var defaultContext = life.defaultContext
		if (defaultContext !== null) {
			var theDefaultContext = defaultContext.context
			if (theDefaultContext !== null && contextID == theDefaultContext.ID) {
				return theDefaultContext
			}
		}
		var context = life.getExternalContext(contextID)
		if (context === null) {
			return null
		}
		return context.context
	}

	def getAllContexts : ConcurrentCollection<AgentContext> {
		val result = this.factories.get.concurrentCollectionFactory.newCollection
		val collection = owner.getAgentLife(this.factories, this.agentLevelInjector)?.enclosingContexts
		if (collection !== null) {
			// TODO optimize the following loop
			for (t : collection.map[var local : AgentContext = it.context; local]) {
				result.add(t)
			}
		}
		return result
	}

	def isInSpace(^event : Event, ^space : Space) : boolean {
		^event.isInSpace(^space.spaceID)
	}

	def isInSpace(^event : Event, spaceID : SpaceID) : boolean {
		spaceID == ^event.source.spaceID
	}

	def isInSpace(^event : Event, spaceID : UUID) : boolean {
		spaceID == ^event.source.spaceID.ID
	}

	def join(contextID : UUID, expectedDefaultSpaceID : UUID) : AgentContext {
		assert contextID !== null
		assert expectedDefaultSpaceID !== null

		var life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life !== null && life.state.alive) {
			if (life.defaultContext?.context.ID == contextID) {
				return null
			}
			var existingContext = life.getExternalContext(contextID)
			if (existingContext !== null) {
				return null
			}

			var context = this.contextService.getContext(contextID)
			if (context === null) {
				return null
			}

			val defaultSpace = context.defaultSpace
			val defaultSpaceID = defaultSpace.spaceID

			if (expectedDefaultSpaceID != defaultSpaceID.ID) {
				return null
			}

			val agentID = ID
			val adr = new Address(defaultSpaceID, agentID)
			life.addExternalContext(context, adr)

			defaultSpace.registerStrongParticipant(associatedEventBusListener)

			this.externalEventEmitter.memberJoined(context, defaultSpaceID, agentID, this.owner.class.name)
			this.internalEventEmitter.contextJoined(contextID, expectedDefaultSpaceID)

			return context
		}
		return null
	}

	def leave(contextID : UUID) : boolean {
		assert contextID !== null

		val life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life === null) {
			return false
		}
		var exitDefaultSpace = false
		var context : ContextReference = null
		var candidate : ContextReference = null
		val currentDefaultContext = life.defaultContext
		if (currentDefaultContext !== null && currentDefaultContext.context.ID == contextID) {
			// Special case: an agent must always be into a default space.
			var ctxs = life.externalContexts
			// TODO verify we have not a bug in the following iterator
			var iterator = ctxs.iterator
			if (!iterator.hasNext) {
				return false
			}
			candidate = iterator.next
			assert candidate !== null
			context = currentDefaultContext
			exitDefaultSpace = true
		} else {
			context = life.getExternalContext(contextID)
		}

		if (context === null) {
			return false
		}

		assert contextID == context.context.ID
		assert contextID == context.addressInDefaultSpace.spaceID.contextID

		context.defaultSpace?.unregister(associatedEventBusListener)

		if (exitDefaultSpace) {
			assert candidate !== null
			val nctx = candidate.context
			if (nctx !== null) {
				life.setDefaultContext(candidate.context, candidate.addressInDefaultSpace)
			}
		} else {
			life.removeExternalContext(context)
		}
		// To send this event the agent must still be inside the context and its default space
		this.internalEventEmitter.contextLeft(contextID)
		this.externalEventEmitter.memberLeft(context.context, context.addressInDefaultSpace.spaceID, this.owner.ID,
			this.owner.class.name)

		return true
	}

	def emit(^space : EventSpace, ^event : Event, scope : Scope<Address>) {
		^space.emit(ID, ^event, scope)
	}

}
