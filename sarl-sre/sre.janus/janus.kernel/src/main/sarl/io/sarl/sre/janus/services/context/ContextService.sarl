/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.context

import io.sarl.api.core.ContextJoined
import io.sarl.api.core.ContextLeft
import io.sarl.api.core.MemberJoined
import io.sarl.api.core.MemberLeft
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.SpaceID
import java.util.Collection
import java.util.EventListener
import java.util.UUID
import org.arakhne.afc.services.IService

/** 
 * This service enables to store the contexts and to manage the spaces in the SRE platform.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface ContextService extends IService {

	/**
	 * Replies the root context.
	 *
	 * @return the root context.
	 */
	def getRootContext : Context

	/** 
	 * Create a new context instance and do not register it into the repository.
	 * 
	 * @param contextID the id of the context to create.
	 * @param defaultSpaceID the id of the default space of the context to create.
	 * @param owner is the owner of  the context. If {@code null}, the context is the root context.
	 * @return the context.
	 */
	def createContextWithoutRegistration(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context

	/**
	 * Create a new context instance and register it into the internal repository.
	 *
	 * @param contextID the id of the context to create.
	 * @param defaultSpaceID the id of the default space of the context to create.
	 * @param owner is the owner of  the context. If {@code null}, the context is the root context.
	 * @return the context.
	 */
	def createContext(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context

	/** 
	 * Replies an existing context instance. This function does not create the instance of the context
	 * if it was not created.
	 * 
	 * @param contextID the id of the context to create
	 * @return the context, {@code null}.
	 */
	def getContext(contextID : UUID) : Context

	/** 
	 * Remove the context instance.
	 * 
	 * @param contextID the id of the context to remove
	 * @return the removed context, {@code null} if no context with the given ID was found.
	 */
	def removeContext(contextID : UUID) : Context

	/** 
	 * Replies all the known contexts.
	 * 
	 * @return a view on all the contexts.
	 * @since 0.10
	 */
	def getAllContexts : Collection<Context>

}

/** 
 * Listener on events related to the members of an external context.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface ExternalContextMemberListener extends EventListener {

	/** 
	 * Fires an {@link MemberJoined} event into the newly joined parent Context default space to notify other context's members
	 * that a new agent joined this context.
	 * 
	 * @param joinedContext the newly joined context to notify its members
	 * @param defaultSpace the identifier of the default space inside {@code joinedContext}.
	 * @param joiningAgentID the identifier of the new member.
	 * @param joiningAgentType the name of the agent type that has joined the context.
	 */
	def memberJoined(joinedContext : AgentContext, defaultSpace : SpaceID, joiningAgentID : UUID,
		joiningAgentType : String)

	/** 
	 * Fires an {@link MemberLeft} event into the default space of the Context that will be left to notify other context's members
	 * that an agent has left this context.
	 * 
	 * @param leftContext the context that will be left
	 * @param defaultSpaceId the identifier of the default space inside {@code leftContext}.
	 * @param leftMemberID the identifier of the agent that has left the context.
	 * @param agentType the name of the agent type that has left the context.
	 */
	def memberLeft(leftContext : AgentContext, defaultSpaceId : SpaceID, leftMemberID : UUID,
		agentType : String)

}

/** 
 * Listener on events related to the membership within a context.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface InternalContextMembershipListener extends EventListener {

	/** 
	 * Fires an {@link ContextJoined} event into the Inner Context default space of the owner agent to notify behaviors/members
	 * that a new context has been joined.
	 * 
	 * @param futureContext ID of the newly joined context
	 * @param futureContextDefaultSpaceID ID of the default space of the newly joined context
	 */
	def contextJoined(futureContext : UUID, futureContextDefaultSpaceID : UUID)

	/** 
	 * Fires an {@link ContextLeft} event into the Inner Context Default space of the owner agent to notify behaviors/members that
	 * the specified context has been left.
	 * 
	 * @param contextID the ID of context that will be left
	 */
	def contextLeft(contextID : UUID)

}

/** 
 * Factory of the listeners on events related to the membership within a context.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.7.0
 */
interface InternalContextMembershipListenerFactory {

	/** Create a listener associated to the given agent.
	 *
	 * @param owner the agent to link to the provided listener.
	 * @return a listener.
	 */	
	def create(owner : Agent) : InternalContextMembershipListener

}
