/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.internal

import io.sarl.api.core.Logging
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.InformedEventListener
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.OutParameter
import io.sarl.sre.janus.capacities.InternalEventBusCapacity
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.ArrayList
import java.util.List
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import java.util.function.BooleanSupplier
import org.eclipse.xtext.xbase.lib.util.ToStringBuilder

import static io.sarl.sre.janus.services.lifecycle.AgentLife.*

/** 
 * SRE implementation of an internal skill that provides an event dispatcher to notify the different components/behaviors of an
 * agent.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill InternalEventBusSkill extends Skill implements InternalEventBusCapacity {

	uses Logging

	val eventBus : EventBus

	var eventListener : InformedEventListener

	var isEventBufferingEnabled = true

	var bufferOfEvents : List<Pair<Event, Object>>

	val bufferLock : ReadWriteLock

	val factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>

	@SuppressWarnings("raw_type")
	@Inject
	@PrivateAPI(isCallerOnly = true)
	new (busFactory : EventBusFactory, factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>) {
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
		this.bufferLock = factories.get.newReadWriteLock
		this.eventBus = busFactory.createEventBus [
			var instance = typeof(InternalSchedules).getSkill
			assert instance !== null, "the owner of the InternalEventBusSkill must also have an InternalSchedules skill"
			return instance
		]
	}

	new (bus : EventBus, bufferLock : ReadWriteLock, factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>) {
		assert bus !== null
		assert bufferLock !== null
		assert factories !== null
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
		this.eventBus = bus
		this.bufferLock = bufferLock
	}

	protected override toString(builder : ToStringBuilder) {
		super.toString(builder)
		builder.add("eventBuffering", isEventBuffering); //$NON-NLS-1$
		builder.add("bufferedEventCount", getBufferedEvents.size); //$NON-NLS-1$
	}


	override getEventBus : EventBus {
		this.eventBus
	}

	override getEventBus(type : Class<T>) : T with T extends EventBus {
		type.cast(this.eventBus)
	}

	protected override install {
		// Register the agent as a direct event listener.
		var bus = this.eventBus
		if (bus !== null) {
			bus.register(this.owner, null, null)
		}
		//Must be here because the owner is set during the skill installation
		this.eventListener = new ExternalEventBusAccessor(owner.ID, this)
	}

	protected override uninstall {
		this.eventBus?.unregisterAll(null)
		this.bufferOfEvents = null
		// Must be done to enable the memory free of these mutual references between InternalBusSkill and ExternalEventBusAccessor
		var listener = this.eventListener
		if (listener instanceof ExternalEventBusAccessor) {
			listener.nullifyOwner
		}
	}

	/** 
	 * Must be synchronized multiple thread may call it at the same time and we must ensure that only one instance of ExternalEventBusAccessor is effectively created
	 */
	final override getAssociatedEventBusListener : InformedEventListener {
		return this.eventListener
	}

	override registerEventBusListener(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
		this.eventBus.register(listener, filter, callback);
	}

	/** Unregister the listener from the event bus.
	 *
	 * @param listener the listener to unregister.
	 * @param callback function which is invoked just before the object is unregistered.
	 */
	override unregisterEventBusListener(listener : Object, callback : (Object)=>void) {
		this.eventBus.unregister(listener, callback)
	}

	/** Unregister the listener from the event bus.
	 * 
	 * @param listenerType the listener to unregister.
	 * @param callback function which is invoked just before the object is unregistered.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 */
	override unregisterEventBusListener(listenerType : Class<?>, callback : (Object)=>boolean) {
		this.eventBus.unregister(listenerType, callback)
	}

	/** Change the event buffering flag.
	 * 
	 * @param buffering the value of the flag.
	 * @return the value of the flag before its change.
	 */
	def setEventBuffering(buffering : boolean) : boolean {
		val wlock = this.bufferLock.writeLock
		wlock.lock
		try {
			val old = this.isEventBufferingEnabled
			this.isEventBufferingEnabled = buffering
			return old
		} finally {
			wlock.unlock
		}
	}

	/** Replies if the events are buffering.
	 * 
	 * @return {@code true} if the events are buffered.
	 */
	def isEventBuffering() : boolean {
		val rlock = this.bufferLock.readLock
		rlock.lock
		try {
			return this.isEventBufferingEnabled
		} finally {
			rlock.unlock
		}
	}

	/** Replies the buffered events.
	 * 
	 * @return an unmodifiable iterable of the buffered elements.
	 */
	def getBufferedEvents : List<Pair<Event, Object>> {
		val rlock = this.bufferLock.readLock
		rlock.lock
		try {
			val buf = this.bufferOfEvents
			if (buf === null) {
				return newArrayList
			}
			return new ArrayList(buf)
		} finally {
			rlock.unlock
		}
	}

	override fireEventAndWait(^event : Event, thrownExceptions : boolean, forceEventHandlerExecution : boolean, listener : Object) : void {
		assert listener !== null
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.blockingEventHandling && (forceEventHandlerExecution || ^event.prepareFiring)) {
			this.eventBus.immediateDispatchTo(listener, ^event, thrownExceptions, getLogger)
		}
	}

	override fireEventAndWait(^event : Event, thrownExceptions : boolean) : void {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.blockingEventHandling && ^event.prepareFiring) {
			this.eventBus.immediateDispatch(^event, thrownExceptions, getLogger)
		}
	}

	override fireEvent(^event : Event) {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.asynchronousEventHandling && ^event.prepareFiring) {
			this.eventBus.asyncDispatch(^event, getLogger)
		}
	}

	override fireEvent(^event : Event, listener : Object) {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.asynchronousEventHandling && ^event.prepareFiring(listener)) {
			this.eventBus.asyncDispatchTo(listener, ^event, getLogger)
		}
	}

	private def prepareFiring(^event : Event, listener : Object = null) : boolean {
		var mustBuff  = false
		val rlock = this.bufferLock.readLock
		rlock.lock
		try {
			mustBuff = this.isEventBufferingEnabled
		} finally {
			rlock.unlock
		}
		if (mustBuff) {
			val wlock = this.bufferLock.writeLock
			wlock.lock
			try {
				mustBuff = this.isEventBufferingEnabled
				if (mustBuff) {
					if (this.bufferOfEvents === null) {
						this.bufferOfEvents = newLinkedList
					}
					this.bufferOfEvents.add(Pair::of(^event, listener))
				}
			} finally {
				wlock.unlock
			}
		}
		return !mustBuff
	}

	override fireEventAndWaitWithEventGathering(^event : Event, thrownExceptions : boolean,
		bufferedEvents : OutParameter<List<Pair<Event, Object>>>,
		beforeEventFiringHandler : () => void,
		beforeReturnHandler : BooleanSupplier) : boolean {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.blockingEventHandling) {
			// Prepare firing
			var wlock = this.bufferLock.writeLock
			wlock.lock
			try {
				this.isEventBufferingEnabled = true
			} finally {
				wlock.unlock
			}
			if (beforeEventFiringHandler !== null) {
				beforeEventFiringHandler.apply
			}
			// Fire the event
			this.eventBus.immediateDispatch(^event, thrownExceptions, getLogger)
			// 
			wlock = this.bufferLock.writeLock
			wlock.lock
			var result = true
			try {
				// Post treatment
				if (beforeReturnHandler !== null) {
					result = beforeReturnHandler.getAsBoolean
				}
				// Reset the event buffering flag
				assert this.isEventBufferingEnabled
				this.isEventBufferingEnabled = false
				bufferedEvents.set(this.bufferOfEvents)
				this.bufferOfEvents = null
			} finally {
				wlock.unlock
			}
			return result
		}
		return false
	}


	override getRegisteredEventBusListeners(type : Class<T>) : ConcurrentCollection<T> with T {
		this.eventBus.getRegisteredEventListeners(type)
	}

	/** 
	 * The class in charge of dispatching every single events coming from the outside of this agent (i.e. from a space) or from an
	 * agent's behavior.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * 
	 */
	private static class ExternalEventBusAccessor implements InformedEventListener {

		var owner : InternalEventBusSkill

		val id : UUID

		new (id : UUID, owner : InternalEventBusSkill) {
			this.id = id
			this.owner = owner;
		}

		override receiveEvent(^event : Event) {
			this.owner?.fireEvent(^event)
		}

		override getID : UUID {
			this.id
		}
		
		def nullifyOwner() {
			this.owner = null;
		}

		override getOwnerInstance : Agent {
			this.owner?.owner
		}
	}

}
