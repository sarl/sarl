/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor

import io.sarl.sre.janus.services.executor.tasks.EarlyExitException
import java.util.Collection
import java.util.concurrent.Callable
import java.util.concurrent.Future
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit
import java.util.function.Consumer
import java.util.logging.Logger
import org.arakhne.afc.services.IService
import org.arakhne.afc.vmutil.json.JsonBuffer

/** 
 * This class enables the SRE kernel to be distributed other a network.
 * 
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface ExecutorService extends IService {

	/** This function simulate the never return from this call.
	 * The {@link EarlyExitException} is thrown.
	 *
	 * @param postCommand is the command to be run when the early-exit exception is catch.
	 *    This command may be used for running post actions on the same thread as the one which
	 *    does an early exit.
	 * @since 0.6.0
	 */
	static def neverReturn(postCommand : Runnable) {
		throw new EarlyExitException(postCommand)
	}

	/**
	 * Submit a task to the executor service.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param logger the logger to use for errors.
	 * @param task the task to submit.
	 * @return a Future representing the pending execution task.
	 */
	def executeAsap(logger : Logger = null, task : Runnable) : Future<?> 

	/**
	 * Submit a task to the executor service. The Future's get method will return the given result upon successful completion.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param <T> - the type of the value replied by the task.
	 * @param task the task to submit.
	 * @param result result to return after the execution.
	 * @return a Future representing the pending execution task.
	 */
	def executeAsap(logger : Logger = null, result : T, task : Runnable) : Future<T> with T

	/**
	 * Submit a task to the executor service.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param <T> - the type of the value replied by the task.
	 * @param task the task to submit.
	 * @return a Future representing the pending execution task.
	 */
	def executeAsap(logger : Logger = null, task : Callable<T>) : Future<T> with T

	/**
	 * Schedule the given task.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param logger the logger to use for errors.
	 * @param command task to run
	 * @param delay delay for waiting before launching the command
	 * @param unit time unit of the delay
	 * @return a Future representing the pending execution task.
	 */
	def schedule(logger : Logger = null, delay : long = 1, unit : TimeUnit = null, command : Runnable) : ScheduledFuture<?>

	/**
	 * Schedule the given task.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param <T> - the type of the value replied by the task.
	 * @param logger the logger to use for errors.
	 * @param command task to run
	 * @param delay delay for waiting before launching the command
	 * @param unit time unit of the delay
	 * @return a Future representing the pending execution task.
	 */
	def schedule(logger : Logger = null, delay : long = 1, unit : TimeUnit = null, command : Callable<T>) : ScheduledFuture<T> with T

	/**
	 * Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the
	 * given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period,
	 * and so on. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task
	 * will only terminate via cancellation or termination of the executor. If any execution of this task takes longer than its
	 * period, then subsequent executions may start late, but will not concurrently execute.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param logger the logger to use for errors.
	 * @param command task to run
	 * @param initialDelay the time to delay first execution
	 * @param period the period between successive executions
	 * @param unit Ã¨ the time unit of the initialDelay and period parameters
	 * @return a Future representing the pending execution task.
	 */
	def scheduleAtFixedRate(logger : Logger = null, initialDelay : long = 0, period : long = 1,
		unit : TimeUnit = null, command : Runnable) : ScheduledFuture<?> 

	/**
	 * Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the
	 * given delay between the termination of one execution and the commencement of the next. If any execution of the task
	 * encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or
	 * termination of the executor.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller. In another words, there is no warranty that the caller's thread is blocked until
	 * the termination of the task.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param logger the logger to use for errors.
	 * @param command the task to execute
	 * @param initialDelay the time to delay first execution
	 * @param delay the delay between the termination of one execution and the start of the next
	 * @param unit the time unit of the initialDelay and delay parameters
	 * @return a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon
	 *         cancellation
	 */
	def scheduleWithFixedDelay(logger : Logger = null, initialDelay : long = 0, delay : long = 1,
		unit : TimeUnit = null, command : Runnable) : ScheduledFuture<?>

	/**
	 * Remove any canceled/terminated tasks from the lists of tasks.
	 */
	def purge

	/** 
	 * Replies the number of tasks that this service has to run.
	 * The tasks that are considered are runnable, callable and scheduled tasks.
	 * When is a task is running or scheduled for a future run, it is counted.
	 *
	 * @return the number of tasks that are run or to be run.
	 * @since 0.11
	 */
	def getTaskCount: long

	/**
	 * Removes this task from the executor's internal queue if it is present, thus causing it not to be run
	 * if it has not already started.
	 *
	 * @param task the task to remove.
	 * @return {@code true} if the task was removed.
	 */
	def remove(task: Runnable) : boolean   
	
	/** 
	 * Submit tasks to the executor service and wait for the termination of all the tasks.
	 * This function ensures that the caller's thread is blocked until all the given tasks have been finished.
	 * 
	 * <p>According to the implementation of the service, the given tasks may be run in the same or separated thread
	 * than the one of the caller.
	 * 
	 * <p>If an exception occurs into the given task, the exception is thrown if {@code thrownExceptions}
	 * evaluates to {@code true}. If it is evaluates to {@code false}, the exception is logged.
	 * 
	 * @param task the task to submit.
	 * @param thrownExceptions indicates if the exceptions in the given tasks are thrown forward by this function.
	 * @param logger the logger to use for errors.
	 * @since 0.6
	 */
	def executeBlockingTasks(logger : Logger = null, thrownExceptions : boolean = false, task : Collection<Runnable>)
	
	/** 
	 * Submit a task on the collection's elements to the executor service and wait for the termination of all the tasks.
	 * 
	 * <p>You should ensure that the given task is properly synchronized on any shared object.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller.
	 * 
	 * <p>If an exception occurs into the given consume, the exception is logged and it is thrown.
	 * 
	 * @param logger the logger to use for errors.
	 * @param collection the collection of elements to iterate on.
	 * @param task the task to submit. Be sure that the task is synchronized on the given collection.
	 * @since 0.6
	 */
	def applyBlockingConsumer(logger : Logger = null, collection : Iterable<T>, task : Consumer<? super T>) with T

	/** 
	 * Submit a single task multiple times to the executor service.
	 * 
	 * <p>The same task instance will be submit to the executor service.
	 * 
	 * <p>{@code runGroupSize} indicates how many number of times the task will be run on
	 * a single thread.
	 * 
	 * <p>This function is equivalent to:
	 * <pre>{@code 
	 * for(i in [ 1 .. (nbExecutions/runGroupSize) ])
	 * do
	 * execute({
	 * for(j in [1..runGroupSize]) {
	 * task.run
	 * }
	 * })
	 * done
	 * }</pre>
	 * 
	 * <p>Caution: if a {@code task} is failing, the exception will be output on the logger. This function never fails.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller.
	 * 
	 * <p>If an exception occurs into the given task, the exception is logged. It is never thrown by this function.
	 * 
	 * @param logger the logger to use for errors.
	 * @param task the task to submit.
	 * @param nbExecutions the number of times the task must be run, usually greater than 1.
	 * @param runGroupSize the number of tasks to be run by a single thread.
	 * @return the number of successful runs.
	 * @since 0.5
	 */
	def executeBlockingTask(logger : Logger = null, nbExecutions : int, runGroupSize : int,
		task : Runnable) : int

	/** 
	 * Submit a single task multiple times to the executor service.
	 * 
	 * <p>The same task instance will be submit to the executor service.
	 * 
	 * <p>{@code runGroupSize} indicates how many number of times the task will be run on
	 * a single thread.
	 * 
	 * <p>This function is equivalent to:
	 * <pre>{@code 
	 * for(i in [ 1 .. (nbExecutions/runGroupSize) ])
	 * do
	 * execute({
	 * for(j in [1..runGroupSize]) {
	 * task.run
	 * }
	 * })
	 * done
	 * }</pre>
	 * 
	 * <p>Caution: if a {@code task} is failing, the exception will be output on the logger. This function never fails.
	 * 
	 * <p>According to the implementation of the service, the given task may be run in the same or separated thread
	 * than the one of the caller.
	 * 
	 * <p>If an exception occurs into the given consume, the exception is logged. It is never thrown by this function.
	 * 
	 * @param logger the logger to use for errors.
	 * @param task the task to submit.
	 * @param nbExecutions the number of times the task must be run, usually greater than 1.
	 * @param runGroupSize the number of tasks to be run by a single thread.
	 * @since 0.11
	 */
	def executeNotBlockingTask(logger : Logger = null, nbExecutions : int, runGroupSize : int, task : Runnable)


	/** Fill the given buffer with the state of the executor service.
	 *
	 * @param buffer the Json buffer to fill out with the executor service's state.
	 * @since 0.12
	 */
	def toJson(buffer : JsonBuffer)

}
