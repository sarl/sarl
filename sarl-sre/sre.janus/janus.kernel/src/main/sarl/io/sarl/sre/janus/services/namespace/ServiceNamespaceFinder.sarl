/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.namespace

import io.bootique.di.Injector
import io.sarl.api.naming.name.ServiceName
import io.sarl.api.naming.namespace.INamespaceFinder
import javax.inject.Inject
import org.arakhne.afc.services.IService
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Implementation of a finder of service into the namespaces.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
class ServiceNamespaceFinder implements INamespaceFinder<ServiceName, IService> {

	@Accessors(PROTECTED_GETTER)
	val injector : Injector

	/** Constructor.
	 *
	 * @param injector the injector to be used by this finder for obtaining the service instances.
	 */
	@Inject
	new (injector : Injector) {
		this.injector = injector
	}

	override getScheme : String {
		ServiceName::SCHEME
	}

	override find(name : ServiceName) : IService {
		if (name === null) {
			return null
		}
		var id = name.serviceType
		if (id !== null) {
			try {
				return this.injector.getInstance(id)
			} catch (ex : Throwable) {
				//
			}
		}
		return null
	}
	
}
