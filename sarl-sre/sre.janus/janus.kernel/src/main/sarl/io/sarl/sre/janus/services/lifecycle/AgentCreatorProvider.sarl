/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import java.util.UUID

/** 
 * Provider of agent instance creator.
 * The implementation of an AgentCreatorProvider must be thread safe, i.e. the call
 * to the {@code getAgentCreator} function must not need to be synchronized.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface AgentCreatorProvider {

	/** Build an agent creator based on the given parameters.
	 *
	 * @param agentClazz the type of agent to create.
	 * @param parent the identifier of the agents' parent.
	 * @param nbAgents the number of agents to create.
	 * @param skillProviders is a list of additional skill providers that should be considered by the created agent.
	 * @return the instance of the creator of agent instances.
	 */
	def getAgentCreator(agentClazz : Class<? extends Agent>, parent : UUID, nbAgents : int,
		skillProviders : DynamicSkillProvider*) : (UUID)=>Agent

}
