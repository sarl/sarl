/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.time

import io.sarl.api.util.SmartListenerCollection
import org.arakhne.afc.services.AbstractService
import org.arakhne.afc.services.IService

/**
 * Time service based on the JRE standard time.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
abstract class AbstractTimeService extends AbstractService implements TimeService {

	val listeners : SmartListenerCollection<TimeListener>

	/** Constructor.
	 *
	 * @param listeners the empty collection of listeners that must be used by this service. 
	 */
	new (listeners : SmartListenerCollection<TimeListener>) {
		assert listeners !== null
		this.listeners = listeners
	}

	override getReferenceType : Class<? extends IService> {
		typeof(TimeService)
	}

	def getOSCurrentTime : long {
		System::currentTimeMillis	
	}

	def fromOSDuration(timeDuration : double) : double {
		timeDuration / OSTimeFactor
	}

	def fromOSTime(timeValue : double) : double {
		timeValue / OSTimeFactor
	}

	def toOSDuration(timeDuration : double) : double {
		timeDuration * OSTimeFactor
	}

	def toOSTime(timeValue : double) : double {
		timeValue * OSTimeFactor
	}

	/** Notifies about time changes.
	 */
	protected def fireTimeChanged {
		this.listeners.notifyListeners(typeof(TimeListener)) [
			it.timeChanged(this)
		]
	}
	
	def addTimeListener(listener : TimeListener) {
		this.listeners.add(typeof(TimeListener), listener)
	}
	
	def removeTimeListener(listener : TimeListener) {
		this.listeners.remove(typeof(TimeListener), listener);
	}
	
}
