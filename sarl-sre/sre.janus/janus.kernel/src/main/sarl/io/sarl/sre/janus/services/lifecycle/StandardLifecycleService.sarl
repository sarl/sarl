/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.bootique.di.Injector
import io.sarl.sre.janus.KernelScope
import io.sarl.api.util.SarlSpecificationChecker
import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.annotation.Injectable
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.UUID

/** 
 * Implementation of a spawning service that is using standard object creation
 * for creating the agents.
 * No injection mechanism is used.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
class StandardLifecycleService extends AbstractLifecycleService {

	/**
	 * Constructs the service.
	 * 
	 * @param injector the injector to be used.
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param skillProvider the provider of skills that should be used to init the agents.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param factories the provider of factories tool.
	 * @param agentLevelInjector the dynamic injector for the agent level.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param sreConfig the configuration of the SRE.
	 */
	@Inject
	new (injector : Injector,
		sarlSpecificationChecker : SarlSpecificationChecker,
		@KernelScope lifecycleListener : Provider<LifecycleServiceListener>,
		@KernelScope externalContextListener : Provider<ExternalContextMemberListener>,
		factories : Provider<Factories>,
		agentLevelInjector : Provider<ConfigurableAgentInjector>,
		skillProvider : DynamicSkillProvider,
		skillUninstaller : SkillUninstaller,
		executor : ExecutorService,
		logger : LoggingService,
		sreConfig : SreConfig) {
		this(sarlSpecificationChecker, sreConfig.createFactory(injector),
			lifecycleListener, externalContextListener, factories, agentLevelInjector,
			skillProvider, skillUninstaller, executor, logger,
			sreConfig.services.lifecycle)
	}

	private static def createFactory(sreConfig : SreConfig, injector : Injector) : AgentCreatorProvider {
		if (sreConfig.services.lifecycle.enableInjectableSupport) {
			return new CreatorFactoryWithInjectableSupport(injector)
		}
		return new CreatorFactoryWithoutInjectableSupport
	}

	/**
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param factories the provider of factories tool.
	 * @param agentLevelInjector the dynamic injector for the agent level.
	 * @param skillProvider the system-wide provider of agent skills.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param lifecycleConfig the configuration of the lifecycle service.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider,
		lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>,
		factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>,
		skillProvider : DynamicSkillProvider, skillUninstaller : SkillUninstaller,
		executor : ExecutorService, logger : LoggingService,
		lifecycleConfig : LifecycleConfig) {
		super(sarlSpecificationChecker, creator,
			lifecycleListener, externalContextListener, factories, agentLevelInjector,
			skillProvider, skillUninstaller, executor, logger, lifecycleConfig)
	}

	/** 
	 * A factory of agent creator that provides the parent ID and agent ID to the created agent.
	 * This factory does not support the {@code @Injectable} annotation.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.11
	 */
	private static class CreatorFactoryWithoutInjectableSupport extends AbtractAgentCreatorProvider {

		override getAgentCreator(agentType : Class<? extends Agent>, parent : UUID, nbAgents : int,
				skillProviders : DynamicSkillProvider*) : (UUID)=>Agent {
			val cons = agentType.agentConstructor
			return [
				return cons.createAgent(agentType, parent, it, skillProviders)
			]
		}
	
	}

	/** 
	 * A factory of agent creator that provides the parent ID and agent ID to the created agent.
	 * This factory supports the {@code @Injectable} annotation.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.11
	 */
	private static class CreatorFactoryWithInjectableSupport extends AbtractAgentCreatorProvider {

		val injector : Injector

		new (injector : Injector) {
			this.injector = injector
		}

		override getAgentCreator(agentType : Class<? extends Agent>, parent : UUID, nbAgents : int,
				skillProviders : DynamicSkillProvider*) : (UUID)=>Agent {
			val cons = agentType.agentConstructor
			return [
				val ag = cons.createAgent(agentType, parent, it, skillProviders)
				assert ag !== null
				if (ag.class.isAnnotationPresent(typeof(Injectable))) {
					this.injector.injectMembers(ag)
				}
				return ag
			]
		}
	
	}

}
