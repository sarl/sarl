/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.context

import io.bootique.di.Injector
import io.sarl.sre.janus.KernelScope
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.ArrayList
import java.util.Collection
import java.util.Map
import java.util.TreeMap
import java.util.UUID

/** 
 * A service managing the root context and enabling the creation of contexts by injection into the
 * local memory.
 * The context repository is not shared among different instances of the SRE kernel.
 * 
 * <p>This service is thread-safe.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class MemoryBasedContextService extends AbstractInjectionBasedContextService {

	volatile var contextRepository : Map<UUID, Context>

	/** Constructor.
	 * 
	 * @param rootContext the root context.
	 * @param logger the logging service to be used.
	 * @param injector is the injector.
	 * @param factory is the factory of contexts.
	 * @param factories the provider of factories tool.
	 */
	@Inject
	new(@KernelScope rootContext : Context, logger : LoggingService,
		injector : Injector, factory : ContextFactory, factories : Provider<Factories>) {
		super(rootContext, logger, injector, factory, factories)
	}

	protected override getContextInternalStructure : Map<UUID, Context> {
		var repository = this.contextRepository

		if (repository === null) {
			repository = new TreeMap<UUID, Context>
			this.contextRepository = repository
		}
		return repository
	}

	override getAllContexts : Collection<Context> {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			val internal = contextInternalStructure
			var all = new ArrayList<Context>(internal.size + 1)
			all.add(rootContext)
			all.addAll(internal.values)
			return all
		} finally {
			rlock.unlock
		}
	}

}
