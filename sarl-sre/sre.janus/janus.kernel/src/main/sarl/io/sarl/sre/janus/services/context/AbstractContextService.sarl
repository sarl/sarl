/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.context

import io.sarl.lang.core.Agent
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Provider
import jakarta.inject.Singleton
import java.text.MessageFormat
import java.util.Map
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import java.util.logging.Logger
import org.arakhne.afc.services.AbstractService
import org.arakhne.afc.services.IService
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * A service managing the root context and enabling the creation of contexts.
 * 
 * <p>This service is thread-safe.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@Singleton
abstract class AbstractContextService extends AbstractService implements ContextService {

	@Accessors(PUBLIC_GETTER)
	val rootContext : Context

	/** The lock resource. */
	protected val lock : ReadWriteLock

	/** The logger for this service. */
	protected val logger : Logger

	/** Constructor.
	 * 
	 * @param rootContext the root context.
	 * @param logger the logging service to be used.
	 * @param factories the provider of factories tool.
	 */
	protected new (rootContext : Context, logger : LoggingService, factories : Provider<Factories>) {
		this.rootContext = rootContext
		this.logger = createLogger(logger)
		this.lock = factories.get.newReadWriteLock
	}

	override getReferenceType : Class<? extends IService> {
		typeof(ContextService)
	}

	/** Create the instance of the logger for this service.
	 *
	 * @param loggingService the logging service.
	 * @return the logger.
	 * @since 0.12
	 */
	protected def createLogger(loggingService : LoggingService) : Logger {
		loggingService.getKernelModuleLogger(Messages::AbstractContextService_3)
	}

	def onStart {
		this.rootContext.initialize
	}

	def onStop {
		this.rootContext.destroy
	}

	/** Replies the internal data structure for storing the contexts.
	 * 
	 * <p>This function is not thread-safe.
	 */
	protected abstract def getContextInternalStructure : Map<UUID, Context>

	final override createContextWithoutRegistration(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context {
		assert contextID !== null, "The contextID cannot be null"
		assert defaultSpaceID !== null, "The defaultSpaceUUID cannot be null"
		this.logger.fine[MessageFormat::format(Messages::AbstractContextService_1, contextID, defaultSpaceID)]
		return contextID.newContextInstance(defaultSpaceID, owner)
	}

	final override createContext(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context {
		assert contextID !== null, "The contextID cannot be null"
		assert this.rootContext !== null, "No root context yet"
		if (contextID == this.rootContext.ID) {
			return this.rootContext
		}
		val rlock = this.lock.readLock
		var existingContext : Context
		rlock.lock
		try {
			existingContext = getContextInternalStructure.get(contextID)
		} finally {
			rlock.unlock
		}
		if (existingContext === null) {
			assert defaultSpaceID !== null, "The defaultSpaceUUID cannot be null"
			val wlock = this.lock.writeLock
			wlock.lock
			try {
				val repository = getContextInternalStructure
				existingContext = repository.get(contextID)
				if (existingContext === null) {
					existingContext = contextID.newContextInstance(defaultSpaceID, owner)
					this.logger.fine[MessageFormat::format(Messages::AbstractContextService_0, contextID, defaultSpaceID)]
					repository.put(contextID, existingContext)
				}
			} finally {
				wlock.unlock
			}
		}
		return existingContext
	}

	override getContext(contextID : UUID) : Context {
		assert contextID !== null, "The contextID cannot be null"
		assert rootContext !== null, "The root context cannot be null"
		if (contextID == this.rootContext.ID) {
			return this.rootContext
		}
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return contextInternalStructure.get(contextID)
		} finally {
			rlock.unlock
		}
	}

	override removeContext(contextID : UUID) : Context {
		assert contextID !== null, "The contextID cannot be null"
		if (contextID == this.rootContext.ID) {
			return null
		}
		val wlock = this.lock.writeLock
		var existingContext : Context
		wlock.lock
		try {
			existingContext = contextInternalStructure.remove(contextID)
		} finally {
			wlock.unlock
		}
		if (existingContext !== null) {
			this.logger.fine[MessageFormat::format(Messages::AbstractContextService_2, contextID)]
			existingContext.destroy
		}
		return existingContext
	}

	/** Create a context instance.
	 *
	 * <p>This function is not thread-safe.
	 * 
	 * @param contextID the identifier of the context.
	 * @param defaultSpaceID the identifier of the default space in the context.
	 * @param owner is the owner of the context. If {@code null}, the context is the root context
	 */
	protected abstract def newContextInstance(contextID : UUID, defaultSpaceID : UUID, owner : Agent) : Context

}
