/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.boot.commands

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.cli.Cli
import io.bootique.command.CommandOutcome
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.meta.application.CommandMetadata
import io.sarl.sre.janus.IssueCodes
import io.sarl.sre.janus.boot.configs.SreConfig
import jakarta.inject.Inject
import jakarta.inject.Provider
import jakarta.inject.Singleton
import java.text.MessageFormat

import static extension io.bootique.BQCoreModule.extend

/**
 * Command for running the SRE with a single agent at boot time.
 * The first command-line argument that is a agent's class is considered
 * as the agent to be launched.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.8
 */
@Singleton
class RunSingleAgentCommand extends AbstractRunCommand {

	/** Constructor with all the fields set to {@code null}.
	 * A command created with this constructor cannot be run. But is could be used for obtaining the
	 * command options.
	 *
	 * @since 0.12
	 */
	new {
		this(null)
	}

	/** Constructor.
	 *
	 * @param configuration the configuration of the tool.
	 */
	@Inject
	new (configuration : Provider<SreConfig>) {
		super(configuration,
			CommandMetadata
				.builder(typeof(RunSingleAgentCommand))
				.description(Messages::RunSingleAgentCommand_0))
	}

	override run(cli : Cli) : CommandOutcome {
		var args = cli.standaloneArguments()
		if (args.empty) {
			return CommandOutcome::failed(255,
				MessageFormat::format(Messages::RunSingleAgentCommand_1, IssueCodes::CLI_ARGUMENT_LIST_SIZE))
		}

		try {
			val bootstrap = getSREBootstrap
			if (bootstrap === null) {
				return CommandOutcome::failed(255, MessageFormat::format(Messages::RunSingleAgentCommand_3,
					IssueCodes::UNIVERSE_CREATION))
			}
			var config = cli.synchronizeCliWithBootConfig(1)
			bootstrap.startAgentsFromConfig(config)
		} catch (exception : Throwable) {
			return CommandOutcome.failed(255,
				MessageFormat::format(Messages::RunSingleAgentCommand_2,
				IssueCodes::UNIVERSE_CREATION, exception.localizedMessage), exception)
		}
		
		return CommandOutcome::succeeded
	}

}

/** Module for the command for running the SRE with a single agent.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class RunSingleAgentCommandModule implements BQModule {

	override configure(binder : Binder) {
		binder.extend => [
			addCommand(typeof(RunSingleAgentCommand))
			defaultCommand = typeof(RunSingleAgentCommand)
		]
	}

}

/** Provider of the module for running the SRE with a single agent.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class RunSingleAgentCommandModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new RunSingleAgentCommandModule
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata.builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::RunSingleAgentCommandModuleProvider_0);
	}

}
