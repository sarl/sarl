/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus

import io.sarl.api.core.spaces.SpaceWithParticipants
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.InformedEventListener
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.internal.PlatformTools
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.lifecycle.ContextReference
import io.sarl.sre.janus.services.lifecycle.KernelAgentLifecycleListener
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import io.sarl.sre.janus.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Inject
import jakarta.inject.Provider
import jakarta.inject.Singleton
import java.lang.Thread.UncaughtExceptionHandler
import java.lang.ref.WeakReference
import java.util.UUID
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import org.eclipse.xtend.lib.annotations.Accessors
import org.arakhne.afc.services.IServiceManager
import org.arakhne.afc.services.IService

/** 
 * This class represents the Kernel of the SRE platform.
 * 
 * <p><strong>The Kernel is a singleton.</strong>
 * 
 * <p>The Kernel is assimilated to an agent that is omniscient and distributed other the network. It is containing all the other
 * agents.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
class Kernel {

	// value is true because the SRE kernel is running as soon as it is created.
	val isRunning = new AtomicBoolean(true)

	// value is false because the SRE kernel is not stopping.
	val isStopping = new AtomicBoolean(false)

	val stopListener : AsynchronousKernelStoppingListener

	val serviceManager : IServiceManager

	val loggingService : LoggingService

	val spawnService : LifecycleService

	val contextService : ContextService

	val factories : Factories

	@Accessors(PUBLIC_GETTER)
	val configuration : SreConfig
	
	/** 
	 * Constructs a SRE kernel.
	 * 
	 * @param serviceManager is the instance of the service manager that must be used by the kernel.
	 * The service manager must already have registered services inside itself.
	 * @param exceptionHandler is the handler of the uncaught exceptions.
	 * @param configuration is the provider of SRE configuration.
	 * @param factories is the provider of the factories tool.
	 */
	@SuppressWarnings("discouraged_reference")
	@Inject
	new (
		serviceManager : Provider<IServiceManager>,
		exceptionHandler : Provider<UncaughtExceptionHandler>,
		configuration : Provider<SreConfig>,
		factories : Provider<Factories>) {
		// Initialize the fields
		this.configuration = configuration.get
		this.stopListener = createKernelListener
		this.serviceManager = serviceManager.get
		this.factories = factories.get
		this.loggingService = this.serviceManager.getService(typeof(LoggingService))
		this.spawnService = this.serviceManager.getService(typeof(LifecycleService))
		this.contextService = this.serviceManager.getService(typeof(ContextService))

		// Ensure that all the threads has a default hander.
		if (exceptionHandler !== null) {
			Thread::setDefaultUncaughtExceptionHandler(exceptionHandler.get)
		}

		// Listen on the kernel's events
		this.spawnService.addKernelAgentLifecycleListener(this.stopListener)

		// Start the services NOW to ensure that the default context and space
		// of the SRE agent are catched by the modules;
		this.serviceManager.startServices(getLogger)
	}

	/** Create an instance of the kernel event listener.
	 * 
	 * @return the listener instance.
	 * @since 0.8.0
	 */
	protected def createKernelListener : AsynchronousKernelStoppingListener {
		new AsynchronousKernelStoppingListener(this)
	}

	/** 
	 * Replies if the kernel is running or not.
	 * 
	 * <p>The kernel is running if at least one agent is alive.
	 * 
	 * @return {@code true} if the kernel is running; {@code false} otherwise.
	 */
	def isRunning : boolean {
		this.isRunning.get
	}

	/** 
	 * Replies the logger used by the kernel.
	 * 
	 * <p>This function replies the logger of the logging service. If this service is down,
	 * {@code null} is replied.
	 *
	 * @return the logger of the kernel.
	 */
	def getLogger : Logger {
		this.loggingService.getKernelLogger
	}

	/** 
	 * Spawn an agent of the given type, and pass the parameters to its initialization function.
	 * 
	 * @param agent the type of the agent to spawn.
	 * @param arguments the list of the parameters to pass to the agent initialization function.
	 */
	def spawn(^agent : Class<? extends Agent>, arguments : Object*) {
		this.spawnService.spawnAgent(1, null, this.contextService.rootContext, null, ^agent, arguments)
	}

	/** 
	 * Spawn agents of the given type, and pass the parameters to its initialization function.
	 * 
	 * @param nbAgents the number of agents to spawn.
	 * @param agent the type of the agents to spawn.
	 * @param params the list of the parameters to pass to the agent initialization function.
	 */
	def spawn(nbAgents : int, ^agent : Class<? extends Agent>, params : Object*) {
		this.spawnService.spawnAgent(nbAgents, null, this.contextService.rootContext, null, ^agent, params)
	}

	/** 
	 * Spawn an agent of the given type, and pass the parameters to its initialization function.
	 * 
	 * @param agentID the identifier of the agent to spawn. If {@code null} the identifier is randomly selected.
	 * @param agent the type of the agent to spawn.
	 * @param params the list of the parameters to pass to the agent initialization function.
	 */
	def spawn(agentID : UUID, ^agent : Class<? extends Agent>, params : Object*) {
		this.spawnService.spawnAgent(1, null, this.contextService.rootContext, agentID, ^agent, params)
	}

	/** 
	 * Replies a kernel service that is alive.
	 * 
	 * @param <S> - type of the type to reply.
	 * @param type type of the type to reply.
	 * @return the service, or {@code null}.
	 */
	def getService(type : Class<S>) : S with S extends IService {
		this.serviceManager.getService(type)
	}

	/** 
	 * Replies the SRE context of the kernel.
	 * 
	 * @return the context for the kernel.
	 */
	def getRootContext : AgentContext {
		this.contextService.rootContext
	}

	/** Run the standard algorithm for stopping properly the kernel when no
	 * agent is alive.
	 * 
	 * @param internalStop indicates if the stop was invoked internally or from outside invoker.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI
	package def executeKernelStopWhenNoAgentAlive(internalStop : boolean) {
		if (!this.isStopping.getAndSet(true)) {
			val logger = getLogger
			logger.info [if(internalStop) Messages.Kernel_0 else Messages.Kernel_3]
			val ss = this.spawnService
			val sl = this.stopListener
			if (sl !== null && ss !== null) {
				ss.removeKernelAgentLifecycleListener(sl)
			}
			this.serviceManager.stopServices(logger)
			logger.info(Messages.Kernel_1)
			this.isRunning.set(false)
		}
	}

	/** 
	 * Shutdown the kernel.
	 * 
	 * @param timeout the maximum amount of milliseconds to wait for the shutdown.
	 *      If the provided value is strictly positive, it is the number of milliseconds
	 *      to wait for the termination of the shutdown. If the provided value is equal
	 *      to {@code 0}, the function returns as soon as the shutdown process is launch
	 *      (no waiting for the termination of the shutdown). If the value is strictly
	 *      negative, the function waits forever for the termination of the shutdown
	 *      process. The default value is {@code -1}.
	 * @since 0.10
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	def shutdown(timeout : int = -1) {
		val contextService = typeof(ContextService).getService
		val lifeCycleService = typeof(LifecycleService).getService
		assert contextService !== null && lifeCycleService !== null

		lifeCycleService.spawnEnable = false

		val contexts = contextService.allContexts
		val agentIds = this.factories.concurrentCollectionFactory.newSet(null)
		val codes = this.factories.concurrentCollectionFactory.<Runnable>newCollection

		val iter = contexts.iterator
		while (iter.hasNext) {
			val context = iter.next
			val ^space = context.defaultSpace as SpaceWithParticipants
			^space.forEachStrongParticipant [ id, p |
				val listener = p.participant
				if (listener instanceof InformedEventListener) {
					val ag = listener.ownerInstance
					assert ag !== null
					if (agentIds.add(ag.ID)) {
						codes.add [
							lifeCycleService.killAgent(ag, true, new KernelShutdownException)
						]
					}
				}
			]
		}

		lifeCycleService.addLifecycleServiceListener(new LifecycleServiceListener.LifecycleServiceAdapter() {
			override agentDestroyed(^agent : Agent, outerContexts : ConcurrentCollection<ContextReference>,
				terminationCause : Object) {
				agentIds.remove(^agent.ID)
			}
		})

		for (shutdownCode : codes) {
			shutdownCode.run
		}

		if (timeout > 0) {
			val endTime = System::currentTimeMillis + timeout
			while (!agentIds.empty && System::currentTimeMillis <= endTime) {
				PlatformTools::yield
			}
		} else if (timeout != 0) {
			while (!agentIds.empty) {
				PlatformTools::yield
			}
		}

		executeKernelStopWhenNoAgentAlive(false)
	}

	/** 
	 * Asynchronous listener on platform events.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	protected static class AsynchronousKernelStoppingListener implements KernelAgentLifecycleListener, Runnable, UncaughtExceptionHandler {

		val kernel : WeakReference<Kernel>

		val stopProcessRunning = new AtomicBoolean(false)

		new (kernel : Kernel) {
			this.kernel = new WeakReference(kernel)
		}

		override kernelAgentDestroyed {
			if (!this.stopProcessRunning.getAndSet(true)) {
				// CAUTION: EXECUTE THE STOP FUNCTION IN A THREAD THAT
				// IS INDEPENDENT TO THE ONES FROM THE EXECUTORS
				// CREATED BY THE EXECUTORSERVICE.
				// THIS AVOID THE STOP FUNCTION TO BE INTERRUPTED
				// BECAUSE THE EXECUTORSERVICE WAS SHUTTED DOWN.
				startAsync
			}
		}

		/** Start the stopper asynchronously.
		 * @since 0.10
		 */
		@SuppressWarnings("discouraged_reference")
		def startAsync {
			val thread = Executors::defaultThreadFactory.newThread(this)
			thread => [
				name = "SRE kernel shutdown" // $NON-NLS-1$
				daemon = false
				uncaughtExceptionHandler = this
				start
			]
		}

		@SuppressWarnings("use_reserved_sarl_annotation")
		@PrivateAPI(isCallerOnly = true)
		override run {
			this.kernel.get.executeKernelStopWhenNoAgentAlive(true)
		}

		override uncaughtException(thread : Thread, exception : Throwable) {
			assert thread !== null;
			assert exception !== null;
			val logger = this.kernel.get.getLogger
			if (logger !== null && logger.isLoggable(Level::SEVERE)) {
				val record = new LogRecord(Level::SEVERE, exception.localizedMessage)
				record.thrown = exception
				val elt = exception.stackTrace.get(0)
				assert elt !== null
				record.sourceClassName = elt.className
				record.sourceMethodName = elt.methodName
				logger.log(record)
			}
		}

	}

}

/** 
 * Cause of the agent termination when the kernel is shuting down.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class KernelShutdownException extends RuntimeException {
	//
}
