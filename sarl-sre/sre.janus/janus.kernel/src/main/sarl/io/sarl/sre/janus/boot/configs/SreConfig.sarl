/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.boot.configs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.config.ConfigurationFactory
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Injector
import io.bootique.di.Provides
import io.bootique.meta.application.OptionMetadata
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ContextsConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ServicesConfig
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import javax.inject.Singleton
import org.arakhne.afc.bootique.variables.VariableDecls
import org.arakhne.afc.bootique.variables.VariableNames
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.boot.configs.SreConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the SARL run-time environment. 
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
@BQConfig("Configuration for the SARL run-time environment")
class SreConfig {

	/** 
	 * Prefix for the configuration entries of the modules.
	 */
	public static val PREFIX = "sre"

	/** 
	 * Name of the property that contains the classpath.
	 */
	public static val CLASSPATH_NAME = PREFIX + ".classpath"; // $NON-NLS-1$

	/** 
	 * Default name of the program.
	 */
	public static val DEFAULT_PROGRAM_NAME = "janus"

	@Accessors(PUBLIC_GETTER)
	var classpath : String

	var bootConfig : BootConfig

	var servicesConfig : ServicesConfig

	var contextsConfig : ContextsConfig

	/** Change the class path.
	 * 
	 * @param path the class path.
	 */
	@BQConfigProperty("Class path for the SARL compiler.")
	def setClasspath(path : String) {
		this.classpath = path
	}

	/** Replies the configuration for the SARL run-time environment.
	 * 
	 * @param configFactory the general configuration factory.
	 * @return the configuration.
	 */
	static def getConfiguration(configFactory : ConfigurationFactory) : SreConfig {
		assert configFactory !== null
		var factory = configFactory.config(typeof(SreConfig), PREFIX)
		return factory
	}

	/** Replies the boot configuration.
	 * 
	 * @return the boot configuration.
	 */
	def getBoot : BootConfig {
		if (this.bootConfig === null) {
			this.bootConfig = new BootConfig
		}
		return this.bootConfig
	}

	/** Change the validator configuration.
	 * 
	 * @param config the validator configuration.
	 */
	@BQConfigProperty("Configuration for booting the SRE.")	
	def setBoot(config : BootConfig) {
		this.bootConfig = config
	}

	/** Replies the SRE services' configuration.
	 * 
	 * @return the SRE services' configuration.
	 */
	def getServices : ServicesConfig {
		if (this.servicesConfig === null) {
			this.servicesConfig = new ServicesConfig
		}
		return this.servicesConfig
	}

	/** Change the services' configuration.
	 * 
	 * @param config the services' configuration.
	 */
	@BQConfigProperty("Configuration for the SRE services.")
	def setServices(config : ServicesConfig) {
		this.servicesConfig = config
	}

	/** Replies the SRE context repository's configuration.
	 * 
	 * @return the SRE context repository's configuration.
	 * @since 0.11
	 */
	def getContexts : ContextsConfig {
		if (this.contextsConfig === null) {
			this.contextsConfig = new ContextsConfig
		}
		return this.contextsConfig
	}

	/** Change the context repository's configuration.
	 * 
	 * @param config the context repository's' configuration.
	 * @since 0.11
	 */
	@BQConfigProperty("Configuration for the SRE context repository.")
	def setContexts(config : ContextsConfig) {
		this.contextsConfig = config
	}

}

/** 
 * Module for creating and configuring the general SRE configuration.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class SreConfigModule implements BQModule {

	static val CLASSPATH_LONG_OPTION = "classpath"

	static val CLASSPATH_SHORT_OPTION = "cp"

	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(CLASSPATH_NAME)
		val cpDescription = MessageFormat::format(Messages::SreConfigModule_0,
				VariableNames::toEnvironmentVariableName(CLASSPATH_NAME),
				CLASSPATH_SHORT_OPTION,
				CLASSPATH_LONG_OPTION)
		binder.extend.addOption(OptionMetadata::builder(CLASSPATH_LONG_OPTION, cpDescription)
				.valueRequired(Messages::SreConfigModule_1)
				.build)
				.mapConfigPath(CLASSPATH_LONG_OPTION, CLASSPATH_NAME)
		binder.extend.addOption(OptionMetadata.builder(CLASSPATH_SHORT_OPTION, cpDescription)
				.valueRequired(Messages::SreConfigModule_1)
				.build)
				.mapConfigPath(CLASSPATH_SHORT_OPTION, CLASSPATH_NAME)
	}

	/** Replies the instance of the SRE configuration.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @param injector the current injector.
	 * @return the path configuration accessor.
	 */
	@Provides
	@Singleton
	def provideSreConfig(configFactory : ConfigurationFactory, injector : Injector) : SreConfig  {
		val config = getConfiguration(configFactory)
		injector.injectMembers(config)
		return config
	}

}

/** Provider of the module for creating and configuring the general SRE configuration.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class SreConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new SreConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(SreConfig))
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::SreConfigModuleProvider_0);
	}

}
