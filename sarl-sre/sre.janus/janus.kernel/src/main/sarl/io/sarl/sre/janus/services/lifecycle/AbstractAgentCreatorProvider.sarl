/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.lang.core.DelegateDynamicSkillProvider
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.annotation.PrivateAPI
import java.lang.reflect.Constructor
import java.util.UUID

/** 
 * Abstract implementation of a provider of agent instance creator.
 * The implementation of an AgentCreatorProvider must be thread safe, i.e. the call
 * to the {@code getAgentCreator} function must not need to be synchronized.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
abstract class AbtractAgentCreatorProvider implements AgentCreatorProvider {

	/** Find the best constructor for creating an agent.
	 *
	 * <p>The function checks for the following constructors in this order:<ul>
	 * <li>{@code AgentType(UUID, UUID)}</li>
	 * <li>{@code AgentType(UUID, UUID, DynamicSkillProvider)}</li>
	 * </ul>
	 *
	 * @param agentType the type of a agent.
	 * @return the constructor.
	 */
	protected def getAgentConstructor(agentType : Class<T>) : Constructor<T> with T extends Agent {
		var cons : Constructor<T> = null
		var e1 : Exception = null
		try {
			cons = agentType.getConstructor(typeof(UUID), typeof(UUID))
		} catch (exception : Exception) {
			cons = null
			e1 = exception
		}
		var e2 : Exception = null
		if (cons === null) {
			try {
				cons = agentType.getConstructor(typeof(UUID), typeof(UUID), typeof(DynamicSkillProvider))
			} catch (exception : Exception) {
				cons = null
				e2 = exception
			}
		}
		if (cons === null) {
			throw new CannotSpawnException(agentType, e1 ?: e2)
		}
		cons.accessible = true
		return cons
	}

	/** Create the instance of the agent.
	 *
	 * <p>If the given constructor has three parameters, the arguments are {@code parentId},
	 * {@code agentId} and view to the {@code skillProvider}.
	 * If the given constructor has two parameters, the arguments are {@code parentId} and
	 * {@code agentId}.
	 *
	 * @param constructor the constructor to call.
	 * @param agentType the type of agent to create.
	 * @param parentId the identifier of the parent agent.
	 * @param agentId the identifier of the new agent.
	 * @param skillProvider the list of skill providers. 
	 * @return the agent instance.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	protected def createAgent(constructor : Constructor<? extends Agent>, agentType : Class<? extends Agent>,
			parentId : UUID, agentId : UUID, skillProvider : DynamicSkillProvider*) : Agent {
		assert agentId !== null
		try {
			var realSkillProvider : DynamicSkillProvider
			if (skillProvider.length == 1) {
				realSkillProvider = skillProvider.get(0)
			} else {
				realSkillProvider = new DelegateDynamicSkillProvider(skillProvider)
			}
			var ^agent : Agent
			if (constructor.parameterCount === 3) {
				^agent = constructor.newInstance(parentId, agentId, realSkillProvider)
			} else {
				^agent = constructor.newInstance(parentId, agentId)
				SREutils::setDynamicSkillProvider(^agent, realSkillProvider)
			}
			return ^agent
		} catch (exception : Exception) {
			throw new CannotSpawnException(agentType, exception)
		}
	}

}
