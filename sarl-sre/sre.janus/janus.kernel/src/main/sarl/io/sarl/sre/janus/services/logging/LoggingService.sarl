/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.logging

import java.util.logging.Level
import java.util.logging.Logger
import org.arakhne.afc.services.IService

/** 
 * This class enables to log information by ensuring that the values of the parameters are not evaluated until the information
 * should be really log, according to the log level.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface LoggingService extends IService {

	/** 
	 * Create a logger for an agent.
	 * 
	 * @param name the name of the logger, usually the name of the agent.
	 * @param initialLevel the initial level to associate to the logger. If it is
	 *     {@code null}, the level is the less verbose between the default level
	 *     (given in the SRE configuration) and the parent level.
	 * @return the logger.
	 * @since 0.7
	 */
	def createAgentLogger(name : String, initialLevel : Level = null) : Logger

	/** 
	 * Replies the logger used by the platform. The platform logger is the root logger
	 * for all the other loggers (for kernel and agents).
	 * It is not recommended to use this logger directly.
	 * 
	 * @return the logger.
	 * @since 0.7
	 */
	def getPlatformLogger : Logger

	/** 
	 * Replies the logger used by the kernel.
	 * 
	 * @return the logger.
	 * @since 0.7
	 * @see #getKernelModuleLogger(String)
	 */
	def getKernelLogger : Logger

	/** 
	 * Replies the logger used by a specific module of the kernel.
	 * 
	 * @param moduleName the name of the sub-logger.
	 * @return the logger.
	 * @since 0.12
	 * @see #getKernelLogger()
	 */
	def getKernelModuleLogger(moduleName : String) : Logger

}
