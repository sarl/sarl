/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.skills.internal

import com.google.common.collect.Collections2
import io.sarl.lang.core.Event
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.OutParameter
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluator
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluatorRegistry
import io.sarl.sre.janus.services.executor.tasks.Runnables
import io.sarl.sre.janus.services.executor.tasks.SreRunnable
import jakarta.inject.Provider
import java.util.Collection
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.ExecutionException
import java.util.function.Supplier
import java.util.logging.Logger

/** 
 * The class in charge of dispatching every single events coming from the outside of this agent (i.e. from a space) or from an
 * agent's behavior.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class EventBus {

	/** 
	 * The registry of all {@code BehaviorGuardEvaluator} classes containing a method to evaluate the guard of a given behavior
	 * ("on" clause in SARL behavior). This class has been inspired by the com.google.common.eventbus.SuscriberRegistry class of
	 * Google Guava library.
	 */
	val behaviorGuardEvaluatorRegistry : IBehaviorGuardEvaluatorRegistry

	/** 
	 * The skill that gives access to the scheduling capacity of the agent
	 */
	val taskSchedulerSupplier : Supplier<InternalSchedules>

	val factories : Provider<Factories>

	/** 
	 * Instantiates a dispatcher.
	 * 
	 * @param taskSchedulerProvider a provider of scheduler for the agent tasks that may be invoked on demand.
	 * @param dispatcher the event dispatcher.
	 * @param factories the provider of factories tool.
	 */
	new (taskSchedulerProvider : Supplier<InternalSchedules>, dispatcher : IBehaviorGuardEvaluatorRegistry,
		factories : Provider<Factories>) {
		assert taskSchedulerProvider !== null
		assert dispatcher !== null
		assert factories !== null
		this.taskSchedulerSupplier = taskSchedulerProvider
		this.behaviorGuardEvaluatorRegistry = dispatcher
		this.factories = factories
	}

	/** Replies the agent's task scheduler that must be used by the event bus.
	 * 
	 * @return the executor.
	 * @since 0.11
	 */
	def getExecutor : InternalSchedules {
		var sch = this.taskSchedulerSupplier.get
		assert sch !== null, "the taskSchedulerProvider given to the constructor has replied a null reference to InternalSchedules"
		return sch
	}

	/** Replies if a listener with the given type is registered.
	 * 
	 * @param type the type of listener.
	 * @return {@code true} if a listener of the given type is registered.
	 * @since 0.5.0
	 */
	def hasRegisteredEventListener(type : Class<?>) : boolean {
		this.behaviorGuardEvaluatorRegistry.hasRegisteredEventListener(type)
	}

	/** Extract the registered listeners with the given type.
	 * 
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @return the collection of listeners that is filled by this function.
	 * @since 0.6.0
	 */
	def getRegisteredEventListeners(type : Class<T>) : ConcurrentCollection<T> with T {
		this.factories.get.concurrentCollectionFactory.newCollection(this.behaviorGuardEvaluatorRegistry.getRegisteredEventListeners(type))
	}

	/** 
	 * Registers all {@code PerceptGuardEvaluator} methods on {@code object} to receive events.
	 * 
	 * <p>If the filter is provided, it will be used for determining if the given behavior accepts a specific event.
	 * If the filter function replies {@code true} for a specific event as argument, the event is fired in the
	 * behavior context. If the filter function replies {@code false}, the event is not fired in the behavior context.
	 * 
	 * @param object object whose {@code PerceptGuardEvaluator} methods should be registered.
	 * @param filter the filter function. It could be {@code null}.
	 * @param callback function which is invoked just after the first registration of the object. It could be {@code null}.
	 */
	def register(object : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
		this.behaviorGuardEvaluatorRegistry.register(object, filter, callback)
	}

	/** 
	 * Unregisters all {@code PerceptGuardEvaluator} methods on a registered {@code object}.
	 * 
	 * @param object object whose {@code PerceptGuardEvaluator} methods should be unregistered.
	 * @param callback function which is invoked just before the object is unregistered.
	 */
	def unregister(object : Object, callback : (Object)=>void) {
		this.behaviorGuardEvaluatorRegistry.unregister(object, callback)
	}

	/** 
	 * Unregisters all {@code PerceptGuardEvaluator} methods on the objects of the given type.
	 * 
	 * @param type type of the objects whose {@code PerceptGuardEvaluator} methods should be unregistered.
	 * @param callback function which is invoked just before the object is unregistered.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 * @since 0.7
	 */
	def unregister(type : Class<?>, callback : (Object)=>boolean) {
		this.behaviorGuardEvaluatorRegistry.unregister(type, callback)
	}

	/** 
	 * Unregisters all {@code PerceptGuardEvaluator} methods on all registered objects.
	 * 
	 * @param callback function which is invoked just before the object is unregistered.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 */
	def unregisterAll(callback : (Object)=>boolean) {
		this.behaviorGuardEvaluatorRegistry.unregisterAll(callback)
	}

	/** 
	 * Posts an event to all registered {@code BehaviorGuardEvaluator}.
	 * The dispatch of the events within the agent is asynchronous.
	 * A rendez-vous point is set up in order to wait for all the event handlers to be finished.
	 * This method will return successfully after the event has been posted to all {@code BehaviorGuardEvaluator}, and regardless
	 * of any exceptions thrown by {@code BehaviorGuardEvaluator}.
	 * 
	 * @param event an event to dispatch synchronously.
	 * @param thrownExceptions indicates if the exceptions in the event handlers should be thrown from this function,
	 * or logged out to the agent's log.
	 * @param logger the logger to use for notifying the errors.
	 */
	def immediateDispatch(^event : Event, thrownExceptions : boolean, logger : Logger = null) {
		assert ^event !== null

		val behaviorGuardEvaluators = this.behaviorGuardEvaluatorRegistry.getBehaviorGuardEvaluatorsForRegisteredListeners(^event)

		if (behaviorGuardEvaluators !== null && !behaviorGuardEvaluators.empty) {
			val behaviorsMethodsToExecute = evaluateGuards(^event, behaviorGuardEvaluators, logger)
			if (behaviorsMethodsToExecute !== null && !behaviorsMethodsToExecute.empty) {
				behaviorsMethodsToExecute.executeBehaviorMethodsInParalellWithSynchroAtTheEnd(thrownExceptions, logger)
			}
		}
	}

	/** 
	 * Posts an event to the registered {@code BehaviorGuardEvaluator} of the given listener only.
	 * The dispatch of this event will be done synchronously.
	 * This method will return successfully after the event has been posted to all {@code BehaviorGuardEvaluator}, and regardless
	 * of any exceptions thrown by {@code BehaviorGuardEvaluator}.
	 * 
	 * @param listener the listener to dispatch to.
	 * @param event an event to dispatch synchronously.
	 * @param thrownExceptions indicates if the exceptions in the event handlers should be thrown from this function,
	 * or logged out to the agent's log.
	 * @param logger the logger to use for notifying the errors.
	 */
	def immediateDispatchTo(listener : Object, ^event : Event, thrownExceptions : boolean, logger : Logger = null) {
		assert ^event !== null
		assert listener !== null

		val behaviorGuardEvaluators = this.behaviorGuardEvaluatorRegistry.getBehaviorGuardEvaluatorsForDirectAccessListener(^event, listener)

		if (behaviorGuardEvaluators !== null && behaviorGuardEvaluators.size() > 0) {
			val behaviorsMethodsToExecute = evaluateGuards(^event, behaviorGuardEvaluators, logger)
			if (behaviorsMethodsToExecute !== null && !behaviorsMethodsToExecute.empty) {
				behaviorsMethodsToExecute.executeBehaviorMethodsInParalellWithSynchroAtTheEnd(thrownExceptions, logger)
			}
		}
	}

	/** 
	 * Posts an event to the registered {@code BehaviorGuardEvaluator} of the given listener only.
	 * The dispatch of this event will be done asynchronously.
	 * This method will return successfully after the event has been posted to all {@code BehaviorGuardEvaluator}, and regardless
	 * of any exceptions thrown by {@code BehaviorGuardEvaluator}.
	 * 
	 * @param listener the listener to dispatch to.
	 * @param event an event to dispatch asynchronously.
	 * @param logger the logger to use for notifying the errors.
	 * @since 0.12
	 */
	def asyncDispatchTo(listener : Object, ^event : Event, logger : Logger = null) {
		assert ^event !== null
		val runException = new OutParameter
		var asyncTask = new SreRunnable(logger) {
			def internalRun {
				val behaviorGuardEvaluators = EventBus.this.behaviorGuardEvaluatorRegistry.getBehaviorGuardEvaluatorsForDirectAccessListener(^event, listener)
				if (behaviorGuardEvaluators !== null && !behaviorGuardEvaluators.empty) {
					// Could be null when the corresponding events is not listen by an agent, i.e. system event like ParticpantJoined
					var behaviorsMethodsToExecute = evaluateGuards(^event, behaviorGuardEvaluators, logger)
					if (behaviorsMethodsToExecute !== null && !behaviorsMethodsToExecute.empty) {
						behaviorsMethodsToExecute.executeAsynchronouslyBehaviorMethods
					}
				}
			}
			def onError(e : Throwable) : boolean {
				// Catch exception for notifying the caller
				runException.set(e)
				return true
			}
		}
		
		this.executor.executeAsap(asyncTask)
		// Re-throw the run-time exception
		if (runException.get() !== null) {
			throw new ExecutionException(runException.get)
		}
	}

	/** 
	 * Posts an event to all registered {@code BehaviorGuardEvaluator}.
	 * The dispatch of this event will be done asynchronously.
	 * This method will return successfully after the event has been posted to all {@code BehaviorGuardEvaluator}, and regardless
	 * of any exceptions thrown by {@code BehaviorGuardEvaluator}.
	 * 
	 * @param event an event to dispatch asynchronously.
	 * @param logger the logger to use for notifying the errors.
	 */
	def asyncDispatch(^event : Event, logger : Logger = null) {
		assert ^event !== null
		val runException = new OutParameter
		var asyncTask = new SreRunnable(logger) {
			def internalRun {
				val behaviorGuardEvaluators = EventBus.this.behaviorGuardEvaluatorRegistry.getBehaviorGuardEvaluatorsForRegisteredListeners(^event)
				if (behaviorGuardEvaluators !== null && !behaviorGuardEvaluators.empty) {
					// Could be null when the corresponding events is not listen by an agent, i.e. system event like ParticpantJoined
					var behaviorsMethodsToExecute = evaluateGuards(^event, behaviorGuardEvaluators, logger)
					if (behaviorsMethodsToExecute !== null && !behaviorsMethodsToExecute.empty) {
						behaviorsMethodsToExecute.executeAsynchronouslyBehaviorMethods
					}
				}
			}
			def onError(e : Throwable) : boolean {
				// Catch exception for notifying the caller
				runException.set(e)
				return true
			}
		}
		
		this.executor.executeAsap(asyncTask)
		// Re-throw the run-time exception
		if (runException.get() !== null) {
			throw new ExecutionException(runException.get)
		}
	}

	private static def buildRunnable(evaluator : IBehaviorGuardEvaluator, ^event : Event,
		output : ConcurrentLinkedDeque<Runnable>) : Runnable {
		[
			evaluator.evaluateGuard(^event, output)
		]
	}

	/** 
	 * Evaluate the guard associated to the specified {@code event} and returns the list of behaviors methods that must be
	 * executed.
	 * 
	 * <p>Errors are logger by the executor service. But they are not stopping the call to this function.
	 * 
	 * @param event the event triggering behaviors.
	 * @param behaviorGuardEvaluators the list of class containing a {@code PerceptGuardEvaluator} method.
	 * @param logger the logger to be used.
	 * @return the collection of couple associating a object and its collection of behavior methods that must be executed.
	 */
	@SuppressWarnings("potential_inefficient_value_conversion")
	protected def evaluateGuards(^event : Event,
		behaviorGuardEvaluators : ConcurrentCollection<? extends IBehaviorGuardEvaluator>,
		logger : Logger) : Collection<Runnable> {

		assert ^event !== null
		assert behaviorGuardEvaluators !== null
		assert behaviorGuardEvaluators.size() > 0

		val behaviorsMethodsToExecute = new ConcurrentLinkedDeque
		val eval = behaviorGuardEvaluators.size
		if (eval > 1) {
			val guardCodes = Collections2.transform(behaviorGuardEvaluators) [
				it.buildRunnable(^event, behaviorsMethodsToExecute)
			]
			this.executor.executeBlockingTasks(guardCodes, true)
		} else {
			// When you have a single guard to evaluate we cannot create a thread because we must be sure the guard evaluation
			// is finished before executing the corresponding behaviors
			behaviorGuardEvaluators.first.evaluateGuard(^event, behaviorsMethodsToExecute)
		}

		return behaviorsMethodsToExecute
	}

	/** 
	 * Execute every single Behaviors runnable, a dedicated thread will created by the executor local to this class and be used to
	 * execute each runnable in parallel, and this method waits until its future has been completed before leaving.
	 * 
	 * <p>Errors are logged by the executor service, and are thrown by this function.
	 * 
	 * @param behaviorsMethodsToExecute the collection of Behaviors runnable that must be executed.
	 * @param thrownExceptions indicates if the exceptions in the event handlers should be thrown from this function,
	 * or logged out to the agent's log.
	 * @param logger the logger to use for notifying the errors.
	 */
	protected def executeBehaviorMethodsInParalellWithSynchroAtTheEnd(behaviorsMethodsToExecute : Collection<Runnable>,
		thrownExceptions : boolean, logger : Logger) {
		assert behaviorsMethodsToExecute !== null
		assert behaviorsMethodsToExecute.size() > 0

		if (behaviorsMethodsToExecute.size() > 1) {
			this.executor.executeBlockingTasks(behaviorsMethodsToExecute, thrownExceptions)
		} else {
			val r0 = behaviorsMethodsToExecute.iterator.next
			assert r0 !== null
			Runnables::protectRunnable(r0, if (thrownExceptions) null else logger).run
		}

	}

	/** 
	 * Execute every single Behaviors runnable, a dedicated thread will created by the executor local to this class and be used to
	 * execute each runnable in parallel.
	 * 
	 * <p>Errors are logged by the executor service. They are not thrown by this function.
	 * 
	 * @param behaviorsMethodsToExecute the collection of Behaviors runnable that must be executed.
	 */
	protected def executeAsynchronouslyBehaviorMethods(behaviorsMethodsToExecute : Collection<Runnable>) {
		assert behaviorsMethodsToExecute !== null
		assert behaviorsMethodsToExecute.size() > 0

		val exec = this.executor
		for (runnable : behaviorsMethodsToExecute) {
			exec.executeAsap(runnable)
		}
	}

}
