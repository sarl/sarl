/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.probing.probes

import io.sarl.api.probing.IProbeListener
import io.sarl.api.probing.IProbeReleaseListener
import io.sarl.api.probing.Probe
import io.sarl.api.util.SmartListenerCollection
import io.sarl.sre.janus.internal.Factories
import java.lang.ref.WeakReference
import java.net.URI
import java.util.concurrent.atomic.AtomicBoolean
import javax.inject.Provider
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract probe implementation. A probe is thread-safe.
 * 
 * @param <T> the type of the probed value.
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
abstract class AbstractProbe<T> implements Probe<T> {

	var manager : WeakReference<IProbeReleaseListener>

	var listeners : SmartListenerCollection<?>

	@Accessors
	val name : String

	@Accessors
	val uri : URI

	@Accessors
	val type : Class<T>

	val active = new AtomicBoolean(true)

	val factories : Factories

	/** Constructor.
	 * 
	 * @param manager the creator of this probe, and its manager.
	 * @param name the name of the probe
	 * @param uri the UI of the field.
	 * @param type the expected type of the probed value.
	 * @param factories the provider of factories tool.
	 */
	protected new (manager : IProbeReleaseListener, name : String, uri : URI, type : Class<T>, factories : Provider<Factories>) {
		assert manager !== null
		assert type !== null
		this.manager = new WeakReference(manager)
		this.name = name
		this.uri = uri
		this.type = type
		this.factories = factories.get
	}

	@Pure
	override isActive : boolean {
		return this.active.get
	}

	override release {
		val act : boolean = this.active.getAndSet(false)
		if (act) {
			var m : IProbeReleaseListener = null
			try {
				m = this.manager?.get
				this.manager.clear
				this.manager = null
			} finally {
				fireRelease
				this.listeners = null
			}
			if (m !== null) {
				m.onProbeReleasedProbe(this)
			}
		}
	}

	/** Notify the listener that the probe's value has changed.
	 *
	 * @param isInit indicates if the change is due to initialization.
	 */
	protected def fireValueChanged(isInit : boolean) {
		var list : SmartListenerCollection<?> = this.listeners

		if (list !== null) {
			list.notifyListeners(typeof(IProbeListener)) [
				probeValueChanged(this, isInit)
			]
		}
	}

	override addProbeListener(listener : IProbeListener) {
		assert listener !== null

		if (this.listeners === null) {
			this.listeners = this.factories.newListenerCollection
		}
		this.listeners.add(typeof(IProbeListener), listener)

	}

	override removeProbeListener(listener : IProbeListener) {
		assert listener !== null
		var list : SmartListenerCollection<?> = this.listeners

		if (list !== null) {
			list.remove(typeof(IProbeListener), listener)
			if (this.listeners !== null && this.listeners.isEmpty) {
				this.listeners = null
			}
		}
	}

	/** Notify the listener that the probe has been released.
	 */
	protected def fireRelease {
		if (this.listeners !== null) {
			this.listeners.notifyListeners(typeof(IProbeReleaseListener)) [
				onProbeReleasedProbe(this)
			]
		}
	}

	override addProbeReleaseListener(listener : IProbeReleaseListener) {
		assert listener !== null

		if (this.listeners === null) {
			this.listeners = this.factories.newListenerCollection
		}
		this.listeners.add(typeof(IProbeReleaseListener), listener)
	}

	override removeProbeReleaseListener(listener : IProbeReleaseListener) {
		assert listener !== null
		var list : SmartListenerCollection<?> = this.listeners

		if (list !== null) {
			list.remove(typeof(IProbeReleaseListener), listener)

				if (this.listeners !== null && this.listeners.isEmpty) {
					this.listeners = null
				}
		}
	}

}
