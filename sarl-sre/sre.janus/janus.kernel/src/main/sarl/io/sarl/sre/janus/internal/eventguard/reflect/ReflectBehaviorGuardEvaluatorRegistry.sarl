/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard.reflect

import io.sarl.lang.core.Event
import io.sarl.lang.core.annotation.PerceptGuardEvaluator
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.ConcurrentSet
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.internal.MutableBoolean
import io.sarl.sre.janus.internal.ObjectComparator
import io.sarl.sre.janus.internal.eventguard.AbstractBehaviorGuardEvaluatorRegistry
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluator
import jakarta.inject.Provider
import java.util.Collection
import java.util.Iterator
import java.util.Map.Entry
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentMap
import java.util.concurrent.CopyOnWriteArraySet
import org.eclipse.xtend.lib.annotations.Data

import static extension io.sarl.sre.janus.internal.eventguard.reflect.StaticReflectBehaviorGuardEvaluatorDictionary.*
import io.sarl.sre.janus.internal.TypeHierarchyDictionary

/** 
 * Registry of all {@code BehaviorGuardEvaluator} classes containing a method to evaluate the guard of a
 * given behavior (on clause in SARL behavior).
 * 
 * <p>This class is thread-safe.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ReflectBehaviorGuardEvaluatorRegistry extends AbstractBehaviorGuardEvaluatorRegistry<GuardedEvaluator> {

	/**
	 * All registered {@code BehaviorGuardEvaluator}s (class containing at least one PerceptGuardEvaluator method), indexed by event type.
	 *
	 * <p>The {@link CopyOnWriteArraySet} values make it easy and relatively lightweight to get an immutable snapshot of all current
	 * {@code BehaviorGuardEvaluator}s to an event without any locking.
	 */
	val registeredEvaluators : ConcurrentMap<Class<? extends Event>, ConcurrentSet<GuardedEvaluator>>

	/**
	 * All direct-access {@code BehaviorGuardEvaluator}s (class containing at least one PerceptGuardEvaluator method), indexed by event type.
	 *
	 * <p>The {@link CopyOnWriteArraySet} values make it easy and relatively lightweight to get an immutable snapshot of all current
	 * {@code BehaviorGuardEvaluator}s to an event without any locking.
	 */
	val directEvaluators : ConcurrentMap<Class<?>, ConcurrentMap<Class<? extends Event>, ConcurrentSet<MethodProxy>>>

	/** 
	 * Instanciates a new registry linked with the {@link PerceptGuardEvaluator} annotation.
	 * 
	 * <p>The registry will use concurrent data structures.
	 */
	new (factories : Provider<Factories>) {
		super(factories)
		this.registeredEvaluators = new ConcurrentHashMap
		this.directEvaluators = new ConcurrentHashMap
	}

	@Pure
	override getInternalDataStructureForRegisteredListeners : ConcurrentMap<Class<? extends Event>, ConcurrentSet<GuardedEvaluator>> {
		this.registeredEvaluators
	}

	/** Replies the internal data structure for the direct-access listeners.
	 *
	 * @return the internal data structure
	 * @since 0.12
	 */
	@Pure
	def getInternalDataStructureForDirectAccessListeners : ConcurrentMap<Class<?>, ConcurrentMap<Class<? extends Event>, ConcurrentSet<MethodProxy>>> {
		this.directEvaluators
	}

	@Pure
	protected override getInternalEvaluatorFilterForRegisteredListeners : (GuardedEvaluator, Event)=>boolean {
		[
			val filter = $0.registrationGuard
			return filter === null || filter.apply($1)
		]
	}

	@Pure
	protected override getInternalEvaluatorMapperForRegisteredListeners : (GuardedEvaluator)=>IBehaviorGuardEvaluator {
		[
			it.evaluator
		]
	}

	/** Replies the mapper from the internal guard evaluator description of direct-access listeners to the public description.
	 * 
	 * @param listener the listener for which the guard evaluator should be replied.
	 * @return the internal data structure
	 * @since 0.12
	 */
	@Pure
	protected def getInternalEvaluatorMapperForDirectAccessListeners(listener : Object) : (MethodProxy)=>IBehaviorGuardEvaluator {
		[
			new ReflectBehaviorGuardEvaluator(listener, it)
		]
	}

	/** Build the list of the event handlers for a direct access to a listener.
	 *
	 * @param listenerType is the listener to explore.
	 * @return the list oh guard evaluators.
	 */
	protected def buildDirectAccessGuardEvaluators(listenerType : Class<?>) : ConcurrentMap<Class<? extends Event>, ConcurrentSet<MethodProxy>> {
		val content : ConcurrentMap<Class<? extends Event>, ConcurrentSet<MethodProxy>> = new ConcurrentHashMap
		var methodIterator = new MethodIterator(listenerType)
		while (methodIterator.hasNext) {
			val method = methodIterator.next
			for (meth : method.methods) {
				val evaluators = content.computeIfAbsent(method.type) [
					this.factories.concurrentCollectionFactory.<MethodProxy>newSet(ObjectComparator::SINGLETON)
				]
				evaluators += meth
			}
		}
		return content
	}

	@Pure
	override getBehaviorGuardEvaluatorsForRegisteredListeners(
		^event : Event) : ConcurrentCollection<? extends IBehaviorGuardEvaluator> {
		assert ^event !== null
		val eventTypes = TypeHierarchyDictionary::getFlattenHierarchy(^event.class)
		val allEvaluators = this.factories.concurrentCollectionFactory.newCollection
		val mapper = getInternalEvaluatorMapperForRegisteredListeners
		val filter = getInternalEvaluatorFilterForRegisteredListeners
		val dt = internalDataStructureForRegisteredListeners
		for (eventType : eventTypes) {
			val eventSubscribers = dt.get(eventType)
			if (eventSubscribers !== null) {
				for (guardedEvaluator : eventSubscribers) {
					if (filter.apply(guardedEvaluator, ^event)) {
						allEvaluators += mapper.apply(guardedEvaluator)
					}
				}
			}
		}
		return allEvaluators
	}

	@Pure
	override getBehaviorGuardEvaluatorsForDirectAccessListener(^event : Event, listener : Object) : ConcurrentCollection<? extends IBehaviorGuardEvaluator> {
		assert ^event !== null
		assert listener !== null
		val allEvaluators = this.factories.concurrentCollectionFactory.newCollection
		//
		val eventTypes = TypeHierarchyDictionary::getFlattenHierarchy(^event.class)
		val dt = internalDataStructureForDirectAccessListeners
		val listenerType = listener.class
		val mapper = getInternalEvaluatorMapperForDirectAccessListeners(listener)
		//
		val eventMapping = dt.computeIfAbsent(listenerType) [
			listenerType.buildDirectAccessGuardEvaluators
		]
		if (eventMapping !== null && !eventMapping.empty) {
			for (eventType : eventTypes) {
				val eventSubscribers = eventMapping.get(eventType)
				if (eventSubscribers !== null) {
					for (guardedEvaluator : eventSubscribers) {
						allEvaluators += mapper.apply(guardedEvaluator)
					}
				}
			}
		}
		return allEvaluators
	}

	override register(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
		assert listener !== null
		val hasCallback = new MutableBoolean(callback !== null)
		var methodIterator = new MethodIterator(listener.class)
		while (methodIterator.hasNext) {
			val method = methodIterator.next

			val evaluators = internalDataStructureForRegisteredListeners.computeIfAbsent(method.type) [
				this.factories.concurrentCollectionFactory.<GuardedEvaluator>newSet(ObjectComparator::SINGLETON)
			]

			for (meth : method.methods) {
				var success = evaluators +=
					new GuardedEvaluator(filter, new ReflectBehaviorGuardEvaluator(listener, meth))
				if (!success) {
					hasCallback.set(false)
				}
			}
		}
		if (hasCallback.get) {
			callback.apply(listener)
		}
	}

	override unregister(listener : Object, callback : (Object)=>void) : void {
		assert listener !== null
		assert !(listener instanceof Class), "illegal argument type. Class is not allowed as listener."
		val hasCallback = new MutableBoolean(callback !== null)
		// Loop on listener's methods in order to retrieve the event types and loop
		// on a smaller set of entries from "this.evaluators"
		var methodIterator = new MethodIterator(listener.class)
		val mapper = getInternalEvaluatorMapperForRegisteredListeners
		val dt = internalDataStructureForRegisteredListeners
		while (methodIterator.hasNext) {
			val method = methodIterator.next
			val registeredEvaluators = dt.get(method.type)
			if (registeredEvaluators !== null) {

				val removables = newLinkedList

				// TODO: New implementation without two loops (for-loop and removeAll loop) may be more efficient
				for (registeredEvaluator : registeredEvaluators) {
					val target = mapper.apply(registeredEvaluator).target
					if (target === listener) {
						removables += registeredEvaluator
						if (hasCallback.get) {
							hasCallback.set(false)
							callback.apply(target)
						}
					}
				}

				registeredEvaluators.removeAll(removables)

					// TODO: Is the following behavior efficient?
					// don't try to remove the set if it's empty; that can't be done safely without a lock
					// anyway, if the set is empty it'll just be wrapping an array of length 0
			}
		}
	}

	/** 
	 * Description of an single guard evaluator.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	@Data
	protected static class Evaluator {

		val type : Class<? extends Event>

		val methods : Collection<MethodProxy>		

	}
	
	/** Iterator on the guard evaluators that are declared into the provided listener.
	 * The iterator goes into the super-types.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class MethodIterator implements Iterator<Evaluator> {

		val methods : Iterator<Entry<Class<? extends Event>, Collection<MethodProxy>>>

		new (listener : Class<?>) {
			this.methods = listener.annotedMethodsPerEvent.entrySet.iterator
		}

		override hasNext : boolean {
			this.methods.hasNext
		}

		override next : Evaluator {
			val element = this.methods.next
			return new Evaluator(element.key, element.value)
		}

	}
	
}
