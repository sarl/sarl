/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.probing.probes

import java.util.Objects
import java.util.concurrent.atomic.AtomicReference

/** 
 * Probe implementation is linked to an object reference field, or a field that
 * could be assimilated to an object reference primitive. A probe is thread-safe.
 * This probe make a buffer of the values. In order to be updated, the
 * {@link #sync()} function must be invoked. Then, the new value is read
 * from the associated field, and the probe listeners are notified.
 * 
 * @param <T> the type of the referenced object
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
class ReferenceFieldProbe<T> extends AbstractFieldProbe<T> {

	protected override areEqualValues(newValue : T, oldValue : T) : boolean {
		Objects::equals(newValue, oldValue)
	}

	@SuppressWarnings("io.sarl.lang.validation.IssueCodes.potential_inefficient_value_conversion")
	protected override toT(value : Object, concreteType : Class<?>) : T {
		var pt = this.type
		if (concreteType == typeof(AtomicReference)) {
			val ar = value as AtomicReference<?>
			var referencedValue = ar?.get
			if (referencedValue !== null) {
				try {
					return pt.cast(referencedValue)
				} catch (exception : Throwable) {
					// Silent
				}
			}
			return null
		}
		try {
			return pt.cast(value) 
		} catch (exception : Throwable) {
			// Silent
		}
		return null
	}
	
	@SuppressWarnings("io.sarl.lang.validation.IssueCodes.potential_inefficient_value_conversion")
	protected override prepareFieldWriting(newValue : T, concreteType : Class<?>, currentValue : Object) : Object {
		if (concreteType == typeof(AtomicReference)) {
				val ab = currentValue as AtomicReference<T>
				if (ab === null) {
					return new AtomicReference(newValue)
				}
				ab.set(newValue)
				return ab
		}
		return newValue
	}

}
