/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.internal.internal

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Provides
import io.sarl.sre.janus.KernelScope
import io.sarl.sre.janus.internal.AgentEventEmitter
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.ContextMemberEventEmitter
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.internal.SpaceEventEmitterFactory
import io.sarl.sre.janus.internal.SpaceParticipantEventEmitterFactory
import io.sarl.sre.janus.internal.SubHolonContextEventEmitterFactory
import io.sarl.sre.janus.internal.TaskAgentFailureEventEmitterFactory
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.context.InternalContextMembershipListenerFactory
import io.sarl.sre.janus.services.context.SpaceRepositoryListenerFactory
import io.sarl.sre.janus.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.skills.bic.FailureListenerFactory
import io.sarl.sre.janus.spaces.SpaceParticipantListenerFactory
import javax.inject.Provider
import javax.inject.Singleton

/** 
 * Module for configuring the methods for firing the specific events that are defined into the SARL API.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class PlatformEventEmitterModule implements BQModule {

	override configure(binder : Binder) {
		//
	}

	@Provides
	@KernelScope
	@Singleton
	static def provideExternalContextMemberListener(logging : Provider<LoggingService>) : ExternalContextMemberListener {
		new ContextMemberEventEmitter(logging.get.getKernelLogger)
	}

	@Provides
	@KernelScope
	@Singleton
	static def provideInternalContextMembershipListenerFactory(factories : Provider<Factories>,
		agentTraitInitializer : Provider<ConfigurableAgentInjector>) : InternalContextMembershipListenerFactory {
		new SubHolonContextEventEmitterFactory(factories, agentTraitInitializer)
	}

	@Provides
	@KernelScope
	@Singleton
	static def provideSpaceRepositoryListenerFactory : SpaceRepositoryListenerFactory {
		new SpaceEventEmitterFactory
	}

	@Provides
	@KernelScope
	@Singleton
	static def provideSpaceParticipantListenerFactory : SpaceParticipantListenerFactory {
		new SpaceParticipantEventEmitterFactory
	}

	@Provides
	@KernelScope
	@Singleton
	static def provideLifecycleServiceListener(logging : Provider<LoggingService>) : LifecycleServiceListener {
		new AgentEventEmitter(logging.get.getKernelLogger)
	}
	

	@Provides
	@KernelScope
	@Singleton
	static def provideFailureListenerFactory : FailureListenerFactory {
		new TaskAgentFailureEventEmitterFactory
	}

}

/** Provider of the module for configuring the methods for firing the specific events that are defined into the SARL API.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class PlatformEventEmitterModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new PlatformEventEmitterModule
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::PlatformEventEmitterModuleProvider_0);
	}

}
