/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor.tasks

import java.util.logging.Logger

/** 
 * Abstract implementation of a task that could be run on the JRE executor service.
 * See {@link Runnables} for creating an instance.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6
 * @see Runnables
 */
abstract class SreExecutable {

	protected volatile var exception : Throwable

	val logger : Logger

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param logger the logger to use.
	 */
	protected new (logger : Logger) {
		this.logger = logger
	}

	/** Replies the logger.
	 * 
	 * @return the logger, or {@code null} if the platform logger should be used.
	 */
	def getLogger : Logger {
		this.logger
	}

	/** Replies a not-empty message for the given exception.
	 *
	 * @param ex the exception.
	 * @return the error message.
	 */
	protected static def exceptionMessage(ex : Throwable) {
		if (ex !== null) {
			val msg = ex.localizedMessage
			if (!msg.nullOrEmpty) {
				return msg
			}
		}
		var msg = ex.class.simpleName
		return msg
	}

	/** Replies the root cause of the given exception.
	 *
	 * @param ex the exception for which the root cause msut be determined.
	 * @return the root cause, never null.
	 */
	protected static def getRootCause(ex : Throwable) : Throwable {
		assert ex !== null
		var root = ex
		while (root.cause !== null && root.cause !== root && root.cause !== ex) {
			root = root.cause
		}
		return root
	}

	/** Replies if the task was finished on a success.
	 * 
	 * @return {@code true} if the task if finished and successful. {@code false}
	 * if the task is not not finished or successful.
	 */
	def isSuccess : boolean {
		this.exception === null
	}

	/** Replies the exception that has stopped the task.
	 * 
	 * @return the exception or {@code null} if the task was successfully finished.
	 * @since 0.11
	 */
	def getException : Throwable {
		this.exception
	}

	/** Invoked when an error occurs into the task and after this error is logged out.
	 * The default implementation does nothing.
	 * 
	 * @param error the error.
	 * @return {@code true} if the error should be thrown in the current thread.
	 *     {@code false} if the exception is not thrown.
	 * @since 0.11
	 */
	protected def onError(error : Throwable) : boolean {
		return true
	}

	/** Invoked when the task is finished whatever it is successful or failing.
	 * The default implementation does nothing.
	 * 
	 * @since 0.11
	 */
	protected def onFinished {
	}

}
