/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.probing.probes

import io.sarl.api.naming.name.AgentName
import io.sarl.api.naming.name.ArtifactName
import io.sarl.api.naming.name.BehaviorName
import io.sarl.api.naming.name.ContextName
import io.sarl.api.naming.name.ServiceName
import io.sarl.api.naming.name.SkillName
import io.sarl.api.naming.name.SpaceName
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.probing.IProbeReleaseListener
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentTrait
import io.sarl.lang.core.Behavior
import io.sarl.sre.janus.internal.Factories
import java.net.URI
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Provider
import org.arakhne.afc.services.IService
import org.arakhne.afc.services.ServiceState
import org.eclipse.xtend.lib.annotations.Accessors

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.sre.janus.services.lifecycle.BehaviorLife.*

/** 
 * Abstract probe implementation is linked to a field. A probe is thread-safe.
 * 
 * @param <T> the type of the probed value.
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
abstract class AbstractFieldProbe<T> extends AbstractProbe<T> {

	val ilock : ReadWriteLock

	val olock : ReadWriteLock

	@Accessors(PROTECTED_GETTER)
	val field : FieldAccess

	volatile var activation : (Object) => boolean

	var doSyncIn = false

	var doSyncInit = true

	var doSyncOut = false

	var inBuffer : T

	var outBuffer : T

	/** Constructor.
	 * 
	 * @param manager the creator of this probe, and its manager.
	 * @param name the name of the probe
	 * @param uri the UI of the field.
	 * @param type the expected type of the probed value.
	 * @param field the accessor to the probed field.
	 */
	protected new (
		manager : IProbeReleaseListener,
		name : String,
		uri : URI,
		type : Class<T>,
		field : FieldAccess,
		factories : Provider<Factories>) {
		super(manager, name, uri, type, factories)
		assert field !== null
		this.field = field
		this.ilock = factories.get.newReadWriteLock
		this.olock = factories.get.newReadWriteLock
	}

	@Pure
	override isInvalid : boolean {
		val il = getInputLock.readLock
		il.lock
		try {
			if (this.doSyncIn) {
				return true
			}
		} finally {
			il.unlock
		}
		val ol = getOutputLock.readLock
		ol.lock
		try {
			return this.doSyncOut
		} finally {
			ol.unlock
		}
	}

	override setValue(value : T) {
		if (isActive) {
			val ol = getOutputLock.writeLock
			ol.lock
			try {
				this.doSyncOut = true
				this.outBuffer = value
			} finally {
				ol.unlock
			}
		}
	}

	@Pure
	override getValue : T {
		syncIn() [
			fireValueChanged($2)
		]
	}

	/** Do input synchronization.
	 * 
	 * <p>This function is thread-safe.
	 *
	 * @param forceSync indicates if the synchronization with the input buffer is forced or not. Default value is {@code false}.
	 * @param changeCallback the callback invoked when the buffer has changed. Default value is {@code null}
	 *     The arguments of the callback are the old value and the new value.
	 * @return the current buffer value.
	 */
	protected def syncIn(forceSync : boolean = false, changeCallback : (T, T, boolean) => void) : T {
		var continueSync : boolean
		var bufferContent : T
		val il = getInputLock.readLock
		il.lock
		try {
			continueSync = forceSync || this.doSyncIn || this.doSyncInit
			bufferContent = this.inBuffer
		} finally {
			il.unlock
		}
		if (continueSync) {
			val ol = getInputLock.writeLock
			ol.lock
			try {
				continueSync = forceSync || this.doSyncIn || this.doSyncInit
				if (continueSync) {
					val enableChange = !this.doSyncInit
					this.doSyncIn = false
					this.doSyncInit = false
					var oldValue = this.inBuffer
					bufferContent = readFieldValue
					this.inBuffer = bufferContent
					if (enableChange && changeCallback !== null && !areEqualValues(bufferContent, oldValue)) {
						changeCallback.apply(oldValue, bufferContent, !enableChange)
					}				
				} else {
					bufferContent = this.inBuffer
				}
			} finally {
				ol.unlock
			}
		}
		return bufferContent
	}

	/** Read the value from the field. Do any outboxing or data convertion. */
	protected def readFieldValue : T {
		val faccess = getField
		return faccess.get.toT(faccess.field.type)
	}

	/** Convert the value.
	 *
	 * @param value is the value.
	 * @param concreteType is the type of the field.
	 */
	protected abstract def toT(value : Object, concreteType : Class<?>) : T

	/** Replies if the two given values are equal or not */
	protected abstract def areEqualValues(newValue : T, oldValue : T) : boolean

	/** Do output synchronization.
	 * 
	 * <p>This function is thread-safe.
	 *
	 * @param forceSync indicates if the synchronization with the input buffer is forced or not. Default value is {@code false}.
	 * @param changeCallback the callback invoked when the buffer has changed. Default value is {@code null}.
	 *     The arguments of the callback are the old value and the new value.
	 */
	protected def syncOut(forceSync : boolean = false, changeCallback : (T, T, boolean) => void) : void {
		var continueSync : boolean
		val il = getOutputLock.readLock
		il.lock
		try {
			continueSync = forceSync || this.doSyncOut
		} finally {
			il.unlock
		}
		if (continueSync) {
			val ol = getOutputLock.writeLock
			ol.lock
			try {
				continueSync = forceSync || this.doSyncOut
				if (continueSync) {
					val init = this.doSyncInit
					this.doSyncOut = false
					var newValue = this.outBuffer
					var oldValue = writeFieldValue(newValue)
					this.outBuffer = null
					this.doSyncInit = false
					this.doSyncIn = false
					this.inBuffer = newValue
					if (changeCallback !== null && !areEqualValues(newValue, oldValue)) {
						changeCallback.apply(oldValue, newValue, init)
					}
				}
			} finally {
				ol.unlock
			}
		}
	}

	/** Write the value from the field. Do any outboxing or data convertion.
	 *
	 * @param value the new value.
	 * @return the old value.
	 */
	protected def writeFieldValue(value : T) : T {
		val faccess = getField
		val finst = faccess.field
		val concreteType = finst.type
		val rawOldValue = faccess.get
		val oldValue = rawOldValue.toT(concreteType)
		val newValue = value.prepareFieldWriting(concreteType, rawOldValue)
		faccess.set(newValue)
		return oldValue
	}

	/** Convert the value.
	 *
	 * @param value is the value.
	 * @param concreteType is the type of the field.
	 * @param oldValue the current/old value of the field.
	 * @return the value to write into the field.
	 */
	protected abstract def prepareFieldWriting(value : T, concreteType : Class<?>, oldValue : Object) : Object

	override sync(forcedReading : boolean, forceIfInactive : boolean) {
		if (super.active || forceIfInactive) {
			if (isActiveObject || forceIfInactive) {
				val changed = new AtomicBoolean(false)
				val init = new AtomicBoolean(false)
				syncOut [
					if ($2) {
						init.set(true)
					}
					changed.set(true)
				]
				syncIn(forcedReading) [
					if ($2) {
						init.set(true)
					}
					changed.set(true)
				]
				if (changed.get) {
					fireValueChanged(init.get)
				}
			} else {
				release
			}
		}
	}

	@Pure
	override isActive : boolean {
		return isActiveObject && super.active
	}

	/** Replies if the probed object is active.
	 */
	protected def isActiveObject : boolean {
		if (this.activation === null) {
			this.activation = this.field.name.scheme.createActivation
		}
		return this.activation.apply(this.field.instance)
	}

	private static def createActivation(scheme : String) : (Object)=>boolean {
		switch (scheme) {
			case AgentName::SCHEME: {
				return [
					var life = (it as Agent).getAgentLifeOrNull
					if (life !== null) {
						return life.state.alive
					}
					return false
				]
			}
			case BehaviorName::SCHEME: {
				return [
					return (it as Behavior).getBehaviorLifeOrNull !== null
				]
			}
			case SkillName::SCHEME,
			case ContextName::SCHEME: {
				return [
					var ag = (it as AgentTrait).owner
					if (ag !== null) {
						var life = ag.getAgentLifeOrNull
						if (life !== null) {
							return life.state.alive
						}
					}
					return false
				]
			}
			case SpaceName::SCHEME: {
				return [true]
			}
			case ServiceName::SCHEME: {
				return [(it as IService).state === ServiceState::RUNNING]
			}
			case ArtifactName::SCHEME: {
				return [true]
			}
		}
		throw new IllegalArgumentException
	}

	override release {
		val il = getInputLock.writeLock
		il.lock
		try {
			this.doSyncIn = false
			// Caution: Do not reset the inBuffer field in order to enable access to the value even if the probe is inactive
		} finally {
			il.unlock
		}
		val ol = getOutputLock.writeLock
		ol.lock
		try {
			this.doSyncOut = false
			this.outBuffer = null
		} finally {
			ol.unlock
		}
		super.release
	}

	/** Replies the lock for input buffer.
	 * @since 0.12
	 */
	protected def getInputLock : ReadWriteLock {
		this.ilock
	}

	/** Replies the lock for output buffer.
	 * @since 0.12
	 */
	protected def getOutputLock : ReadWriteLock {
		this.olock
	}

}
