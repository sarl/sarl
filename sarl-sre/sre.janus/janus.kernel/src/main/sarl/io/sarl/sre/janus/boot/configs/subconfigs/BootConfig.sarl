/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.boot.configs.subconfigs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Provides
import io.bootique.meta.application.OptionMetadata
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SRE
import io.sarl.lang.core.SREBootstrap
import io.sarl.lang.core.SREClassLoader
import io.sarl.sre.janus.boot.configs.SreConfig
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import java.util.UUID
import javax.inject.Named
import javax.inject.Provider
import javax.inject.Singleton
import org.arakhne.afc.bootique.variables.VariableDecls

import static io.sarl.sre.janus.boot.configs.subconfigs.BootConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for specifying the SRE booting parameters.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.8.0
 */
@BQConfig("Booting configuration for the SARL Run-time Environment")
class BootConfig {

	/** 
	 * Prefix for the configuration entries of the boot modules.
	 */
	public static val PREFIX : String = SreConfig::PREFIX + ".boot"

	/** 
	 * Name of the property that contains the agent to boot.
	 */
	public static val BOOT_AGENT_NAME = PREFIX + ".bootAgent"

	/** 
	 * Name of the property that contains the identifier of the root context.
	 * 
	 * @see #ROOT_CONTEXT_ID_VALUE
	 */
	public static val ROOT_CONTEXT_ID_NAME = PREFIX + ".rootContextId"

	/** 
	 * The default value for the root context identifier.
	 * 
	 * @see #ROOT_CONTEXT_ID_NAME
	 */
	public static val ROOT_CONTEXT_ID_VALUE = "2c38fb7f-f363-4f6e-877b-110b1f07cc77"

	/** 
	 * Name of the property that contains the identifier for the default space of the root context.
	 * 
	 * @see #ROOT_DEFAULT_SPACE_ID_VALUE
	 */
	public static val ROOT_DEFAULT_SPACE_ID_NAME = PREFIX + ".rootSpaceId"

	/** 
	 * The default value for the root default space identifier.
	 * 
	 * @see #ROOT_DEFAULT_SPACE_ID_NAME
	 */
	public static val ROOT_DEFAULT_SPACE_ID_VALUE = "7ba8885d-545b-445a-a0e9-b655bc15ebe0"

	/** 
	 * Name of the property that contains the name of the SRE main program from the external point of view.
	 * 
	 * @see #PROGRAM_NAME_VALUE
	 */
	public static val PROGRAM_NAME_NAME = PREFIX + ".programName"

	/** Default value of the property that contains the name of the SRE
	 * main program from the external point of view.
	 * 
	 * @see #PROGRAM_NAME_NAME
	 */
	public static val PROGRAM_NAME_VALUE = "SARL Run-time Environment"

	/** 
	 * Name of the property that contains the type of root context at boot.
	 */
	public static val ROOT_CONTEXT_BOOT_TYPE_NAME = PREFIX + ".rootContextBootType"

	var commandLineArguments : String[]

	var agentStartArguments : String[]

	var bootAgent : String

	transient var bootAgentType : Class<? extends Agent>

	var rootContextBootType : RootContextType

	var rootContextID : UUID

	var rootSpaceID : UUID

	var programName : String

	/** Replies the name of the agent to launch at boot time.
	 *
	 * @return the qualified name of the name.
	 */
	def getBootAgent : String {
		return this.bootAgent.extractBootAgent
	}

	/** Set the name of the agent to launch at boot time.
	 * 
	 * @param name the qualified name of the name.
	 */
	@BQConfigProperty("fully-qualified name of the agent's type to launch")
	def setBootAgent(name : String) {
		this.bootAgent = name.extractBootAgent
	}

	private def extractBootAgent(name : String) : String {
		if (!name.isNullOrEmpty) {
			return name
		}
		if (this.commandLineArguments === null || this.commandLineArguments.length == 0) {
			throw new NoBootAgentNameException
		}
		var nm = this.commandLineArguments.get(0)
		if (nm.isNullOrEmpty) {
			throw new NoBootAgentNameException
		}
		return nm
	}

	/** Replies the type of the agent to launch at boot time.
	 *
	 * @return the agent type.
	 */
	def loadBootAgent : Class<? extends Agent> {
		if (this.bootAgentType === null) {
			val agentTypeName = getBootAgent
			if (agentTypeName.isNullOrEmpty) {
				throw new InvalidAgentNameException(Messages::BootConfig_2)
			}
			var type = SREClassLoader::loadClass(agentTypeName, this.class.classLoader)
			if (type === null) {
				throw new InvalidAgentNameException(MessageFormat::format(Messages::BootConfig_0, agentTypeName))
			} else if (typeof(Agent).isAssignableFrom(type)) {
				this.bootAgentType = type.asSubclass(typeof(Agent))
			} else {
				throw new InvalidAgentNameException(
					MessageFormat::format(Messages::BootConfig_1, agentTypeName, typeof(Agent).name))
			}
		}
		return this.bootAgentType
	}

	/** Replies the command line arguments that are passed to the program.
	 *
	 * <p>This function replies the arguments passed to the program. The arguments
	 * that are passed to an agent when it is started are replied by
	 * {@link #getAgentStartArgs()}.
	 * 
	 * @return the command line arguments.
	 * @see #getAgentStartArgs()
	 */
	def getCommandLineArgs : String[] {
		if (this.commandLineArguments === null || this.commandLineArguments.length <= 1) {
			return #[]
		}
		return this.commandLineArguments
	}

	/** Change the command line arguments that are passed to the program.
	 * 
	 * <p>The arguments that are passed to an agent when it is started are replied by
	 * {@link #getAgentStartArgs()} and changed by {@link #setAgentStartArgs(String[])}.
	 * 
	 * @param args the command line arguments.
	 * @see #setAgentStartArgs(String[])
	 */
	def setCommandLineArgs(args : String[]) {
		this.commandLineArguments = args
	}

	/** Replies the arguments to pass to an agent when it is started.
	 *
	 * <p>This function is a subset of the command line arguments that are
	 * replied by {@link #getCommandLineArgs()}.
	 * 
	 * @return the arguments.
	 * @see #getCommandLineArgs()
	 */
	def getAgentStartArgs : String[] {
		if (this.agentStartArguments === null) {
			this.agentStartArguments = #[]
		}
		return this.agentStartArguments
	}

	/** Change the arguments to pass to an agent when it is started.
	 * 
	 * <p>The agent start arguments constitute a subset of the command line arguments that are
	 * replied by {@link #getCommandLineArgs()}.
	 * The arguments that are passed to an agent when it is started are replied by
	 * {@link #getAgentStartArgs()} and changed by {@link #setAgentStartArgs(String[])}.
	 * 
	 * @param args the command line arguments.
	 */
	def setAgentStartArgs(args : String[]) {
		this.agentStartArguments = args
	}
	
	/** 
	 * Replies the identifier of the root context.
	 * 
	 * @return the context identifier
	 */
	def getRootContextID() : UUID {
		if (this.rootContextID === null) {
			this.rootContextID = computeRootContextID
		}
		return this.rootContextID
	}

	/** 
	 * Set the identifier of the root context.
	 * 
	 * @param id the context identifier
	 */
	@BQConfigProperty("Identifier of the root context if applicable according to the context identifier computing method")
	def setRootContextID(id : UUID) : void {
		if (id === null) {
			this.rootContextID = computeRootContextID
		} else {
			this.rootContextID = id
		}
	}

	private def computeRootContextID : UUID {
		switch (getRootContextBootType) {
			case BOOT_AGENT_NAME: {
				var name = getBootAgent
				if (name.isNullOrEmpty) {
					return UUID::randomUUID
				}
				return UUID::nameUUIDFromBytes(name.bytes)
			}
			case RANDOM: {
				return UUID::randomUUID
			}
			case DEFAULT: {
				return ROOT_CONTEXT_ID_VALUE.parseUUID
			}
		}
		throw new IllegalStateException
	}

	/** 
	 * Construct an identifier for the root default space.
	 * 
	 * @return the space ID
	 */
	def getRootSpaceID() : UUID {
		ensureRootSpaceIDValue
		return this.rootSpaceID
	}

	/** 
	 * Set the identifier for the root default space.
	 * 
	 * @param id the space ID
	 */
	@BQConfigProperty("identifier of the default space within the root context")
	def setRootSpaceID(id : UUID) {
		this.rootSpaceID = id
		ensureRootSpaceIDValue
	}

	private def ensureRootSpaceIDValue {
		if (this.rootSpaceID === null) {
			this.rootSpaceID = ROOT_DEFAULT_SPACE_ID_VALUE.parseUUID
		}
	}

	private static def parseUUID(value : String) : UUID {
		assert !value.nullOrEmpty
		try {
			return UUID::fromString(value)
		} catch (exception : Throwable) {
			return UUID::nameUUIDFromBytes(value.bytes)
		}
	}

	/** Replies the name of the SRE main program from the external point of view.
	 *
	 * @return the name of the program.
	 */
	def getProgramName : String {
		ensureProgramName
		return this.programName
	}

	/** Set the name of the SRE main program from the external point of view.
	 * 
	 * @param name the name of the program.
	 */
	@BQConfigProperty("name of the program")
	def setProgramName(name : String) {
		this.programName = name
		ensureProgramName
	}

	private def ensureProgramName : void {
		if (this.programName === null) {
			this.programName = PROGRAM_NAME_VALUE
		}
	}

	/** 
	 * Replies the type of id computation for the root context.
	 * 
	 * @return the type of id computation.
	 */
	def getRootContextBootType() : RootContextType {
		ensureRootContextBootType
		return this.rootContextBootType
	}

	/** 
	 * Set the type of id computation for the root context.
	 * 
	 * @param type the type of id computation.
	 */
	@BQConfigProperty("method for computing the identifier of the root context")
	def setRootContextBootType(type : RootContextType) {
		this.rootContextBootType = type
		ensureRootContextBootType
	}

	private def ensureRootContextBootType : void {
		if (this.rootContextBootType === null) {
			this.rootContextBootType = RootContextType::DEFAULT
		}
	}

}

/** 
 * The name of the boot agent is not provided, e.g. on the command line.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.8.0
 */
class NoBootAgentNameException extends RuntimeException {
}

/** 
 * The name of the boot agent is not a sub-type of {@code Agent}.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.8.0
 */
class InvalidAgentNameException extends RuntimeException {
}

/** 
 * Module for the SRE booting parameters.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class BootConfigModule implements BQModule {

	public static val ROOT_CONTEXT_ID_OPTION = "root-context-id"

	public static val DEFAULT_SPACE_ID_OPTION = "default-space-id"

	public static val NAME_OPTION = "name"

	public static val BOOT_TYPE_OPTION = "boot-type"

	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(BOOT_AGENT_NAME)

		VariableDecls::extend(binder).declareVar(ROOT_CONTEXT_ID_NAME);
		binder.extend.addOption(
			OptionMetadata::builder(
				ROOT_CONTEXT_ID_OPTION,
				MessageFormat::format(Messages::BootConfigModule_0, ROOT_CONTEXT_ID_VALUE)
			).valueRequired(Messages::BootConfigModule_5).build
		).mapConfigPath(ROOT_CONTEXT_ID_OPTION, ROOT_CONTEXT_ID_NAME)

		VariableDecls::extend(binder).declareVar(ROOT_DEFAULT_SPACE_ID_NAME);
		binder.extend.addOption(
			OptionMetadata::builder(
				DEFAULT_SPACE_ID_OPTION,
				MessageFormat::format(Messages::BootConfigModule_1, ROOT_DEFAULT_SPACE_ID_VALUE)
			).valueRequired(Messages::BootConfigModule_5).build
		).mapConfigPath(DEFAULT_SPACE_ID_OPTION, ROOT_DEFAULT_SPACE_ID_NAME)

		VariableDecls::extend(binder).declareVar(PROGRAM_NAME_NAME);
		binder.extend.addOption(
			OptionMetadata::builder(
				NAME_OPTION,
				MessageFormat::format(Messages::BootConfigModule_2, PROGRAM_NAME_VALUE)
			).valueRequired(Messages::BootConfigModule_6).build
		).mapConfigPath(NAME_OPTION, PROGRAM_NAME_NAME)

		VariableDecls::extend(binder).declareVar(ROOT_CONTEXT_BOOT_TYPE_NAME);
		binder.extend.addOption(
			OptionMetadata::builder(
				BOOT_TYPE_OPTION,
				MessageFormat::format(Messages::BootConfigModule_3, RootContextType::^default.toJsonString,
					RootContextType::jsonLabels))
				.valueRequired(Messages::BootConfigModule_4).build
		).mapConfigPath(BOOT_TYPE_OPTION, ROOT_CONTEXT_BOOT_TYPE_NAME)
	}

	/** Replies the type's name of the agent to boot.
	 * 
	 * @param config accessor to the bootique factory.
	 * @return the name of the agent to boot.
	 */
	@Provides
	@Named(BOOT_AGENT_NAME)
	def getBootAgentType(config : Provider<SreConfig>) : Class<? extends Agent> {
		config.get.boot.loadBootAgent
	}

	/** Replies the programmatic bootstrap for the SRE.
	 * 
	 * @return the provider of the bootstrap.
	 */
	@Provides
	@Singleton
	static def getProgrammaticBootstrap : SREBootstrap {
		SRE::bootstrap
	}

	/** 
	 * Replies the identifier of the root context.
	 * 
	 * @param config accessor to the bootique factory.
	 * @return the context identifier
	 */
	@Provides
	@Named(ROOT_CONTEXT_ID_NAME)
	@Singleton
	def getRootContextID(config : Provider<SreConfig>) : UUID {
		config.get.boot.rootContextID
	}

	/** 
	 * Construct an identifier for the root default space.
	 * 
	 * @param config accessor to the bootique factory.
	 * @return the space ID
	 */
	@Provides
	@Named(ROOT_DEFAULT_SPACE_ID_NAME)
	@Singleton
	def getRootSpaceID(config : Provider<SreConfig>) : UUID {
		config.get.boot.rootSpaceID
	}

}

/** Provider of the module for the SRE booting parameters.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class BootConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new BootConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(BootConfig))
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::BootConfigModuleProvider_0);
	}

}
