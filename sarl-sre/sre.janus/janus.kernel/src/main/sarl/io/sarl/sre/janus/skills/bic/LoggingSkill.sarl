/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.bic

import com.google.common.base.Throwables
import io.sarl.api.core.Logging
import io.sarl.lang.core.Skill
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Inject
import java.text.MessageFormat
import java.util.function.Supplier
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger

/** 
 * SRE implementation of SARL's {@link Logging} built-in capacity.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill LoggingSkill extends Skill implements Logging {

	val logService : LoggingService

	var loggerInstance : Logger

	/** Constructor.
	 */
	@Inject
	new (service : LoggingService) {
		this.logService = service
	}

	
	def getLogger : Logger {
		if (this.loggerInstance === null) {
			val agentId = owner.ID
			val loggerName = MessageFormat::format(Messages::LoggingSkill_0, agentId)
			this.loggerInstance = this.logService.createAgentLogger(loggerName)
		}
		this.loggerInstance
	}

	def setLoggingName(name : String) {
		var loggingName = name
		if (loggingName.nullOrEmpty) {
			loggingName = MessageFormat::format(Messages::LoggingSkill_0, owner.ID)
		}
		val level = this.logger.level
		this.loggerInstance = this.logService.createAgentLogger(loggingName)
		this.logger.level = level
	}

	@Deprecated(since = "3.0.10", forRemoval = true)
	def println(message : Object) {
		info(message)
	}

	def error(message : Object, exception : Throwable, parameters : Object*) {
		if (this.logger.isLoggable(Level::SEVERE) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				if (exception !== null) {
					val lr = new LogRecord(Level::SEVERE, loggeableMessage)
			        lr.parameters = parameters
			        lr.thrown = Throwables::getRootCause(exception)
					this.logger.log(lr)
				} else {
					this.logger.log(Level::SEVERE, loggeableMessage, parameters)
				}
			}
		}
	}

	def error(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::SEVERE) && messageProvider !== null) {
			this.logger.log(Level::SEVERE, messageProvider)
		}
	}

	def warning(message : Object, exception : Throwable, parameters : Object*) {
		if (this.logger.isLoggable(Level::WARNING) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				if (exception !== null) {
					val lr = new LogRecord(Level::WARNING, loggeableMessage)
			        lr.parameters = parameters
			        lr.thrown = exception
					this.logger.log(lr)
				} else {
					this.logger.log(Level::WARNING, loggeableMessage, parameters)
				}
			}
		}
	}

	def warning(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::WARNING) && messageProvider !== null) {
			this.logger.log(Level::WARNING, messageProvider)
		}
	}

	def info(message : Object, parameters : Object*) {
		if (this.logger.isLoggable(Level::INFO) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				this.logger.log(Level::INFO, loggeableMessage, parameters)
			}
		}
	}

	def info(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::INFO) && messageProvider !== null) {
			this.logger.log(Level::INFO, messageProvider)
		}
	}

	def debug(message : Object, parameters : Object*) {
		if (this.logger.isLoggable(Level::CONFIG) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				this.logger.log(Level::CONFIG, loggeableMessage, parameters)
			}
		}
	}

	def debug(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::CONFIG) && messageProvider !== null) {
			this.logger.log(Level::CONFIG, messageProvider)
		}
	}

	def isErrorLogEnabled : boolean {
		this.logger.isLoggable(Level::SEVERE)
	}

	def isWarningLogEnabled : boolean {
		this.logger.isLoggable(Level::WARNING)
	}

	def isInfoLogEnabled : boolean {
		this.logger.isLoggable(Level::INFO)
	}

	def isDebugLogEnabled : boolean {
		this.logger.isLoggable(Level::CONFIG)
	}

	def getLogLevel : int {
		/* 
		 * 0 or lower for no logging,
		 * 1 for error,
		 * 2 for warning,
		 * 3 for info,
		 * 4 or higher for debug.
			 */
		switch (this.logger.level) {
			case Level::OFF: {
				return 0
			}
			case Level::SEVERE: {
				return 1
			}
			case Level::WARNING: {
				return 2
			}
			case Level::INFO: {
				return 3
			}
			default: {
				return 4
			}
		}
	}

	def setLogLevel(level : int) {
		/*
		 * 0 or lower for no logging,
		 * 1 for error,
		 * 2 for warning,
		 * 3 for info,
		 * 4 or higher for debug.
		 */
		var obj : Level
		switch (level) {
			case 1: {
				obj = Level::SEVERE
			}
			case 2: {
				obj = Level::WARNING
			}
			case 3: {
				obj = Level::INFO
			}
			default: {
				if (level <= 0) {
					obj = Level::OFF
				} else {
					obj = Level::FINE
				}
			}
		}
		this.logger.level = obj
	}
		
}
