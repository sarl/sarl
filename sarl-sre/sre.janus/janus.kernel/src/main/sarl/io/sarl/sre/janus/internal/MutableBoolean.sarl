/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal

import java.io.Serializable
import java.util.concurrent.atomic.AtomicBoolean
import org.eclipse.xtend.lib.annotations.ToString

/**
 * A boolean object that is mutable.
 * 
 * <p>This class is not thread-safe. For a thread-safe mutable boolean, see {@link AtomicBoolean}.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
@ToString
class MutableBoolean implements Serializable, Cloneable {

	var value : boolean

	/** Construct the mutable boolean.
	 *
	 * @param value the value.
	 */
	new (value : boolean = false) {
		this.value = value
	}

	/** Construct the mutable boolean.
	 * 
	 * @param value the value.
	 */
	new (value : Boolean) {
		this.value = if (value === null) false else value.booleanValue
	}

	/** Construct the mutable boolean.
	 * 
	 * @param value the value.
	 */
	new (value : AtomicBoolean) {
		this.value = if(value === null) false else value.get
	}

	/** Replies the boolean value.
	 *
	 * @return the value.
	 */
	@Pure
	def get : boolean {
		this.value
	}

	/** Change the boolean value.
	 * 
	 * @param value the value.
	 */
	def set(value : boolean) {
		this.value = value
	}

	/** Change the boolean value.
	 * 
	 * @param value the value.
	 */
	def set(value : Boolean) {
		this.value = if (value === null) false else value.booleanValue
	}

	/** Change the boolean value.
	 * 
	 * @param value the value.
	 */
	def set(value : AtomicBoolean) {
		this.value = if (value === null) false else value.get
	}
	
	/** Convert to a boolean value.
	 *
	 * @return the boolean value.
	 */
	@Pure
	def booleanValue : boolean {
		get
	}

	/** Convert to a Boolean value.
	 * 
	 * @return the Boolean value.
	 */
	@Pure
	def toBoolean : Boolean {
		Boolean::valueOf(get)
	}

	/** Convert to a Boolean value.
	 * 
	 * @return the Boolean value.
	 */
	@Pure
	def toAtomicBoolean : AtomicBoolean {
		new AtomicBoolean(get)
	}

}
