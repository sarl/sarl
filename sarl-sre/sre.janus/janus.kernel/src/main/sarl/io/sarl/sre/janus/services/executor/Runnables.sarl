/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor

import java.util.concurrent.Callable
import java.util.function.Consumer
import java.util.logging.Logger

/** 
 * Utilities for runnables and callables.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
final class Runnables {

	private new {
	}

	/** Create a task with the given runnable.
	 * 
	 * @param runnable the runnable.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	static def protectRunnable(runnable : Runnable, logger : Logger) : SreRunnable {
		if (runnable instanceof SreRunnable) {
			return runnable
		}
		return new SreRunnable(runnable, logger)
	}

	
	/** Create a task with the given callable.
	 * 
	 * @param <T> the type of the returned value.
	 * @param callable the callable.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	static def protectCallable(callable : Callable<T>, logger : Logger) : SreCallable<T> with T {
		if (callable instanceof SreCallable<?>) {
			return callable as SreCallable<T>
		}
		return new SreCallable(callable, logger)
	}

	/** Create a task with the given consumer.
	 * 
	 * @param <T> the type of the returned value.
	 * @param consumer the consumer.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	static def protectConsumer(consumer : Consumer<? super T>, logger : Logger) : SreConsumer<T> with T {
		if (consumer instanceof SreConsumer<?>) {
			return consumer as SreConsumer<T>
		}
		return new SreConsumer(consumer, logger)
	}

	/** Create a wrapper with a specific thread name.
	 * 
	 * @param runnable the task to wrap.
	 * @param name the new name of the associated, if not {@code null}.
	 * @return the wrapping task.
	 * @since 0.10
	 */
	static def named(runnable : Runnable, name : String) : Runnable {
		new SreKernelRunnable(runnable, name)
	}

}
