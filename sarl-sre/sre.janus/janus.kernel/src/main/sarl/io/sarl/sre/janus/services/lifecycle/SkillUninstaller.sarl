/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.janus.internal.ObjectComparator
import io.sarl.sre.janus.skills.bic.SchedulesSkill
import io.sarl.sre.janus.skills.internal.InternalEventBusSkill
import java.util.ArrayList
import java.util.List
import java.util.TreeSet

/** 
 * Install and uninstall the skills. 
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
interface SkillUninstaller {

	/** Uninstall the skills before the destroying event handler of the agent is invoked.
	 *
	 * @param agent the agent for which the skills should be uninstalled.
	 * @return the skills to pass to {@link #uninstallSkillsAfterDestroy(io.sarl.lang.core.Agent, java.util.Iterable)}.
	 */
	def uninstallSkillsBeforeDestroy(^agent : Agent) : List<? extends Skill>

	/** Uninstall the skills after the destroying event handler of the agent is invoked.
	 * 
	 * @param agent the agent for which the skills should be uninstalled.
	 * @param skills the skills given by {@link #uninstallSkillsBeforeDestroy(io.sarl.lang.core.Agent)}.
	 */
	def uninstallSkillsAfterDestroy(^agent : Agent, skills : List<? extends Skill>)

}

/** 
 * Install and uninstall the skills. 
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
class BasicSkillUninstaller implements SkillUninstaller {

	def uninstallSkillsBeforeDestroy(^agent : Agent) : List<? extends Skill> {
		// Get the registered skills.
		// This code ensures that a skill is not added two times into the replied skills.
	 	// This case may appends when a skill implements multiple capacities.
		val skills = SREutils.getSkillRepository(^agent)
		val exist = new TreeSet(ObjectComparator::SINGLETON)
		var set = new ArrayList<Skill>

		var busSkill : InternalEventBusSkill = null
		var schedulesSkill : SchedulesSkill = null

		if (skills !== null) {
			// The InternalEventBus and Schedules skills must released after all
			// the other skills
			for (^skill : skills.values) {
				var sk = ^skill.get
				if (exist.add(sk)) {
					if (sk instanceof InternalEventBusSkill) {
						busSkill = sk
					} else if (^sk instanceof SchedulesSkill) {
						schedulesSkill = ^sk
					} else {
						SREutils::doSkillUninstallationPreparation(sk)
						set.add(sk)
					}
				}
			}
			if (busSkill !== null) {
				SREutils::doSkillUninstallationPreparation(busSkill)
				set.add(busSkill)
			}
			if (schedulesSkill !== null) {
				SREutils::doSkillUninstallationPreparation(schedulesSkill)
				set.add(schedulesSkill)
			}
		}
		return set
	}

	def uninstallSkillsAfterDestroy(^agent : Agent, skills : List<? extends Skill>) {
		// The skills are sorted in the best order into the
		// uninstallSkillsBeforeDestroy function
		for (^skill : skills) {
			SREutils::doSkillUninstallation(^skill)
		}
	}

}
