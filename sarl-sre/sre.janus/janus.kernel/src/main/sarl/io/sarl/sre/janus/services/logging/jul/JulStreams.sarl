/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.logging.jul

import java.io.PrintStream
import java.util.logging.Formatter
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.SimpleFormatter
import java.util.logging.StreamHandler
import org.apache.commons.io.output.WriterOutputStream

/** A console handler that supports to be link to the standard output or the standard error output.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
class JulOutputStreamConsoleHandler extends StreamHandler {

	/** 
	 * Constructor.
	 * 
	 * @param stream the original stream.
	 */
	new (stream : PrintStream, formatter : Formatter = null) {
		super(stream.ensureOut, formatter.ensureFormatter)
		assert stream !== null, "a logger handler cannot have a null output stream"
		this.level = Level::ALL
	}

	@SuppressWarnings("discouraged_reference")
	private static def ensureOut(out : PrintStream) : PrintStream {
		if (out === null) {
			new PrintStream(WriterOutputStream.builder.setWriter(System.console.writer).get)
		} else {
			out
		}
	}

	@SuppressWarnings("discouraged_reference")
	private static def ensureFormatter(formatter : Formatter) : Formatter {
		if (formatter === null) {
			new SimpleFormatter
		} else {
			formatter
		}
	}
	
	def publish(record : LogRecord) {
		super.publish(record)
		flush
	}

	/** Replies if the given log level is loggable.
	 * 
	 * @param recordLevel the level to test.
	 * @return {@code true} if loggable level.
	 */
	protected def isLoggableRecord(recordLevel : Level) : boolean {
		true
	}

	override isLoggable(record : LogRecord) : boolean {
		if (record !== null) {
			val level = record.level
			assert level !== null
			if (level.isLoggableRecord) {
				return super.isLoggable(record)
			}
		}
		return false
	}

}

/** A console handler that supports to be link to the standard output.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
class JulStandardOutputConsoleHandler extends JulOutputStreamConsoleHandler {

	/** Constructor.
	 */
	@SuppressWarnings("discouraged_reference")
	new(formatter : Formatter = null) {
		super(System::out, formatter)
	}

	def isLoggableRecord(level : Level) : boolean {
		level !== Level.WARNING && level !== Level.SEVERE
	}

}

/** A console handler that supports to be link to the standard error output.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
class JulStandardErrorOutputConsoleHandler extends JulOutputStreamConsoleHandler {

	/** Constructor.
	 */
	@SuppressWarnings("discouraged_reference")
	new(formatter : Formatter = null) {
		super(System::err, formatter)
		this.level = Level::WARNING
	}

	def isLoggableRecord(level : Level) : boolean {
		level === Level.WARNING || level === Level.SEVERE
	}

}
