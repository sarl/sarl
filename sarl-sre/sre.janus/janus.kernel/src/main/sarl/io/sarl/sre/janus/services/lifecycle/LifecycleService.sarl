/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.sre.janus.services.context.Context
import java.util.EventListener
import java.util.UUID
import org.arakhne.afc.services.IService

/** 
 * This service provides the tools to manage the life-cycle of the agents.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface LifecycleService extends IService {

	/** 
	 * Enable or disable the spawning of agents.
	 * 
	 * @param enable indicates if the spawning of agents is enable or disable.
	 * @since 0.11
	 */
	def setSpawnEnable(enable : boolean)

	/** 
	 * Replies if the spawning of agents is enabled or disabled.
	 * 
	 * @return the flag that indicates if the spawning of agents is enable or disable.
	 * @since 0.11
	 */
	def getSpawnEnable : boolean

	/** 
	 * Spawn agents of the given type, and pass the parameters to its initialization function.
	 *
	 * <p>This function is not blocking until all the agents are spawned.
	 * 
	 * @param nbAgents the number of agents to spawn.
	 * @param spawningAgent the agent which is spawning, if {@code null}, the root agent (Janus kernel) is assumed.
	 * @param parent the parent entity that is creating the agents.
	 * @param agentId the identifier of the agent to spawn. If {@code null} the identifier is randomly selected.
	 * If {@code nbAgents} is greater than 1, the agent identifier must be {@code null}.
	 * @param agentClazz the type of the agents to spawn.
	 * @param params the list of the parameters to pass to the agent initialization function.
	 */
	def spawnAgent(nbAgents : int, spawningAgent : UUID, parent : Context, agentId : UUID,
		agentClazz : Class<? extends Agent>, params : Object[])

	/**
	 * Kill the given agent.
	 * 
	 * <p>An agent could be killed only if it does not contain sub-agents.
	 * 
	 * <p>Because the agent reference is passed to this function, only the objects which have this reference
	 * could kill the agent.
	 *
	 * @param agent the agent to kill.
	 * @param forceKillable indicates if the kill of the agent should be tested before killing it.
	 *     Usually, the agent cannot be killed when it contains other agents. This flag
	 *     enables or disables to the run of this test. If {@code true}, the agent is always assumed
	 *     to be killable.
	 * @param terminationCause is the cause of the termination of the agent.
	 *     If it is {@code null}, the agent does not provide a specific termination cause.
	 * @return {@code true} if the agent was killed by this call; {@code false} if the agent
	 *     is unknown or already killed.
	 * @since 0.12
	 */
	def killAgent(^agent : Agent, forceKillable : boolean, terminationCause : Object) : boolean

	/** 
	 * Add a listener on the changes in the current state of an agent.
	 *
	 * @param agentLifecycleListener the listener on the any change in the life-cycle of the agent.
	 */
	def addLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener)

	/**
	 * Remove a listener on the changes in the current state of an agent.
	 *
	 * @param agentLifecycleListener the listener on the any change in the life-cycle of the agent.
	 */
	def removeLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener)

	/**
	 * Add a listener on the changes related to the kernel agent.
	 *
	 * @param listener listener on the spawning events in the local kernel.
	 */
	def addKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener)

	/**
	 * Remove a listener on the changes related to the kernel agent.
	 *
	 * @param listener listener on the spawning events in the local kernel.
	 */
	def removeKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener)

	/** Add a dynamic skill provider that must be used for the agents that are spawned
	 * after the call to this function.
	 *
	 * @param provider is the provider of skills for newly created agents.
	 */
	def addDynamicSkillProvider(provider : DynamicSkillProvider)

	/** Remove a dynamic skill provider that must be not be used any more for the agents that are spawned.
	 * 
	 * @param provider is the provider of skills to be removed.
	 */
	def removeDynamicSkillProvider(provider : DynamicSkillProvider)

}

/** 
 * Listener on events related to the life-cycle of an agent.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface LifecycleServiceListener extends EventListener {

	/** 
	 * Invoked when the agent is spawned.
	 * 
	 * @param spawningAgent the identifier of the agent which spawns the given agent, if {@code null}, the root agent (Janus kernel) is assumed.
	 * @param parent the context in which the agent was created.
	 * @param agentType the type of the spawned agents.
	 * @param spawnedAgent the spawned agent.
	 * @param initializationParameters list of parameters that were passed to the agent.
	 */
	def agentSpawned(spawningAgent : UUID, parent : Context,
		agentType : Class<? extends Agent>,
		spawnedAgent : Agent,
		initializationParameters : Object[])

	/**
	 * Invoked when the agent is destroyed.
	 * @param agent the destroyed agent.
	 * @param outerContexts the contexts from which the given agent were removed after its destruction.
	 * @param terminationCause the cause of the termination of the agent.
	 *     If it is {@code null}, the agent was destroyed without providing a reason.
	 */
	def agentDestroyed(^agent : Agent, outerContexts : ConcurrentCollection<ContextReference>,
		terminationCause : Object)

	/** 
	 * Invoked when the agent spawning has failed.
	 * 
	 * @param spawningAgent the identifier of the agent which spawns the given agent.
	 * @param parent the context in which the agent was created.
	 * @param agentType the type of the spawned agents.
	 * @param cause the cause of the failure.
	 */
	def agentSpawnFailure(spawningAgent : UUID, parent : Context, agentType : Class<? extends Agent>, cause : Object)

	/** 
	 * Invoked when the agent killing has failed.
	 * 
	 * @param killingAgent the identifier of the agent tried to be killed.
	 * @param innerContext the inner context of the agent.
	 * @param cause the cause of the failure
	 */
	def agentKillFailure(killingAgent : UUID, innerContext : ContextReference, cause : Object)

	/** 
	 * Event adapter on events related to the life-cycle of an agent.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.14.0 20241106-161408
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.10
	 */
	static class LifecycleServiceAdapter implements LifecycleServiceListener {

		override agentSpawned(spawningAgent : UUID, parent : Context, agentType : Class<? extends Agent>,
			spawnedAgent : Agent, initializationParameters : Object[]) {
		}

		override agentDestroyed(^agent : Agent, outerContexts : ConcurrentCollection<ContextReference>,
			abnormalTerminationCause : Object) {
		}

		override agentSpawnFailure(spawningAgent : UUID, parent : Context, agentType : Class<? extends Agent>, cause : Object) {
		}

		override agentKillFailure(killingAgent : UUID, innerContext : ContextReference, cause : Object) {
		}

	}

}

/** 
 * Listener on events related to the kernel agent.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface KernelAgentLifecycleListener extends EventListener {

	/**
	 * Invoked when the kernel agent is destroyed.
	 */
	def kernelAgentDestroyed

}
