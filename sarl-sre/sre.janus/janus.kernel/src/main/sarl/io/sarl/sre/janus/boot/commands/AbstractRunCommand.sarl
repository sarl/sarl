/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.commands

import io.bootique.cli.Cli
import io.bootique.command.CommandWithMetadata
import io.bootique.meta.application.CommandMetadata
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SRE
import io.sarl.lang.core.SREBootstrap
import io.sarl.lang.core.SREClassLoader
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import jakarta.inject.Provider
import java.io.File
import java.net.URI
import java.util.List
import java.util.regex.Pattern
import org.arakhne.afc.vmutil.DynamicURLClassLoader
import org.arakhne.afc.vmutil.FileSystem
import org.arakhne.afc.vmutil.URISchemeType

/** 
 * Abstract command for running the SRE without agent at boot time.
 * 
 * <p>This abstract command provides helping tools for implementing a launching command.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
abstract class AbstractRunCommand extends CommandWithMetadata {

		/** Launching configuration.
		 */
	protected val configuration : Provider<SreConfig>

	var sre : SREBootstrap

	/** Constructor.
	 * 
	 * @param configuration the configuration of the tool.
	 * @param commandBuilder the builder of the command.
	 */
	new (configuration : Provider<SreConfig>, commandBuilder : CommandMetadata.Builder) {
		super(commandBuilder)
		this.configuration = configuration
	}

	/** Replies if the given value is the fully qualified name of an agent's type.
	 * An agent's type is a {@code Class} that extends the {@code Agent} type. 
	 * 
	 * @param value the value to test.
	 * @return {@code true} if the given value is the fully qualified name of an agent's type.
	 */
	protected def isAgentType(value : String) : boolean {
		try {
			var t = SREClassLoader::loadClass(value, true, this.class.classLoader)
			if (t !== null && typeof(Agent).isAssignableFrom(t)) {
				return true
			}
		} catch (ex : Exception) {
			//
		}
		return false
	}

	/** Synchronizes the command-line arguments and the SRE configuration.
	 * This function gets the arguments from the given {@code Cli} and
	 * updates the {@code SreConfig}.
	 * 
	 * @param args the definition of the command line arguments
	 * @param maxNbAgents is the maximum number of agents to be launched. 
	 * @return the boot configuration.
	 */
	protected def synchronizeCliWithBootConfig(args : Cli, maxNbAgents : int) : BootConfig {
		var config = this.configuration.get
		var boot = config.boot
		// Set the command line arguments
		var a = args.standaloneArguments
		boot.commandLineArgs = a
		// Extract specific information from the command line
		var bootIds : List<String>
		var agentArgs : List<String>
		if (maxNbAgents > 0) {
			bootIds = newArrayList
			agentArgs = newArrayList
			for (arg : args.standaloneArguments) {
				if (arg.isAgentType) {
					bootIds += arg
				} else {
					agentArgs += arg
				}
			}
		} else {
			bootIds = emptyList
			agentArgs = args.standaloneArguments
		}
		if (!bootIds.empty) {
			boot.bootAgent = bootIds.get(0)
		}
		if (!agentArgs.empty) {
			boot.agentStartArgs = agentArgs
		}
		return boot
	}

	private def addClasspathToClassLoader(classpath : String) {
		if (!classpath.isNullOrEmpty) {
			val paths = classpath.split(Pattern.quote(File.pathSeparator))
			if (paths !== null && paths.length > 0) {
				val typeClassLoader = SREClassLoader::getPreferredSREClassloader(typeof(DynamicURLClassLoader))
				if (typeClassLoader !== null) {
					for (cpUrl : paths) {
						// The url of the classpath item must have a very specific format.
						// Indeed, the class loader assumes that if the URL ends with "/",
						// the class path item is a local folder. If this ending character
						// is missed, the class loader assumes that the item is a JAR file
						var url = FileSystem::convertStringToURL(cpUrl, false)
						if (URISchemeType::FILE.isURL(url)) {
							val file = FileSystem::convertURLToFile(url)
							if (file.isDirectory) {
								url = new URI(url.getProtocol(), null, url.getHost(), url.getPort(), url.getPath() + "/", null, null).toURL
							}
						}
						//
						typeClassLoader.addURL(url)
					}
				}
			}
		}
	}

	/** Replies the SRE bootstrap.
	 * 
	 * @return the SRE bootstrap. 
	 */
	protected def getSREBootstrap : SREBootstrap {
		var s : SREBootstrap = this.sre

		if (s === null) {
			s = this.sre
			if (s === null) {
				this.sre = SRE::bootstrap
				s = this.sre
				val config = this.configuration.get
				addClasspathToClassLoader(config.classpath)
				switch (config.boot.rootContextBootType) {
					case BOOT_AGENT_NAME: {
						this.sre.setBootAgentTypeContextUUID
					}
					case RANDOM: {
						this.sre.setRandomContextUUID
					}
					case DEFAULT: {
						this.sre.setSpecificContextUUID
					}
					default: {
						this.sre.setSpecificContextUUID
					}
				}
				this.sre.universeContextUUID = config.boot.rootContextID
				this.sre.universeSpaceUUID = config.boot.rootSpaceID
			}
		}
		return s
	}

	/** Start all the boot agents that are defined into the configuration.
	 * 
	 * @param bootstrap the SRE bootstrap.
	 * @param config the configuration to use.
	 */
	protected def startAgentsFromConfig(bootstrap : SREBootstrap, config : BootConfig) : void {
		var bootAgent = config.loadBootAgent
		bootstrap.startAgent(bootAgent, config.agentStartArgs)
	}

}
