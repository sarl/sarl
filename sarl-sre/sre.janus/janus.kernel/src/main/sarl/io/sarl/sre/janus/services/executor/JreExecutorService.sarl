/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor

import com.google.common.collect.Iterables
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ExecutorsConfig
import java.lang.Thread.UncaughtExceptionHandler
import java.lang.ref.WeakReference
import java.util.Arrays
import java.util.Collection
import java.util.concurrent.Callable
import java.util.concurrent.Future
import java.util.concurrent.FutureTask
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.ScheduledThreadPoolExecutor
import java.util.concurrent.ThreadPoolExecutor
import java.util.concurrent.TimeUnit
import java.util.function.Consumer
import java.util.logging.Logger
import java.util.stream.StreamSupport
import javax.inject.Inject
import javax.inject.Singleton
import org.arakhne.afc.services.AbstractService
import org.arakhne.afc.services.IPreReleasableService
import org.arakhne.afc.services.IService
import org.arakhne.afc.vmutil.json.JsonBuffer

import static extension io.sarl.sre.janus.services.executor.JreExecutorUtils.*
import static extension io.sarl.sre.janus.services.executor.Runnables.*

/** 
 * Service that executes the tasks asynchronously (in threads) with the JRE executor service.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@Singleton
class JreExecutorService extends AbstractService implements ExecutorService, IPreReleasableService {

	static val DEFAULT_DELAY = 1

	val jreExecutor : java.util.concurrent.ExecutorService

	val jreSchedules : ScheduledExecutorService

	var uncaughtExceptionHandler : UncaughtExceptionHandler

	var purgeTask : ScheduledFuture<?>

	var configuration : ExecutorsConfig

	/** 
	 * Constructor.
	 * 
	 * @param standardService the JRE service for executing not scheduled tasks.
	 * @param scheduledService the JRE service for executing scheduled tasks.
	 * @param exceptionHandler the default exception handler.
	 * @param config the configuration.
	 */
	@Inject
	new (standardService : java.util.concurrent.ExecutorService, scheduledService : ScheduledExecutorService,
			exceptionHandler : UncaughtExceptionHandler, config : SreConfig) {
		this.jreExecutor = standardService
		this.jreSchedules = scheduledService
		this.uncaughtExceptionHandler = exceptionHandler
		setConfiguration(config)
	}

	override getReferenceType : Class<? extends IService> {
		typeof(ExecutorService)
	}

	/** 
	 * Replies the JRE service for scheduled tasks.
	 * 
	 * @return the JRE service.
	 */
	def getExecutorService : java.util.concurrent.ExecutorService {
		this.jreExecutor
	}

	override getTaskCount : long {
		var nb = 0
		val e0 = this.executorService
		if (e0 instanceof ThreadPoolExecutor) {
			nb = nb + e0.activeCount
		}
		val e1 = this.scheduledExecutorService
		if (e1 instanceof ScheduledThreadPoolExecutor) {
			nb = nb + e1.activeCount
		}
		return nb
	}

	override applyBlockingConsumer(logger : Logger, collection : Iterable<T>, task : Consumer<? super T>) with T {
		// Assuming that the task is properly synchronized on the collection.
		StreamSupport::stream(collection.spliterator, true).forEach(task.protectConsumer(logger))
	}

	/** 
	 * Replies the JRE service for scheduled tasks.
	 * 
	 * @return the JRE service.
	 */
	def getScheduledExecutorService : ScheduledExecutorService {
		this.jreSchedules
	}

	/** 
	 * Change the default exception handler.
	 * 
	 * @param handler the default exception handler.
	 */
	def setUncaughtExceptionHandler(handler : UncaughtExceptionHandler) {
		this.uncaughtExceptionHandler = handler
	}
	/** 
	 * Replies the default exception handler.
	 * 
	 * @return the default exception handler.
	 */
	def getUncaughtExceptionHandler : UncaughtExceptionHandler {
		this.uncaughtExceptionHandler
	}

	/** 
	 * Change the configuration from the general configuration.
	 * 
	 * @param config the configuration.
	 */
	final def setConfiguration(config : SreConfig) {
		var ecfg : ExecutorsConfig = null
		if (config !== null) {
			ecfg = config.services.executors
		}
		setConfiguration(ecfg)
	}

	/** 
	 * Change the configuration from the general configuration.
	 * 
	 * @param config the configuration.
	 */
	def setConfiguration(config : ExecutorsConfig) {
		this.configuration = config
	}

	
	/** 
	 * Replies the configuration.
	 * 
	 * @return the configuration.
	 */
	def getConfiguration : ExecutorsConfig {
		this.configuration
	}

	@SuppressWarnings("discouraged_reference")
	override onStart {
		assert this.jreSchedules !== null
		var uncaughtHandler = getUncaughtExceptionHandler
		if (uncaughtHandler !== null) {
			Thread::setDefaultUncaughtExceptionHandler(uncaughtHandler)
		}
		// Launch a periodic task that is purging the executor pools.
		var cfg = getConfiguration
		if (cfg.isPeriodicThreadPoolPurge) {
			var es = executorService
			var ses = scheduledExecutorService
			if (es instanceof ThreadPoolExecutor || ses instanceof ThreadPoolExecutor) {
				val delay = if(cfg !== null) cfg.timeout * 2 else DEFAULT_DELAY
				this.purgeTask = scheduledExecutorService.scheduleWithFixedDelay(new Purger(this), delay, delay,
					TimeUnit::SECONDS)
			}
		}
	}

	override onPreStop {
		shutdown
	}

	override onStop {
		shutdown
	}

	private def shutdown {
		var pt = this.purgeTask
		this.purgeTask = null
		if (pt !== null) {
			pt.cancel(true)
		}
		var je = getExecutorService
		try {
			je.shutdownNow
		} catch (e : Throwable) {
		}
		var js = scheduledExecutorService
		try {
			js.shutdownNow
		} catch (e : InterruptedException) {
		}
	}

	override executeBlockingTasks(logger : Logger, thrownExceptions : boolean, tasks : Collection<Runnable>) {
		getExecutorService.executeInThreadsAndWait(tasks, thrownExceptions) [ catchErrors, runnable |
			if (catchErrors) {
				runnable.protectRunnable(logger)
			} else {
				runnable.protectRunnable(null)
			}
		]
	}

	def executeBlockingTask(logger : Logger,
		nbExecutions : int, runGroupSize : int, task : Runnable) : int {
		getExecutorService.executeInThreadsAndWait(task.protectRunnable(logger), nbExecutions, runGroupSize)
	}

	def executeNotBlockingTask(logger : Logger, nbExecutions : int, runGroupSize : int, task : Runnable) {
		getExecutorService.executeInThreadsWithoutWaiting(task.protectRunnable(logger), nbExecutions, runGroupSize)
	}

	def executeAsap(logger : Logger, task : Runnable) : Future<?> {
		executorService.submit(task.protectRunnable(logger))
	}

	def executeAsap(logger : Logger, result : T, task : Runnable) : Future<T> with T {
		executorService.submit(task.protectRunnable(logger), result)
	}

	def executeAsap(logger : Logger, task : Callable<T>) : Future<T> with T {
		executorService.submit(task.protectCallable(logger))
	}

	def schedule(logger : Logger, delay : long, unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		scheduledExecutorService.schedule(command.protectRunnable(logger), delay, unit ?: TimeUnit::MILLISECONDS)
	}

	def schedule(logger : Logger, delay : long, unit : TimeUnit, command : Callable<T>) : ScheduledFuture<T> with T {
		scheduledExecutorService.schedule(command.protectCallable(logger), delay, unit ?: TimeUnit::MILLISECONDS)
	}

	def scheduleAtFixedRate(logger : Logger, initialDelay : long, period : long,
		unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		scheduledExecutorService.scheduleAtFixedRate(command.protectRunnable(logger), initialDelay, period,
			unit ?: TimeUnit::MILLISECONDS)
	}

	def scheduleWithFixedDelay(logger : Logger, initialDelay : long, delay : long,
		unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		scheduledExecutorService.scheduleWithFixedDelay(command.protectRunnable(logger), initialDelay, delay,
			unit ?: TimeUnit::MILLISECONDS)
	}

	def remove(task : Runnable) : boolean {
		var es = executorService
		var cancel1 = false
		if (es instanceof ThreadPoolExecutor) {
			cancel1 = es.remove(task)
		}
		var ses = scheduledExecutorService
		var cancel2 = false
		if (ses instanceof ThreadPoolExecutor) {
			cancel2 = ses.remove(task)
		}
		return cancel1 || cancel2
	}

	def purge {
		var es = executorService
		if (es instanceof ThreadPoolExecutor) {
			es.purge
		}
		var ses = scheduledExecutorService
		if (ses instanceof ThreadPoolExecutor) {
			ses.purge
		}
	}

	/** Replies the state of this service as a string.
	 *
	 * @return the string representation of the service's state.
	 * @since 0.12
	 */
	override toString : String {
		val json = new JsonBuffer
		toJson(json)
		return json.toString
	}

	private def toTaskString(list : Iterable<Runnable>) : Iterable<String> {
		Iterables::transform(list) [
			if (it instanceof FutureTask) {
				"Internal Future Task (" + System::identityHashCode(it) + ")"
			} else {
				it.toString
			}
		]
	}

	override toJson(buffer : JsonBuffer) {
		val serviceJson = new JsonBuffer
		if (this.jreExecutor instanceof ThreadPoolExecutor) {
			val queue = Arrays::asList(this.jreExecutor.getQueue.clone)
			if (!queue.isEmpty) {
				val execJson = new JsonBuffer
				execJson.add("queue", queue.toTaskString)
				serviceJson.add("directTasks", execJson)
			}
		}
		if (this.jreSchedules instanceof ThreadPoolExecutor) {
			val queue = Arrays::asList(this.jreSchedules.getQueue.clone)
			if (!queue.isEmpty) {
				val execJson = new JsonBuffer
				execJson.add("queue", queue.toTaskString)
				serviceJson.add("scheduledTasks", execJson)
			}
		}
		if (!serviceJson.isEmpty) {
			buffer.add("executorService", serviceJson)
		}
	}

	/**
	 * Task that is purging the thread pools.
	 *
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static class Purger implements Runnable {

		val owner : WeakReference<ExecutorService>
	
		var oldThreadName : String

		new (owner : ExecutorService) {
			this.owner = new WeakReference(owner)
		}
	
		@SuppressWarnings("discouraged_reference")
		private def setName : boolean {
			if (!this.oldThreadName.nullOrEmpty) {
				return false
			}
			val t = Thread::currentThread
			this.oldThreadName = t.getName
			t.name = toString
			return true
		}

		@SuppressWarnings("discouraged_reference")
		private def restoreName : boolean {
			if (this.oldThreadName.nullOrEmpty) {
				return false
			}
			val t = Thread::currentThread
			t.name = this.oldThreadName
			this.oldThreadName = null
			return true
		}

		override run {
			setName
			try {
				val owner = this.owner.get
				if (owner !== null) {
					owner.purge
				}
			} finally {
				assert restoreName
			}
		}

		def toString : String {
			"SARL Thread Purger"
		}

	}
	
}
