/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.bic

import io.sarl.api.core.AgentTask
import io.sarl.api.core.Logging
import io.sarl.sre.janus.KernelScope
import io.sarl.api.core.Time
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Capacities
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.core.util.ConcurrentSet
import io.sarl.sre.janus.IssueCodes
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.executor.tasks.SreRunnable
import io.sarl.sre.janus.services.lifecycle.AgentState
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.lang.ref.WeakReference
import java.util.Collection
import java.util.EventListener
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentMap
import java.util.concurrent.ExecutionException
import java.util.concurrent.Future
import java.util.concurrent.TimeUnit
import java.util.concurrent.TimeoutException
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.logging.Logger
import org.arakhne.afc.vmutil.json.JsonBuffer

import static java.text.MessageFormat.*

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.sre.janus.services.lifecycle.BehaviorLife.*

/** 
 * Skill that permits to execute tasks with an executor service.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@SuppressWarnings("use_reserved_sarl_annotation", "potential_field_synchronization_problem")
@PrivateAPI(isCallerOnly = true)
skill SchedulesSkill extends Skill implements InternalSchedules {

	uses Logging, Time

	val executorService : ExecutorService

	val failureListenerFactory : FailureListenerFactory

	var activeTaskRepository : ConcurrentMap<String, TaskDescription> = null

	/**
	 * JUG Time based generator used for naming tasks, enough for this kind of missions not for a string unique UUID
	 * Goal: replace UUID.randomUUID that is way too slow in multithread context
	 */
	//val uuidTimeBasedGenerator : TimeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());
	var taskCountID : AtomicLong = new AtomicLong(Long.MAX_VALUE)

	val factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>
	
	/** 
	 * Constructor.
	 */
	@Inject
	new (service : ExecutorService, @KernelScope failureListenerFactory : FailureListenerFactory,
		factories : Provider<Factories>,
		agentLevelInjector : Provider<ConfigurableAgentInjector>) {
		super()
		this.executorService = service
		this.failureListenerFactory = failureListenerFactory
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
	}

	protected override prepareUninstallation {
		// Cancel the tasks as soon as possible in the uninstallation process
		// The future submitted tasks will not be cancelled in order to let "on Destroy"
		// to be run.
		cancelAllRunningTasks(false)
	}

	protected override uninstall {
		// Cancel the tasks that were creating during the destruction stage (in the Destroy event handler)
		cancelAllRunningTasks(true)
	}

	override getExecutorServiceStateRepresentation : JsonBuffer {
		val buffer = new JsonBuffer
		this.executorService.toJson(buffer)
		return buffer
	}

	/** Cancel all the running tasks.
	 * 
	 * <p>This function is not thread-safe.
	 *
	 * @param interruptThreads indicates if the threads must be interrupted or not.
	 */
	private def cancelAllRunningTasks(interruptThreads : boolean) {
		var activeTasks = this.activeTaskRepository
		this.activeTaskRepository = null
		if (activeTasks !== null) {
			for (taskDescription : activeTasks.entrySet) {
				var description = taskDescription.value
				if (description !== null) {
					var task = description.task
					if (task !== null) {
						finishTask(task, true, interruptThreads, false, true)
					}
				}
			}
		}
	}

	/** Replies the map that store the active tasks.
	 * If the map is not created before, this function creates it.
	 * 
	 * <p>This function is not thread-safe.
	 */
	private def getRepository : ConcurrentMap<String, TaskDescription> {
		if (this.activeTaskRepository === null) {
			this.activeTaskRepository = new ConcurrentHashMap<String,TaskDescription> 
		}
		return this.activeTaskRepository
	}

	private def ensureTaskName(name : String = null) : String {
		if (name.isNullOrEmpty) {
			// see http://www.cowtowncoder.com/blog/archives/2010/10/entry_429.html
			// Don't use UUID::randomUUID way too slow
			return "t" + this.taskCountID.incrementAndGet
		}
		return name
	}

	/** Create a task.
	 * If the task was already launched, this function replies the active task.
	 * 
	 * <p>If {@code updateBehaviorReference} evaluates to {@code true} and the caller
	 * of the function's skill is a {@code Behavior}, then this latest behavior
	 * is associated to the task.
	 * 
	 * <p>This function is thread-safe.
	 * 
	 * @param name the name of the task to be created.
	 * @param updateTaskList is {@code true} for adding the created task into the list of active tasks.
	 * @param updateBehaviorReference indicates if the behavior reference to the task must be updated by removing the reference.
	 */
	private def createTaskIfNecessary(name : String = null, updateTaskList : boolean,
		updateBehaviorReference : boolean) : TaskDescription {

		var description : TaskDescription = null
		var realName = name.ensureTaskName
		if (realName === name) {
			description = getRepository.get(realName)
		}

		if (description === null) {
			val caller = Capacities::getCaller ?: this.owner
			val task = new AgentTask(realName, caller)
			task.taskName = realName
			task.guard = AgentTask::TRUE_GUARD
			description = new TaskDescription(task)
			SREutils.setSreSpecificData(task, description)
			if (updateTaskList || updateBehaviorReference) {

				if (updateBehaviorReference) {
					getRepository.put(realName, description)
				}
				if (updateBehaviorReference && caller instanceof Behavior) {
					// Register the task to the behavior in order to cancel the task when the behavior is unregistered.
					task.bindToBehavior(caller)
				}

			}
		}

		return description
	}

	private def unbindToBehavior(task : AgentTask) {
		var caller = task.initiator
		if (caller instanceof Behavior) {
			caller.getBehaviorLifeOrNull?.removeTaskReference(task)
		}
	}

	private def bindToBehavior(task : AgentTask, caller : Object = null) {
		var initiator = caller ?: (task.initiator ?: (Capacities::getCaller ?: this.owner))
		if (initiator instanceof Behavior) {
			initiator.getBehaviorLife(this.factories).addTaskReference(task)
		}
	}

	private def resetTask(newTask : AgentTask, description : TaskDescription) {
		assert newTask !== null
		assert description !== null

		var oldTask = description.task
		if (oldTask !== null) {
			assert oldTask.name == newTask.name
			SREutils::setSreSpecificData(oldTask, null, typeof(TaskDescription))
			oldTask.unbindToBehavior
		}

		SREutils::setSreSpecificData(newTask, description, typeof(TaskDescription))
		val name = newTask.name
		if (name.isNullOrEmpty) {
			newTask.taskName = ensureTaskName
		}
		description.task = newTask
		description.future = null
		newTask.bindToBehavior
	}

	/** 
	 * Remove any reference to the given task.
	 * The repository of active tasks is updated.
	 * 
	 * <p>This function is not thread-safe.
	 * 
	 * @param name the task.
	 * @param cancelTask indicates if the task should be canceled by this function.
	 * @param forceThreadInterruption if {@code cancelTask} evaluates to {@code true}, this parameter permits
	 *    to enable or disable the interruption of the thread's task.
	 * @param updateTaskList indicates if the task list must be updated by removing the task.
	 * @param updateBehaviorReference indicates if the behavior reference to the task must be updated by removing the reference.
	 * @return {@code true} if the task was successfully finished.
	 */
	private def finishTask(task : AgentTask, cancelTask : boolean, forceThreadInterruption : boolean,
		updateTaskList : boolean, updateBehaviorReference : boolean) : boolean {
		assert task !== null
		// Remove the reference of the behavior to the task.
		if (updateBehaviorReference) {
			task.unbindToBehavior
		}
		// Remove the task from the global list.
		var description : TaskDescription = null
		if (updateTaskList && !task.name.nullOrEmpty) {
			description = getRepository.remove(task.name)
		}
		if (cancelTask) {
			// Force the stop of the task.
			var description2 = SREutils::setSreSpecificData(task, null, typeof(TaskDescription))
			if (description === null) {
				description = description2
			}
			if (description !== null) {
				var future = description.future
				description.future = null
				if (future !== null && !future.done && !future.cancelled) {
					// Task is running. Force its stop. Canceling the not running tasks and removing the running ones
					var b1 = future.cancel(forceThreadInterruption);
					if (b1) {
						if (future instanceof Runnable) {
							this.executorService.remove(future)
						}
						//DO NOT CALL IT here this.executorService.purge it is way too costly
					}
					return b1
				}
			}
		}
		return true;
	}

	/** Replies the  task description of the given task.
	 * 
	 * @param task the task reference.
	 * @return the task description, or {@code null} if the task is unknown.
	 */
	protected def getTaskDescription(task : AgentTask) : TaskDescription {
		if (task === null) {
			return null;
		}
		var description = SREutils::getSreSpecificData(task, typeof(TaskDescription))
		if (description === null && !task.name.nullOrEmpty) {
			description = getRepository.get(task.name)
		}
		return description
	}

	/** Prepare a task for submission.
	 * 
	 * <p>This function creates the AgentTask and the task description if they are not created yet.
	 * This function put the task into the list of active tasks.
	 * 
	 * <p>This function is thread-safe.
	 */
	private def preRunTask(task : AgentTask, procedure : (Agent)=>void) : TaskDescription {
		var description : TaskDescription
		var taskInstance : AgentTask
		if (task === null) {
			description = createTaskIfNecessary(true, true)
			taskInstance = description.task
		} else {
			if (task.name.nullOrEmpty) {
				description = null
			} else {

				description = getRepository.get(task.name)

			}
			var registered = description !== null
			if (description === null) {
				description = SREutils::getSreSpecificData(task, typeof(TaskDescription))
			}
			if (description !== null) {
				var future = description.future
				if (future !== null && registered && !future.done && !future.cancelled) {
					throw new IllegalStateException(
						format(Messages::SchedulesSkill_1, IssueCodes::AGENT_TASK_ALREADY_LAUNCHED))
				}
			} else {
				description = new TaskDescription()
			}
			task.resetTask(description)
			if (!registered) {

				getRepository.put(task.name, description)

			}
			taskInstance = task
		}
		taskInstance.procedure = procedure
		return description
	}

	/** Finalize the task initialization.
	 * 
	 * <p>This function is thread-safe.
	 */
	private def postRunTask(description : TaskDescription, task : AgentTask, future : Future<?>) : TaskDescription {
		assert description !== null
		description.future = future
		return description
	}

	/** Called by a behavior when it is destroyed.
	 */
	override unregisterTasksForBehavior(^behavior : Behavior) {
		var tasksToCancel = ^behavior.getBehaviorLifeOrNull?.removeAllTaskReferences
		if (tasksToCancel !== null) {
			for (taskToCancel : tasksToCancel.map[it.get]) {
				if (taskToCancel !== null) {
					taskToCancel.finishTask(true, true, true, false)
				}
			}
		}
	}

	/** Called by a behavior when it is destroyed.
	 */
	override releaseInternalResources(^behavior : Behavior) {
		SREutils::setSreSpecificData(^behavior, null)
	}

	override task(name : String) : AgentTask {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive) {
			return createTaskIfNecessary(name, false, false).task
		}
		return null
	}

	override setName(task : AgentTask, name : String) {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive) {
			val realName = name.ensureTaskName
			val prefix = realName + "-"
			var i = 0
			var nm = realName
			val atr = getRepository

			var desc = atr.remove(task.name)
			if (desc !== null) {
				while (atr.containsKey(nm)) {
					i++
					nm = prefix + i
				}
				task.taskName = nm
				atr.put(nm, desc)
			} else {
				task.taskName = nm
			}
		}
	}

	override executeAsap(task : Runnable) : AgentTask {
		if (task !== null) {
			var description = preRunTask(null)[task.run]
			var logger = getLogger
			val future = this.executorService.executeAsap(logger,
				new SingleRunner(this, this.owner, description, this.failureListenerFactory, logger))
			description = postRunTask(description, null, future)
			return description.task
		}
	}

	override executeBlockingTasks(task : Collection<Runnable>, thrownExceptions : boolean) {
		this.executorService.executeBlockingTasks(logger, thrownExceptions, task)
	}
	
	override execute(task : AgentTask, procedure : (Agent)=>void) : AgentTask {
		var description = preRunTask(task, procedure)
		var logger = getLogger
		val future = this.executorService.executeAsap(logger, new SingleRunner(this, this.owner,
			description, this.failureListenerFactory, logger))
		description = postRunTask(description, task, future)
		return description.task
	}

	override in(task : AgentTask, delay : long, procedure : (Agent)=>void) : AgentTask {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive) {
			var description = preRunTask(task, procedure)
			val logger = getLogger
			val sf = this.executorService.schedule(logger, delay, TimeUnit::MILLISECONDS,
				new SingleRunner(this, this.owner, description, this.failureListenerFactory, logger))
			description = postRunTask(description, task, sf)
			return description.task
		}
		return task
	}

	override every(task : AgentTask, period : long, procedure : (Agent)=>void) : AgentTask {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive) {
			var description = preRunTask(task, procedure)
			val logger = getLogger
			val sf = this.executorService.scheduleAtFixedRate(logger, 0, period, TimeUnit::MILLISECONDS,
				new PeriodicRunner(this, this.owner, description, this.failureListenerFactory, logger))
			description = postRunTask(description, task, sf)
			return description.task
		}
		return task
	}

	override atFixedDelay(task : AgentTask, delay : long, procedure : (Agent)=>void) : AgentTask {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive) {
			var description = preRunTask(task, procedure)
			var future : Future<?>
			if (delay <= 0) {
				future = this.executorService.executeAsap(new InfiniteRunner(this, this.owner, description,
					this.failureListenerFactory, getLogger))
			} else {
				var logger = getLogger
				future = this.executorService.scheduleWithFixedDelay(logger, 0, delay, TimeUnit::MILLISECONDS,
					new PeriodicRunner(this, this.owner, description, this.failureListenerFactory, logger))
			}
			description = postRunTask(description, task, future)
			return description.task
		}
		return task
	}

	override at(task : AgentTask, time : long, procedure : (Agent)=>void) : AgentTask {
		val delay = Math::round(time - getTime)
		if (delay > 0.0) {
			return in(task, delay, procedure)
		}
		return task
	}

	override isCanceled(task : AgentTask) : boolean {
		if (task !== null) {
			var description = task.taskDescription
			if (description !== null) {
				var future = description.future
				if (future !== null) {
					return future.cancelled
				}
			}
		}
		return false
	}

	override cancel(task : AgentTask, mayInterruptIfRunning : boolean) : boolean {
		if (task !== null) {
			var description = task.taskDescription
			if (description !== null) {
				var future = description.future
				if (future !== null && !future.done && !future.cancelled && future.cancel(mayInterruptIfRunning)) {
					return finishTask(task, true, true, true, true)
				}
			}
		}
		return false
	}

	override getActiveTasks : ConcurrentSet<String> {
		return this.factories.get.concurrentCollectionFactory.newSet(null, getRepository.keySet)
	}

	/** 
	 * Description of a task.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.5.0
	 */
	private static final class TaskDescription {

		var taskReference : AgentTask

		/** The scheduled future associated to the task.
		 */
		var futureResult : Future<?>

		new (task : AgentTask = null, future : Future<?> = null) {
			this.taskReference = task
			if (future === null) {
				this.futureResult = new FutureReceiver
			} else {
				this.futureResult = future
			}
		}

		def toString : String {
			this.taskReference?.toString
		}

		def getTask : AgentTask {
			this.taskReference
		}

		package def setTask(task : AgentTask) {
			this.taskReference = task
		}

		def getFuture : Future<?> {
			this.futureResult
		}

		package def setFuture(future : Future<?>) {
			var receiver : FutureReceiver
			if (this.futureResult instanceof FutureReceiver) {
				receiver = this.futureResult
			} else {
				receiver = null
			}
			this.futureResult = future
			if (receiver !== null && this.futureResult !== null) {
				receiver.apply(this.futureResult)
			}
		}

	}

	/** 
	 * A future definition that enables to interact with the future
	 * object's even if it is not already provided by the thread manager.
	 * This receiver will be replaced by the real future object as soon
	 * as it is provided by the thread manager. Then, any interaction with
	 * the receiver will be propagated to the real future.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.9
	 */
	private static class FutureReceiver implements Future<Object> {

		val cancelFlag = new AtomicBoolean

		val mayInterruptIfRunningFlag = new AtomicBoolean

		package new {
			//
		}

		def apply(future : Future<?>) {
			if (future !== null && !future.isCancelled && !future.isDone && this.cancelFlag.get) {
				future.cancel(this.mayInterruptIfRunningFlag.get)
			}
		}

		override cancel(mayInterruptIfRunning : boolean) : boolean {
			this.mayInterruptIfRunningFlag.set(mayInterruptIfRunning)
			this.cancelFlag.set(true)
			return true
		}

		override isCancelled : boolean {
			this.cancelFlag.get
		}

		override isDone : boolean {
			false
		}

		override get : Object throws InterruptedException, ExecutionException {
			throw new ExecutionException(new UnsupportedOperationException)
		}

		override get(timeout : long,
			unit : TimeUnit) : Object throws InterruptedException, ExecutionException, TimeoutException {
			throw new ExecutionException(new UnsupportedOperationException)
		}

	}

	/** 
	 * Type of task termination.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.6.0
	 */
	private enum TaskTermination {
		PROCEDURE_RUN,
		NO_PROCEDURE_RUN,
		ERROR_IN_PROCEDURE
	}

	/** 
	 * Implementation of an agent task that is run once time.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static abstract class TaskRunner extends SreRunnable {

		protected val ^skill : WeakReference<SchedulesSkill>

		protected val ^agent : WeakReference<Agent>

		protected val agentTaskRef : TaskDescription

		val failureListenerFactory : FailureListenerFactory

		var failureListener : FailureListener

		val state = new ThreadLocal<TaskTermination>

		new (^skill : SchedulesSkill, ^agent : Agent, task : TaskDescription, 
			failureListenerFactory : FailureListenerFactory, logger : Logger) {
			super(logger)
			assert ^skill !== null
			assert ^agent !== null
			assert task !== null
			assert failureListenerFactory !== null
			this.^skill = new WeakReference(^skill)
			this.^agent = new WeakReference(^agent)
			this.failureListenerFactory = failureListenerFactory
			this.agentTaskRef = task
		}

		private synchronized def getFailureListener : FailureListener {
			if (this.failureListener === null) {
				this.failureListener = this.failureListenerFactory.create(this.^agent.get)
			}
			return this.failureListener
		}

		@SuppressWarnings("discouraged_reference")
		protected def coreRun(task : AgentTask) : TaskTermination {
			val owner = ^agent?.get
			assert owner !== null
			val guard = task.guard
			if (guard === null || guard.apply(owner).booleanValue) {
				val procedure = task.procedure
				if (procedure !== null) {
					procedure.apply(owner)
					return TaskTermination::PROCEDURE_RUN
				}
			}
			return TaskTermination::NO_PROCEDURE_RUN
		}

		@SuppressWarnings("discouraged_reference")
		final override internalRun {
			// Do not run the alive
			val agentLife = this.^agent.get.getAgentLifeOrNull
			if (agentLife === null || agentLife.state === AgentState::DEAD) {
				ExecutorService::neverReturn(null)
			}
			val taskDescription = this.agentTaskRef
			if (taskDescription === null) {
				throw new RuntimeException(format(Messages.SchedulesSkill_0, IssueCodes::NULL_AGENT_TASK))
			}
			val task = taskDescription.task
			if (task === null) {
				throw new RuntimeException(format(Messages.SchedulesSkill_0, IssueCodes::NULL_AGENT_TASK))
			}
			val future = taskDescription.future
			if (future !== null && (future.done || future.cancelled)) {
				return
			}
			if (!preRun) {
				return
			}
			val th = Thread::currentThread
			val oldThreadName = th.name
			try {
				// TODO Thread name change may be removed to gain run-time efficiency
				val taskName = task.name
				if (!taskName.isNullOrEmpty) {
					th.name =  taskName
				}
				//
				this.state.set(TaskTermination::PROCEDURE_RUN)
				val mustBeFinished = task.coreRun
				this.state.set(mustBeFinished)
			} finally {
				th.name = oldThreadName
			}
		}

		@SuppressWarnings("discouraged_reference")
		override onError(e : Throwable) : boolean {
			this.state.set(TaskTermination::ERROR_IN_PROCEDURE)
			val fl = getFailureListener
			assert fl !== null
			val task = this.agentTaskRef.task
			assert task !== null
			fl.taskFailed(task, e)
			return true
		}

		@SuppressWarnings("discouraged_reference")
		final def onFinished {
			val finishTask = postRun(this.state.get)
			if (finishTask) {
				val taskDescription = this.agentTaskRef
				assert taskDescription !== null
				val task = taskDescription.task
				assert task !== null
				val ^skill = this.^skill?.get
				assert ^skill !== null
				^skill.finishTask(task, false, false, true, true);
			}
		}

		protected def preRun : boolean {
			true
		}

		protected abstract def postRun(termination : TaskTermination) : boolean

		override toString : String {
			this.agentTaskRef?.toString
		}

	}

	/** 
	 * Implementation of an agent task that is run once time.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static class SingleRunner extends TaskRunner {

		protected def postRun(termination : TaskTermination) : boolean {
			true
		}

	}

	/** 
	 * Implementation of a periodic agent task.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static class PeriodicRunner extends TaskRunner {

		protected def postRun(termination : TaskTermination) : boolean {
			termination !== TaskTermination::PROCEDURE_RUN
		}

	}

	/** 
	 * Implementation of an agent infinite loop task.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static class InfiniteRunner extends TaskRunner {

		private def canRun : boolean {
			var taskDescription = this.agentTaskRef
			if (taskDescription !== null) {
				var future = taskDescription.future
				return future !== null && !future.done && !future.cancelled
			}
			return false
		}

		protected def postRun(termination : TaskTermination) : boolean {
			true
		}

		@SuppressWarnings("discouraged_reference")
		protected override coreRun(task : AgentTask) : TaskTermination {
			var owner = ^agent.get
			assert owner !== null
			while (canRun) {
				val guard = task.guard
				if (guard === null || guard.apply(owner).booleanValue) {
					val procedure = task.procedure
					if (procedure !== null) {
						procedure.apply(owner)
					}
				} else {
					// Break the loop without introducing a local boolean variable
					break
				}
				Thread::yield
			}
			return TaskTermination::NO_PROCEDURE_RUN
		}

	}

}

/** 
 * Listener on events related to the task failures.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
interface FailureListener extends EventListener {

	/** 
	 * Invoked when a task has failed.
	 * 
	 * @param task the failing task.
	 * @param failureCause the cause of the failure.
	 */
	def taskFailed(task : AgentTask, failureCause : Throwable)

}

/** Factory for failure listener.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
interface FailureListenerFactory {

	def create(^agent : Agent) : FailureListener

}

