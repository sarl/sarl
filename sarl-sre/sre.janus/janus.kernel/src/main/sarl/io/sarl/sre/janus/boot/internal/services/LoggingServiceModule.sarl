/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.internal.services

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Injector
import io.bootique.di.Provides
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.services.logging.QuietLoggingService
import io.sarl.sre.janus.services.logging.jul.JulLoggerCreator
import io.sarl.sre.janus.services.logging.jul.JulLoggingService
import java.util.logging.Level
import javax.inject.Provider
import javax.inject.Singleton
import org.arakhne.afc.services.IService

/** 
 * Module for the logging services.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class LoggingServiceModule implements BQModule {

	override configure(binder : Binder) {
		binder.bindSet(typeof(IService), typeof(SreServices)).add(typeof(LoggingService))
	}

	/** 
	 * Replies the verbose level.
	 * 
	 * @param loggingCreator the creator of loggers.
	 * @param injector the injector of the members.
	 * @return the verbose level.
	 */
	@Provides
	@Singleton
	def provideLoggingService(loggingCreator : Provider<JulLoggerCreator>, injector : Injector) : LoggingService {
		val creator = loggingCreator.get
		var srv : LoggingService
		if (creator.defaultLevel.intValue < Level::OFF.intValue) {
			srv = new JulLoggingService(creator)
		} else {
			srv = new QuietLoggingService
		}
		injector.injectMembers(srv)
		return srv
	}
	
}

/** Provider of the module for the logging services.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class LoggingServiceModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new LoggingServiceModule
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LoggingServiceModuleProvider_0);
	}

}

