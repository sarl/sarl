/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills

import io.bootique.di.Injector
import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.api.core.Time
import io.sarl.lang.core.Capacity
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.janus.capacities.InternalEventBusCapacity
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.skills.bic.BehaviorsSkill
import io.sarl.sre.janus.skills.bic.DefaultContextInteractionsSkill
import io.sarl.sre.janus.skills.bic.ExternalContextAccessSkill
import io.sarl.sre.janus.skills.bic.InnerContextAccessSkill
import io.sarl.sre.janus.skills.bic.LifecycleSkill
import io.sarl.sre.janus.skills.bic.LoggingSkill
import io.sarl.sre.janus.skills.bic.SchedulesSkill
import io.sarl.sre.janus.skills.bic.TimeSkill
import io.sarl.sre.janus.skills.internal.InternalEventBusSkill
import jakarta.inject.Inject
import jakarta.inject.Singleton

/** 
 * Provider of the built-in capacities of the SRE platform.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6.0
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
@Singleton
class SreDynamicSkillProvider implements DynamicSkillProvider {

	val injector : Injector

	/** Constructor.
	 * 
	 * @param injector the injector.
	 */
	@Inject
	new (injector : Injector) {
		this.injector = injector
	}

	def createSkill(^capacity : Class<? extends Capacity>) : Skill {
		switch (^capacity) {
			case typeof(InternalEventBusCapacity): {
				var ^skill = this.injector.getInstance(typeof(InternalEventBusSkill))
				return ^skill
			}
			case typeof(DefaultContextInteractions): {
				var ^skill = this.injector.getInstance(typeof(DefaultContextInteractionsSkill))
				return ^skill
			}
			case typeof(Lifecycle): {
				var ^skill = this.injector.getInstance(typeof(LifecycleSkill))
				return ^skill
			}
			case typeof(Schedules): {
				var ^skill = this.injector.getInstance(typeof(SchedulesSkill))
				return ^skill
			}
			case typeof(InternalSchedules): {
				var ^skill = this.injector.getInstance(typeof(SchedulesSkill))
				return ^skill
			}
			case typeof(Behaviors): {
				var ^skill = this.injector.getInstance(typeof(BehaviorsSkill))
				return ^skill
			}
			case typeof(Logging): {
				var ^skill = this.injector.getInstance(typeof(LoggingSkill))
				return ^skill
			}
			case typeof(Time): {
				var ^skill = this.injector.getInstance(typeof(TimeSkill))
				return ^skill
			}
			case typeof(InnerContextAccess): {
				var ^skill = this.injector.getInstance(typeof(InnerContextAccessSkill))
				return ^skill
			}
			case typeof(ExternalContextAccess): {
				var ^skill = this.injector.getInstance(typeof(ExternalContextAccessSkill))
				return ^skill
			}
		}
		return null
	}
	
	def isSkillProviding(^capacity : Class<? extends Capacity>) : boolean {
		return typeof(InternalEventBusCapacity) == ^capacity
			|| typeof(DefaultContextInteractions) == ^capacity
			|| typeof(Lifecycle) == ^capacity
			|| typeof(Schedules) == ^capacity
			|| typeof(InternalSchedules) == ^capacity
			|| typeof(Behaviors) == ^capacity
			|| typeof(Logging) == ^capacity
			|| typeof(Time) == ^capacity
			|| typeof(InnerContextAccess) == ^capacity
			|| typeof(ExternalContextAccess) == ^capacity
	}
	
}
