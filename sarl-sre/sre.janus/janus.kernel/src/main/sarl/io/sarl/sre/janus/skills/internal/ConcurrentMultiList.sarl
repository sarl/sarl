/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.skills.internal

import java.util.Collection
import java.util.Iterator
import java.util.NoSuchElementException
import java.util.concurrent.ConcurrentLinkedDeque

/**
 * A collection composed of collections.
 *
 * <p>This collection is not thread-safe.
 *
 * <p>This collection is read-only.
 *
 * @param <E> is the type of elements in the collections.
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class ConcurrentMultiList<E> implements Collection<E> {

	val collections = new ConcurrentLinkedDeque<ConcurrentLinkedDeque<? extends E>>

	/** Add a collection inside this multicollection.
	 *
	 * @param collection the collection to add.
	 * @return {@code true} if the multi-collection has changed,
	 *      otherwise {@code false}.
	 */
	def addCollection(collection : ConcurrentLinkedDeque<? extends E>) : boolean {
		var b = true
		if (collection !== null && !collection.empty) {
			b = b && this.collections.add(collection)
		}
		return b
	}

	/** Remove a collection from this multicollection.
	 *
	 * @param collection the collection to remove.
	 * @return {@code true} if the multi-collection has changed,
	 *      otherwise {@code false}.
	 */
	def removeCollection(collection : ConcurrentLinkedDeque<? extends E>) : boolean {
		this.collections.remove(collection)
	}

	override clear {
		this.collections.clear
	}

	/**
	 * This function is not supported, see {@link #addCollection(ConcurrentLinkedDeque)}.
	 */
	override add(value : E) : boolean {
		throw new UnsupportedOperationException
	}

	override contains(obj : Object) : boolean {
		for (c : this.collections) {
			if (c.contains(obj)) {
				return true
			}
		}
		return false
	}

	override isEmpty : boolean {
		for (c : this.collections) {
			if (!c.empty) {
				return false
			}
		}
		return true
	}

	override iterator : Iterator<E> {
		return new MultiIterator(this.collections.iterator)
	}

	/**
	 * This function is not supported, see {@link #removeCollection(ConcurrentLinkedDeque)}.
	 * @param collection a collection
	 * @return nothing but exception
	 */
	override containsAll(collection : Collection<?>) : boolean {
		throw new UnsupportedOperationException
	}

	/**
	 * This function is not supported, see {@link #removeCollection(ConcurrentLinkedDeque)}.
	 * @param collection a collection
	 * @return nothing but exception
	 */
	override addAll(collection : Collection<? extends E>) : boolean {
		throw new UnsupportedOperationException
	}

	/**
	 * This function is not supported, see {@link #removeCollection(ConcurrentLinkedDeque)}.
	 * @param collection a collection
	 * @return nothing but exception
	 */
	override removeAll(collection : Collection<?>) : boolean {
		throw new UnsupportedOperationException
	}

	/**
	 * This function is not supported, see {@link #removeCollection(ConcurrentLinkedDeque)}.
	 * @param obj an object
	 * @return nothing but exception
	 */
	override remove(obj : Object) : boolean {
		throw new UnsupportedOperationException
	}

	/**
	 * This function is not supported, see {@link #removeCollection(ConcurrentLinkedDeque)}.
	 * @param collection - a collection
	 * @return nothing but exception
	 */
	override retainAll(collection : Collection<?>) : boolean {
		throw new UnsupportedOperationException
	}

	override size : int {
		var t = 0
		for (c : this.collections) {
			t += c.size
		}
		return t
	}

	override toArray : Object[] {
		throw new UnsupportedOperationException
	}

	override toArray(array : T[]) : T[] with T {
		throw new UnsupportedOperationException
	}

	/** Iterator on multicollection.
	 *
	 * @param <E> is the type of elements in the collections.
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	static class MultiIterator<E> implements Iterator<E> {

		val iterator : Iterator<ConcurrentLinkedDeque<? extends E>>

		var currentIterator : Iterator<? extends E>

		/** Construct the iterator.
		 *
		 * @param iterator original iterator.
		 */
		new (iterator : Iterator<ConcurrentLinkedDeque<? extends E>>) {
			this.iterator = iterator
			searchNext
		}

		private def searchNext : void {
			if (this.currentIterator === null || !this.currentIterator.hasNext) {
				this.currentIterator = null
				while (this.currentIterator === null && this.iterator.hasNext) {
					val iterable = this.iterator.next
					val iter = iterable.iterator
					if (iter.hasNext) {
						this.currentIterator = iter
					}
				}
			}
		}

		override hasNext : boolean {
			this.currentIterator !== null && this.currentIterator.hasNext
		}

		override next : E {
			if (this.currentIterator === null) {
				throw new NoSuchElementException
			}
			val n = this.currentIterator.next
			searchNext
			return n
		}

	}

}

