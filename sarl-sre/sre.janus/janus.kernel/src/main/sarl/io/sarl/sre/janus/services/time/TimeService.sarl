/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.time

import java.util.EventListener
import java.util.concurrent.TimeUnit
import org.arakhne.afc.services.IService

/**
 * This class enables to have access to the time manager of the platform.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
interface TimeService extends IService {

	/** Replies the current time.
	 * 
	 * @param timeUnit if present, specifies the time unit of the value to reply. By default is it seconds. 
	 * @return the current time.
	 */
	def getTime(timeUnit : TimeUnit) : double

	/** Replies the OS current time.
	 * 
	 * @return the OS current time in ms.
	 */
	def getOSCurrentTime : long

	/** Replies the scaling factor between the agent time and the operating system time.
	 * <p>Consider time in the agent application. It may evolves at a different rate than
	 * the operating system time. The value that is replied by this function permits to
	 * determine the proportionally between the agent application time and the operating system time.
	 * A typical equation for representing this relation is: os time = OSTimeFactor * agent time.
	 * 
	 * @return the factor between agent time and operating system time.
	 */
	def getOSTimeFactor : double

	/** Convert the given duration from the operating system  time scale to the agent system time scale.
	 * This function uses {@link #getOSTimeFactor()} for converting the duration.
	 * 
	 * @param timeDuration the duration for the operating system.
	 * @return the duration for the agent system.
	 * @since 0.9
	 */
	def fromOSDuration(timeDuration : double) : double

	/** Convert the given time from the operating system  time scale to the agent system time scale.
	 * This function uses {@link #getOSTimeFactor()} for converting the duration.
	 * 
	 * @param timeValue the time for the operating system.
	 * @return the time for the agent system.
	 * @since 0.9
	 */
	def fromOSTime(timeValue : double) : double

	/** Convert the given duration from the agent system time scale to the operating system time scale.
	 * This function uses {@link #getOSTimeFactor()} for converting the duration.
	 *
	 * @param timeDuration the duration for the agent system.
	 * @return the duration for the operating system.
	 * @since 0.9
	 */
	def toOSDuration(timeDuration : double) : double

	/** Convert the given time from the agent system time scale to the operating system time scale.
	 * This function uses {@link #getOSTimeFactor()} for converting the time.
	 * 
	 * @param timeValue the time for the agent system.
	 * @return the time for the operating system.
	 * @since 0.9
	 */
	def toOSTime(timeValue : double) : double

	/** Replies the precision of the time that is assumed by this manager.
	 * 
	 * <p>Any duration that is below the time precision is ignored.
	 * 
	 * @return the time precision, never {@code null}.
	 */
	def getTimePrecision : TimeUnit

	/** Do a time evolution if the underlying service allows this action.
	 * 
	 * @param timeDelta is the amount of time to consider for the evolution. If it is negative or zero,
	 *     a default amount will be selected by the time service.
	 * @return {@code true} if time has evolved. Otherwise {@code false}.   
	 */
	def evolveTimeIfPossible(timeDelta : double = 0.0) : boolean

	/** Change the time.
	 * 
	 * @param time the new time.
	 * @return {@code true} if time has evolved. Otherwise {@code false}.   
	 */
	def setTimeIfPossible(time : double) : boolean

	/** Add listener on time changes.
	 *
	 * @param listener the listener.
	 */
	def addTimeListener(listener : TimeListener)

	/** Remove listener on time changes.
	 * 
	 * @param listener the listener.
	 */
	def removeTimeListener(listener : TimeListener)

}

/** 
 * Listener on time changes into the time service.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
interface TimeListener extends EventListener {

	/** Invoked when the time has changed into the time manager.
	 *
	 * @param service the time service that changed.
	 */
	def timeChanged(service : TimeService)

	/** Invoked when the time unit has changed into the time manager.
	 * 
	 * @param service the time service that changed.
	 */
	def timeUnitChanged(service : TimeService)

}
