/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.configs.subconfigs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.meta.application.OptionMetadata
import io.sarl.sre.janus.boot.configs.SreConfig
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.boot.configs.subconfigs.ServicesConfig.*

import static extension io.bootique.BQCoreModule.extend

/**
 * Configuration of the SRE services.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.8
 */
@BQConfig("Configuration of the services inside the SRE")
class ServicesConfig {

	/** 
	 * Prefix for the configuration entries of the services' configurations.
	 */
	public static val PREFIX : String = SreConfig::PREFIX + ".services"; // $NON-NLS-1$

	/** 
	 * Name of the property for the default timeout for services' start in milliseconds.
	 * 
	 * @see #START_TIMEOUT_VALUE
	 */
	public static val START_TIMEOUT_NAME = PREFIX + ".startTimeout"

	/** 
	 * The default timeout for services' start in milliseconds.
	 * 
	 * @see #START_TIMEOUT_NAME
	 */
	public static val START_TIMEOUT_VALUE = 0.seconds

	/** 
	 * Name of the property for the default timeout for services' stop in milliseconds.
	 * 
	 * @see #STOP_TIMEOUT_VALUE
	 */
	public static val STOP_TIMEOUT_NAME = PREFIX + ".stopTimeout"
	
	/** 
	 * The default timeout for services' stop in milliseconds.
	 * 
	 * @see #STOP_TIMEOUT_NAME
	 */
	public static val STOP_TIMEOUT_VALUE = 10.seconds

	/** 
	 * Name of the property for the flag that indicates if the probe manager uses an asynchronous
	 * update mechanism.
	 * 
	 * @see #ASYNCHRONOUS_PROBE_UPDATE_VALUE
	 */
	public static val ASYNCHRONOUS_PROBE_UPDATE_NAME = PREFIX + ".asynchronousProbeUpdate"

	/** 
	 * The default value for the flag that indicates if the probe manager uses an asynchronous
	 * update mechanism.
	 * 
	 * @see #ASYNCHRONOUS_PROBE_UPDATE_NAME
	 */
	public static val ASYNCHRONOUS_PROBE_UPDATE_VALUE = true

	@Accessors(PUBLIC_GETTER)
	var startTimeout = START_TIMEOUT_VALUE

	@Accessors(PUBLIC_GETTER)
	var stopTimeout = STOP_TIMEOUT_VALUE

	@Accessors(PUBLIC_GETTER)
	var asynchronousProbeUpdate = ASYNCHRONOUS_PROBE_UPDATE_VALUE

	var executorsConfig : ExecutorsConfig

	var lifecycleConfig : LifecycleConfig

	var loggingConfig : LoggingConfig
	
	/** Change the flag that enables to select the type of probe manager
	 * 
	 * @param doAsync is {@code true} if the asynchronous update is prefered.
	 */
	@BQConfigProperty("Flag that indicates if the probe service must use an asynchronous update mechanism, or"
		+ " a synchronous update mechanism.")
	def setAsynchronousProbeUpdate(doAsync : boolean) {
		this.asynchronousProbeUpdate = doAsync
	}

	/** Change the timeout for the start of all the services.
	 *
	 * @param timeout the new timeout in milliseconds.
	 */
	@BQConfigProperty("Timeout for the services' start in milliseconds. If the value is lower or equal to "
		+ "zero, then the SRE will wait for the services' start for ever.")
	def setStartTimeout(timeout : long) {
		if (timeout < 0l) {
			this.startTimeout = 0l
		} else {
			this.startTimeout = timeout
		}
	}

	/** Change the timeout for the stop of all the services.
	 * 
	 * @param timeout the new timeout in milliseconds.
	 */
	@BQConfigProperty("Timeout for the services' stop in milliseconds. If the value is lower or equal to "
		+ "zero, then the SRE will wait for the services' start for ever.")
	def setStopTimeout(timeout : long) {
		if (timeout < 0l) {
			this.stopTimeout = 0l
		} else {
			this.stopTimeout = timeout
		}
	}

	/** Replies the parallel execution configuration.
	 * 
	 * @return the parallel execution configuration.
	 */
	def getExecutors : ExecutorsConfig {
		if (this.executorsConfig === null) {
			this.executorsConfig = new ExecutorsConfig
		}
		return this.executorsConfig
	}

	/** Change the parallel execution configuration.
	 * 
	 * @param config the parallel execution configuration.
	 */
	@BQConfigProperty("Configuration for the thread execution service.")
	def setExecutors(config : ExecutorsConfig) {
		this.executorsConfig = config
	}

	/** Replies the agent lifecycle configuration.
	 * 
	 * @return the agent lifecycle configuration.
	 * @since 0.11
	 */
	def getLifecycle : LifecycleConfig {
		if (this.lifecycleConfig === null) {
			this.lifecycleConfig = new LifecycleConfig
		}
		return this.lifecycleConfig
	}

	/** Change the agent lifecycle configuration.
	 * 
	 * @param config the agent lifecycle configuration.
	 * @since 0.11
	 */
	@BQConfigProperty("Configuration for the agent lifecycle management.")
	def setLifecycle(config : LifecycleConfig) {
		this.lifecycleConfig = config
	}

	/** Replies the SRE logging configuration.
	 * 
	 * @return the SRE logging configuration.
	 * @since 0.11
	 */
	def getLogging : LoggingConfig {
		if (this.loggingConfig === null) {
			this.loggingConfig = new LoggingConfig
		}
		return this.loggingConfig
	}

	/** Change the SRE logging configuration.
	 * 
	 * @param config the SRE logging configuration.
	 * @since 0.11
	 */
	@BQConfigProperty("Configuration for the SRE logging service.")
	def setLogging(config : LoggingConfig) {
		this.loggingConfig = config
	}

}

/** 
 * Module for the parallel services' configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class ServicesConfigModule implements BQModule {

	static val SERVICESTARTTIMEOUT_OPTION = "service-start-timeout"

	static val SERVICESTOPTIMEOUT_OPTION = "service-stop-timeout"

	static val ASYNCPROBEUPDATE_OPTION = "async-probe-update"

	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(START_TIMEOUT_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(SERVICESTARTTIMEOUT_OPTION,
				MessageFormat::format(Messages::ServicesConfigModule_0, START_TIMEOUT_VALUE))
				.valueRequired(Messages::ServicesConfigModule_2)
				.build).mapConfigPath(SERVICESTARTTIMEOUT_OPTION, START_TIMEOUT_NAME)

		VariableDecls::extend(binder).declareVar(STOP_TIMEOUT_NAME)
		binder.extend.addOption(OptionMetadata::builder(SERVICESTOPTIMEOUT_OPTION,
				MessageFormat::format(Messages::ServicesConfigModule_1, STOP_TIMEOUT_VALUE))
			.valueRequired(Messages::ServicesConfigModule_2)
			.build).mapConfigPath(SERVICESTOPTIMEOUT_OPTION, STOP_TIMEOUT_NAME)

		VariableDecls::extend(binder).declareVar(ASYNCHRONOUS_PROBE_UPDATE_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(ASYNCPROBEUPDATE_OPTION,
				MessageFormat::format(Messages::ServicesConfigModule_3, ASYNCHRONOUS_PROBE_UPDATE_VALUE)).valueRequired(
				Messages::ServicesConfigModule_4).build).mapConfigPath(ASYNCPROBEUPDATE_OPTION,
					ASYNCHRONOUS_PROBE_UPDATE_NAME)
	}

}

/** Provider of the module for the parallel executors' configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class ServicesConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new ServicesConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(ServicesConfig))
	}
	
	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::ServicesConfigModuleProvider_0);
	}

}
