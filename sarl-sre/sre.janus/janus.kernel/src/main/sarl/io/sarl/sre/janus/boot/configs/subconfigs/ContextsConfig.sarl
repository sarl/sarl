/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.configs.subconfigs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.meta.application.OptionMetadata
import io.sarl.sre.janus.boot.configs.SreConfig
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.boot.configs.subconfigs.ContextsConfig.*

import static extension io.bootique.BQCoreModule.extend

/**
 * Configuration of the SRE context repository.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
@BQConfig("Configuration of the context repository inside the SRE")
class ContextsConfig {

	/** 
	 * Prefix for the configuration entries of the context repository configurations.
	 */
	public static val PREFIX : String = SreConfig::PREFIX + ".contexts"; // $NON-NLS-1$

	/** 
	 * Name of the property for the default delay in milliseconds before running the space destruction callback.
	 * This callback tries to destroy the instance of space if it is empty.
	 * 
	 * @see #SPACE_DESTRUCTION_CALLBACK_DELAY_VALUE
	 */
	public static val SPACE_DESTRUCTION_CALLBACK_DELAY_NAME = PREFIX + ".spaceDestructionCallbackDelay"

	/** 
	 * The default delay in milliseconds before running the space destruction callback.
	 * This callback tries to destroy the instance of space if it is empty.
	 * 
	 * @see #SPACE_DESTRUCTION_CALLBACK_DELAY_NAME
	 */
	public static val SPACE_DESTRUCTION_CALLBACK_DELAY_VALUE = 60.seconds

	@Accessors(PUBLIC_GETTER)
	var spaceDestructionCallbackDelay = SPACE_DESTRUCTION_CALLBACK_DELAY_VALUE

	/** Change the delay in milliseconds that is applied before testing if a space should be destroyed because it is empty.
	 * 
	 * @param delay the delay in millsesonds.
	 */
	@BQConfigProperty("Delay in milliseconds that is applied before testing if a space should be destroyed because it is empty.")
	def setSpaceDestructionCallbackDelay(delay : long) {
		this.spaceDestructionCallbackDelay = delay
	}

}

/** 
 * Module for the context repository's configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class ContextsConfigModule implements BQModule {

	static val SPACEDESTRUCTIONDELAY_OPTION = "space-destruction-delay"

	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(SPACE_DESTRUCTION_CALLBACK_DELAY_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(SPACEDESTRUCTIONDELAY_OPTION,
				MessageFormat::format(Messages::ContextsConfigModule_0, SPACE_DESTRUCTION_CALLBACK_DELAY_VALUE))
				.valueRequired(Messages::ContextsConfigModule_1)
				.build).mapConfigPath(SPACEDESTRUCTIONDELAY_OPTION, SPACE_DESTRUCTION_CALLBACK_DELAY_NAME)
	}

}

/** Provider of the module for the context repository's configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class ContextsConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new ServicesConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(ContextsConfig))
	}
	
	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::ContextsConfigModuleProvider_0);
	}

}
