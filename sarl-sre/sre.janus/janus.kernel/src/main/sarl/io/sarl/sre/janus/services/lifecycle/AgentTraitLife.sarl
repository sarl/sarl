/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.api.core.AgentTask
import io.sarl.lang.core.AgentTrait
import io.sarl.lang.core.util.ConcurrentSet
import io.sarl.sre.janus.internal.Factories
import java.lang.ref.WeakReference
import java.util.Comparator
import java.util.Set
import javax.inject.Provider

/** 
 * Describes any information that is required by SRE for supporting the agent trait's life. 
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
abstract class AgentTraitLife {

	static val COMPARATOR : Comparator<WeakReference<AgentTask>> = [ tr1, tr2 |
		val t1 = tr1.get
		val t2 = tr2.get
		if(t1 === t2) return 0
		if(t1 === null) return Integer::MIN_VALUE
		if(t2 === null) return Integer::MAX_VALUE
		System::identityHashCode(t1) <=> System.identityHashCode(t2)
	]

	var tasks : ConcurrentSet<WeakReference<AgentTask>>

	val factories : Provider<Factories>

	/** Constructor.
	 *
	 * @param associatedContainer the associated container of this living object.
	 * @param factories the provider of factories tool.
	 */
	new (associatedContainer : AgentTrait, factories : Provider<Factories>) {
		this.factories = factories
	}

	/** Add a reference to a task that is assumed to be cancelled if the behavior becomes unregistered.
	 * 
	 * @param task the task to save.
	 */
	def addTaskReference(task : AgentTask) {
		if (this.tasks === null) {
			this.tasks = this.factories.get.concurrentCollectionFactory.<WeakReference<AgentTask>>newSet(COMPARATOR)
		}
		this.tasks += new WeakReference(task)
	}

	/** Remove the reference to a task that is assumed to be cancelled if the behavior becomes unregistered.
	 * 
	 * @param task the task to remove.
	 */
	def removeTaskReference(task : AgentTask) : void {
		var tsk = this.tasks
		if (tsk !== null) {
			val ref = new WeakReference(task)
			tsk -= ref
		}
	}

	/** Remove all the references to the tasks associated to this behavior.
	 * 
	 * @return the removed tasks.
	 */
	def removeAllTaskReferences : Set<WeakReference<AgentTask>> {
		var tsk = this.tasks
		if (tsk !== null) {
			this.tasks = null
		}
		return tsk
	}

}
