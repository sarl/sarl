/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.spaces

import io.sarl.api.core.spaces.SpaceComponentFactory
import io.sarl.lang.core.util.ConcurrentCollectionFactory
import io.sarl.lang.core.util.ConcurrentList
import io.sarl.lang.core.util.ConcurrentSet
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.Comparator
import java.util.concurrent.ConcurrentMap

/**
 * Default implementation of a factory provided by the SRE for creating the components of a space.
 *
 * <p>This implementation provides standard collections from the Java SDK.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.15
 */
class DefaultSpaceComponentFactory implements SpaceComponentFactory {

	val concurrentCollectionProvider : Provider<ConcurrentCollectionFactory>

	var concurrentCollectionFactory : ConcurrentCollectionFactory

	/** Constructor.
	 *
	 */
	@Inject
	new (concurrentCollectionProvider : Provider<ConcurrentCollectionFactory>) {
		this.concurrentCollectionProvider = concurrentCollectionProvider
	}

	/** Replies the factory for building concurrent collections.
	 *
	 * @return the factory.
	 */
	protected def getConcurrentCollectionFactory : ConcurrentCollectionFactory {
		var factory = this.concurrentCollectionFactory
		if (factory === null && this.concurrentCollectionProvider !== null) {
			factory = this.concurrentCollectionProvider.get
			this.concurrentCollectionFactory = factory
		}
		return factory
	}

	override createList : ConcurrentList<E> with E {
		getConcurrentCollectionFactory.newList
	} 

	override createMap(comparator : Comparator<? super K>) : ConcurrentMap<K, V> with K, V {
		getConcurrentCollectionFactory.newMap(comparator)
	} 

	override createSet(comparator : Comparator<? super E>) : ConcurrentSet<E> with E {
		getConcurrentCollectionFactory.newSet(comparator)
	}
	
}
