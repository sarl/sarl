/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.probing.service

import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.api.naming.parser.INameParser
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.executor.tasks.Runnables
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * This class is the implementation of a probe service that is updating the values asynchronously.
 * Asynchronous updates means that the {@link #sync()} function is invoking by a specific thread.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 * @see SynchronousProbeService
 */
class AsynchronousProbeService extends AbstractProbeService {

	val executor : ExecutorService

	val synchronizationStarted = new AtomicBoolean(false)

	val enableSynchronization = new AtomicBoolean(true)

	@Accessors
	volatile var sleepingDurationBetweenSyncs : long = 500l

	/** Constructor.
	 *
	 * @param service the executor service.
	 * @param namespaceService the service that is giving access to the namespaces.
	 * @param nameParser the object that is able to parse resource names.
	 * @param factories the provider of factories tool.
	 */
	@Inject
	new (service : ExecutorService, namespaceService : NamespaceService, nameParser : INameParser,
		factories : Provider<Factories>) {
		super(new ConcurrentHashMap, namespaceService, nameParser, factories)
		this.executor = service
	}

	protected override onFirstProbe {
		startSyncThread
	}

	protected override onLastProbe {
		stopSyncThread
	}

	/** Replies if the asynchronous synchronization was started or not.
	 *
	 * @return {@code true} if the synchronization was started into a thread.
	 * @since 0.12
	 */
	def isAsynchronousSynchronizationRunning : boolean {
		this.enableSynchronization.get
	}

	/** Start the thread that dynamically update the probes */
	def startSyncThread {
		if (!this.synchronizationStarted.getAndSet(true)) {
			var task = Runnables::named(createRunnableUpdater, "Probe Updater")
			this.executor.executeAsap(task)
		}
	}

	/** Invoked to create a {@code Runnable} that may be used for updated the probes
	 *
	 * @return the {@code Runnable} insstance, never {@code null}.
	 */
	@SuppressWarnings("discouraged_reference")
	protected def createRunnableUpdater : Runnable {
		[
			this.enableSynchronization.set(true)
			while (this.enableSynchronization.get) {
				internalSync
				//System.err.println("Synced")
				val duration = getSleepingDurationBetweenSyncs
				if (duration <= 0l) {
					Thread::yield
				} else {
					Thread::sleep(duration)
				}
			}
		]
	}

	/** Stop the thread that dynamically update the probes
	 */
	@SuppressWarnings("discouraged_reference")
	def stopSyncThread {
		this.enableSynchronization.set(false)
		this.synchronizationStarted.set(false)
	}

	override onStop : void {
		stopSyncThread
		super.onStop
	}

}
