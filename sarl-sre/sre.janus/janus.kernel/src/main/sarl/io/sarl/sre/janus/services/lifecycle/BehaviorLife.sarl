/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.lang.core.Behavior
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.janus.internal.Factories
import jakarta.inject.Provider

import static extension io.sarl.lang.core.SREutils.*

/** 
 * Describes any information that is required by the SRE for supporting the behavior's life. 
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6.0
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
final class BehaviorLife extends AgentTraitLife {

	/** Replies the data structure that is storing the living data of the agent for the SRE.
	 * If this data structure does not exists, it is automatically created.
	 * 
	 * @param behavior the instance of the behavior for which the life description should be retrieved
	 * @param factories the provider of factories
	 * @param init the code to run when the behavior life is created.
	 * @see #getBehaviorLifeOrNull
	 */
	static def getBehaviorLife(^behavior : Behavior, factories : Provider<Factories>, init : (BehaviorLife)=>void = null) : BehaviorLife {
		var life = ^behavior.getSreSpecificData(typeof(BehaviorLife))
		if (life === null) {
			life = new BehaviorLife(^behavior, factories)
			if (init !== null) {
				init.apply(life)
			}
			^behavior.sreSpecificData = life
		}
		return life
	}

	/** Replies the data structure that is storing the living data of the agent for the SRE.
	 * If this data structure does not exists, it is NOT created.
	 * 
	 * @param behavior the instance of the behavior for which the life description should be retrieved
	 * @since 0.10
	 * @see #getBehaviorLife
	 */
	@Pure
	static def getBehaviorLifeOrNull(^behavior : Behavior) : BehaviorLife {
		return ^behavior.getSreSpecificData(typeof(BehaviorLife))
	}


}
