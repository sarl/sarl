/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal

import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.core.util.ConcurrentCollectionFactory
import jakarta.inject.Inject
import jakarta.inject.Provider
import jakarta.inject.Singleton
import java.util.EventListener
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock

/** Central access to several factories that are injected.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
@SuppressWarnings("raw_type")
@Singleton
class Factories {

	val collectionFactory : Provider<ConcurrentCollectionFactory>

	val readWriteLock : Provider<ReadWriteLock>

	val lock : Provider<Lock>

	val listeners : Provider<SmartListenerCollection>

	@Inject
	new (collectionFactory : Provider<ConcurrentCollectionFactory>, readWriteLock : Provider<ReadWriteLock>,
		lock : Provider<Lock>, listeners : Provider<SmartListenerCollection>) {
		this.collectionFactory = collectionFactory
		this.readWriteLock = readWriteLock
		this.lock = lock
		this.listeners = listeners
	}

	/** Replies the factory of concurrent collections. */
	@Pure
	def getConcurrentCollectionFactory : ConcurrentCollectionFactory {
		this.collectionFactory.get
	}

	/** Replies the provider of read-write locks. */
	@Pure
	def newReadWriteLock : ReadWriteLock {
		this.readWriteLock.get
	}

	/** Replies the provider of locks. */
	@Pure
	def newLock : Lock {
		this.lock.get
	}

	/** Replies a new listener collections. */
	@SuppressWarnings("raw_type")
	@Pure
	def newListenerCollection : SmartListenerCollection<T> with T extends EventListener {
		this.listeners.get
	}

}

