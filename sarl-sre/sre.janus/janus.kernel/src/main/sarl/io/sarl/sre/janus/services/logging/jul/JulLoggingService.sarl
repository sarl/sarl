/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.logging.jul

import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Inject
import jakarta.inject.Singleton
import java.util.logging.Level
import java.util.logging.Logger
import org.arakhne.afc.services.AbstractService
import org.arakhne.afc.services.IService

/** 
 * This class enables to log information by ensuring that the values of the parameters are not evaluated until the information
 * should be really log, according to the log level. The logger is injected.
 * 
 * <p>The LoggingService considers the parameters of the functions as:<ul>
 * <li>the message is the the message in the property file;</li>
 * <li>the parameters are the values that will replace the strings {0}, {1}, {2}... in the text extracted from the
 * resource property.</li>
 * </ul>
 * 
 * <p>If a {@code Throwable} is passed as parameter, the text of the exception is retrieved.
 * 
 * <p>If a {@code Callable} is passed as parameter, the object is automatically called.
 * 
 * <p>If a {@code LogParam} is passed as parameter, the {@code toString} function will be invoked.
 * 
 * <p>For all the other objects, the {@link #toString()} function is invoked.
 * 
 * <p>This service is thread-safe.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
class JulLoggingService extends AbstractService implements LoggingService {

	var platformLoggerInstance : Logger

	var kernelLoggerInstance : Logger

	val loggerCreator : JulLoggerCreator

	/** Constructor.
	 * 
	 * @param loggerCreator the creator.
	 */
	@Inject
	new (loggerCreator : JulLoggerCreator) {
		this.loggerCreator = loggerCreator
	}

	override getReferenceType : Class<? extends IService> {
		typeof(LoggingService)
	}

	override getPlatformLogger : Logger {
		if (this.platformLoggerInstance === null) {
			this.platformLoggerInstance = this.loggerCreator.createPlatformLogger()
		}
		this.platformLoggerInstance
	}

	override getKernelLogger : Logger {
		if (this.kernelLoggerInstance === null) {
			this.kernelLoggerInstance = this.loggerCreator.createModuleLogger(getPlatformLogger)
		}
		return this.kernelLoggerInstance
	}
	
	override getKernelModuleLogger(moduleName : String) : Logger {
		assert !moduleName.isNullOrEmpty
		return this.loggerCreator.createModuleLogger(moduleName, getKernelLogger)
	}
	
	override createAgentLogger(name : String, initialLevel : Level) : Logger {
		val logger = this.loggerCreator.createModuleLogger(name, getPlatformLogger)
		if (initialLevel !== null) {
			logger.level = initialLevel
		}
		return logger
	}
		
}
