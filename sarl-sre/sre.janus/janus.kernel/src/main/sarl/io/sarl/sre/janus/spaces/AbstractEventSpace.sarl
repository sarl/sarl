/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.spaces

import io.sarl.api.core.spaces.Participant
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.janus.services.logging.LoggingService
import java.text.MessageFormat
import java.util.UUID
import java.util.concurrent.ConcurrentMap

/** 
 * Abstract implementation of an event space.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @deprecated Since 3.0.15. Replaced by {@code io.sarl.api.core.spaces.AbstractEventSpace}.
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
@Deprecated(forRemoval = true, since = "3.0.15")
abstract class AbstractEventSpace extends io.sarl.api.core.spaces.AbstractEventSpace {

	/** Constructor.
	 * 
	 * @param spaceId identifier of the space.
	 * @param participantListener the platform listener on participant events.
	 * @param logger the logger service.
	 */
	new (spaceId : SpaceID, participantListener : SpaceParticipantListener, logger : LoggingService) {
		this(spaceId, participantListener, logger, null, null)
	}

	/** Constructor.
	 * 
	 * @param spaceId identifier of the space.
	 * @param participantListener the platform listener on participant events.
	 * @param loggingService the logger service.
	 * @param strongRepository collection of strong participants to the space.
	 * @param weakRepository collection of weak participants to the space.
	 */
	protected new (
		spaceId : SpaceID,
		participantListener : SpaceParticipantListener,
		loggingService : LoggingService,
		strongRepository : ConcurrentMap<UUID, Participant>,
		weakRepository : ConcurrentMap<UUID, Participant>) {
		super(spaceId, participantListener,
			[loggingService.getKernelModuleLogger(MessageFormat::format(Messages::AbstractEventSpace_2, spaceId.ID))],
			strongRepository, weakRepository)
	}
	
}
