/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor.policies

import io.sarl.sre.janus.IssueCodes
import jakarta.inject.Singleton
import java.text.MessageFormat
import java.util.concurrent.ThreadPoolExecutor
import java.util.logging.Level
import java.util.logging.LogRecord

/**
 * A handler for rejected tasks and uncaught exceptions that logs a warning on the platform logger
 * when a task is rejected, and an error for each uncaught exception.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @see ThreadPoolExecutor.CallerRunsPolicy
 */
@Singleton
class VerboseThreadExecutorPolicy extends AbstractLoggingThreadExecutorPolicy {

	override rejectedExecution(runnable : Runnable, executor : ThreadPoolExecutor) {
		if (!runRejectedTask(runnable, executor)) {
			if (this.logger.isLoggable(Level::FINE)) {
				val record = new LogRecord(Level::FINE,
					MessageFormat::format(Messages::VerboseThreadExecutorPolicy_0,
					IssueCodes::TASK_REJECT, runnable.toString))
				this.logger.log(record)
			}
		}
    }
	
	@SuppressWarnings("discouraged_reference")
	override uncaughtException(t : Thread, e : Throwable) {
		e.log(Long::toString(t.threadId), t.name)
	}

}
