/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor

import java.util.Collection
import java.util.LinkedList
import java.util.List
import java.util.concurrent.CountDownLatch
import java.util.concurrent.atomic.AtomicInteger

/** 
 * Utilities for running tasks on the standard JRE executor service.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
final class JreExecutorUtils {

	private new {
		//
	} 

	/** Execute the given tasks in parallel and wait for the termination.
	 * 
	 * @param executorService the service to use.
	 * @param tasks the tasks to run.
	 * @param interceptExceptions indicates if the exceptions in the tasks are thrown into a combined exception.
	 * @param wrapper a callback for wrapping the tasks. The first argument of the lambda indicates if the errors should be catched and
	 *     the second argument is the task to run.
	 */
	static def executeInThreadsAndWait(executorService : java.util.concurrent.ExecutorService, tasks : Collection<Runnable>, interceptExceptions : boolean,
		wrapper : (boolean, Runnable)=>Runnable) {
		assert executorService !== null

		var runExceptions : List<Throwable> = null

		if (tasks.size == 1) {
			val runnable = tasks.head
			assert runnable !== null
			if (interceptExceptions) {
				val finalRunExceptions = new LinkedList<Throwable>
				runExceptions = finalRunExceptions
				try {
					wrapper.apply(false, runnable).run
				} catch (e : Throwable) {
					finalRunExceptions += e
				}
			} else {
				wrapper.apply(true, runnable).run
			}
		} else {
			val doneSignal = new CountDownLatch(tasks.size)
			if (interceptExceptions) {
				val finalRunExceptions = new LinkedList<Throwable>
				runExceptions = finalRunExceptions
				for (runnable : tasks) {
					var wrunnable : Runnable = [
						try {
							wrapper.apply(false, runnable).run
						} catch (e : Throwable) {
							synchronized (finalRunExceptions) {
								finalRunExceptions += e
							}
						} finally {
							doneSignal.countDown
						}
					]
					executorService.execute(wrunnable)
				}
			} else {
				for (runnable : tasks) {
					executorService.execute [
						try {
							wrapper.apply(true, runnable).run
						} finally {
							doneSignal.countDown
						}
					]
				}
			}

			// Wait
			try {
				doneSignal.await
			} catch (ex : InterruptedException) {
			}
		}

		// Re-throw the run-time exception
		if (runExceptions !== null && !runExceptions.empty) {
			var iterator = runExceptions.iterator
			val firstException = iterator.next
			while (iterator.hasNext) {
				firstException.addSuppressed(iterator.next)
			}
			throw firstException
		}
	}

	/** Execute the given task in parallel and wait for the termination.
	 * 
	 * @param executorService the service to use.
	 * @param task the task to run.
	 * @param nbExecutions number of runs
	 * @param runGroupSize the size of a parallel group
	 */
	static def executeInThreadsAndWait(executorService : java.util.concurrent.ExecutorService, task : SreRunnable, nbExecutions : int, runGroupSize : int) : int {
		assert executorService !== null
		assert runGroupSize >= 1
		val es = executorService
		if (nbExecutions > 1) {
			val errors = new AtomicInteger
			var doneSignal : CountDownLatch
			if (runGroupSize > 1) {
				val numberOfGroups = nbExecutions / runGroupSize
				val rest = nbExecutions - numberOfGroups * runGroupSize
				if (rest > 0) {
					doneSignal = new CountDownLatch(numberOfGroups + 1)
				} else {
					doneSignal = new CountDownLatch(numberOfGroups)
				}
				val finalSignal = doneSignal
				for (var i = 0; i < numberOfGroups; i++) {
					es.execute [
						try {
							for (var j = 0; j < runGroupSize; j++) {
								task.run
								if (!task.success) {
									errors.incrementAndGet
								}
							}
						} finally {
							finalSignal.countDown
						}
					]
				}
				if (rest > 0) {
					es.execute [
						try {
							for (var j = 0; j < rest; j++) {
								task.run
								if (!task.success) {
									errors.incrementAndGet
								}
							}
						} finally {
							finalSignal.countDown
						}
					]
				}
			} else {
				doneSignal = new CountDownLatch(nbExecutions)
				val finalSignal = doneSignal
				for (var i = 0; i < nbExecutions; i++) {
					es.execute [
						try {
							task.run
							if (!task.success) {
								errors.incrementAndGet
							}
						} finally {
							finalSignal.countDown
						}
					]
				}
			}
			// Wait for all creators to complete before continuing
			doneSignal.await
			return nbExecutions - errors.get
		}
		if (nbExecutions == 1) {
			task.run
			return if(task.success) 1 else 0
		}
		return 0
	}

	/** Execute the given task in parallel but do not wait for the termination.
	 * 
	 * @param executorService the service to use.
	 * @param task the task to run.
	 * @param nbExecutions number of runs
	 * @param runGroupSize the size of a parallel group
	 */
	static def executeInThreadsWithoutWaiting(executorService : java.util.concurrent.ExecutorService, task : SreRunnable, nbExecutions : int, runGroupSize : int) {
		assert executorService !== null
		assert runGroupSize >= 1
		if (runGroupSize > 1) {
			val numberOfGroups = nbExecutions / runGroupSize
			val rest = nbExecutions - numberOfGroups * runGroupSize
			for (var i = 0; i < numberOfGroups; i++) {
				executorService.execute [
					for (var j = 0; j < runGroupSize; j++) {
						task.run
					}
				]
			}
			if (rest > 0) {
				executorService.execute [
					for (var j = 0; j < rest; j++) {
						task.run
					}
				]
			}
		} else {
			for (var i = 0; i < nbExecutions; i++) {
				executorService.execute [
					task.run
				]
			}
		}
	}
	
}
