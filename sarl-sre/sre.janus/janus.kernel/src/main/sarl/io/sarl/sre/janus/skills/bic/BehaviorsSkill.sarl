/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.bic

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.lang.core.Address
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.sre.janus.capacities.InternalEventBusCapacity
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import jakarta.inject.Inject
import jakarta.inject.Provider

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.sre.janus.services.lifecycle.BehaviorLife.*

/** 
 * SRE implementation of SARL's {@link Behaviors} built-in capacity.
 * 
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill BehaviorsSkill extends Skill implements Behaviors {

	uses InternalEventBusCapacity, InternalSchedules

	val factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>

	@Inject
	new (agentLevelInjector : Provider<ConfigurableAgentInjector>, factories : Provider<Factories>) {
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	protected override prepareUninstallation {
		val adr = owner.getAgentLife(this.factories, this.agentLevelInjector).addressInInnerDefaultSpace
		typeof(Behavior).unregisterEventBusListener [
			val beh = it as Behavior
			// Destroy the behavior
			val ^event = new Destroy
			^event.source = adr
			fireEventAndWait(^event, true, true, it)
			// Do internal uninstallation
			SREutils::doBehaviorUninstallation(beh)
			beh.releaseInternalResources
			// Run this lambda on all the behaviors:
			return true
		]
	}

	override asEventListener : EventListener {
		associatedEventBusListener
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override registerBehavior(attitude : Behavior, filter : (Event)=>boolean,
		initializationParameters : Object*) : Behavior {
		assert attitude !== null
		val life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			val adr = life.addressInInnerDefaultSpace
			attitude.registerEventBusListener(filter) [
				// Inject the behavior if needed
				attitude.getBehaviorLife(this.factories) [
					this.agentLevelInjector.get.injectAgentTraitMembers(attitude)
				]
				// Do internal installation
				SREutils::doBehaviorInstallation(attitude)
				// Initialize the behavior
				val ^event = new Initialize(this.ID, initializationParameters)
				^event.source = adr
				fireEventAndWait(^event, true, true, attitude)
			]
		}
		return attitude
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override  unregisterBehavior(attitude : Behavior) : Behavior {
		assert attitude !== null
		var adr = owner.getAgentLife(this.factories, this.agentLevelInjector).addressInInnerDefaultSpace
		attitude.unregisterTasksForBehavior
		attitude.unregisterEventBusListener [
			// Destroy the behavior
			val ^event = new Destroy
			^event.source = adr
			fireEventAndWait(^event, true, true, attitude)
			// Do internal uninstallation
			SREutils::doBehaviorUninstallation(attitude)
			attitude.releaseInternalResources
		]
		return attitude
	}

	override wake(^event : Event, scope : Scope<Address>) {
		// Use the inner space so all behaviors (even agents inside the holon
		// running in distant kernels) are notified. The event will return into
		// the agent via the inner default space add call internalReceiveEvent
		// for real posting
		val life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			var context = life.getInnerContext(null)
			if (context !== null) {
				val defSpace = context.defaultSpace
				^event.source = life.addressInInnerDefaultSpace
				defSpace.emit(ID, ^event, scope)
			} else {
				// Do not call getInnerContext(), which is creating the inner context automatically.
				// In place, try to send the event inside the agent only (and its behaviors).
				val adr = life.addressInInnerDefaultSpace
				if (scope === null || scope.matches(adr)) {
					val listener = associatedEventBusListener
					assert listener !== null
					^event.source = adr
					listener.receiveEvent(^event)
				}
			}
		}
	}

	override wake(^behavior : Behavior, ^event : Event) {
		val life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			// Inject the behavior if needed
			^behavior.getBehaviorLife(this.factories) [
				this.agentLevelInjector.get.injectAgentTraitMembers(^behavior)
			]
			fireEvent(^event, ^behavior)
		}
	}

	override wake(behaviors : Iterable<Behavior>, ^event : Event) {
		val life = owner.getAgentLife(this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			for (beh : behaviors) {
				fireEvent(^event, beh)
			}
		}
	}

	override getRegisteredBehaviors : ConcurrentCollection<Behavior> {
		getRegisteredEventBusListeners(typeof(Behavior))
	}

	override hasRegisteredBehavior : boolean {
		val iterable = getRegisteredEventBusListeners(typeof(Behavior))
		return iterable.iterator.hasNext
	}

}
