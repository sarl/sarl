/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal

import com.google.common.cache.CacheBuilder
import com.google.common.cache.LoadingCache
import com.google.common.collect.ImmutableSet
import com.google.common.reflect.TypeToken
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.Skill
import java.util.Set

/** 
 * Dictionary of types in the hierarchy of a type.
 * 
 * <p>This class is thread-safe.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.14
 */
final class TypeHierarchyDictionary {

	private new {
	}

	/** 
	 * Flattens a class's type hierarchy into a set of {@code Class} objects including all super-classes (transitively) and all interfaces implemented
	 * by these super-classes.
	 * 
	 * @param concreteClass the class you find the hierarchy
	 * @return the set of class in the hierarchy of the specified class
	 */
	@Pure
	static def getFlattenHierarchy(concreteClass : Class<?>) : ImmutableSet<Class<?>> {
		FLATTEN_HIERARCHY_CACHE.getUnchecked(concreteClass)
	}

	/** 
	 * Flattens a class's type hierarchy into a set of {@code Class} objects including all super-classes (transitively) and all interfaces implemented
	 * by these super-classes.
	 * 
	 * @param concreteClass the class you find the hierarchy
	 * @param expectedType the expected type that is used as the root type in the hierarchy.
	 * @return the set of class in the hierarchy of the specified class
	 */
	@Pure
	static def getFlattenHierarchy(concreteClass : Class<? extends T>, expectedType : Class<T>) : ImmutableSet<Class<? extends T>> with T {
		val types : Object = FLATTEN_HIERARCHY_CACHE.getUnchecked(concreteClass)
		return types as ImmutableSet<Class<? extends T>>
	}

	private static def isSubType(a : Class<?>, b : Class<?>) : boolean {
		a != b && a.isAssignableFrom(b)
	}

	private static def isAcceptedType(type : Class<?>) : boolean {
		type.reloadClass(typeof(Agent)).isSubType(type)
		|| type.reloadClass(typeof(Behavior)).isSubType(type)
		|| type.reloadClass(typeof(Skill)).isSubType(type)
		|| type.reloadClass(typeof(Event)).isAssignableFrom(type)
	}

	/** Explore the type hierarchy of the given type
	 *
	 * @param concreteClass the type to explore.
	 * @return the collection of super types.
	 */
	static def exploreTypeHierarchy(concreteClass : Class<?>) : Iterable<Class<?>> {
		var col0 : Object = TypeToken::of(concreteClass).types.rawTypes
		var col1 = col0 as Set<Class<?>>
		var col2 = col1.filter [
			!it.isInterface && !it.isEnum && !it.isAnnotation && it.isAcceptedType
		]
		return col2
	}

	private static def getTypeHierarchyOnDemand(concreteClass : Class<?>) : ImmutableSet<Class<?>> {
		assert concreteClass !== null
		val typeHierarchy = concreteClass.exploreTypeHierarchy
		return ImmutableSet::copyOf(typeHierarchy)
	}

	private static def reloadClass(context : Class<?>, type : Class<?>) : Class<?> {
		var ld = context.classLoader
		if (ld === null) {
			ld = type.classLoader
		}
		try {
			return ld.loadClass(type.name)
		} catch (ex : Throwable) {
			return type
		}
	}

	/** 
	 * Thread-safe cache of classes to their flattened hierarchy of supertypes.
	 */
	static val FLATTEN_HIERARCHY_CACHE : LoadingCache<Class<?>, ImmutableSet<Class<?>>> = 
			CacheBuilder::newBuilder.weakKeys.build[it.getTypeHierarchyOnDemand]

}
