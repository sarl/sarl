/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.lifecycle

import io.sarl.api.util.SarlSpecificationChecker
import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.sre.janus.IssueCodes
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.executor.tasks.Runnables
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Provider
import jakarta.inject.Singleton
import java.lang.ref.WeakReference
import java.util.Arrays
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicReference
import java.util.concurrent.locks.ReadWriteLock
import java.util.logging.Level
import java.util.logging.Logger
import org.arakhne.afc.services.AbstractService
import org.arakhne.afc.services.IService
import org.arakhne.afc.services.ServiceState
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtext.xbase.lib.Functions.Function0

import static java.text.MessageFormat.*

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*

/** 
 * Implementation of a spawning service that is based on the other services of the SRE platform.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@Singleton
abstract class AbstractLifecycleService extends AbstractService implements LifecycleService {

	val globalListeners : SmartListenerCollection<?>

	val factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>

	val sarlSpecificationChecker : SarlSpecificationChecker

	val agentCreatorProvider : AgentCreatorProvider

	val skillUninstaller : SkillUninstaller

	val logger : Logger

	val platformLifecycleEventEmitter : LifecycleServiceListener

	val platformContextEventEmitter : ExternalContextMemberListener

	@Accessors(PROTECTED_GETTER)
	val executor : ExecutorService

	val lifecycleConfig : LifecycleConfig

	// Do not use a concurrent list because it is useless according to the number of times this collection has to change
	var dynamicSkillProviders : DynamicSkillProvider[]

	val dynamicSkillProviderLock : ReadWriteLock

	val spawnQueries = new AtomicLong

	val spawnEnable = new AtomicBoolean(true)

	/** 
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param factories the provider of factories tool.
	 * @param agentLevelInjector injector that is used only for injecting a specific agent.
	 * @param skillProvider the system-wide provider of agent skills.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param loggingService the logging service.
	 * @param lifecycleConfig the configuration of the lifecycle service.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider,
		lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>,
		factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>,
		skillProvider : DynamicSkillProvider, skillUninstaller : SkillUninstaller,
		executor : ExecutorService, loggingService : LoggingService, lifecycleConfig : LifecycleConfig) {
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
		this.sarlSpecificationChecker = sarlSpecificationChecker
		this.agentCreatorProvider = creator
		this.globalListeners = this.factories.get.newListenerCollection
		this.skillUninstaller = skillUninstaller
		this.executor = executor
		this.lifecycleConfig = lifecycleConfig
		this.logger = loggingService.getKernelModuleLogger(Messages::AbstractLifecycleService_3)
		this.platformLifecycleEventEmitter = lifecycleListener.get
		this.platformContextEventEmitter = externalContextListener.get
		this.dynamicSkillProviderLock = this.factories.get.newReadWriteLock
		this.dynamicSkillProviders = newArrayOfSize(1)
		this.dynamicSkillProviders.set(0, skillProvider)
	}

	override getReferenceType : Class<? extends IService> {
		typeof(LifecycleService)
	}

	override getSpawnEnable : boolean {
		spawnEnable.get
	}

	override setSpawnEnable(enable : boolean) {
		spawnEnable.set(enable)
	}
	
	/** Replies the backend logger.
	 * 
	 * @return the logger.
	 */
	protected def getLogger : Logger {
		this.logger
	}

	override onStart {
		this.platformLifecycleEventEmitter.addLifecycleServiceListener
	}

	override onStop {
		this.platformLifecycleEventEmitter.removeLifecycleServiceListener
	}

	def addLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener) {
		this.globalListeners.add(typeof(LifecycleServiceListener), agentLifecycleListener)
	}

	def removeLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener) {
		this.globalListeners.remove(typeof(LifecycleServiceListener), agentLifecycleListener)
	}

	def addKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener) {
		this.globalListeners.add(typeof(KernelAgentLifecycleListener), listener)
	}

	def removeKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener) {
		this.globalListeners.remove(typeof(KernelAgentLifecycleListener), listener)
	}

	/** Notify the listeners outside the parent context.
	 * 
	 * @param agent the destroyed agent.
	 * @param outerContexts the contexts in which the agent w destroyed.
	 * @param terminationCause is the cause of the termination of the agent.
	 *     If it is {@code null}, the agent does not provide a cause for its termination.
	 * @since 0.12
	 */
	protected def fireAgentDestroy(^agent : Agent, outerContexts : ConcurrentCollection<ContextReference>,
		terminationCause : Object) {
		// Notify the listeners on the spawn events (not restricted to a single agent)
		this.globalListeners.notifyListeners(typeof(LifecycleServiceListener)) [
			agentDestroyed(^agent, outerContexts, terminationCause)
		]
	}

	/** Notify the listeners outside the parent context.
	 * 
	 * @param spawningAgent the spawning agent.
	 * @param context the context in which the agents were spawned.
	 * @param agentClazz the type of the spawned agents.
	 * @param agent the spawned agent.
	 * @param initializationParameters the initialization parameters.
	 */
	protected def fireAgentSpawned(spawningAgent : UUID, context : Context, agentClazz : Class<? extends Agent>,
		^agent : Agent, initializationParameters : Object*) {
		this.globalListeners.notifyListeners(typeof(LifecycleServiceListener)) [
			agentSpawned(spawningAgent, context, agentClazz, ^agent, initializationParameters)
		]
	}

	/** 
	 * Notifies the listeners about the kernel agent destruction.
	 */
	protected def fireKernelAgentDestroy {
		this.globalListeners.notifyListeners(typeof(KernelAgentLifecycleListener)) [
			kernelAgentDestroyed
		]
	}

	final override spawnAgent(nbAgents : int, spawningAgent : UUID, parent : Context, agentId : UUID,
		agentClazz : Class<? extends Agent>, params : Object[]) {
		spawnAgent(nbAgents, spawningAgent, parent, agentClazz, params, new AgentIdProvider(agentId))
	}

	/** 
	 * A dynamic provider of UUID for the newly created agents.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.11
	 */
	protected static class AgentIdProvider implements Function0<UUID> {

		var agentId : AtomicReference<UUID>

		new (agentId : UUID) {
			if (agentId === null) {
				this.agentId = null
			} else {
				this.agentId = new AtomicReference(agentId)
			}
		}

		def apply : UUID {
			val id = this.agentId?.getAndSet(null)
			if (id === null) {
				return UUID::randomUUID
			}
			return id
		}

	}

	/** Replies if the service can spawn.
	 * 
	 * @return {@code true} if the service can spawn an agent.
	 */
	def canSpawnAgent : boolean {
		state == ServiceState::RUNNING && getSpawnEnable
	}

	/** 
	 * Spawn agents of the given type, and pass the parameters to its initialization function.
	 * 
	 * <p>This function is not blocking until all the agents are spawned.
	 * 
	 * @param nbAgents the number of agents to spawn.
	 * @param spawningAgent the agent which is spawning, if {@code null}, the root agent (Janus kernel) is assumed.
	 * @param parent the parent entity that is creating the agents.
	 * @param agentClazz the type of the agents to spawn.
	 * @param params the list of the parameters to pass to the agent initialization function.
	 * @param agentIds is the lambda that must be used to compute the UUID of an agent. This lambda should be thread-safe.
	 */
	protected def spawnAgent(nbAgents : int, spawningAgent : UUID, parent : Context,
		agentClazz : Class<? extends Agent>, params : Object[], agentIds : ()=>UUID) : void {
		if (canSpawnAgent && nbAgents > 0) {

			// Check if the version of the SARL agent class is compatible.
			if (this.sarlSpecificationChecker === null ||
				!this.sarlSpecificationChecker.isValidSarlElement(agentClazz)) {
				throw new InvalidSarlSpecificationException(agentClazz)
			}

			val spawnQueryAccess = new SpawnQueries(this)

			// Retrieve the reference to the skill providers.
			// Since these providers are stored into an array, any change to the list of provider
			// will cause the creation of a new array. Then it is useless to implement a lock
			// on the providers' list. 
			var safeSkillProvidersList : DynamicSkillProvider[]
			val rlock = this.dynamicSkillProviderLock.readLock
			rlock.lock
			try {
				safeSkillProvidersList = this.dynamicSkillProviders
			} finally {
				rlock.unlock
			}

			// The following call is assumed to be thread-safe and the replied creator should also
			// be thread-safe.
			val agentInstanceCreator = this.agentCreatorProvider.getAgentCreator(
				agentClazz, parent.ID, nbAgents, safeSkillProvidersList)

			// Create the instance of the process that should create the agents.
			val individualCreationProcess = newAgentCreatorProcess(
				spawnQueryAccess,
				spawningAgent,
				parent, agentClazz, params, agentIds, agentInstanceCreator)

			if (nbAgents > 1) {
				getExecutor.executeNotBlockingTask(getLogger, nbAgents,
					this.lifecycleConfig.agentSpawningCountPerThread, individualCreationProcess)
			} else {
				getExecutor.executeAsap(getLogger, individualCreationProcess)
			}
		} else {
			throw new SpawnDisabledException(parent.ID, agentClazz)
		}
	}

	private def startShutdownLookup(parent : Context) {
		val lookup = new ShutdownLookUp(this, parent)
		lookup.start
	}

	/** Invoked to create the function for launching an agent.
	 * This function is defined for enabling overrding.
	 *
	 * @param spawnQueries the object ot track the spawn queries.
	 * @param spawningAgent is the identifier of the agent that has invoked the spawn function.
	 * @param parentContext is the context in which the agent is created.
	 * @param agentType is the type of agent to be created.
	 * @param initializationParameters is the list of parameters to pass to the agent for its initialization.
	 * @param agentIds is a lambda that replies a valid UUID for an agent. This lambda is thread-safe.
	 * @param agentInstanceCreator is a lambda that enables to create an instance of agent. This lambda is thread-safe.
	 * @since 0.12
	 */
	protected def newAgentCreatorProcess(
		spawnQueries : SpawnQueries,
		spawningAgent : UUID,
		parentContext : Context,
		agentType : Class<? extends Agent>,
	 	initializationParameters : Object[],
		agentIds : ()=>UUID,
		agentInstanceCreator : (UUID)=>Agent) : AgentCreationProcess {
		new AgentCreationProcess(
			this, spawnQueries,
			spawningAgent,
			parentContext, agentType, initializationParameters,
			agentIds, agentInstanceCreator,
			this.skillUninstaller,
			getLogger,
			this.factories,
			this.agentLevelInjector)
	}

	/** This function is called each time the agent framework should be stopped.
	 * This function is provided for being overridden by the sub-classes of
	 * the current class.
	 * 
	 * <p>Within the {@code AbstractLifecycleService}, this function fires the kernel agent
	 * destruction event.
	 * 
	 * @since 0.8.0
	 */
	protected def onAgentFrameworkStop {
		fireKernelAgentDestroy
	}

	/** This function is called each time an agent was created.
	 * This function is provided for being overridden by the sub-classes of
	 * the current class.
	 * 
	 * <p>Within the {@code AbstractLifecycleService}, this function does nothing.
	 * 
	 * @param agent the spawned agent.
	 * @since 0.8.0
	 */
	protected def onAgentCreated(^agent : Agent) {
		//
	}

	/** Fire the events related to the agent spawn.
	 * 
	 * @param spawningAgent the creator, if {@code null}, the root agent (Janus kernel) is assumed.
	 * @param parent the context in which the agents are created.
	 * @param agentClazz the type of the spawned agents.
	 * @param spawnedAgent the spawned agent.
	 */
	protected def fireAgentSpawningEvents(spawningAgent : UUID, parent : Context, agentClazz : Class<? extends Agent>,
		params : Object[], spawnedAgent : Agent) {
		spawningAgent.fireAgentSpawned(parent, agentClazz, spawnedAgent, params)
		val spaceID = parent.defaultSpace.spaceID
		this.platformContextEventEmitter.memberJoined(parent, spaceID, spawnedAgent.ID, agentClazz.name)
	}

	/** Fire the events related a failure of agent spawn.
	 * 
	 * @param spawningAgent the creator.
	 * @param parent the context in which the agents are created.
	 * @param agentClazz the type of the spawned agents.
	 * @param cause the cause of the failure.
	 */
	protected def fireAgentSpawnFailureEvent(spawningAgent : UUID, parent : Context,
		agentClazz : Class<? extends Agent>, cause : String) {
		this.platformLifecycleEventEmitter.agentSpawnFailure(
			spawningAgent, parent, agentClazz, cause)
	}

	/** Replies if the given context is the root context and is empty.
	 * 
	 * @param context the agent context to test.
	 * @return {@code true} if the given context is the root context, and it is empty.
	 *     Otherwise {@code false}.
	 */
	protected def isEmptyRootContext(context : Context) {
		context !== null && context.rootContext && context.defaultSpace.isPseudoEmpty
	}

	/** Replies if the given agent could be kill according to the SARL specification.
	 * 
	 * <p>An agent could be kill if is has no internal member.
	 * 
	 * @param life the internal data structure for the agent.
	 * @param id the identifier of the agent.
	 * @return {@code true} if the agent could be killed.
	 */
	def isKillableAgent(life : AgentLife, id : UUID) : boolean {
		if (life !== null) {
			try {
				var innerContext = life.getInnerContext(null)
				if (innerContext !== null) {
					if (!innerContext.defaultSpace.isPseudoEmpty(id)) {
						return false
					}
				}
				return true
			} catch (exception : Throwable) {
				//
			}
		}
		return false
	}

	/** Replies if the agent is alive. This function is usually invoked to determine if the agent is killable.
	 * 
	 * @param life the internal data structure for the agent.
	 * @return {@code true} if the agent is alive.
	 * @since 0.11
	 */
	def isAlive(life : AgentLife) : boolean {
		life.state.isAlive
	}

	def killAgent(^agent : Agent, forceKillable : boolean, terminationCause : Object) : boolean {
		val agentId = ^agent.ID
		val life = getAgentLifeOrNull(^agent)
		if (life !== null && life.isAlive) {
			var defaultContext = life.defaultContext
			// We should check if it is possible to kill the agent BEFORE killing it.
			if (forceKillable || life.isKillableAgent(agentId)) {
				var contexts = life.stop(^agent, this.skillUninstaller, getLogger)
				^agent.onAgentKilled
				fireAgentDestructionEvents(^agent, defaultContext, contexts, terminationCause)
				// Test if the agent is the latest on this kernel.
				defaultContext?.context?.startShutdownLookup
				return true
			} else {
				val msg = format(Messages::AbstractLifecycleService_1,
						IssueCodes::NOT_KILLABLE_ERROR, agentId)
				fireAgentKillFailureEvent(^agent, defaultContext, msg)
				getLogger.warning(msg)
			}
		} else {
			getLogger.warning [
				format(Messages::AbstractLifecycleService_2, IssueCodes::NOT_ALIVE_ERROR, agentId)
			]
		}
		return false
	}

	/** This function is called each time an agent was killed.
	 * This function is provided for being overridden by the sub-classes of
	 * the current class.
	 * 
	 * <p>Within the {@code AbstractLifecycleService}, this function does nothing.
	 * 
	 * @param agent the killed agent.
	 * @since 0.8.0
	 */
	protected def onAgentKilled(^agent : Agent) {
		//
	}

	protected def fireAgentDestructionEvents(^agent : Agent, defaultContextBeforeKilled : ContextReference,
		leavedContexts : ConcurrentCollection<ContextReference>,
		terminationCause : Object) {
		// Leave the default context because the ExternalContextAccessSkill does not fire events related
		// to the default space.
		this.platformContextEventEmitter.memberLeft(defaultContextBeforeKilled.context,
			defaultContextBeforeKilled.defaultSpace.spaceID, ^agent.ID, ^agent.class.name)
		// Fire the agent destroy event
		^agent.fireAgentDestroy(leavedContexts, terminationCause)
	}

	/** Fire the events related a failure of agent killing.
	 * 
	 * @param agent the agent that has failed to commit a suicide.
	 * @param innerContext the context in which the events should be fired. 
	 * @param cause the cause of the failure.
	 */
	protected def fireAgentKillFailureEvent(^agent : Agent, innerContext : ContextReference, cause : Object) {
		this.platformLifecycleEventEmitter.agentKillFailure(^agent.ID, innerContext, cause)
	}

	/** Add a dynamic skill provider that must be used for the agents that are spawned
	 * after the call to this function.
	 * 
	 * @param provider is the provider of skills for newly created agents.
	 */
	def addDynamicSkillProvider(provider : DynamicSkillProvider) {
		assert provider !== null
		val wlock = this.dynamicSkillProviderLock.writeLock
		wlock.lock
		try {
			this.dynamicSkillProviders = Arrays::copyOf(this.dynamicSkillProviders, this.dynamicSkillProviders.length + 1)
			this.dynamicSkillProviders.set(this.dynamicSkillProviders.length - 1, provider)
		} finally {
			wlock.unlock
		}
	}

	/** Remove a dynamic skill provider that must be not be used any more for the agents that are spawned.
	 * 
	 * @param provider is the provider of skills to be removed.
	 */
	def removeDynamicSkillProvider(provider : DynamicSkillProvider) {
		assert provider !== null
		val wlock = this.dynamicSkillProviderLock.writeLock
		wlock.lock
		try {
			// Start at index 1 because the first provider is the system-wide provider
			for (var i = 1; i < this.dynamicSkillProviders.length; i++) {
				if (provider === this.dynamicSkillProviders.get(i)) {
					val copy = newArrayOfSize(this.dynamicSkillProviders.length - 1)
					System::arraycopy(this.dynamicSkillProviders, 0, copy, 0, i)
					if (i < (this.dynamicSkillProviders.length - 1)) {
						System::arraycopy(this.dynamicSkillProviders, i + 1, copy, i, this.dynamicSkillProviders.length - i - 1)
					}
					this.dynamicSkillProviders = copy
					return;
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** 
	 * A class enables to update the number of "spawn" queries and supporting the
	 * multiple spawning of agents within a single call to "spawn".
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.11
	 */
	protected static final class SpawnQueries {

		val enclosing : WeakReference<AbstractLifecycleService>

		val used = new AtomicBoolean(false)

		new (enclosing : AbstractLifecycleService) {
			enclosing.spawnQueries.incrementAndGet
			this.enclosing = new WeakReference(enclosing)
		}

		def done : void {
			if (!this.used.getAndSet(true)) {
				var ec = this.enclosing.get
				if (ec !== null) {
					ec.spawnQueries.accumulateAndGet(-1) [
						var nv = $0 + $1
						if (nv < 0) {
							return 0
						}
						return nv
					]
				}
			}
		}

	}

	/** 
	 * A class that is runnable into a thread and implements the creation of a single agent.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.12
	 */
	protected static class AgentCreationProcess implements Runnable {

		val service : AbstractLifecycleService
		val spawnQueries : SpawnQueries
		val spawningAgent : UUID
		val parentContext : Context
		val agentType : Class<? extends Agent>
		val initializationParameters : Object[]
		val agentIds : ()=>UUID
		val agentInstanceCreator : (UUID)=>Agent
		val skillUninstaller : SkillUninstaller
		val logger : Logger
		val factories : Provider<Factories>
		val agentLevelInjector: Provider<ConfigurableAgentInjector>

		/** Constructor.
		 *
		 * @param service is the reference to the spawning service.
		 * @param spawnQueries the object ot track the spawn queries.
		 * @param spawningAgent is the identifier of the agent that has invoked the spawn function, if {@code null}, the root agent (Janus kernel) is assumed.
		 * @param parentContext is the context in which the agent is created.
		 * @param agentType is the type of the created agents.
		 * @param initializationParameters is the list of parameters to pass to the agent for its initialization.
		 * @param agentIds is the lambda that must be used to compute the UUID of an agent. This lambda should be thread-safe.
		 * @param agentInstanceCreator is a lambda that enables to create an instance of agent. This lambda is thread-safe.
		 * @param skillUninstaller is the reference to the skill uninstaller.
		 * @param logger is the service logger.
		 * @param factories the provider of factories tool.
		 */
		new (service : AbstractLifecycleService, spawnQueries : SpawnQueries,
			spawningAgent : UUID,
			parentContext : Context, agentType : Class<? extends Agent>,
			initializationParameters : Object[], agentIds : ()=>UUID,
			agentInstanceCreator : (UUID)=>Agent, skillUninstaller : SkillUninstaller,
			logger : Logger,
			factories : Provider<Factories>,
			agentLevelInjector: Provider<ConfigurableAgentInjector>) {
			this.service = service
			this.spawnQueries = spawnQueries
			this.spawningAgent = spawningAgent
			this.parentContext = parentContext
			this.agentType = agentType
			this.initializationParameters = initializationParameters
			this.agentIds = agentIds
			this.agentInstanceCreator = agentInstanceCreator
			this.skillUninstaller = skillUninstaller
			this.logger = logger
			this.factories = factories
			this.agentLevelInjector = agentLevelInjector
		}

		final override run {
			createAgent
		}

		protected def createAgent : void {
				val aid = this.agentIds.apply

				// Effectively create the agent
				val ^agent : Agent = this.agentInstanceCreator.apply(aid)
				if (^agent === null) {
					throw new CannotSpawnException(this.agentType)
				}

				// Start the agent's life
				var life = ^agent.getAgentLife(this.factories, this.agentLevelInjector)
				var started = false
				var spawnError : Throwable = null
				try {
					started = life.start(^agent, this.skillUninstaller, this.logger, this.spawningAgent, this.parentContext, this.initializationParameters)
				} catch (e : Throwable) {
					started = false
					spawnError = new CannotSpawnException(this.agentType, e)
				} finally {
					this.spawnQueries.done
				}
				if (started) {
					// Add the agent in the system. It is synchronized because additions may occur in parallel
					this.service.onAgentCreated(^agent)
					this.service.fireAgentSpawningEvents(this.spawningAgent, this.parentContext,
						this.agentType, this.initializationParameters, ^agent
					)
				} else {
					var cause : String = null
					if (spawnError !== null) {
						val errmsg = spawnError.message
						cause = errmsg
						this.logger.log(Level::SEVERE, spawnError) [errmsg]
					}
					val creator = this.spawningAgent ?: this.parentContext.ID
					this.service.fireAgentSpawnFailureEvent(creator, this.parentContext, this.agentType, cause)
					// The agent may be the boot agent, and it may have failed to be launched.
					// When the root context is still empty the safer decision should be to stop the kernel.
					// In some cases, the agent that is just not started has spawned another agent
					// into its "on Initialize" before it returns on failure or with "killMe".
					// Then, we should give the opportunity to the spawned sub-agent to properly
					// start before stopping the SRE.
					this.service.startShutdownLookup(this.parentContext)
				}
		}

	}

	/** 
	 * A class that is looking for stopping the SRE kernel when o more agent is alive.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.11
	 */
	protected static class ShutdownLookUp implements Runnable {

		val enclosing : WeakReference<AbstractLifecycleService>

		val parent : Context

		package new (enclosing : AbstractLifecycleService, parent : Context) {
			this.enclosing = new WeakReference(enclosing)
			this.parent = parent
		}

		@SuppressWarnings("discouraged_reference")
		def run {
			val ec = this.enclosing.get
			if (ec !== null) {
				val nb = ec.spawnQueries.get
				if (nb === 0 && ec.isEmptyRootContext(this.parent)) {
					ec.onAgentFrameworkStop
				}
			}
		}

		def start : void {
			Runnables::named(this, Messages::AbstractLifecycleService_0).run
		}

	}

}

/** 
 * This exception is thrown when the agent to spawn is not generated according to a valid SARL specification version.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class InvalidSarlSpecificationException extends RuntimeException {

	new (agentType : Class<? extends Agent>) {
		super(format(Messages::InvalidSarlSpecificationException_0, IssueCodes::INVALID_SARL_SPECIFICATION, agentType.name))
	}

}

/** 
 * This exception is thrown when the spawning service of agents is disabled.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class SpawnDisabledException extends RuntimeException {

		/** 
		 * @param parentID
		 * - the identifier of the parent entity that is creating the agent.
		 * @param agentClazz
		 * - the type of the agent to spawn.
		 */
	new (parentID : UUID, agentClazz : Class<? extends Agent>) {
		super(format(Messages.SpawnDisabledException_0, IssueCodes::DISABLED_SPAWN, parentID, agentClazz));
	}

}
