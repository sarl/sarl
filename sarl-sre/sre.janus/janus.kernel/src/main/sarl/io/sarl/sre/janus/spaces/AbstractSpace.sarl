/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.spaces

import io.sarl.lang.core.SRESpecificDataContainer
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import java.lang.ref.WeakReference
import java.util.EventListener

/** 
 * Abstract implementation of a space.
 * 
 * @author $Author: srodriguez$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
abstract class AbstractSpace extends SRESpecificDataContainer implements Space {

	val id : SpaceID

	var listener : WeakReference<SpaceListener>

	/**
	 * Constructs a space.
	 *
	 * @param id identifier of the space.
	 */
	new (id : SpaceID) {
		this.id = id
	}

	/** Change the listener on the space events.
	 */
	def setSpaceListenerIfNone(listener : SpaceListener) {
		if (listener === null) {
			this.listener = null
		} else if (this.listener === null) {
			this.listener = new WeakReference(listener)
		}
	}
	
	/** Fire the event that indicates the space could be destroyed.
	 */
	protected def fireDestroyableSpace() {
		var listen = this.listener?.get
		if (listen !== null) {
			listen.destroyableSpace(this)
		}
	}

	def toString : String {
		this.spaceID.toString
	}

	final def getSpaceID : SpaceID {
        this.id
    }

}

/** 
 * Listener on events related to the space.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface SpaceListener extends EventListener {
	/** 
	 * Invoked when the space could be destroyed.
	 * 
	 * @param space reference to the created space.
	 */
	def destroyableSpace(^space : Space)
}