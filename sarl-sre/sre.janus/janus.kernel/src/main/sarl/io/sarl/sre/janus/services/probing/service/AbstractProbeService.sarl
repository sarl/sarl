/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.probing.service

import com.google.common.util.concurrent.AtomicDouble
import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.api.naming.parser.INameParser
import io.sarl.api.probing.IProbeReleaseListener
import io.sarl.api.probing.Probe
import io.sarl.api.probing.ProbeService
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.probing.probes.BigDecimalFieldProbe
import io.sarl.sre.janus.services.probing.probes.BigIntegerFieldProbe
import io.sarl.sre.janus.services.probing.probes.BooleanFieldProbe
import io.sarl.sre.janus.services.probing.probes.ByteFieldProbe
import io.sarl.sre.janus.services.probing.probes.CharacterFieldProbe
import io.sarl.sre.janus.services.probing.probes.DoubleFieldProbe
import io.sarl.sre.janus.services.probing.probes.FloatFieldProbe
import io.sarl.sre.janus.services.probing.probes.IntegerFieldProbe
import io.sarl.sre.janus.services.probing.probes.LongFieldProbe
import io.sarl.sre.janus.services.probing.probes.ReferenceFieldProbe
import io.sarl.sre.janus.services.probing.probes.ShortFieldProbe
import jakarta.inject.Provider
import java.math.BigDecimal
import java.math.BigInteger
import java.net.URI
import java.text.MessageFormat
import java.util.Collection
import java.util.Map
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import java.util.concurrent.atomic.AtomicLong
import org.arakhne.afc.services.AbstractService
import org.arakhne.afc.services.IService

/** 
 * This class is the standard implementation of a probe service.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
abstract class AbstractProbeService extends AbstractService implements ProbeService, IProbeReleaseListener {

	val namespace : NamespaceService

	val nameParser : INameParser

	val probes : Map<URI, Probe<?>>

	val factories : Provider<Factories>

	/** Constructor.
	 * 
	 * @param internalStructure is the internal structure for storing the probes.
	 * @param namespaceService the service that is giving access to the namespaces.
	 * @param nameParser the object that is able to parse resource names.
	 * @param factories the provider of factories tool.
	 */
	protected new (internalStructure : Map<URI, Probe<?>>, namespaceService : NamespaceService, nameParser : INameParser,
		factories : Provider<Factories>) {
		this.probes = internalStructure
		this.namespace = namespaceService
		this.nameParser = nameParser
		this.factories = factories
	}

	override getReferenceType : Class<? extends IService> {
		typeof(ProbeService)
	}

	override onStop : void {
		releaseAllProbes
	}

	override probe(valueName : String, valueType : Class<T>, probeName : String) : Probe<T> with T {
		this.nameParser.decode(valueName).probe(valueType, probeName)
	}

	override probe(valueName : URI, valueType : Class<T>, probeName : String) : Probe<T> with T {
		var nuri = this.nameParser.normalize(valueName)
		if (nuri !== null) {
			return this.nameParser.decode(nuri).probe(valueType, probeName)
		}
		return null
	}

	override probe(valueName : SarlName, valueType : Class<T>, probeName : String) : Probe<T> with T {
		assert valueType !== null
		if (valueName === null) {
			return null
		}
		val uri = valueName.toURI
		if (uri === null) {
			return null
		}
		var probe : Probe<T> = this.probes.get(uri) as Probe<T>

		if (probe === null) {
			var isFirst = false
			val probedValue = this.namespace.findObject(valueName)
			val name = if(probeName.isNullOrEmpty) uri.toString else probeName
			probe = probedValue.newProbe(valueType, uri, name)
			if (probe !== null) {
				isFirst = this.probes.empty
				this.probes.put(uri, probe)
			}

			if (isFirst) {
				onFirstProbe
			}
		}
		return probe
	}

	/** Invoked when the first probe is added into the service.
	 */
	protected def onFirstProbe {
		//
	}

	/** Invoked when the last probe is removed from the service.
	 */
	protected def onLastProbe {
		//
	}

	/** Create an instance of the probe.
	 * 
	 * @param <T> the expected type of the probed values.
	 * @param probedElement the element to which the probe must be associated, never {@code null}.
	 * @param valueType the expected type of the probed values, never {@code null}.
	 * @param probeUri the URI of the probe, never {@code null}.
	 * @param probeName the name of the probe, never {@code null}.
	 * @throws IllegalArgumentException if the type of the data is not supported.
	 */
	protected def newProbe(probedElement : Object, valueType : Class<T>, probeUri : URI,
		probeName : String) : Probe<T> with T {
		var p : Probe<?>
		if (probedElement instanceof FieldAccess) {
			if (valueType == typeof(boolean) || valueType == typeof(Boolean)) {
				p = new BooleanFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(int) || valueType == typeof(Integer)) {
				p = new IntegerFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(double) || valueType == typeof(Double)) {
				p = new DoubleFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(float) || valueType == typeof(Float)) {
				p = new FloatFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(long) || valueType == typeof(Long)) {
				p = new LongFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(short) || valueType == typeof(Short)) {
				p = new ShortFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(byte) || valueType == typeof(Byte)) {
				p = new ByteFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(char) || valueType == typeof(Character)) {
				p = new CharacterFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(BigInteger)) {
				p = new BigIntegerFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(BigDecimal)) {
				p = new BigDecimalFieldProbe(this, probeName, probeUri, probedElement, this.factories)
			} else if (valueType == typeof(AtomicBoolean)) {
				throw new IllegalArgumentException(MessageFormat::format(Messages::AbstractProbeService_0,
					valueType.simpleName, typeof(Boolean).simpleName))
			} else if (valueType == typeof(AtomicInteger)) {
				throw new IllegalArgumentException(MessageFormat::format(Messages::AbstractProbeService_0,
					valueType.simpleName, typeof(Integer).simpleName))
			} else if (valueType == typeof(AtomicDouble)) {
				throw new IllegalArgumentException(MessageFormat::format(Messages::AbstractProbeService_0,
					valueType.simpleName, typeof(Double).simpleName))
			} else if (valueType == typeof(AtomicLong)) {
				throw new IllegalArgumentException(MessageFormat::format(Messages::AbstractProbeService_0,
					valueType.simpleName, typeof(Long).simpleName))
			} else  {
				p = new ReferenceFieldProbe(this, probeName, probeUri, valueType, probedElement, this.factories)
			}
		}
		return p as Probe<T>
	}

	override getProbes : Collection<Probe<?>> {
		return new ConcurrentLinkedDeque(this.probes.values)
	}

	override releaseAllProbes {
		var removable = new ConcurrentLinkedDeque(this.probes.values)
		for (it : removable) {
			it.release
		}
	}

	override sync {
		for (it : this.probes.values) {
			it.sync
		}
	}

	/** Force synchronization. It is for internal usage only. */
	protected def internalSync {
		for (it : this.probes.values) {
			it.sync(true, true)
		}
	}

	override onProbeReleasedProbe(probe : Probe<?>) {
		var isLast = false

		this.probes.remove(probe.uri)
		isLast = this.probes.empty

		if (isLast) {
			onLastProbe
		}
	}

}
