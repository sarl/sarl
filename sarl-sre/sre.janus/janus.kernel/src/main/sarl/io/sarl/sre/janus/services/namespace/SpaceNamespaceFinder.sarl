/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.namespace

import io.sarl.api.naming.name.SpaceName
import io.sarl.lang.core.Space
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import javax.inject.Inject
import javax.inject.Singleton

/** 
 * Implementation of a finder of space into the namespaces.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
@Singleton
class SpaceNamespaceFinder extends AbstractNamespaceFinder<SpaceName, Space> {

	/** Constructor.
	 * 
	 * @param service the service that is managing the contexts and the spaces.
	 */
	@Inject
	new (service : ContextService) {
		super(service)
	}
	
	override getScheme : String {
		SpaceName::SCHEME
	}

	override find(name : SpaceName) : Space {
		if (name === null) {
			return null
		}
		var ctx : Context = null
		var contextId = name.contextId
		if (contextId !== null) {
			ctx = this.contextService.getContext(contextId)
			if (ctx === null) {
				return null
			}
		}
		if (ctx === null) {
			ctx = this.contextService.rootContext
		}
		if (ctx !== null) {
			var spaceId = name.spaceId
			if (spaceId !== null) {
				return ctx.getSpace(spaceId)
			}
			return ctx.defaultSpace
		}
		return null
	}
	
}
