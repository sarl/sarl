/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard

import io.sarl.lang.core.Event
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.ConcurrentSet
import java.util.Set

/** 
 * Registry of all {@code IBehaviorGuardEvaluator}.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
interface IBehaviorGuardEvaluatorRegistry {

	/** 
	 * Registers all {@code PerceptGuardEvaluator} methods on the given listener object.
	 * 
	 * @param listener the new {@code BehaviorGuardEvaluator} to add
	 * @param callback function which is invoked just after the first registration of the object. It could be {@code null}.
	 * @since 0.5
	 */
	def register(listener : Object, callback : (Object)=>void = null) {
		register(listener, null, callback)
	}

	/**
	 * Registers all {@code PerceptGuardEvaluator} methods on the given listener object.
	 *
	 * <p>If the filter is provided, it will be used for determining if the given behavior accepts a specific event.
	 * If the filter function replies {@code true} for a specific event as argument, the event is fired in the
	 * behavior context. If the filter function replies {@code false}, the event is not fired in the behavior context.
	 *
	 * @param listener the new {@code BehaviorGuardEvaluator} to add
	 * @param filter the filter function.
	 * @param callback function which is invoked just after the registration of the object. It could be {@code null}.
	 * @since 0.5
	 */
	def register(listener : Object, filter : (Event) => boolean, callback : (Object) => void = null)

	/**
	 * Unregisters all BehaviorGuardEvaluators on all the listener objects.
	 *
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 * @since 0.5
	 */
	def unregisterAll(callback : (Object)=>boolean)
	
	/**
	 * Unregisters all BehaviorGuardEvaluators on the given listener object.
	 *
	 * @param listener the new {@code BehaviorGuardEvaluator} to remove
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 * @since 0.5
	 */
	def unregister(listener : Object, callback : (Object)=>void)

	/** 
	 * Unregisters all BehaviorGuardEvaluators on the listener objects of the given type.
	 * 
	 * @param listenerType the type of the {@code BehaviorGuardEvaluator} to remove
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 * @since 0.7
	 */
	def unregister(listenerType : Class<?>, callback : (Object)=>boolean)

	/** Replies if a listener with the given type is registered.
	 * 
	 * @param type the type of listener.
	 * @return {@code true} if a listener of the given type is registered.
	 * @since 0.5
	 */
	@Pure
	def hasRegisteredEventListener(type : Class<?>) : boolean

	/** 
	 * Gets an iterator representing an immutable snapshot of all BehaviorGuardEvaluators to the given event at the time this method is called.
	 *
	 * @param event
	 *            -the event to process
	 * @return the set of guard evaluators associated to the specified event
	 */
	@Pure
	def getBehaviorGuardEvaluatorsForRegisteredListeners(^event : Event) : ConcurrentCollection<? extends IBehaviorGuardEvaluator>

	/**
	 * Gets an iterator representing an immutable snapshot of all BehaviorGuardEvaluators of the given listener
	 * to the given event at the time this method is called.
	 *
	 * <p>Caution: This function does not apply filtering function given to
	 * {@link #register(Object, Function1, Procedure1)}.
	 *
	 * @param event -the event to process
	 * @param listener the owner of the BehaviorGuardEvaluators (never {@code null}).
	 * @return the set of guard evaluators associated to the specified event
	 * @since 0.5
	 */
	@Pure
	def getBehaviorGuardEvaluatorsForDirectAccessListener(^event : Event, listener : Object) : ConcurrentCollection<? extends IBehaviorGuardEvaluator>

	/** Extract the registered listeners with the given type.
	 *
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @param collection the collection of listeners that is filled by this function. This argument could be {@code null}.
	 * @return the number of listeners of the given type.
	 * @since 0.11
	 */
	def getRegisteredEventListeners(type : Class<T>, collection : Set<? super T>) : int with T

	/** Extract the registered listeners with the given type.
	 * 
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @return the listeners.
	 * @since 0.6
	 */
	@Pure
	def getRegisteredEventListeners(type : Class<T>) : ConcurrentSet<T> with T

}
