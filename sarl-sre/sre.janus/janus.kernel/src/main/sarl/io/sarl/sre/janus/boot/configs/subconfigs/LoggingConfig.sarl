/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.configs.subconfigs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.di.BQModule
import io.bootique.di.Binder
import java.lang.reflect.Type
import java.util.Collections
import java.util.Map
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.boot.configs.subconfigs.LoggingConfig.*

/** 
 * Configuration for the agent logging service.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
@BQConfig("Configuration of the SRE logging service")
class LoggingConfig {

	/** 
	 * Prefix for the configuration entries of the logging configuration.
	 */
	public static val PREFIX : String = ServicesConfig::PREFIX + ".logging"

	/** 
	 * Name of property that contains the format of the logging messages on the platform.
	 * 
	 * <p>The format string may contains one of the following elements:<ul>
	 * <li>{@code %1}: the date,</li>
	 * <li>{@code %2}: the name of the calling function,</li>
	 * <li>{@code %3}: the name of the logger,</li>
	 * <li>{@code %4}: the logging level,</li>
	 * <li>{@code %5}: the message, and</li>
	 * <li>{@code %6}: the throwable.</li>
	 * </ul>
	 * 
	 * @see #PLATFORM_MESSAGE_FORMAT_VALUE
	 */
	public static val PLATFORM_MESSAGE_FORMAT_NAME = PREFIX + ".platformMessageFormat"
	
	/** 
	 * Format of the logging messages on the platform.
	 *
	 * <p>The format string may contains one of the following elements:<ul>
	 * <li>{@code %1}: the date,</li>
	 * <li>{@code %2}: the name of the calling function,</li>
	 * <li>{@code %3}: the name of the logger,</li>
	 * <li>{@code %4}: the logging level,</li>
	 * <li>{@code %5}: the message, and</li>
	 * <li>{@code %6}: the throwable.</li>
	 * </ul>
	 * 
	 * @see #PLATFORM_MESSAGE_FORMAT_NAME
	 */
	public static val PLATFORM_MESSAGE_FORMAT_VALUE = "[%4$s, %1$tl:%1$tM:%1$tS%1$tp, %3$s] %5$s%6$s%n"


	@Accessors(PUBLIC_GETTER)
	var platformMessageFormat = PLATFORM_MESSAGE_FORMAT_VALUE

	/** Change the pattern of the platform messages.
	 * 
	 * <p>The format string may contains one of the following elements:<ul>
	 * <li>{@code %1}: the date,</li>
	 * <li>{@code %2}: the name of the calling function,</li>
	 * <li>{@code %3}: the name of the logger,</li>
	 * <li>{@code %4}: the logging level,</li>
	 * <li>{@code %5}: the message, and</li>
	 * <li>{@code %6}: the throwable.</li>
	 * </ul>
	 * 
	 * @param pattern the new pattern, or {@code null} to use the default pattern.
	 */
	@BQConfigProperty("Pattern of the logging messages for the platform. The format string may contains one of the following elements: "
		+ "%1 the date, %2 the name of the calling function, %3 : the name of the logger, "
		+ "%4 : the logging level, %5 : the message, and %6 the throwable object.")
	def setPlatformMessageFormat(pattern : String) : void {
		if (pattern.isNullOrEmpty) {
			this.platformMessageFormat = PLATFORM_MESSAGE_FORMAT_VALUE
		} else {
			this.platformMessageFormat = pattern
		}
	}

}

/** 
 * Module for the agent logging service configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
class LoggingConfigModule implements BQModule {

	override configure(binder : Binder) : void {
		//
	}

}

/** Provider of the module for the logging service configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
class LoggingConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new LoggingConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(LoggingConfig))
	}
	
	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LoggingConfigModuleProvider_0);
	}

}
