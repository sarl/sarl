/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.spaces

import io.bootique.di.Binder
import io.bootique.di.BQModule
import io.bootique.di.Injector
import io.bootique.di.Key
import io.sarl.api.core.spaces.AbstractSpaceSpecification
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.api.util.DefaultSpace
import io.sarl.lang.core.EventSpaceSpecification
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.sre.janus.internal.SubInjector
import io.sarl.sre.janus.services.logging.LoggingService
import jakarta.inject.Inject
import jakarta.inject.Singleton
import java.text.MessageFormat


/** 
 * Factory of space specification for SRE. 
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@Singleton
class SreSpaceSpecificationFactory {

	var injector : Injector

	var loggingService : LoggingService

	@Inject
	new (injector : Injector, loggingService : LoggingService) {
		this.injector = injector
		this.loggingService = loggingService
	}

	/** Create the space specification for an event space that is supposed to be the default space.
	 * 
	 * @param type the type of the space specification.
	 * @param defaultSpace the instance of the default space.
	 * @return the specification.
	 */
	protected def newSpaceSpecification(type : Class<? extends SpaceSpecification<?>>, defaultSpace : OpenEventSpace) : SpaceSpecification<?> {
		assert type !== null

		val liveInjector : Injector = if (defaultSpace !== null) {
			new SubInjector(this.injector, new JustInTimeDefaultSpaceInjectionModule(defaultSpace));
		} else {
			this.injector
		}

		var newSpec : SpaceSpecification<?>
		if (type == typeof(OpenEventSpaceSpecification)) {
			newSpec = liveInjector.getInstance(typeof(SreOpenEventSpaceSpecification))
		} else if (type == typeof(EventSpaceSpecification)) {
			newSpec = liveInjector.getInstance(typeof(SreEventSpaceSpecification))
		} else {
			newSpec = liveInjector.getInstance(type)
		}

		if (newSpec instanceof AbstractSpaceSpecification) {
			newSpec.setLoggerProvider [it : SpaceID |
				if (it === null) {
					this.loggingService.getKernelLogger
				} else {
					this.loggingService.getKernelModuleLogger(MessageFormat::format(Messages::AbstractEventSpace_2, it.ID))
				}
			]
			if (defaultSpace !== null) {
				newSpec.setDefaultSpaceProvider [defaultSpace]
			}
		}

		return newSpec
	}

	/** Create the space specification for an event space that is supposed to be the default space.
	 *
	 * @param <S> the type of the space specification.
	 * @param type the type of the space specification.
	 * @return the specification.
	 */
	def createOpenEventSpaceSpecificationForDefaultSpace(type : Class<S>) : S with S extends SpaceSpecification<?> {
		val specification : SpaceSpecification<?> = type.newSpaceSpecification(null)
		return type.cast(specification)
	}

	/** Create the space specification for an event space that is supposed to be not the default space.
	 * 
	 * @param <S> the type of the space specification.
	 * @param type the type of the space specification.
	 * @param defaultSpace the default space of the context.
	 * @return the specification.
	 */
	def createOpenEventSpaceSpecificationInInnerContext(type : Class<S>, defaultSpace : OpenEventSpace) : S with S extends SpaceSpecification<?> {
		val specification : SpaceSpecification<?> = type.newSpaceSpecification(defaultSpace)
		return type.cast(specification)
	}


	/** 
	 * An injection module that is able to inject the default space instance into a space specification instance.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.15
	 */
	private static class JustInTimeDefaultSpaceInjectionModule implements BQModule {

		val defaultSpace : OpenEventSpace

		package new (defaultSpace : OpenEventSpace) {
			assert defaultSpace !== null
			this.defaultSpace = defaultSpace
		}

		override configure(extension binder : Binder) {
			Key::get(typeof(OpenEventSpace), "defaultSpace").bind.toInstance(this.defaultSpace)
			Key::get(typeof(OpenEventSpace), typeof(DefaultSpace)).bind.toInstance(this.defaultSpace)
		}

	}

}
