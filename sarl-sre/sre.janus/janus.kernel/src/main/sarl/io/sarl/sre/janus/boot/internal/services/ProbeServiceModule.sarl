/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.internal.services

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Injector
import io.bootique.di.Provides
import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.api.naming.parser.INameParser
import io.sarl.api.probing.ProbeService
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.probing.service.AsynchronousProbeService
import io.sarl.sre.janus.services.probing.service.SynchronousProbeService
import jakarta.inject.Provider
import jakarta.inject.Singleton
import org.arakhne.afc.services.IService

/** 
 * Module for the probing services.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ProbeServiceModule implements BQModule {

	override configure(binder : Binder) {
		binder.bindSet(typeof(IService), typeof(SreServices)).add(typeof(ProbeService))
	}

	/** Create an instance of the probe service.
	 *
	 * @param sreConfig the SRE configuration.
	 * @param injector the injector to use for initializing the new instance.
	 * @param service the executor service of the framework.
	 * @param namespaceService the namespace service of the framework.
	 * @param nameParser the parser of entity names.
	 * @param factories the provider of the factories tool.
	 * @return the created service.
	 */
	@Singleton
	@Provides
	def providesProbeService(sreConfig : Provider<SreConfig>, injector : Injector,
		service : Provider<ExecutorService>, namespaceService : Provider<NamespaceService>,
		nameParser : Provider<INameParser>,
		factories : Provider<Factories>) : ProbeService {
		var ps : ProbeService
		var cfgInstance = sreConfig.get
		if (cfgInstance.services.asynchronousProbeUpdate) {
			ps = new AsynchronousProbeService(service.get, namespaceService.get, nameParser.get, factories)
		} else {
			ps = new SynchronousProbeService(namespaceService.get, nameParser.get, factories)
		}
		injector.injectMembers(ps)
		return ps
	}

}

/** Provider of the module for the probing services.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class ProbeServiceModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new ProbeServiceModule
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::ProbeServiceModuleProvider_0);
	}

}

