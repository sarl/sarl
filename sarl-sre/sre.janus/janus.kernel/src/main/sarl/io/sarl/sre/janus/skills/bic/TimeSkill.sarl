/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.bic

import io.sarl.api.core.Time
import io.sarl.lang.core.Skill
import io.sarl.sre.janus.services.time.TimeService
import java.util.concurrent.TimeUnit
import javax.inject.Inject

/** 
 * SRE implementation of SARL's {@link Time} built-in capacity.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill TimeSkill extends Skill implements Time {

	val timeService : TimeService

	/** Constructor. */
	@Inject
	new (service : TimeService) {
		super()
		this.timeService = service
	}

	def getTime(timeUnit : TimeUnit) : double {
		this.timeService.getTime(timeUnit)
	}

	def getOSTimeFactor : double {
		this.timeService.OSTimeFactor
	}
	
	def fromOSDuration(timeDuration : double) : double {
		this.timeService.fromOSDuration(timeDuration)
	}
	
	def fromOSTime(timeValue : double) : double {
		this.timeService.fromOSTime(timeValue)
	}
	
	def toOSDuration(timeDuration : double) : double {
		this.timeService.toOSDuration(timeDuration)
	}
	
	def toOSTime(timeValue : double) : double {
		this.timeService.toOSTime(timeValue)
	}
	
}
