/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor.tasks

import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * A specific SRE runnable for kernel tasks.
 * See {@link Runnables} for creating an instance.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 * @see Runnables
 */
class SreKernelRunnable implements Runnable {

	@Accessors(PUBLIC_GETTER)
	val source : Runnable

	@Accessors(PUBLIC_GETTER)
	val name : String

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param source the runnable to wrap.
	 * @param name the name of the thread.
	 */
	protected new (source : Runnable, name : String) {
		assert source !== null
		this.source = source
		this.name = name
	}

	@SuppressWarnings("discouraged_reference")
	override run {
		val th = Thread::currentThread
		val oldName = th.name
		try {
			if (this.name !== null) {
				th.name = this.name
			}
			this.source.run
		} finally {
			th.name = oldName
		}
	}

	def toString : String {
		this.source?.toString
	}

	def equals(obj : Object) : boolean {
		this.source == obj
	}

	def hashCode : int {
		val r = this.source
		if (r !== null) r.hashCode else 0
	}

}
