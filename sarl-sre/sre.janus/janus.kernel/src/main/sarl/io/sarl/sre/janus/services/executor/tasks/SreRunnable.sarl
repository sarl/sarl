/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor.tasks

import java.util.logging.Level
import java.util.logging.Logger

/** 
 * A specific SRE runnable that is catching the {@link EarlyExitException}.
 * See {@link Runnables} for creating an instance.
 * 
 * <p>The behavior of this runnable regarding the exceptions depends on the
 * definition of the logger. If a logger is defined, the exceptions are logged out but never
 * thrown to the Java execution layer. If a logger is not defined, the exceptions are thrown
 * to the Java execution layer. 
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6
 * @see Runnables
 */
class SreRunnable extends SreExecutable implements Runnable {

	val runnable : Runnable

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param runnable the wrapped task.
	 * @param logger the logger to use.
	 */
	protected new (runnable : Runnable, logger : Logger) {
		super(logger)
		assert runnable !== null
		this.runnable = runnable
	}

	/** Constructor.
	 * See {@link Runnables} for creating an instance.
	 *
	 * @param logger the logger to use.
	 */
	protected new (logger : Logger) {
		super(logger)
		this.runnable = null
	}

	/** Replies the wrapped task.
	 * 
	 * @return the runnable.
	 */
	def getWrappedRunnable : Runnable {
		this.runnable
	}

	/** Run the task. The default implementation runs the attached Runnable. */
	protected def internalRun {
		wrappedRunnable?.run
	}

	@SuppressWarnings("discouraged_reference")
	final def run {
		try {
			this.exception = null
			internalRun
		} catch (ex : EarlyExitException) {
			ex.runPostTreatment(this.logger)
		} catch (ex : InterruptedException) {
			// Ignore this exception
			// Clear the interrupted flag
			Thread::interrupted
		} catch (ex : Throwable) {
			val cause = ex.rootCause
			if (cause instanceof EarlyExitException) {
				cause.runPostTreatment(this.logger)
			} else if (cause instanceof InterruptedException) {
				// Ignore this exception
				// Clear the interrupted flag
				Thread::interrupted
			} else {
				this.exception = cause
				val doThrown = onError(cause)
				val log = getLogger
				if (log !== null) {
					log.log(Level::SEVERE, cause) [cause.exceptionMessage]
				} else if (doThrown) {
					throw cause
				}
			}
		} finally {
			onFinished
		}
	}
	
	def toString : String {
		wrappedRunnable?.toString
	}

	def equals(obj : Object) : boolean {
		wrappedRunnable == obj
	}

	def hashCode : int {
		val r = wrappedRunnable
		if (r !== null) r.hashCode else 0
	}

}
