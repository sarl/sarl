/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.spaces

import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Space
import io.sarl.lang.core.annotation.PrivateAPI
import java.util.UUID

/** 
 * Space with participants that exhibits the participants' list.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.10
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI
interface SpaceWithParticipants extends Space {

	/** Apply the given procedure to each of the strong participants.
	 * This function ignores the weak participants.
	 * 
	 * @param callback the lambda to invoke.
	 * @since 0.11
	 */
	def forEachStrongParticipant(callback : (UUID, Participant) => void);


	/** Apply the given procedure to each of the weak participants.
	 * This function ignores the strong participants.
	 * 
	 * @param callback the lambda to invoke.
	 * @since 0.11
	 */
	def forEachWeakParticipant(callback : (UUID, Participant)=>void);

	/** Replies the event listener with the given identifier into the registered strong participants.
	 * 
	 * @param target the identifier of the event listener to search for.
	 * @return the event listener or {@code null} if there is no event listener found.
	 * @since 0.11
	 */
	def getListenerFromStrongParticipant(target : UUID) : EventListener

}
