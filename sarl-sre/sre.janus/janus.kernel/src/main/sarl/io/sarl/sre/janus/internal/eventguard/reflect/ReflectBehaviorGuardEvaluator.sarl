/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard.reflect

import com.google.common.base.Strings
import io.sarl.sre.janus.IssueCodes
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluator
import java.lang.reflect.InvocationTargetException
import java.text.MessageFormat
import java.util.Collection

/**
 * Describes each class having one of its methods annotated with {@code PerceptGuardEvaluator} annotation corresponding to the
 * method in charge of evaluating the guard associated to a given event and returns the list of behaviors runnable that must be
 * executed according to the result of the guard evaluation.
 *
 * <p>The {@code BehaviorGuardEvaluator} is comparable in order to be storable into a collection (usually a sorted set) that
 * needs the elements to be comparable.
 *
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 *
 */
class ReflectBehaviorGuardEvaluator implements IBehaviorGuardEvaluator {

    /** The object with the {@code PerceptGuardEvaluator} method. */
    val target : Object

    /** {@code PerceptGuardEvaluator} method. */
    val method : MethodProxy

    /** Creates a {@code Subscriber} for {@code method} on {@code listener}.
	 *
	 * @param target the listener
	 * @param method the method to call to evaluate a guard
	 */
    new (target : Object, method : MethodProxy) {
    	assert target !== null
        this.target = target
        this.method = method
    }

	override evaluateGuard(^event : Object, behaviorsMethodsToExecute : Collection<Runnable>) : void {
		try {
			this.method.guardMethod.accessible = true
			if (this.method.matchesGenericTypes(^event)) {
				this.method.guardMethod.invoke(this.target,^event, behaviorsMethodsToExecute)
			}
		} catch (e : IllegalArgumentException) {
			throw new Error(
				MessageFormat::format(Messages::ReflectBehaviorGuardEvaluator_0, IssueCodes::EVENT_GUARD_ERROR, ^event), e)
		} catch (e : IllegalAccessException) {
			throw new Error(
				MessageFormat::format(Messages::ReflectBehaviorGuardEvaluator_1, IssueCodes::EVENT_GUARD_ERROR, ^event), e)
		} catch (e : InvocationTargetException) {
			if (e.cause instanceof Error) {
				throw e.cause as Error
			}
			throw e
		}
	}

	override getTarget : Object {
		this.target
	}

	/** 
	 * Returns the method that is invoked to evaluate the guard.
	 * @return the guard evaluation method.
	 * @since 0.11
	 */
	def getMethod : MethodProxy {
		this.method
	}

	
	override hashCode : int {
		val a = if (this.method === null) 0 else this.method.hashCode
		return (31 + a) * 31 + System::identityHashCode(this.target)
	}

	override equals(obj : Object) : boolean {
		if (obj instanceof ReflectBehaviorGuardEvaluator) {
			// Use == so that different equal instances will still receive events.
			// We only guard against the case that the same object is registered
			// multiple times
			return this.target === obj.target && this.method == obj.method
		}
		return false
	}

	/** {@inheritDoc}
	 * @since 0.11
	 */
	override compareTo(otherEvaluator : IBehaviorGuardEvaluator) : int {
		val other = otherEvaluator as ReflectBehaviorGuardEvaluator
		if (other === null) {
			return 1
		}
		if (this.method === null) {
			if (other.method === null) {
				return 0
			}
			return -1
		}
		if (other.method === null) {
			return 1
		}
		
		var cmpName = this.method.guardMethod.name <=> other.method.guardMethod.name
		if (cmpName !== 0) {
			return cmpName
		}
		
		//Warning the targets could be equals but method declaring classes could be different, especially in the case of inherited methods		
		if ((this.method.guardMethod.declaringClass === other.method.guardMethod.declaringClass) &&
			(this.target === other.target)) {
			return 0
		}
		val id0 = System::identityHashCode(this.target)
		val id1 = System::identityHashCode(other.target)
		return id0 <=> id1
	}

	override toString : String {
		if(this.method === null) Strings::emptyToNull(null) else this.method.guardMethod.name
	}

}
