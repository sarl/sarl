/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.internal.services

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Injector
import io.bootique.di.Provides
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.services.lifecycle.BasicSkillUninstaller
import io.sarl.sre.janus.services.lifecycle.InjectionBasedLifecycleService
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import io.sarl.sre.janus.services.lifecycle.SkillUninstaller
import io.sarl.sre.janus.services.lifecycle.StandardLifecycleService
import jakarta.inject.Provider
import jakarta.inject.Singleton
import org.arakhne.afc.services.IService

/** 
 * Module for the lifecycle services.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
class LifecycleServiceModule implements BQModule {

	override configure(extension binder : Binder) {
		typeof(SkillUninstaller).bind.to(typeof(BasicSkillUninstaller)).inSingletonScope

		binder.bindSet(typeof(IService), typeof(SreServices)).add(typeof(LifecycleService))
	}

	/** 
	 * Construct the lifecycle service.
	 * 
	 * @param config accessor to the lifecycle bootique configuration.
	 * @param injector the current injector
	 * @return the handler.
	 * @since 0.11
	 */
	@Provides
	@Singleton
	def provideLifecycleService(config : Provider<SreConfig>, injector : Injector) : LifecycleService {
		val cfg = config.get.services.lifecycle
		if (cfg.isCreateAgentsWithInjector) {
			// Creation of agents with injection
			return injector.getInstance(InjectionBasedLifecycleService)
		}
		// Creation of agents without injection
		return injector.getInstance(StandardLifecycleService)
	}

}

/** Provider of the module for the lifecycle services.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class LifecycleServiceModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new LifecycleServiceModule
	}

	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LifecycleServiceModuleProvider_0);
	}

}

