/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.context

import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.di.Injector
import io.bootique.di.Key
import io.sarl.api.core.spaces.AbstractSpace
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.api.core.spaces.SpaceListener
import io.sarl.api.util.DefaultSpace
import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.ConcurrentSet
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ContextsConfig
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.internal.SubInjector
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.SreSpaceSpecificationFactory
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.io.Serializable
import java.lang.ref.WeakReference
import java.text.MessageFormat
import java.util.EventListener
import java.util.Map
import java.util.Objects
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.TimeUnit
import java.util.concurrent.locks.ReadWriteLock
import java.util.logging.Logger
import org.arakhne.afc.vmutil.ClassComparator
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtend.lib.annotations.Data

/** 
 * A repository of spaces specific to a given context.
 * 
 * <p>This repository is thread-safe.
 * 
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
abstract class SpaceRepository implements SpaceListener {

	val injector : Injector

	val executor : ExecutorService
	
	protected val logger : Logger

	val contextsRepositoryConfig : ContextsConfig

	val listeners : SmartListenerCollection<?>

	val specs : Map<SpaceSpecificationKey, SpaceSpecification<?>> = new TreeMap

	val spacesBySpec : Map<Class<? extends SpaceSpecification<?>>, ConcurrentSet<SpaceDescription>> = new TreeMap(ClassComparator::SINGLETON)

	/** Reference to the default space of the owning context.
	 * @since 0.10
	 */
	var defaultSpace : WeakReference<OpenEventSpace>

	val specificationFactory : SreSpaceSpecificationFactory

	@Accessors(PROTECTED_GETTER)
	val lock : ReadWriteLock

	val factories : Factories

	/** Constructor.
	 * 
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 * @param logger the logging service.
	 * @param config the configuration.
	 * @param specificationFactory the factory of space specification.
	 * @param factories the provider of factories tool.
	 */
	@Inject
	new (injector : Injector, executor : ExecutorService, logger : LoggingService, 
		config : SreConfig, specificationFactory : SreSpaceSpecificationFactory,
		factories : Provider<Factories>) {
		this.injector = injector
		this.executor = executor
		this.factories = factories.get
		this.logger = createLogger(logger)
		this.contextsRepositoryConfig = config.contexts
		this.listeners = this.factories.newListenerCollection
		this.specificationFactory = specificationFactory
		this.lock = this.factories.newReadWriteLock
	}

	/** Create the logger for this repository.
	 *
	 * <p>This function should not have a border effect; and it is therefore thread-safe.
	 *
	 * @param loggingService the service for logging.
	 * @return the logger.
	 */
	@Pure
	protected def createLogger(loggingService : LoggingService) : Logger {
		loggingService.getKernelModuleLogger(Messages::SpaceRepository_2)
	}

	/** Replies the internal map that contains the spaces.
	 *
	 * <p>This function should not have a border effect; and it is therefore thread-safe.
	 *
	 * <p>This function shoud be invoked into a locked/synchronized block of code.
	 * That's why it does not need to reply a "concurrent" collection.
	 * Moreover, all the functions that are providing a collection of spaces to the
	 * outside of this class are creating a copy of the collection that is "concurrent".
	 *
	 * @return the internal data structure for storing the spaces.
	 */
	@Pure
	protected abstract def getSharedStructure : Map<UUID, SpaceDescription>

	/** Create a space description.
	 * 
	 * <p>This function should be overridden by the sub-types.
	 *
	 * <p>This function should not have a border effect; and it is therefore thread-safe.
	 * 
	 * @param id the space identifier.
	 * @param space the space instance.
	 * @return the description.
	 */
	@Pure
	protected def createSpaceDescription(id : SpaceID, ^space : Space) : SpaceDescription {
		new SpaceDescription(id, ^space)
	}

	/** Replies the space information associated to the space if already associated.
	 * 
	 * <p>This function is not thread-safe; but enough efficient to be assumed to not
	 * cause issues related to threads.
	 * 
	 * @param newDescription the description to associated to the space.
	 * @return the space description, or {@code null}
	 */
	protected def life(^space : Space, newDescription : SpaceDescription) : SpaceDescription {
		if (^space instanceof AbstractSpace) {
			if (newDescription !== null) {
				SREutils::setSreSpecificData(^space, newDescription)
				return newDescription
			}
			return SREutils::getSreSpecificData(^space, typeof(SpaceDescription))
		}
		return null
	}

	/** Replies the space information associated to the space identifier if already associated.
	 * 
	 * <p>This function is not thread-safe; but enough efficient to be assumed to not
	 * cause issues related to threads.
	 * 
	 * @param newDescription the description to associated to the space.
	 * @return the space description, or {@code null}
	 */
	protected def life(spaceId : SpaceID, newDescription : SpaceDescription) : SpaceDescription {
		if (newDescription !== null) {
			SREutils::setSreSpecificData(spaceId, newDescription)
			return newDescription
		}
		return SREutils::getSreSpecificData(spaceId, typeof(SpaceDescription))
	}

	/** 
	 * Create an instance of the default space if it was not created before.
	 *
	 * <p>This function is thread-safe.
	 * 
	 * @param spaceID ID of the default space.
	 * @return the new space.
	 */
	def createDefaultSpace(spaceID : SpaceID) : OpenEventSpace {
		var defaultSpace = getOrCreateSpaceWithID(spaceID, typeof(OpenEventSpaceSpecification))
		val wlock = getLock.writeLock
		wlock.lock
		try {
			if (defaultSpace === null) {
				this.defaultSpace = null
			} else {
				this.defaultSpace = new WeakReference(defaultSpace)
			}
		} finally {
			wlock.unlock
		}
		return defaultSpace
	}

	/** Get the specification for the given type of space specification.
	 * If the instance was not created, it is created on the fly.
	 * 
	 * <p>This function is thread-safe because it creates the specification instance on the fly into
	 * the concurrent map.
	 *
	 * @param spec the type of space specification to be created.
	 * @return the instance of the space specification.
	 */
	private def getSpaceSpecificationInstance(spec : Class<T>) : T with T extends SpaceSpecification<?> {
		var defaultSpace : OpenEventSpace = this.defaultSpace?.get
		val key = new SpaceSpecificationKey(spec, defaultSpace === null)
		val instance = spec.cast(this.specs.computeIfAbsent(key) [
			var specInstance : SpaceSpecification<?>
			if (it.isDefaultSpace) {
				// Usually, this case cover the creation of the default space within a context
				specInstance = this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(spec)
				this.injector.injectMembers(specInstance)
			} else {
				// Usually, this case is for the creation of the spaces that are not the default space
				specInstance = this.specificationFactory.createOpenEventSpaceSpecificationInInnerContext(spec, defaultSpace)
				val defaultSpaceInjectionModule = new JustInTimeDefaultSpaceInjectionModule(defaultSpace)
				val defaultSpaceInjector = new SubInjector(this.injector, defaultSpaceInjectionModule)
				defaultSpaceInjector.injectMembers(specInstance)
			}
			assert specInstance !== null
			return specInstance
		])
		assert instance !== null
		return instance
	}

	/** Create the first instance of a given space.
	 *
	 * <p>This function is thread-safe. It notifies the listeners about the space creation.
	 *
	 * @param spec is the type of space specification to be used for creating the space.
	 * @param spaceID is the identifier to give to the new space instance.
	 * @param creationParams is the list of parameters that must be used for creating the space instance,
	 *     through the space specification.
	 */
	protected def createSpaceFirstInstance(spec : Class<? extends SpaceSpecification<S>>, spaceID : SpaceID,
		creationParams : Object[]) : S with S extends Space {
		assert spaceID.spaceSpecification === null ||
			spaceID.spaceSpecification == spec, "The specification type is invalid"

		//
		// This part of the function is thread independent
		//

		val spaceSpecificationInstance = spec.spaceSpecificationInstance

		// Split the call to create() to let the JVM to create the "empty" array for creation parameters.
		var ^space : S
		if (creationParams !== null && creationParams.length > 0) {
			^space = spaceSpecificationInstance.create(spaceID, creationParams)
		} else {
			^space = spaceSpecificationInstance.create(spaceID)
		}
		assert ^space !== null

		val id = ^space.spaceID
		assert id !== null
		val description = createSpaceDescription(id, ^space)
		^space.life(description)
		id.life(description)

		//
		// This part of the function is thread dependent
		//

		val wlock = getLock.writeLock
		wlock.lock
		try {
			val spaces = sharedStructure
	
			val list = this.spacesBySpec.computeIfAbsent(
				id.spaceSpecification) [
				this.factories.concurrentCollectionFactory.<SpaceDescription>newSet(null)
			]
			list += description
	
			spaces.put(id.ID, description)
			if (^space instanceof AbstractSpace) {
				^space.spaceListenerIfNone = this
			}
		} finally {
			wlock.unlock
		}
		
		//
		// This part of the function is thread independent again
		//

		^space.fireSpaceAdded(true)
		return ^space
	}

	/** Synchronize the internal structures of SpaceRepository with the content of
	 * {@link #getSharedStructure()}.
	 * 
	 * <p>This function is thread-safe.
	 * 
	 * <p>Caution: Do not call this function if you are not certain it does the expected things.
	 */
	def refreshInternalStructures : void {
		var wlock = getLock.writeLock
		wlock.lock
		try {
			this.spacesBySpec.clear
			for (description : sharedStructure.values) {
				var ^space = description.^space
				var spaceId = ^space.spaceID
				^space.life(description)
				spaceId.life(description)
				val list = this.spacesBySpec.computeIfAbsent(
					spaceId.spaceSpecification) [
					this.factories.concurrentCollectionFactory.<SpaceDescription>newSet(null)
				]
				list += description
				if (^space instanceof AbstractSpace) {
					^space.spaceListenerIfNone = this
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** 
	 * Destroy this repository and release all the resources.
	 */
	final def destroy {
		var wlock = getLock.writeLock
		wlock.lock
		try {
			destroyThreadUnsafe
		} finally {
			wlock.unlock
		}
		this.listeners.clear
	}

	/** 
	 * Destroy this repository and release all the resources inside a synchronized section.
	 *
	 * <p>This function is not thread-safe.
	 */
	protected def destroyThreadUnsafe {
		val spaces = sharedStructure
		var iterator = spaces.values.iterator
		while (iterator.hasNext) {
			var description = iterator.next
			var ^space = description.clearSpaceReference
			^space.life(null)
			^space.spaceID.life(null)
			iterator.remove
		}
		this.spacesBySpec.clear
	}

	/** 
	 * Create a space. This function does not test if the space already exist into the repository.
	 * It means that any previously created instance of a space with the given space identifier
	 * will be lost after the return of this function.
	 *
	 * <p>This function notifies the listeners about the space creation.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space.
	 * @param spec specification of the space.
	 * @param creationParams creation parameters.
	 * @return the new space, or {@code null} if the space already exists.
	 */
	def createSpace(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		assert spaceID.spaceSpecification ==
			spec, "The space identifier does not contains the same specification as the one given to the creation function"
		this.logger.finer[MessageFormat::format(Messages::SpaceRepository_0, spaceID.contextID, spaceID.ID, spec.name)]
		spec.createSpaceFirstInstance(spaceID, creationParams)
	}

	/** Remove all the spaces that are empty.
	 *
	 * <p>This function is thread-safe.
	 *
	 * @since 0.12
	 */
	protected def removeEmptySpaces : void {
		val removable = <Space>newArrayList
		val rlock = getLock.readLock
		rlock.lock
		try {
			val spaces = sharedStructure
			for (^space : spaces.values.map [it.ensureSpaceInstance(this)]) {
				if (^space.isPseudoEmpty) {
					removable += ^space
				}
			}
		} finally {
			rlock.unlock
		}
		for (^space : removable) {
			^space.removeSpaceIfEmpty
		}
	}

	/** Remove the space with the given id if the space is empty, i.e. it has no more strong participant.
	 *
	 * <p>This function is thread-safe.
	 *
	 * @param id is the identifier of the space.
	 * @since 0.12
	 */
	def removeSpaceIfEmpty(id : UUID) : void {
		if (id !== null) {
			var ^space : Space = null
			val rlock = getLock.readLock
			rlock.lock
			try {
				val description = sharedStructure.get(id)
				if (description !== null) {
					^space = description.getSpace
				}
			} finally {
				rlock.unlock
			}
			if (^space !== null) {
				^space.removeSpaceIfEmpty
			}
		}
	}

	/** Remove the given space if the it is empty, i.e. it has no more strong participant.
	 *
	 * <p>This function is thread-safe.
	 *
	 * @param space is the identifier of the space.
	 * @since 0.12
	 */
	def removeSpaceIfEmpty(^space : Space) : void {
		^space.removeSpace [it.isPseudoEmpty]
	}

	/** 
	 * Remove the given space.
	 *
	 * <p>This function notifies the listeners about the space removal.
	 * 
	 * @param space the space.
	 */
	def removeSpace(^space : Space) : void {
		^space.removeSpace(null)
	}
	
	/** 
	 * Remove the given space.
	 *
	 * <p>This function notifies the listeners about the space removal.
	 * 
	 * @param space the space.
	 * @param condition a condition to validate for removing.
	 */
	private def removeSpace(^space : Space, condition : (Space) => boolean) {
		if (^space !== null) {
			var spaceID = ^space.spaceID
			this.logger.finer[MessageFormat::format(Messages::SpaceRepository_1, spaceID.contextID, spaceID.ID)]
			var description : SpaceDescription
			if (condition !== null) {
				var rlock = getLock.readLock
				rlock.lock
				try {
					if (!condition.apply(^space)) {
						return
					}
				} finally {
					rlock.unlock
				}
			}
			var wlock = getLock.writeLock
			wlock.lock
			try {
				description = sharedStructure.remove(spaceID.ID)
				if (description !== null) {
					var cousins = this.spacesBySpec.get(spaceID.spaceSpecification)
					if (cousins !== null) {
						cousins.remove(description)
					}
				}
			} finally {
				wlock.unlock
			}

			^space.life(null)
			spaceID.life(null)
			if (description !== null) {
				description.^space = null
				^space.fireSpaceRemoved(true)
			}
		}
	}

	/** 
	 * Retrieve the first space of the given specification, or create a space if none.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space (used only when creating a space).
	 * @param spec specification of the space.
	 * @param creationParams creation parameters (used only when creating a space).
	 * @return the new space.
	 */
	def getOrCreateSpaceWithSpec(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		var description : SpaceDescription
		val rlock = getLock.readLock
		rlock.lock
		try {
			description = spec.getSpaceDescriptionFrom
		} finally {
			rlock.unlock
		}

		if (description === null) {
			val wlock = getLock.writeLock
			wlock.lock
			try {
				description = spec.getSpaceDescriptionFrom
				if (description === null) {
					return spec.createSpaceFirstInstance(spaceID, creationParams)
				}
			} finally {
				wlock.unlock
			}
		}
		return description.ensureSpaceInstance(this) as S
	}

	/** Extract the space description from the internal data structures.
	 * If the specification is the same as the default space, the default space is replied.
	 * Otherwise the first space that is not the default space and is associated to the
	 * given specification is replied.
	 *
	 * <p>This function is not thread-safe; but assumed to be efficient enough to cause
	 *
	 * @param spec the space specification.
	 * @return the space description or {@code null} if not found.
	 */
	private def getSpaceDescriptionFrom(spec : Class<? extends SpaceSpecification<? extends Space>>) : SpaceDescription {
		var spaces = this.spacesBySpec.get(spec)
		if (spaces !== null && !spaces.empty) {
			var defaultSpace = this.defaultSpace?.get
			var iter = spaces.iterator
			if (defaultSpace === null) {
				if (iter.hasNext) {
					return iter.next
				}
			} else {
				val dfid = defaultSpace.spaceID
				while (iter.hasNext) {
					var desc = iter.next
					if (dfid != desc.spaceId) {
						return desc
					}
				}
			}
		}
		return null
	}

	/** 
	 * Retrieve the first space of the given identifier, or create a space if none.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space.
	 * @param spec specification of the space.
	 * @param creationParams creation parameters (used only when creating a space).
	 * @return the new space.
	 */
	def getOrCreateSpaceWithID(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		var description : SpaceDescription
		val rlock = getLock.readLock
		rlock.lock
		try {
			description = sharedStructure.get(spaceID.ID)
		} finally {
			rlock.unlock
		}
		if (description === null) {
			val wlock = getLock.writeLock
			wlock.lock
			try {
				description = sharedStructure.get(spaceID.ID)
				if (description === null) {
					return spec.createSpaceFirstInstance(spaceID, creationParams)
				}
			} finally {
				wlock.unlock
			}
		}
		return description.ensureSpaceInstance(this) as S
	}

	/** 
	 * Returns the collection of all spaces stored in this repository.
	 * 
	 * @return the collection of all spaces stored in this repository.
	 */
	def getSpaces : ConcurrentCollection<? extends Space> {
		var translated = this.factories.concurrentCollectionFactory.newCollection
		val rlock = getLock.readLock
		rlock.lock
		try {
			val spaces = sharedStructure
			// TODO optimize this code below to avoid this filter loop
			for (t : spaces.values.map [it.ensureSpaceInstance(this)]) {
				translated.add(t)
			}
		} finally {
			rlock.unlock
		}
		return translated
	}

	/** 
	 * Returns the collection of all spaces with the specified {@link SpaceSpecification} stored in this repository.
	 * 
	 * @param <S> - type of the spaces to reply.
	 * @param spec the specification used to filter the set of stored spaces.
	 * @return the collection of all spaces with the specified {@link SpaceSpecification} stored in this repository
	 */
	def getSpaces(spec : Class<? extends SpaceSpecification<S>>) : ConcurrentCollection<S> with S extends Space {
		var mapped = this.factories.concurrentCollectionFactory.newCollection
		val rlock = getLock.readLock
		rlock.lock
		try {
			var spaces = this.spacesBySpec.get(spec)
			if (spaces !== null) {
				// TODO optimize this code below to avoid this filter loop
				for (m : spaces.map[it.ensureSpaceInstance(this) as S]) {
					mapped.add(m)
				}
			}
		} finally {
			rlock.unlock
		}

		return mapped
	}

	/** 
	 * Returns the first instance of a space with the specified SpaceID.
	 * 
	 * @param spaceID the identifier to retrieve.
	 * @return the space instance of {@code null} if none.
	 */
	def getSpace(spaceID : SpaceID) : Space {
		var description : SpaceDescription
		val rlock = getLock.readLock
		rlock.lock
		try {
			description = sharedStructure.get(spaceID.ID)
		} finally {
			rlock.unlock
		}
		if (description !== null) {
			return description.ensureSpaceInstance(this)
		}
		return null
	}

	/** Add listener on the space repository changes.
	 *
	 * <p>This function is thread-safe.
	 * 
	 * @param listener the listener to be added.
	 */
	def addSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		this.listeners.add(typeof(SpaceRepositoryListener), listener)
	}

	/** Remove listener on the space repository changes.
	 *
	 * <p>This function is thread-safe.
	 * 
	 * @param listener the listener to be removed.
	 */
	def removeSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		this.listeners.remove(typeof(SpaceRepositoryListener), listener)
	}

	/** 
	 * Notifies the listeners on the space creation.
	 *
	 * <p>This function is thread-safe.
	 * 
	 * @param space the created space.
	 * @param isLocalCreation indicates if the creation of the space was initiated on the current kernel.
	 */
	protected def fireSpaceAdded(^space : Space, isLocalCreation : boolean) {
		this.listeners.notifyListeners(typeof(SpaceRepositoryListener)) [
			spaceCreated(^space, isLocalCreation)
		]
	}

	/** 
	 * Notifies the listeners on the space destruction.
	 *
	 * <p>This function is thread-safe.
	 *
	 * @param space the removed space.
	 * @param isLocalDestruction indicates if the destruction of the space was initiated on the current kernel.
	 */
	protected def fireSpaceRemoved(^space : Space, isLocalDestruction : boolean) {
		this.listeners.notifyListeners(typeof(SpaceRepositoryListener)) [
			spaceDestroyed(^space, isLocalDestruction)
		]
	}

	override destroyableSpace(^space : Space) {
		var run : Runnable = [
			if (^space.isPseudoEmpty) {
				removeSpace(^space)
			}
		]
		val delay = this.contextsRepositoryConfig.spaceDestructionCallbackDelay
		this.executor.schedule(delay, TimeUnit::MILLISECONDS, run)
	}

	/** Replies if the given space was defined into the repository.
	 *
	 * @param id is the identifier of the space.
	 * @return {@code true} if the space exists into the repository, or {@code false} otherwise.
	 */
	@Pure
	def hasSpace(id : UUID) : boolean {
		if (id === null) {
			return false
		}
		val rlock = getLock.readLock
		rlock.lock
		try {
			return sharedStructure.containsKey(id)
		} finally {
			rlock.unlock
		}
	}

	/** 
	 * Description of a space.
	 * 
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	static class SpaceDescription implements Serializable, Comparable<SpaceDescription> {

		@Accessors
		val spaceId : SpaceID

		transient var ^space : Space

		new (id : SpaceID, ^space : Space) {
			this.spaceId = id
			this.^space = ^space
		}

		/** Replies the reference to the space.
		 *
		 * @return the reference to the space, or {@code null} if none.
		 */
		synchronized def getSpace : Space {
			return this.^space
		}

		/** Clear the reference to the space instance.
		 *
		 * @return the cleared reference.
		 * @since 0.12
		 */
		synchronized def clearSpaceReference : Space {
			val sp = this.^space
			this.^space = null
			return sp
		}

		/** Replies the space that is pointed out by the given description, and creates the space
		 * instance of it does not exist.
		 * 
		 * <p>This function is thread-safe.
		 *
		 * @return the space instance.
		 * @since 0.12
		 */
		package def ensureSpaceInstance(extension repository : SpaceRepository) : Space {
			var spaceToReturn : Space = null
			var fireAddition = false
			synchronized (this) {
				if (this.^space === null) {
					assert this.spaceId !== null
					this.^space = this.spaceId.spaceSpecification.spaceSpecificationInstance.create(this.spaceId)
					assert this.^space !== null
					this.^space.life(this)
					this.spaceId.life(this)
					fireAddition = true
				}
				spaceToReturn = this.^space
			}
			if (fireAddition) {
				assert spaceToReturn !== null
				spaceToReturn.fireSpaceAdded(false)
			}
			return spaceToReturn
		}

		def equals(obj : Object) : boolean {
			if (obj instanceof SpaceDescription) {
				return this.spaceId == obj.spaceId
			}
			return false
		}

		def hashCode : int {
			this.spaceId.hashCode
		}

		def compareTo(other : SpaceDescription) : int {
			if (other !== null) {
				return this.spaceId <=> other.spaceId
			}
			return Integer::MIN_VALUE
		}

	}

	/** 
	 * An injection module that is able to inject the default space instance into another space implementation.
	 * 
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.10
	 */
	private static class JustInTimeDefaultSpaceInjectionModule implements BQModule {

		val defaultSpace : OpenEventSpace

		package new (defaultSpace : OpenEventSpace) {
			assert defaultSpace !== null
			this.defaultSpace = defaultSpace
		}

		override configure(extension binder : Binder) {
			Key::get(typeof(OpenEventSpace), "defaultSpace").bind.toInstance(this.defaultSpace)
			Key::get(typeof(OpenEventSpace), typeof(DefaultSpace)).bind.toInstance(this.defaultSpace)
		}

	}

	/** 
	 * Key for a space specification.
	 * 
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.15.0 20250909-115749
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 * @since 0.11
	 */
	@Data
	static class SpaceSpecificationKey implements Serializable, Comparable<SpaceSpecificationKey> {

		val type : Class<? extends SpaceSpecification<?>>

		val isDefaultSpace : boolean

		override compareTo(o : SpaceSpecificationKey) : int {
			if (o === this) return 0
			if (o === null) return 1
			var cmp = this.isDefaultSpace <=> o.isDefaultSpace
			if(cmp !== 0) return cmp
			cmp = this.type.name <=> o.type.name
			return cmp
		}

		override equals(obj : Object) : boolean {
			if (this === obj) return true
			if (obj === null) return false
			if (this.class !== obj.class) return false
			val other = obj as SpaceSpecificationKey
			if (other.isDefaultSpace !== this.isDefaultSpace) return false
			if (type !== other.type) return false
			return true;
		}	

		override hashCode() : int {
			var prime = 31
			var result = prime * 0 + Boolean::hashCode(this.isDefaultSpace)
			result = prime * result + Objects::hashCode(this.type.name)
			return result
		}

	}

}

/** 
 * Listener on events related to the space repository.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
interface SpaceRepositoryListener extends EventListener {

		/** 
		 * Invoked when the space is added.
		 * 
		 * @param space reference to the created space.
		 * @param isLocalCreation indicates if the creation of the space was initiated on the current kernel.
		 */
	def spaceCreated(^space : Space, isLocalCreation : boolean)

	/** 
	 * Invoked when the space is destroyed.
	 * 
	 * @param space reference to the destroyed space.
	 * @param isLocalDestruction indicates if the destruction of the space was initiated on the current kernel.
	 */
	def spaceDestroyed(^space : Space, isLocalDestruction : boolean)

}

/** Factory for a space event emitter.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.7.0
 */
interface SpaceRepositoryListenerFactory {

	def create(contextID : UUID, defaultSpace : EventSpace, logger : Logger) : SpaceRepositoryListener

}
