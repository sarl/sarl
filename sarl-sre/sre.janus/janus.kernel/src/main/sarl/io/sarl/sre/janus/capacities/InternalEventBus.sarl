/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.capacities

import io.sarl.lang.core.Event
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.OutParameter
import io.sarl.sre.janus.skills.internal.EventBus
import java.util.List
import java.util.function.BooleanSupplier

/**
 * Capacity that provides an event bus to notify the different components of an agent.
 * 
 * <p><strong>This capacity is provided by the SRE kernel, not SARL.</strong>
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
capacity InternalEventBusCapacity {

	/** 
	 * Register the given object on the event bus for receiving any event.
	 * 
	 * <p>If the filter is provided, it will be used for determining if the given behavior accepts a specific event.
	 * If the filter function replies {@code true} for a specific event as argument, the event is fired in the
	 * behavior context. If the filter function replies {@code false}, the event is not fired in the behavior context.
	 * 
	 * @param listener the listener on the SARL events.
	 * @param filter the filter function.
	 * @param callback function which is invoked just after the first registration of the object. It could be {@code null}.
	 * @since 0.5
	 */
	def registerEventBusListener(listener : Object, filter : (Event)=>boolean = null, callback : (Object) => void = null)

	/** 
	 * Unregister the given object on the event bus for receiving any event.
	 * 
	 * @param listener the listener on the SARL events.
	 * @param callback function which is invoked just before the object is unregistered.
	 * @since 0.5
	 */
	def unregisterEventBusListener(listener : Object, callback : (Object)=>void = null)

	/** 
	 * Unregister the listeners of the given type on the event bus for receiving any event.
	 * 
	 * @param listenerType the type of the listeners on the SARL events.
	 * @param callback function which is invoked just before the object is unregistered.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 * @since 0.7
	 */
	def unregisterEventBusListener(listenerType : Class<?>, callback : (Object)=>boolean = null)

	/** Fire the given event into the agent context, and wait for the execution of all the event handlers.
	 *
	 * <p>This function does not set the event's source if it is not already set.
	 *
	 * <p>All the exceptions thrown by the event handlers are gathered and fired into a single exception after
	 * all the event handlers have been executed or failed.
	 *
	 * <p>The events that are received during the execution of this function treated in the normal way, i.e. associated
	 * event handlers are run.
	 *
	 * <p>This function considers the agent's state for determining of the event should be fired or not.
	 * In other words, the given event may be fired or buffered depending on the event buffering flag. 
	 * 
	 * @param event the event to fire.
	 * @param thrownExceptions indicates if any exception, which occurs into the event handler should be thrown outside this function.
	 *     If {@code true}, an exception is thrown outside and should be catch. If {@code false}, the exceptions are logging out
	 *     to the agent's logger, and never thrown outside this function.
	 * @param forceEventHandlerExecution indicates if the event handler execution must be forced even if the event
	 *     gathering feature is activated. Give a {@code true} value with caution. 
	 * @param listener the sole receiver of the event. If {@code null}, all the listeners on the event bus will
	 *     receive the event. If not {@code null}, only the given listener will receive the event.
	 * @since 0.12
	 */
	def fireEventAndWait(^event : Event, thrownExceptions : boolean, forceEventHandlerExecution : boolean, listener : Object)

	/** Fire the given event into the agent context, and wait for the execution of all the event handlers.
	 * 
	 * <p>This function does not set the event's source if it is not already set.
	 * 
	 * <p>All the exceptions thrown by the event handlers are gathered and fired into a single exception after
	 * all the event handlers have been executed or failed.
	 *
	 * <p>The events that are received during the execution of this function treated in the normal way, i.e. associated
	 * event handlers are run.
	 *
	 * <p>This function considers the agent's state for determining of the event should be fired or not.
	 * In other words, the given event may be fired or buffered depending on the event buffering flag. 
	 * 
	 * @param event the event to fire.
	 * @param thrownExceptions indicates if any exception, which occurs into the event handler should be thrown outside this function.
	 *     If {@code true}, an exception is thrown outside and should be catch. If {@code false}, the exceptions are logging out
	 *     to the agent's logger, and never thrown outside this function.
	 * @since 0.12  
	 */
	def fireEventAndWait(^event : Event, thrownExceptions : boolean)

	/** Fire the given event into the agent context, and wait for the execution of all the event handlers.
	 * 
	 * <p>This function does not set the event's source if it is not already set.
	 * 
	 * <p>All the exceptions thrown by the event handlers are gathered and fired into a single exception after
	 * all the event handlers have been executed or failed.
	 *
	 * <p>The events that are received during the execution of this function are gathered and replied.
	 * 
	 * <p>This function does not considered the agent's state for determining of the event should be fired.
	 * In other words, the given event is always fired, whatever the agent's state or if the event buffering
	 * was turned on.
	 *
	 * <p>The event buffering is turned off at the return of this function.
	 * 
	 * @param event the event to fire.
	 * @param thrownExceptions indicates if any exception, which occurs into the event handler should be thrown outside this function.
	 *     If {@code true}, an exception is thrown outside and should be catch. If {@code false}, the exceptions are logging out
	 *     to the agent's logger, and never thrown outside this function.
	 * @param bufferedEvents the events that were received during the execution of this function. These events are not fired into the agent context yet.
	 *     The pairs are composed by the event, and the optional listener that is supposed to receive the event.
	 * @param beforeEventFiringHandler that is invoked just before the firing of the event. If {@code null}, it is ignore.
	 * @param beforeReturnHandler this is invoked just before the function return and the event buffering is turn off.
	 * @return the value returned by {@code beforeReturn} or {@code true} if {@code beforeReturn} is {@code null}.
	 * @since 0.12  
	 */
	def fireEventAndWaitWithEventGathering(^event : Event, thrownExceptions : boolean,
		bufferedEvents : OutParameter<List<Pair<Event, Object>>>,
		beforeEventFiringHandler : () => void,
		beforeReturnHandler : BooleanSupplier) : boolean

	/** Fire the given event into the agent context, and do not wait for the termination of the event handlers.
	 * 
	 * <p>This function does not set the event's source if it is not already set.
	 *
	 * <p>Any exception thrown by an event handler is catch by the associated thread.
	 *
	 * <p>This function considers the agent's state for determining of the event should be fired or not.
	 * In other words, the given event may be fired or buffered depending on the event buffering flag. 
	 * 
	 * @param event the event to fire.
	 */
	def fireEvent(^event : Event)

	/** Fire the given event into the agent context, and do not wait for the termination of the event handlers.
	 * 
	 * <p>This function does not set the event's source if it is not already set.
	 *
	 * <p>Any exception thrown by an event handler is catch by the associated thread.
	 *
	 * <p>This function considers the agent's state for determining of the event should be fired or not.
	 * In other words, the given event may be fired or buffered depending on the event buffering flag. 
	 * 
	 * @param event the event to fire.
	 * @param listener the sole receiver of the event. If {@code null}, all the listeners on the event bus will
	 *     receive the event. If not {@code null}, only the given listener will receive the event.
	 * @since 0.12
	 */
	def fireEvent(^event : Event, listener : Object)

	/**  Replies the event listener linked to the owner of this capacity.
	 * 
	 * @return the event listener of the owner of this skill.
	 */
	def getAssociatedEventBusListener : InformedEventListener

	/** 
	 * Replies the registered listeners.
	 *
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @return the registered listeners.
	 */
	def getRegisteredEventBusListeners(type : Class<T>) : ConcurrentCollection<T> with T

	/** Replies the backend event bus.
	 * 
	 * @return the event bus instance.
	 */
	def getEventBus : EventBus

	/** Replies the backend event bus.
	 * 
	 * @param type the expected type of the event bus.
	 * @return the event bus instance.
	 * @since 0.10
	 */
	def getEventBus(type : Class<T>) : T with T extends EventBus

}
