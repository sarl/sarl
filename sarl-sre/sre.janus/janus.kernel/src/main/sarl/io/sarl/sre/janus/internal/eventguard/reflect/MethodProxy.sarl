/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard.reflect

import java.lang.reflect.Method
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * It stores the information related to a given method.
 * 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.14
 */
class MethodProxy {

	/** Java not-static method to be invoked for evaluating the guard.
	 */
	@Accessors
	val guardMethod : Method

	/** 
	 * Creates a new method identifier according to the name and the list of parameter types of the considered method.
	 * 
	 * @param method
	 * - the name of the guard evaluation method.
	 */
	new (method : Method) {
		this.guardMethod = method
	}

	override equals(obj : Object) : boolean {
		if (obj !== null) {
			if (obj instanceof MethodProxy) {
				return this.guardMethod == obj.guardMethod
			}
		}
		return false;
	}
	
	override hashCode : int {
		if (this.guardMethod === null) 0 else this.guardMethod.hashCode
	}

	override toString : String {
		this.guardMethod.name
	}

	/** Replies if the given event matches the generic types.
	 *
	 * @param event the event to test.
	 * @return {@code true} if the event matches the generic types.
	 */
	def matchesGenericTypes(^event : Object) : boolean {
		return true
	} 

}
