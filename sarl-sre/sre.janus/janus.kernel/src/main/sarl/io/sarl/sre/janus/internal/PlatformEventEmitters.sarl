/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal

import io.sarl.api.core.AgentKillFailure
import io.sarl.api.core.AgentKilled
import io.sarl.api.core.AgentSpawnFailure
import io.sarl.api.core.AgentSpawned
import io.sarl.api.core.AgentTask
import io.sarl.api.core.Behaviors
import io.sarl.api.core.ContextJoined
import io.sarl.api.core.ContextLeft
import io.sarl.api.core.Logging
import io.sarl.api.core.MemberJoined
import io.sarl.api.core.MemberLeft
import io.sarl.api.core.ParticipantJoined
import io.sarl.api.core.ParticipantLeft
import io.sarl.api.core.SpaceCreated
import io.sarl.api.core.SpaceDestroyed
import io.sarl.api.core.TaskFailure
import io.sarl.api.core.spaces.Participant
import io.sarl.api.core.spaces.SpaceParticipantListener
import io.sarl.api.core.spaces.SpaceParticipantListenerFactory
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.AtomicSkillReference
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.context.InternalContextMembershipListener
import io.sarl.sre.janus.services.context.InternalContextMembershipListenerFactory
import io.sarl.sre.janus.services.context.SpaceRepositoryListener
import io.sarl.sre.janus.services.context.SpaceRepositoryListenerFactory
import io.sarl.sre.janus.services.lifecycle.ContextReference
import io.sarl.sre.janus.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.janus.skills.bic.FailureListener
import io.sarl.sre.janus.skills.bic.FailureListenerFactory
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.lang.ref.WeakReference
import java.text.MessageFormat
import java.util.UUID
import java.util.logging.Logger

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*

/** Emit the space platform events.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SpaceEventEmitter implements SpaceRepositoryListener {

	val logger : Logger

	val defaultSpace : EventSpace
	
	new (contextID : UUID, defaultSpace : EventSpace, logger : Logger) {
		this.defaultSpace = defaultSpace
		this.logger = logger
	}

	override spaceCreated(^space : Space, isLocalCreation : boolean) {
		this.logger.config [MessageFormat::format(Messages::SpaceEventEmitter_0, ^space.spaceID)]
		// Send the event in the default space of the context.
		if (isLocalCreation && this.defaultSpace !== null) {
			var spaceId = this.defaultSpace.spaceID
			var addr = new Address(spaceId, spaceId.contextID)
			// The first parameter is null because the event has an address.
			this.defaultSpace.emit(null, new SpaceCreated(addr, ^space.spaceID))
		}
	}

	override spaceDestroyed(^space : Space, isLocalDestruction : boolean) {
		this.logger.config[MessageFormat::format(Messages::SpaceEventEmitter_1, ^space.spaceID)]
		// Send the event in the default space of the context.
		if (isLocalDestruction && this.defaultSpace !== null) {
			var spaceId = this.defaultSpace.spaceID
			var addr = new Address(spaceId, spaceId.contextID)
			// The first parameter is null because the event has an address.
			this.defaultSpace.emit(null, new SpaceDestroyed(addr, ^space.spaceID))
		}
	}

}

/** Factory for a space event emitter.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
class SpaceEventEmitterFactory implements SpaceRepositoryListenerFactory {

	def create(contextID : UUID, defaultSpace : EventSpace, logger : Logger) : SpaceRepositoryListener {
		new SpaceEventEmitter(contextID, defaultSpace, logger)
	}

}

/** Emit the space participant platform events.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SpaceParticipantEventEmitter implements SpaceParticipantListener {

	val logger : Logger

	var defaultSpace : EventSpace

	new (defaultSpace : EventSpace, logger : Logger) {
		this.defaultSpace = defaultSpace
		this.logger = logger
	}

	override participantJoined(participant : Participant) {
		this.logger.config[MessageFormat::format(Messages::SpaceParticipantEventEmitter_0, participant.address)]
		// Send the event in the default space of the context.
		if (this.defaultSpace !== null) {
			var participantAddr = participant.address
			val participantId = participantAddr.ID
			var addr = new Address(this.defaultSpace.spaceID, participantId)
			// a) The first parameter is null because the event has an address.
			// b) The scope is defined for avoiding the participant to receive the event.
			this.defaultSpace.emit(null,
				new ParticipantJoined(addr, participantAddr.spaceID)
			) [participantId != it.ID]
		}
	}

	override participantLeft(participant : Participant) {
		this.logger.config[MessageFormat::format(Messages::SpaceParticipantEventEmitter_1, participant.address)]
		// Send the event in the default space of the context.
		if (this.defaultSpace !== null) {
			var participantAddr = participant.address
			val participantId = participantAddr.ID
			var addr = new Address(this.defaultSpace.spaceID, participantAddr.ID)
			// a) The first parameter is null because the event has an address.
			// b) The scope is defined for avoiding the participant to receive the event.
			this.defaultSpace.emit(null,
				new ParticipantLeft(addr, participantAddr.spaceID)
			) [participantId != it.ID]
		}
	}
	
	def setDefaultSpace(^space : EventSpace) {
		this.defaultSpace = ^space
	}
	
}

/** Factory for a space participant event emitter.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SpaceParticipantEventEmitterFactory implements SpaceParticipantListenerFactory {

	def create(defaultSpace : EventSpace, logger : Logger) : SpaceParticipantListener {
		new SpaceParticipantEventEmitter(defaultSpace, logger)
	}

}


/** Emit the agent platform events.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class AgentEventEmitter implements LifecycleServiceListener {

	val logger : Logger

	new (logger : Logger) {
		this.logger = logger
	}

	override agentSpawned(spawningAgent : UUID, parent : Context, agentType : Class<? extends Agent>,
		spawnedAgent : Agent, initializationParameters : Object[]) {
		val agentId = spawnedAgent.ID
		this.logger.config[MessageFormat::format(Messages::AgentEventEmitter_0, agentId)]
		 // Send the event in the default space.
		val defSpace = parent.defaultSpace
		assert defSpace !== null, "A context does not contain a default space"
		val source = new Address(defSpace.spaceID, spawningAgent ?: parent.ID)
		assert source !== null
		val ^event = new AgentSpawned(source, agentId, agentType.name)
		// The first parameter is null because the event has an address.
		defSpace.emit(null, ^event) [agentId != it.ID]
	}
	
	override agentDestroyed(^agent : Agent, outerContexts : ConcurrentCollection<ContextReference>,
		terminationCause : Object) {
		this.logger.config[MessageFormat::format(Messages::AgentEventEmitter_1, ^agent.ID)]
		val size = outerContexts.size
		val spaces = <EventSpace>newArrayOfSize(size)
		val events = <AgentKilled>newArrayOfSize(size)
		var i = 0
		for (contextReference : outerContexts) {
			val ^event = new AgentKilled(
				contextReference.addressInDefaultSpace,
				^agent.class.name,
				terminationCause)
			spaces.set(i, contextReference.defaultSpace)
			events.set(i, ^event)
			i++
		} 
		for (i = 0; i < size; i++) {
			// The first parameter is null because the event has an address.
			spaces.get(i).emit(null, events.get(i)) [it.ID != ^agent.ID]
		}
	}
	
	override agentSpawnFailure(spawningAgent : UUID, parent : Context, agentType : Class<? extends Agent>, cause : Object) {
		val dftSpc = parent.defaultSpace
		val adr = new Address(dftSpc.spaceID, spawningAgent)
		val ^event = new AgentSpawnFailure(
			adr,
			parent.ID,
			agentType,
			cause)
		dftSpc.emit(null, ^event) [it.ID == spawningAgent]
	}

	override agentKillFailure(killingAgent : UUID, innerContext : ContextReference, cause : Object) {
		val ^event = new AgentKillFailure(
			innerContext.addressInDefaultSpace,
			cause)
		innerContext.defaultSpace.emit(null, ^event) [it.ID == killingAgent]
	}
	
}

/** Emit the context member platform events.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ContextMemberEventEmitter implements ExternalContextMemberListener {

	val logger : Logger

	/** Constructors.
	 *
	 * @param logger the logger to use.
	 */
	new (logger : Logger) {
		this.logger = logger
	}

	override memberJoined(joinedContext : AgentContext, defaultSpace : SpaceID,
		joiningAgentID : UUID, joiningAgentType : String) {
		val contextID = joinedContext.ID
		this.logger.config [
			MessageFormat::format(Messages::ContextMemberEventEmitter_2, joiningAgentID, contextID)
		]
		val defSpace = joinedContext.defaultSpace
		assert defaultSpace == defSpace.spaceID
		val source = new Address(defaultSpace, joinedContext.ID)
		// The first parameter is null because the event has an address.
		defSpace.emit(null, new MemberJoined(source, joiningAgentID, joiningAgentType)) [
			it.ID != joiningAgentID
		]
	}

	override memberLeft(leftContext : AgentContext, defaultSpace : SpaceID, leftMemberID : UUID,
		agentType : String) {
		val contextID = leftContext.ID
		this.logger.config [
			MessageFormat::format( Messages::ContextMemberEventEmitter_3,
				leftMemberID, contextID)]
		val defSpace = leftContext.defaultSpace
		assert defaultSpace == defSpace.spaceID
		val source = new Address(defaultSpace, leftContext.ID)
		// The first parameter is null because the event has an address.
		defSpace.emit(null, new MemberLeft(source, leftMemberID, agentType)) [
			it.ID != leftMemberID
		]
	}

}

/** Emit the context member platform events.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
class SubHolonContextEventEmitter implements InternalContextMembershipListener {

	val owner : WeakReference<Agent>

	var behaviorSkill : AtomicSkillReference

	var loggingSkill : AtomicSkillReference

	val factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>

	/** Constructors.
	 * 
	 * @param owner the owner of this emitter.
	 * @param factories provider of factories tool.
	 * @param agentLevelInjector the dynamic injector at the agent level.
	 */
	new (owner : Agent, factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>) {
		this.owner = new WeakReference(owner)
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
	}

	private def getBehaviors : Behaviors {
		var o = this.owner.get
		if (o !== null) {
			if (this.behaviorSkill?.get === null) {
				this.behaviorSkill = SREutils::getInternalSkillReference(o, typeof(Behaviors))
			}
			return SREutils::castInternalSkillReference(o, this.behaviorSkill, typeof(Behaviors))
		}
		return null
	}

	private def getLogging : Logging {
		var o = this.owner.get
		if (o !== null) {
			if (this.loggingSkill?.get === null) {
				this.loggingSkill = SREutils::getInternalSkillReference(o, typeof(Logging))
			}
			return SREutils::castInternalSkillReference(o, this.loggingSkill, typeof(Logging))
		}
		return null
	}
	
	override contextJoined(futureContext : UUID, futureContextDefaultSpaceID : UUID) {
		var o = this.owner.get
		if (o !== null) {
			this.logging.debug[MessageFormat::format(Messages::ContextMemberEventEmitter_0, o.ID, futureContext)]
			var evt = new ContextJoined(futureContext, futureContextDefaultSpaceID)
			evt.source = o.getAgentLife(this.factories, this.agentLevelInjector).addressInInnerDefaultSpace
			this.behaviors?.wake(evt)
		}
	}

	override contextLeft(contextID : UUID) {
		var o = this.owner.get
		if (o !== null) {
			this.logging.debug[MessageFormat::format(Messages::ContextMemberEventEmitter_1, o.ID, contextID)]
			var evt = new ContextLeft(contextID)
			evt.source = o.getAgentLife(this.factories, this.agentLevelInjector).addressInInnerDefaultSpace
			this.behaviors?.wake(evt)
		}
	}

}

/** 
 * Factory of the listeners on events related to the membership within a context.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
class SubHolonContextEventEmitterFactory implements InternalContextMembershipListenerFactory {

	val factories : Provider<Factories>

	val agentTraitInitializer : Provider<ConfigurableAgentInjector>

	@Inject
	new (factories : Provider<Factories>, agentTraitInitializer : Provider<ConfigurableAgentInjector>) {
		this.factories = factories
		this.agentTraitInitializer = agentTraitInitializer
	}

	override create(owner : Agent) : InternalContextMembershipListener {
		new SubHolonContextEventEmitter(owner, this.factories, this.agentTraitInitializer)
	}

}

/** 
 * Events related to agent tasks' failures.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
class TaskAgentFailureEventEmitter implements FailureListener {

	val owner : WeakReference<Agent>

	var behaviorSkill : AtomicSkillReference

	new (owner : Agent) {
		this.owner = new WeakReference(owner)
	}

	private def getBehaviors : Behaviors {
		var o = this.owner.get
		if (o !== null) {
			if (this.behaviorSkill?.get === null) {
				this.behaviorSkill = SREutils::getInternalSkillReference(o, typeof(Behaviors))
			}
			return SREutils::castInternalSkillReference(o, this.behaviorSkill, typeof(Behaviors))
		}
		return null
	}

	override taskFailed(task : AgentTask, cause : Throwable) {
		val ^event = new TaskFailure(task, cause)
		this.behaviors?.wake(^event)
	}

}

/** 
 * Factory of listener for events related to agent tasks' failures.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class TaskAgentFailureEventEmitterFactory implements FailureListenerFactory {

	override create(owner : Agent) : FailureListener {
		new TaskAgentFailureEventEmitter(owner)
	}

}

