/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.services.executor.policies

import io.sarl.sre.janus.IssueCodes
import io.sarl.sre.janus.services.executor.tasks.EarlyExitException
import java.text.MessageFormat
import java.util.concurrent.CancellationException
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import javax.inject.Singleton

/** 
 * A handler for rejected tasks that log a warning on the platform logger.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@Singleton
abstract class AbstractLoggingThreadExecutorPolicy extends AbstractThreadExecutorPolicy {

	protected val logger : Logger

	/** 
	 * @param logger the logging service that must be used for output the errors.
	 */
	new (logger : Logger) {
		assert logger !== null
		this.logger = logger
	}

	/** Log the given error.
	 *
	 * @param exception the error.
	 * @param taskId the identifier of the task.
	 * @param taskName the name of the task.
	 */
	protected final def log(exception : Throwable, taskId : String, taskName : String) {
		assert exception !== null
		if (exception instanceof EarlyExitException) {
			return
		}
		var cause = exception
		while (cause.cause !== null && cause.cause !== cause) {
			cause = cause.cause
		}
		var record : LogRecord
		if (cause instanceof EarlyExitException) {
			return
		}
		if (cause instanceof CancellationException || exception instanceof CancellationException) {
			// Avoid too much processing if the error could not be logged
			if (!this.logger.isLoggable(Level::FINEST)) {
				return
			}
			record = new LogRecord(Level::FINEST, MessageFormat::format(Messages::AbortPolicy_0,
				IssueCodes::TASK_CANCEL, taskId, taskName))
		} else if (cause instanceof InterruptedException || exception instanceof InterruptedException) {
			// Avoid too much processing if the error could not be logged
			if (!this.logger.isLoggable(Level::FINEST)) {
				return
			}
			record = new LogRecord(Level::FINEST, MessageFormat::format(Messages::AbortPolicy_1,
				IssueCodes::TASK_INTERRUPT, taskId, taskName))
		} else {
			// Avoid too much processing if the error could not be logged
			if (!this.logger.isLoggable(Level::SEVERE)) {
				return
			}
			record = new LogRecord(Level::SEVERE,
				MessageFormat::format(Messages::AbortPolicy_2, IssueCodes::TASK_ERROR, cause.localizedMessage, taskId,
				taskName))
		}

		record.setThrown(cause)

		val trace = cause.stackTrace
		if (trace !== null && trace.length > 0) {
			val elt = trace.get(0)
			assert elt !== null
			record.sourceClassName = elt.className
			record.sourceMethodName = elt.methodName
		}

		this.logger.log(record)
	}

}
