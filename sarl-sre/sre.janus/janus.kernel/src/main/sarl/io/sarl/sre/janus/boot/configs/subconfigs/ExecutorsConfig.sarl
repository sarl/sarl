/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.boot.configs.subconfigs

import io.bootique.BQModuleMetadata
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.di.BQModule
import io.bootique.di.Binder
import io.bootique.meta.application.OptionMetadata
import io.sarl.apputils.bootiqueapp.config.Level
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.janus.boot.configs.subconfigs.ExecutorsConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the parallel executors.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.8
 */
@BQConfig("Configuration of the executor service")
class ExecutorsConfig {

	/** 
	 * Prefix for the configuration entries of the parallel execution configuration.
	 */
	public static val PREFIX : String = ServicesConfig::PREFIX + ".executors"

	/** 
	 * Name of property for the maximal number of threads to keep in the pool.
	 * 
	 * @see #MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE
	 */
	public static val MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME = PREFIX + ".maxThreads"
	
	/** 
	 * Indicates the maximal number of threads to keep in the pool.
	 * 
	 * @see #MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME
	 */
	public static val MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE = 512

	/** 
	 * Name of the property for the minimal number of threads to keep in the pool, even if they are idle.
	 * 
	 * @see #MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE
	 */
	public static val MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME = PREFIX + ".minThreads"

	/** 
	 * Indicates the minimal number of threads to keep in the pool, even if they are idle.
	 * 
	 * @see #MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME
	 */
	public static val MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE = 1

	/** 
	 * Name of the property for the duration for keeping the iddle threads alive (in seconds).
	 * 
	 * @since 0.5.0
	 * @see #THREAD_KEEP_ALIVE_DURATION_VALUE
	 */
	public static val THREAD_KEEP_ALIVE_DURATION_NAME = PREFIX + ".keepAliveDuration"

	/** 
	 * Indicates the duration for keeping the iddle threads alive (in seconds).
	 * 
	 * @since 0.5.0
	 * @see #THREAD_KEEP_ALIVE_DURATION_NAME
	 */
	public static val THREAD_KEEP_ALIVE_DURATION_VALUE = 60

	/** 
	 * Name of the property for the numbers of seconds that the kernel is waiting for thread terminations before timeout.
	 * 
	 * @see #THREAD_TIMEOUT_VALUE
	 */
	public static val THREAD_TIMEOUT_NAME = PREFIX + ".threadTimeout"

	/** 
	 * Indicates the numbers of seconds that the kernel is waiting for thread terminations before timeout.
	 * 
	 * @see #THREAD_TIMEOUT_NAME
	 */
	public static val THREAD_TIMEOUT_VALUE = 30

	/** 
	 * Name of the property for the default verbosity level of the executor's internal errors.
	 * 
	 * @see #INTERNAL_ERROR_VERBOSE_LEVEL_VALUE
	 */
	public static val INTERNAL_ERROR_VERBOSE_LEVEL_NAME = PREFIX + ".internalErrorVerboseLevel"

	/** 
	 * The default verbosity level of the executor's internal errors.
	 * 
	 * @see #INTERNAL_ERROR_VERBOSE_LEVEL_NAME
	 */
	public static val INTERNAL_ERROR_VERBOSE_LEVEL_VALUE = Level::ALL

	/** 
	 * Name of the property that indicates if the executor service is purging the thread queues periodically.
	 * 
	 * @see #PERIODIC_THREAD_POOL_PURGE_VALUE
	 * @since 0.11
	 */
	public static val PERIODIC_THREAD_POOL_PURGE_NAME = PREFIX + ".periodicThreadPoolPurge"

	/** 
	 * The default flag that indicates if the executor service is purging the thread queues periodically.
	 * 
	 * @see #PERIODIC_THREAD_POOL_PURGE_NAME
	 * @since 0.11
	 */
	public static val PERIODIC_THREAD_POOL_PURGE_VALUE = true

	/** 
	 * Name of the flag for the fact to map the number of threads of the executor service to the number of available processors.
	 * 
	 * @see #MAP_TO_AVAILABLE_PROCESSORS_VALUE
	 * @since 0.14
	 */
	public static val MAP_TO_AVAILABLE_PROCESSORS_NAME = PREFIX + ".mapToAvailableProcessors"

	/** 
	 * Default activation flag for the fact to map the number of threads of the executor service to the number of available processors.
	 * 
	 * @see #MAP_TO_AVAILABLE_PROCESSORS_NAME
	 * @since 0.14
	 */
	public static val MAP_TO_AVAILABLE_PROCESSORS_VALUE = false

	var internalErrorVerboseLevel : Level

	var maxThreads : int = MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE

	@Accessors(PUBLIC_GETTER)
	var minThreads : int = MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE

	@Accessors(PUBLIC_GETTER)
	var keepAliveDuration : int = THREAD_KEEP_ALIVE_DURATION_VALUE

	@Accessors(PUBLIC_GETTER)
	var timeout : int = THREAD_TIMEOUT_VALUE

	@Accessors(PUBLIC_GETTER)
	var periodicThreadPoolPurge : boolean = PERIODIC_THREAD_POOL_PURGE_VALUE

	@Accessors(PUBLIC_GETTER)
	var mapToAvailableProcessors : boolean = MAP_TO_AVAILABLE_PROCESSORS_VALUE

	/** Change the maximum number of threads that could be used by the executor service.
	 *
	 * @param maxThreads the max number.
	 */
	@BQConfigProperty("Maximum number of threads that could be used by the executor service")
	def setMaxThreads(maxThreads : int) : void {
		if (maxThreads > 0) {
			this.maxThreads = maxThreads;
		} else {
			this.maxThreads = 1
		}
	}

	/** Replies the maximum number of threads that could be used by the executor service.
	 * 
	 * @return  the max number.
	 */
	def getMaxThreads : int {
		if (this.maxThreads >0) {
			return this.maxThreads.intValue
		}
		return Integer::MAX_VALUE
	}

	/** Replies if the maximum number of threads is specified.
	 * 
	 * @return {@code true} if the maximum number of threads is specified. Otherwise {@code false}.
	 */
	def hasMaxThreadsSpecified : boolean {
		this.maxThreads !== 0
	}

	/** Change the minimum number of threads that could be used by the executor service.
	 * 
	 * @param minThreads the min number.
	 */
	@BQConfigProperty("Minimum number of threads that could be used by the executor service")
	def setMinThreads(minThreads : int) {
		if (minThreads > 0) {
			this.minThreads = minThreads;
		} else {
			this.minThreads = 1
		}
	}

	/** Change the duration during which a thread is still in memory without being used for another task.
	 * 
	 * @param duration the duration of an iddle thread.
	 */
	@BQConfigProperty("Duration during which a thread is iddle before being destroyed")
	def setKeepAliveDuration(duration : int) {
		if (duration >= 0) {
			this.keepAliveDuration = duration;
		} else {
			this.keepAliveDuration = 0
		}
	}

	/** Change the timeout duration for waiting the termination of the threads.
	 * 
	 * @param duration the timeout duration.
	 */
	@BQConfigProperty("Duration before assuming a timeout for the threads' termination")
	def setTimeout(duration : int) {
		if (duration >= 0) {
			this.timeout = duration;
		} else {
			this.timeout = 0
		}
	}

	/** 
	 * Change the verbosity level of the internal errors.
	 * 
	 * @param level the verbose level.
	 */
	@BQConfigProperty("Verbosity level for the internal errors within the executor service.")
	def setInternalErrorVerboseLevel(level : Level) {
		this.internalErrorVerboseLevel = level
	}
	
	/** 
	 * Replies the verbosity level of the internal errors.
	 * 
	 * @return the verbose level
	 */
	def getInternalErrorVerboseLevel : Level {
		if (this.internalErrorVerboseLevel === null) {
			this.internalErrorVerboseLevel = INTERNAL_ERROR_VERBOSE_LEVEL_VALUE
		}
		return this.internalErrorVerboseLevel
	}

	/** 
	 * Change the verbosity level of the internal errors.
	 * 
	 * @param purge indicates if the executor service is purging the thread pools periodically.
	 * @since 0.11
	 */
	@BQConfigProperty("Indicates if the executor service is purging the thread pools periodically.")
	def setPeriodicThreadPoolPurge(purge : boolean) {
		this.periodicThreadPoolPurge = purge
	}

	/** 
	 * Change the flag that indicates if the executor service must be mapped to the available processors.
	 * 
	 * @param enable is {@code true} if the executor service maps the number of threads to the available processors.
	 * @since 0.14
	 */
	@BQConfigProperty("Indicates if the executor service maps the number of threads to the number of available processors.")
	def setMapToAvailableProcessors(enable : boolean) {
		this.mapToAvailableProcessors = enable
	}

	/** 
	 * Change the flag that indicates if the task queue of the executor service is implementing a rendez-vous between
	 * the thread that is submitting the task and the thread that is running the task. In other words,
	 * a rendez-vous mechanism forces the submitting thread to wait for a thread that is able to run the task.
	 * 
	 * @param enableRendezVous is {@code true} if the executor service must implements a rendez-vous between the threads
	 * @since 0.14
	 */
	@BQConfigProperty("Indicates if the executor service forces a task submitting thread to wait for a thread that is able to run the task.")
	def setRendezvousTaskQueue(enableRendezVous : boolean) {
		this.rendezvousTaskQueue = enableRendezVous
	}

}

/** 
 * Module for the parallel executors' configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class ExecutorsConfigModule implements BQModule {

	static val MAXTHREADS_OPTION = "max-threads"

	static val MINTHREADS_OPTION = "min-threads"

	static val KEEPALIVE_OPTION = "keep-alive"

	static val THREADTIMEOUT_OPTION = "thread-timeout"

	static val INTERNALERRORLOGLEVEL_OPTION = "internal-error-log-level"

	static val THREADPURGE_OPTION = "thread-purge"

	static val PROCESSORMAPPING_OPTION = "on-processors"

	override configure(binder : Binder) : void {
		VariableDecls::extend(binder).declareVar(MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(MAXTHREADS_OPTION,
				MessageFormat::format(Messages::ExecutorsConfigModule_0, MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE))
			.valueRequired(Messages::ExecutorsConfigModule_5)
			.build)
			.mapConfigPath(MAXTHREADS_OPTION, MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME)

		VariableDecls::extend(binder).declareVar(MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME)
		binder.extend.addOption(OptionMetadata::builder(MINTHREADS_OPTION,
			MessageFormat::format(Messages::ExecutorsConfigModule_1, MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE))
			.valueRequired(Messages::ExecutorsConfigModule_5)
			.build)
			.mapConfigPath(MINTHREADS_OPTION, MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME)

		VariableDecls::extend(binder).declareVar(THREAD_KEEP_ALIVE_DURATION_NAME)
		binder.extend.addOption(OptionMetadata::builder(KEEPALIVE_OPTION,
			MessageFormat::format(Messages::ExecutorsConfigModule_2, THREAD_KEEP_ALIVE_DURATION_VALUE))
			.valueRequired(Messages::ExecutorsConfigModule_6)
			.build)
			.mapConfigPath(KEEPALIVE_OPTION, THREAD_KEEP_ALIVE_DURATION_NAME)

		VariableDecls::extend(binder).declareVar(THREAD_TIMEOUT_NAME)
		binder.extend.addOption(OptionMetadata::builder(
			THREADTIMEOUT_OPTION,
				MessageFormat::format(Messages::ExecutorsConfigModule_3, THREAD_TIMEOUT_VALUE))
				.valueRequired(Messages::ExecutorsConfigModule_7)
				.build)
				.mapConfigPath(THREADTIMEOUT_OPTION, THREAD_TIMEOUT_NAME)

		VariableDecls::extend(binder).declareVar(INTERNAL_ERROR_VERBOSE_LEVEL_NAME)
		binder.extend.addOption(OptionMetadata::builder(
				INTERNALERRORLOGLEVEL_OPTION,
				MessageFormat::format(Messages::ExecutorsConfigModule_4, INTERNAL_ERROR_VERBOSE_LEVEL_VALUE.name.toLowerCase))
				.valueRequired(Messages::ExecutorsConfigModule_8)
				.build)
				.mapConfigPath(INTERNALERRORLOGLEVEL_OPTION, INTERNAL_ERROR_VERBOSE_LEVEL_NAME)

		VariableDecls::extend(binder).declareVar(PERIODIC_THREAD_POOL_PURGE_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(THREADPURGE_OPTION,
				MessageFormat::format(Messages::ExecutorsConfigModule_9, PERIODIC_THREAD_POOL_PURGE_VALUE.toString)).
				valueRequired(Messages::ExecutorsConfigModule_10).build).mapConfigPath(THREADPURGE_OPTION,
					PERIODIC_THREAD_POOL_PURGE_NAME)

		VariableDecls::extend(binder).declareVar(MAP_TO_AVAILABLE_PROCESSORS_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(PROCESSORMAPPING_OPTION,
				MessageFormat::format(Messages::ExecutorsConfigModule_11, MAP_TO_AVAILABLE_PROCESSORS_VALUE.toString)).
				valueRequired(Messages::ExecutorsConfigModule_10).build).mapConfigPath(PROCESSORMAPPING_OPTION,
			MAP_TO_AVAILABLE_PROCESSORS_NAME)
	}

}

/** Provider of the module for the parallel executors' configuration.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.9
 */
class ExecutorsConfigModuleProvider implements BQModuleProvider {

	override module : BQModule {
		return new ExecutorsConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(ExecutorsConfig))
	}
	
	override moduleBuilder : BQModuleMetadata.Builder {
		return BQModuleMetadata::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::ExecutorsConfigModuleProvider_0);
	}

}
