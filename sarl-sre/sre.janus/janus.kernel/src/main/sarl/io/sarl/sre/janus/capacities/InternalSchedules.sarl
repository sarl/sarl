/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.capacities

import io.sarl.api.core.AgentTask
import io.sarl.api.core.Schedules
import io.sarl.lang.core.Behavior
import java.util.Collection
import org.arakhne.afc.vmutil.json.JsonBuffer

/** 
 * Capacity for executing tasks with specific functions for the SRE platform.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.6
 */
capacity InternalSchedules extends Schedules {

	/** Finish the tasks associated to the given behavior.
	 * 
	 * @param behavior the behavior.
	 */
	def unregisterTasksForBehavior(^behavior : Behavior)

	/** Release any resource that is dedicated to the behavior itself.
	 * 
	 * @param behavior the behavior.
	 */
	def releaseInternalResources(^behavior : Behavior)

	/** Submit the given task for being run as soon as possible.
	 *
	 * @param task the task to run.
	 * @return the definition of the task reference.
	 * @since 0.11
	 */
	def executeAsap(task : Runnable) : AgentTask

	/**
	 * Submit tasks to the executor service and wait for the termination of all the tasks.
	 * This function ensures that the caller's thread is blocked until all the given tasks have been finished.
	 * 
	 * <p>According to the implementation of the service, the given tasks may be run in the same or separated thread
	 * than the one of the caller.
	 * 
	 * <p>If an exception occurs into the given task, the exception is thrown if {@code thrownExceptions}
	 * evaluates to {@code true}. If it is evaluates to {@code false}, the exception is logged.
	 * 
	 * @param task the task to submit.
	 * @param thrownExceptions indicates if the exceptions in the given tasks are thrown forward by this function.
	 * @since 0.11
	 */
	def executeBlockingTasks(task : Collection<Runnable>, thrownExceptions : boolean = false)

	/** Replies a Json representation of the internal thread executor's state.
	 * 
	 * @return the representation of the executor's state.
	 * @since 0.12
	 */
	def getExecutorServiceStateRepresentation : JsonBuffer

}
