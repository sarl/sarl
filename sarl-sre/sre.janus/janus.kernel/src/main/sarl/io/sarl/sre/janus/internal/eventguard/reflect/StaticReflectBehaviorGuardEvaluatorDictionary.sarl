/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard.reflect

import com.google.common.cache.CacheBuilder
import com.google.common.cache.LoadingCache
import com.google.common.collect.ImmutableMap
import com.google.common.collect.ImmutableSet
import com.google.common.reflect.TypeToken
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PerceptGuardEvaluator
import java.lang.reflect.Method
import java.util.Arrays
import java.util.Collection
import java.util.List
import java.util.Map
import java.util.Set
import java.util.TreeMap

/** 
 * Dictionary of all the statically defined {@code BehaviorGuardEvaluator} methods for a specific class.
 * 
 * <p>This class is thread-safe.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
final class StaticReflectBehaviorGuardEvaluatorDictionary {

	private new {
	}

	/** 
	 * Flattens a class's type hierarchy into a set of {@code Class} objects including all super-classes (transitively) and all interfaces implemented
	 * by these super-classes.
	 * 
	 * @param concreteClass the class you find the hierarchy
	 * @return the set of class in the hierarchy of the specififed class
	 */
	@Pure
	static def getFlattenHierarchy(concreteClass : Class<?>) : ImmutableSet<Class<?>> {
		FLATTEN_HIERARCHY_CACHE.getUnchecked(concreteClass)
	}

	/** 
	 * Flattens a class's type hierarchy into a set of {@code Class} objects including all super-classes (transitively) and all interfaces implemented
	 * by these super-classes.
	 * 
	 * @param concreteClass the class you find the hierarchy
	 * @return the set of class in the hierarchy of the specififed class
	 */
	@Pure
	static def getFlattenHierarchy(concreteClass : Class<? extends T>, expectedType : Class<T>) : ImmutableSet<Class<? extends T>> with T {
		val types : Object = FLATTEN_HIERARCHY_CACHE.getUnchecked(concreteClass)
		return types as ImmutableSet<Class<? extends T>>
	}

	/** Replies the declared methods for the guard evaluation into the given type.
	 *
	 * @param listenerType the type to explore.
	 * @return the declared methods for guard evaluation.
	 */
	@Pure
	static def getAnnotedMethodsPerEvent(listenerType : Class<?>) : Map<Class<? extends Event>, Collection<Method>> {
		PERCEPT_GUARD_EVALUATOR_METHOD_CACHE.getUnchecked(listenerType)
	}

	private static def getAnnotatedMethodMapOnDemand(
		concreteClass : Class<?>) : Map<Class<? extends Event>, Collection<Method>> {
		assert concreteClass !== null
		// TODO verify if it effectively explores the whole type hierarchy
		val typeHierarchy = concreteClass.exploreTypeHierarchy
		val supertypes = typeHierarchy.filter[!it.isInterface && typeof(Object) != it]

		val identifiers = new TreeMap

		// Traverse all methods of the whole inheritance hierarchy
		for (supertype : supertypes) {
			for (method : supertype.declaredMethods) {
				if (method.isAnnotationPresent(typeof(PerceptGuardEvaluator)) && !method.synthetic) {
					val parameterTypes = method.parameterTypes
					val ident = new MethodIdentifier(method, parameterTypes)
					identifiers.putIfAbsent(ident, method)
				}
			}
		}

		val buffer : Map<Class<? extends Event>, Collection<Method>> = new TreeMap[elt1, elt2|elt1.name <=> elt2.name]
		for (method : identifiers.values) {
			val parameterTypes = method.parameterTypes
			// Check the prototype of the event handler in debug mode only
			val eventType = parameterTypes.get(0) as Class<? extends Event>
			var methods = buffer.get(eventType)
			if (methods === null) {
				methods = newArrayList
				buffer.put(eventType, methods)
			}
			methods += method
		}

		return ImmutableMap::copyOf(buffer)
	}

	private static def isSubType(a : Class<?>, b : Class<?>) : boolean {
		a != b && a.isAssignableFrom(b)
	}

	private static def isAcceptedType(type : Class<?>) : boolean {
		type.reloadClass(typeof(Agent)).isSubType(type)
		|| type.reloadClass(typeof(Behavior)).isSubType(type)
		|| type.reloadClass(typeof(Skill)).isSubType(type)
		|| type.reloadClass(typeof(Event)).isAssignableFrom(type)
	}

	private static def exploreTypeHierarchy(concreteClass : Class<?>) : Iterable<Class<?>> {
		var col0 : Object = TypeToken::of(concreteClass).types.rawTypes
		var col1 = col0 as Set<Class<?>>
		var col2 = col1.filter [
			!it.isInterface && !it.isEnum && !it.isAnnotation && it.isAcceptedType
		]
		return col2
	}

	private static def getTypeHierarchyOnDemand(concreteClass : Class<?>) : ImmutableSet<Class<?>> {
		assert concreteClass !== null
		val typeHierarchy = concreteClass.exploreTypeHierarchy
		return ImmutableSet::copyOf(typeHierarchy)
	}

	private static def reloadClass(context : Class<?>, type : Class<?>) : Class<?> {
		var ld = context.classLoader
		if (ld === null) {
			ld = type.classLoader
		}
		try {
			return ld.loadClass(type.name)
		} catch (ex : Throwable) {
			return type
		}
	}

	/** 
	 * Thread-safe cache of classes to their flattened hierarchy of supertypes.
	 */
	static val FLATTEN_HIERARCHY_CACHE : LoadingCache<Class<?>, ImmutableSet<Class<?>>> = 
			CacheBuilder::newBuilder.weakKeys.build[it.getTypeHierarchyOnDemand]

	/** 
	 * A thread-safe cache that contains the mapping from each class to all methods in that class and all super-classes, that are annotated with
	 * the annotation given by {@link #getAnnotatedMethodMapOnDemand(java.lang.Class)}. The cache is shared across all instances of this class; this greatly
	 * improves performance if multiple EventBus instances are created and objects of the same class are registered on all of them.
	 */
	static val PERCEPT_GUARD_EVALUATOR_METHOD_CACHE : LoadingCache<Class<?>, Map<Class<? extends Event>, Collection<Method>>> = 
			CacheBuilder::newBuilder.weakKeys.build[it.getAnnotatedMethodMapOnDemand]

	/** 
	 * It stores the information related to a given method especially its prototype.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static final class MethodIdentifier implements Comparable<MethodIdentifier> {

		/** 
		 * the name of the considered method.
		 */
		val name : String

		/** 
		 * The list of the type of the various parameters of the considered method.
		 */
		val parameterTypes : List<Class<?>>

		/** 
		 * Creates a new method identifier according to the name and the list of parameter types of the considered method.
		 * 
		 * @param method
		 * - the name of the considered method.
		 * @param parameterTypes
		 * - The list of the type of the various parameters of the considered method.
		 */
		new (method : Method, parameterTypes : Class<?>[]) {
			// Useful to maintain the getDeclaringClass to obtain method of all classes with the inheritance hierarchy
			this.name = method.declaringClass + method.name
			this.parameterTypes = Arrays::asList(parameterTypes)
		}

		override equals(object : Object) : boolean {
			if (object instanceof MethodIdentifier) {
				return this.name == object.name && this.parameterTypes == object.parameterTypes
			}
			return false
		}

		override compareTo(obj : MethodIdentifier) : int {
			if (obj === null) {
				return -1
			}
			var cmp = this.name <=> obj.name
			if (cmp !== 0) {
				return cmp
			}
			cmp = this.parameterTypes.size <=> obj.parameterTypes.size
			if (cmp !== 0) {
				return cmp
			}
			val it1 = this.parameterTypes.iterator
			val it2 = obj.parameterTypes.iterator
			while (it1.hasNext) {
				assert it2.hasNext
				cmp = it1.next.name <=> it2.next.name
				if (cmp !== 0) {
					return cmp
				}
			}
			return 0
		}

		override toString : String {
			this.name
		}

	}

}
