/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.internal.eventguard.reflect

import com.google.common.cache.CacheBuilder
import com.google.common.cache.LoadingCache
import com.google.common.collect.ImmutableMap
import io.sarl.lang.core.Event
import io.sarl.lang.core.annotation.PerceptGuardEvaluator
import io.sarl.lang.core.util.SarlUtils
import io.sarl.sre.janus.internal.TypeHierarchyDictionary
import java.lang.reflect.Method
import java.util.Arrays
import java.util.Collection
import java.util.List
import java.util.Map
import java.util.TreeMap

/** 
 * Dictionary of all the statically defined {@code BehaviorGuardEvaluator} methods for a specific class.
 * 
 * <p>This class is thread-safe.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
final class StaticReflectBehaviorGuardEvaluatorDictionary {

	static val MATCH_FUNCTION_NAME = SarlUtils::HIDDEN_MEMBER_CHARACTER + "matchesTypeBounds"

	private new {
	}

	/** Replies the declared methods for the guard evaluation into the given type.
	 *
	 * @param listenerType the type to explore.
	 * @return the declared methods for guard evaluation.
	 */
	@Pure
	static def getAnnotedMethodsPerEvent(listenerType : Class<?>) : Map<Class<? extends Event>, Collection<MethodProxy>> {
		PERCEPT_GUARD_EVALUATOR_METHOD_CACHE.getUnchecked(listenerType)
	}

	private static def getAnnotatedMethodMapOnDemand(concreteClass : Class<?>) : Map<Class<? extends Event>, Collection<MethodProxy>> {
		assert concreteClass !== null
		// TODO verify if it effectively explores the whole type hierarchy
		val typeHierarchy = TypeHierarchyDictionary::exploreTypeHierarchy(concreteClass)
		val supertypes = typeHierarchy.filter[!it.isInterface && typeof(Object) != it]

		val identifiers = new TreeMap

		// Traverse all methods of the whole inheritance hierarchy
		for (supertype : supertypes) {
			for (method : supertype.declaredMethods) {
				if (method.isAnnotationPresent(typeof(PerceptGuardEvaluator)) && !method.synthetic) {
					val parameterTypes = method.parameterTypes
					val ident = new MethodIdentifier(method, parameterTypes)
					identifiers.putIfAbsent(ident, method)
				}
			}
		}

		val buffer : Map<Class<? extends Event>, Collection<MethodProxy>> = new TreeMap [ elt1, elt2 |
			elt1.name <=> elt2.name
		]
		for (method : identifiers.values) {
			val parameterTypes = method.parameterTypes
			// Check the prototype of the event handler in debug mode only
			val eventType = parameterTypes.get(0) as Class<? extends Event>
			var methods = buffer.computeIfAbsent(eventType) [newArrayList]
			val genericTypes = method.getAnnotation(typeof(PerceptGuardEvaluator))?.typeParameters
			var methodProxy : MethodProxy
			if (genericTypes === null || genericTypes.length === 0) {
				methodProxy = new MethodProxy(method)
			} else {
				val smethod = eventType.getDeclaredMethod(MATCH_FUNCTION_NAME, eventType, typeof(Class[]))
				methodProxy = new GenericMethodProxy(method, smethod, genericTypes)
			}
			methods += methodProxy
		}

		return ImmutableMap::copyOf(buffer)
	}

	/** 
	 * A thread-safe cache that contains the mapping from each class to all methods in that class and all super-classes, that are annotated with
	 * the annotation given by {@link #getAnnotatedMethodMapOnDemand(java.lang.Class)}. The cache is shared across all instances of this class; this greatly
	 * improves performance if multiple EventBus instances are created and objects of the same class are registered on all of them.
	 */
	static val PERCEPT_GUARD_EVALUATOR_METHOD_CACHE : LoadingCache<Class<?>, Map<Class<? extends Event>, Collection<MethodProxy>>> = 
			CacheBuilder::newBuilder.weakKeys.build[it.getAnnotatedMethodMapOnDemand]
	
	/** 
	 * It stores the prototype of a given method for representing a method's identifier.
	 * 
	 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
	 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
	 * @version janus.kernel 3.0.15.1 20250911-224826
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	private static final class MethodIdentifier implements Comparable<MethodIdentifier> {

		/**
		 * the name of the considered method.
		 */
		val name : String

		/** 
		 * The list of the type of the various parameters of the considered method.
		 */
		val parameterTypes : List<Class<?>>

		/** 
		 * Creates a new method identifier according to the name and the list of parameter types of the considered method.
		 * 
		 * @param method
		 * - the name of the considered method.
		 * @param parameterTypes
		 * - The list of the type of the various parameters of the considered method.
		 */
		new (method : Method, parameterTypes : Class<?>[]) {
			// Useful to maintain the getDeclaringClass to obtain method of all classes with the inheritance hierarchy
			this.name = method.declaringClass + method.name
			this.parameterTypes = Arrays::asList(parameterTypes)
		}

		override equals(object : Object) : boolean {
			if (object instanceof MethodIdentifier) {
				return this.name == object.name && this.parameterTypes == object.parameterTypes
			}
			return false
		}

		override compareTo(obj : MethodIdentifier) : int {
			if (obj === null) {
				return -1
			}
			var cmp = this.name <=> obj.name
			if (cmp !== 0) {
				return cmp
			}
			cmp = this.parameterTypes.size <=> obj.parameterTypes.size
			if (cmp !== 0) {
				return cmp
			}
			val it1 = this.parameterTypes.iterator
			val it2 = obj.parameterTypes.iterator
			while (it1.hasNext) {
				if (!it2.hasNext) {
					return 1;
				}
				cmp = it1.next.name <=> it2.next.name
				if (cmp !== 0) {
					return cmp
				}
			}
			if (!it2.hasNext) {
				return -1;
			}
			return 0
		}

		override toString : String {
			this.name
		}

	}

}
