/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.skills.bic

import io.sarl.api.core.Lifecycle
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import jakarta.inject.Inject
import jakarta.inject.Provider
import java.util.UUID

import static io.sarl.sre.janus.services.lifecycle.AgentLife.*

/** 
 * Skill that permits to manage the life cycle of the agents.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @author <a href="http://www.sebastianrodriguez.com.ar/">Sebastian Rodriguez</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill LifecycleSkill implements Lifecycle {

	val lifecycle : LifecycleService

	val factories : Provider<Factories>

	val agentLevelInjector : Provider<ConfigurableAgentInjector>

	/** Constructor.
	 */
	@Inject
	new (service : LifecycleService, factories : Provider<Factories>, agentLevelInjector : Provider<ConfigurableAgentInjector>) {
		super()
		this.lifecycle = service
		this.factories = factories
		this.agentLevelInjector = agentLevelInjector
	}

	@SuppressWarnings("discouraged_reference")
	def killMe(terminationCause : Object) {
		var postTreatment : Runnable = null
		var state = getAgentLife(owner, this.factories, this.agentLevelInjector).state
		// The agent should be killed by a specific asynchronous event.
		// This event is supported by the internal event bus implementation.
		if (state == AgentState::INITIALIZING) {
			// Indicate to the starting function into AgentLife that the initialization has failed.
			postTreatment = [
				getAgentLife(owner, this.factories, this.agentLevelInjector).state = AgentState::DYING
			]
		} else if (state == AgentState::ALIVE) {
			// Synchronous killing
			postTreatment = [
				this.lifecycle.killAgent(this.owner, false, terminationCause)
			]
		}
		// Never return from the killMe
		ExecutorService::neverReturn(postTreatment)
	}

	def spawn(agentType : Class<? extends Agent>, params : Object*) {
		val life = getAgentLife(owner, this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			val ctx = life.defaultContext?.context
			if (ctx !== null) {
				var o = this.owner
				this.lifecycle.spawnAgent(
					1, // single agent
					o.ID, // owner
					ctx,
					null, // agent id
					agentType,
					params)
			}
		}
	}

	def spawn(nbAgents : int, agentType : Class<? extends Agent>, params : Object*) {
		val life = getAgentLife(owner, this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			val ctx = life.defaultContext?.context
			if (ctx !== null) {
				var o = this.owner
				assert o !== null
				this.lifecycle.spawnAgent(
					nbAgents,
					o.ID, // owner
					ctx,
					null, // agent id
					agentType,
					params)
			}
		}
	}

	def spawnInContext(agentClass : Class<? extends Agent>, context : AgentContext, params : Object*) {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive) {
			var o = this.owner
			assert o !== null
			this.lifecycle.spawnAgent(
				1, // single agent
				o.ID,
				context as Context,
				null, // agent id
				agentClass,
				params)
		}
	}

	def spawnInContext(nbAgents : int, agentClass : Class<? extends Agent>, context : AgentContext, params : Object*) {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive && context !== null) {
			var o = this.owner
			assert o !== null
			this.lifecycle.spawnAgent(
				nbAgents,
				o.ID, //owner
				context as Context,
				null, // agent id
				agentClass,
				params)
		}
	}

	def spawnInContextWithID(agentClass : Class<? extends Agent>, agentID : UUID, context : AgentContext, params : Object*) {
		if (getAgentLife(owner, this.factories, this.agentLevelInjector).state.alive && context !== null) {
			var o = this.owner
			assert o !== null
			this.lifecycle.spawnAgent(
				1, // single agent
				o.ID, // owner
				context as Context,
				agentID,
				agentClass,
				params)
		}
	}

	def spawnWithID(agentClass : Class<? extends Agent>, agentID : UUID, params : Object*) {
		val life = getAgentLife(owner, this.factories, this.agentLevelInjector)
		if (life.state.alive) {
			val ctx = life.defaultContext?.context
			if (ctx !== null) {
				var o = this.owner
				this.lifecycle.spawnAgent(
					1, // single agent
					o.ID, // owner
					ctx,
					agentID,
					agentClass,
					params)
			}
		}
	}

}
