/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.InformedEventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.skills.bic.BehaviorsSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent
import io.sarl.sre.janus.tests.skills.bic.mocks.MyInternalEventBusSkill
import io.sarl.sre.janus.tests.skills.bic.mocks.MyInternalSchedulesSkill
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static io.sarl.tests.api.tools.TestReflections.*
import static org.junit.jupiter.api.Assertions.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: BehaviorsSkill test")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class BehaviorsSkillTest {

	@Nullable
	var contextId : UUID
	
	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : BehaviorsSkill

	@Nullable
	var eventBusListener : InformedEventListener

	@Nullable
	var eventBus : MyInternalEventBusSkill

	@Nullable
	var schedules : MyInternalSchedulesSkill

	@BeforeEach
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.eventBusListener = typeof(InformedEventListener).mock
		this.eventBus = new MyInternalEventBusSkill(this.eventBusListener).spy
		this.schedules = new MyInternalSchedulesSkill().spy
		this.^agentId = UUID::randomUUID
		this.^agent = new MyAgent(contextId, this.^agentId, this.eventBus, this.schedules).spy
		this.^skill = new BehaviorsSkill([SreTestUtilities::newConfigurableAgentInjector]) [SreTestUtilities::newFactories]
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
		reset(this.schedules, this.eventBus, this.eventBusListener, this.^agent)
	}

	private def forceAlive : void {
		// Force being alive
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
	}
	
	private def forceNoBehavior : void {
		this.eventBus.setRegisteredEventBusListeners(SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection)
		reset(this.schedules, this.eventBus, this.eventBusListener, this.^agent)
	}

	private def forceTwoBehaviors : Behavior[] {
		var beh1 = typeof(Behavior).mock

		var beh2 = typeof(Behavior).mock

		var theset = SreTestUtilities::newFactories.concurrentCollectionFactory.<Behavior>newCollection
		theset += beh1
		theset += beh2
		this.eventBus.setRegisteredEventBusListeners(theset)
		var array : Behavior[] = newArrayOfSize(theset.size)
		theset.toArray(array)
		return array
	}
	
	def forceInnerContext : OpenEventSpace {
		var innerContext = typeof(Context).mock
		var defaultSpace = typeof(OpenEventSpace).mock
		when(innerContext.defaultSpace).thenReturn(defaultSpace)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).innerContext = innerContext
		return defaultSpace
	}

	@Test
	def asEventListener {
		forceNoBehavior
		assertSame(this.eventBusListener, this.^skill.asEventListener)
	}

	@Test
	def getRegisteredBehaviors_noRegistration {
		forceNoBehavior
		var iterable = this.^skill.getRegisteredBehaviors
		assertFalse(iterable.iterator.hasNext)
	}

	@Test
	def getRegisteredBehaviors_registrations {
		var behs = forceTwoBehaviors
		var iterable = this.^skill.getRegisteredBehaviors
		var iterator = iterable.iterator
		assertSame(behs.get(0), iterator.next)
		assertSame(behs.get(1), iterator.next)
		assertFalse(iterator.hasNext)
	}

	@Test
	def hasRegisteredBehavior_noRegistration {
		forceNoBehavior
		assertFalse(this.^skill.hasRegisteredBehavior)
	}

	@Test
	def hasRegisteredBehavior_registrations {
		forceTwoBehaviors
		assertTrue(this.^skill.hasRegisteredBehavior)
	}

	@Test
	def registerBehavior_noFilter_notAlive {
		var beh1 = typeof(Behavior).mock
		
		var b = this.^skill.registerBehavior(beh1)

		assertSame(beh1, b)
		verifyNoMoreInteractions(this.eventBus)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def registerBehavior_noFilter_alive {
		var beh1 = typeof(Behavior).mock

		forceAlive

		var b = this.^skill.registerBehavior(beh1)

		assertSame(beh1, b)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedFilter = ArgumentCaptor::forClass(typeof(Function1))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1));
		this.eventBus.verify.registerEventBusListener(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		assertSame(beh1, capturedListener.value)
		assertNull(capturedFilter.value)
		assertNotNull(capturedCallback.value)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def registerBehavior_filter_notAlive {
		var beh1 = typeof(Behavior).mock
		var filter = mock(typeof(Function1))
		
		var b = this.^skill.registerBehavior(beh1, filter)

		assertSame(beh1, b)
		verifyNoMoreInteractions(this.eventBus)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def registerBehavior_filter_alive {
		var beh1 = typeof(Behavior).mock
		var filter = mock(typeof(Function1))
		
		forceAlive
		
		var b = this.^skill.registerBehavior(beh1, filter)

		assertSame(beh1, b)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedFilter = ArgumentCaptor::forClass(typeof(Function1))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1));
		this.eventBus.verify.registerEventBusListener(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		assertSame(beh1, capturedListener.value)
		assertSame(filter, capturedFilter.value)
		assertNotNull(capturedCallback.value)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def unregisterBehavior {
		var beh1 = typeof(Behavior).mock
		
		var b = this.^skill.unregisterBehavior(beh1)

		assertSame(beh1, b)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.eventBus.verify.unregisterEventBusListener(capturedListener.capture, capturedCallback.capture)
		assertSame(beh1, capturedListener.value)
		assertNotNull(capturedCallback.value)
		var capturedBehavior = ArgumentCaptor::forClass(typeof(Behavior))
		this.schedules.verify.unregisterTasksForBehavior(capturedBehavior.capture)
		assertSame(beh1, capturedBehavior.value)
	}

	@Test
	def wake_noScope_noInnerContext_notAlive {
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def wake_noScope_noInnerContext_alive {
		var ^event = new Event {}
		assertNull(^event.source)
		
		forceAlive
		
		this.^skill.wake(^event)
		
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		this.eventBusListener.verify.receiveEvent(capturedEvent.capture)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def wake_matchingScope_noInnerContext_notAlive {
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event) [true]
		
		verifyNoMoreInteractions(this.eventBusListener)
	}

	@Test
	def wake_matchingScope_noInnerContext_alive {
		var ^event = new Event {}
		assertNull(^event.source)

		forceAlive
		
		this.^skill.wake(^event) [true]
		
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		this.eventBusListener.verify.receiveEvent(capturedEvent.capture)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def wake_notMatchingScope_noInnerContext {
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event) [false]
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
	}

	@Test
	def wake_noScope_innerContext_notAlive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
		verifyNoMoreInteractions(defSpace)
	}

	@Test
	def wake_noScope_innerContext_alive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)

		forceAlive
		
		this.^skill.wake(^event)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		defSpace.verify.emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		assertNull(capturedScope.value)
	}

	@Test
	def wake_matchingScope_innerContext_notAlive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [true]
		
		this.^skill.wake(^event, scope)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
		verifyNoMoreInteractions(defSpace)
	}

	@Test
	def wake_matchingScope_innerContext_alive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [true]

		forceAlive
		
		this.^skill.wake(^event, scope)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		verify(defSpace).emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		assertSame(scope, capturedScope.value)
	}

	@Test
	def wake_notMatchingScope_innerContext_notAlive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [false]
		
		this.^skill.wake(^event, scope)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
		verifyNoMoreInteractions(defSpace)
	}

	@Test
	def wake_notMatchingScope_innerContext_alive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [false]

		forceAlive
		
		this.^skill.wake(^event, scope)
		
		verifyNoMoreInteractions(this.eventBusListener)
		verifyNoMoreInteractions(this.schedules)
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		verify(defSpace).emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		assertSame(scope, capturedScope.value)
	}

}