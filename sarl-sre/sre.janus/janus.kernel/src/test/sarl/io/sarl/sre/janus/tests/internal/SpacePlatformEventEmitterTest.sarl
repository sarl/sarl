/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal

import io.sarl.api.core.SpaceCreated
import io.sarl.api.core.SpaceDestroyed
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.internal.SpaceEventEmitter
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.junit.jupiter.api.Assertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*
import static org.mockito.Mockito.never

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SpaceEventEmitter test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SpaceEventEmitterTest {
		
	@Nullable
	var contextID : UUID
	
	@Nullable
	var emitter : SpaceEventEmitter
	
	@Nullable
	var defaultSpace : EventSpace

	@Nullable
	var logger : Logger

	@BeforeEach
	def setUp : void {
		this.contextID = UUID::randomUUID
		var spaceID = typeof(SpaceID).mock
		when(spaceID.contextID).thenReturn(this.contextID)
		when(spaceID.ID).thenReturn(UUID::randomUUID)
		this.defaultSpace = typeof(EventSpace).mock
		when(this.defaultSpace.spaceID).thenReturn(spaceID)
		this.logger = Logger::getLogger("SOME")
		this.logger.useParentHandlers = false
		this.logger = this.logger.spy
		this.emitter = new SpaceEventEmitter(contextID, defaultSpace, logger)
	}
	
	@Test
	def spaceCreated_localCreation {
		var spaceID = typeof(SpaceID).mock
		when(spaceID.contextID).thenReturn(this.contextID)
		var ^space = typeof(Space).mock
		when(^space.spaceID).thenReturn(spaceID)
		
		this.emitter.spaceCreated(^space, true)
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
		assertNull(scope.value)
		var evt = ^event.value
		assertNotNull(evt)
		assertInstanceOf(typeof(SpaceCreated), evt)
		var spaceEvent = evt as SpaceCreated
		assertNotNull(spaceEvent.source)
		assertSame(spaceID, spaceEvent.spaceID)
	}

	@Test
	def spaceCreated_false {
		var spaceID = typeof(SpaceID).mock
		when(spaceID.contextID).thenReturn(this.contextID)
		var ^space = typeof(Space).mock
		when(^space.spaceID).thenReturn(spaceID)
		
		this.emitter.spaceCreated(^space, false)
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify(never).emit(any, ^event.capture, scope.capture)
	}

	@Test
	def spaceDestroyed_true {
		var spaceID = typeof(SpaceID).mock
		when(spaceID.contextID).thenReturn(this.contextID)
		var ^space = typeof(Space).mock
		when(^space.spaceID).thenReturn(spaceID)
		
		this.emitter.spaceDestroyed(^space, true)
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
		assertNull(scope.value)
		var evt = ^event.value
		assertNotNull(evt)
		assertInstanceOf(typeof(SpaceDestroyed), evt)
		var spaceEvent = evt as SpaceDestroyed
		assertNotNull(spaceEvent.source)
		assertSame(spaceID, spaceEvent.spaceID)
	}

	@Test
	def spaceDestroyed_false {
		var spaceID = typeof(SpaceID).mock
		when(spaceID.contextID).thenReturn(this.contextID)
		var ^space = typeof(Space).mock
		when(^space.spaceID).thenReturn(spaceID)
		
		this.emitter.spaceDestroyed(^space, false)
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify(never).emit(any, ^event.capture, scope.capture)
	}

}
