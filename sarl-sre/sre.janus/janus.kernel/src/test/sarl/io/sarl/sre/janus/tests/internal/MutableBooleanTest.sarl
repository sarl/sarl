/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.internal.MutableBoolean
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.concurrent.atomic.AtomicBoolean
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: MutableBoolean test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class MutableBooleanTest {

	@Test
	def newMutableBoolean {
		var value = new MutableBoolean
		value.get.assertFalse
	}

	@Test
	def newMutableBoolean_true {
		var value = new MutableBoolean(true)
		value.get.assertTrue
	}

	@Test
	def newMutableBoolean_false {
		var value = new MutableBoolean(false)
		value.get.assertFalse
	}

	@Test
	def newMutableBoolean_True {
		var value = new MutableBoolean(Boolean::TRUE)
		value.get.assertTrue
	}
	
	@Test
	def newMutableBoolean_False {
		var value = new MutableBoolean(Boolean::FALSE)
		value.get.assertFalse
	}

	@Test
	def newMutableBoolean_nullBoolean {
		var v : Boolean = null
		var value = new MutableBoolean(v)
		value.get.assertFalse
	}

	@Test
	def newMutableBoolean_nullAtomicBoolean {
		var v : AtomicBoolean = null
		var value = new MutableBoolean(v)
		value.get.assertFalse
	}

	@Test
	def newMutableBoolean_Atrue {
		var value = new MutableBoolean(new AtomicBoolean(true))
		value.get.assertTrue
	}

	@Test
	def newMutableBoolean_Afalse {
		var value = new MutableBoolean(new AtomicBoolean(false))
		value.get.assertFalse
	}
	
	@Test
	def set_true {
		var value = new MutableBoolean(false)
		value.set(true)
		value.get.assertTrue
	}

	@Test
	def set_false {
		var value = new MutableBoolean(true)
		value.set(false)
		value.get.assertFalse
	}

	@Test
	def set_True {
		var value = new MutableBoolean(false)
		value.set(Boolean::TRUE)
		value.get.assertTrue
	}

	@Test
	def set_False {
		var value = new MutableBoolean(true)
		value.set(Boolean::FALSE)
		value.get.assertFalse
	}

	@Test
	def set_Atrue {
		var value = new MutableBoolean(false)
		value.set(new AtomicBoolean(true))
		value.get.assertTrue
	}

	@Test
	def set_Afalse {
		var value = new MutableBoolean(true)
		value.set(new AtomicBoolean(false))
		value.get.assertFalse
	}

	@Test
	def set_nullBoolean {
		var v : Boolean = null
		var value = new MutableBoolean(true)
		value.set(v)
		value.get.assertFalse
	}

	@Test
	def set_nullAtomicBoolean {
		var v : AtomicBoolean = null
		var value = new MutableBoolean(true)
		value.set(v)
		value.get.assertFalse
	}
	
	@Test
	def booleanValue_true {
		var value = new MutableBoolean(true)
		value.booleanValue.assertTrue
	}

	@Test
	def booleanValue_false {
		var value = new MutableBoolean(false)
		value.booleanValue.assertFalse
	}

	@Test
	def toBoolean_true {
		var value = new MutableBoolean(true)
		var v = value.toBoolean
		v.assertNotNull
		v.booleanValue.assertTrue
	}

	@Test
	def toBoolean_false {
		var value = new MutableBoolean(false)
		var v = value.toBoolean
		v.assertNotNull
		v.booleanValue.assertFalse
	}

	@Test
	def toAtomicBoolean_true {
		var value = new MutableBoolean(true)
		var v = value.toAtomicBoolean
		v.assertNotNull
		v.get.assertTrue
	}

	@Test
	def toAtomicBoolean_false {
		var value = new MutableBoolean(false)
		var v = value.toAtomicBoolean
		v.assertNotNull
		v.get.assertFalse
	}

	@Test
	def clone_true {
		var value = new MutableBoolean(true)
		var v = value.clone
		v.assertNotNull
		v.get.assertTrue
	}

	@Test
	def clone_false {
		var value = new MutableBoolean(false)
		var v = value.clone
		v.assertNotNull
		v.get.assertFalse
	}

}
