/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.lifecycle.AbtractAgentCreatorProvider
import io.sarl.sre.janus.tests.services.lifecycle.mocks.InvalidMyAgent1
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MyAgent1
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MyAgent3
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.lang.reflect.Constructor
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AbstractAgentCreatorFactory")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class XAbtractAgentCreatorProviderTest {

	var provider : Provider

	@BeforeEach
	def setUp : void {
		this.provider = new Provider
	}

	@Test
	@DisplayName("getAgentConstructor with (UUID,UUID)")
	def getAgentConstructor_UU : void {
		val cons = this.provider.getAgentConstructor(typeof(InvalidMyAgent1))
		cons.assertNotNull
		2.assertEquals(cons.parameterCount)
		typeof(UUID).assertEquals(cons.parameterTypes.get(0))
		typeof(UUID).assertEquals(cons.parameterTypes.get(1))
	}

	@Test
	@DisplayName("getAgentConstructor with (UUID,UUID,DynamicSkillProvider)")
	def getAgentConstructor_UUD : void {
		val cons = this.provider.getAgentConstructor(typeof(MyAgent3))
		cons.assertNotNull
		3.assertEquals(cons.parameterCount)
		typeof(UUID).assertEquals(cons.parameterTypes.get(0))
		typeof(UUID).assertEquals(cons.parameterTypes.get(1))
		typeof(DynamicSkillProvider).assertEquals(cons.parameterTypes.get(2))
	}


	@Test
	@DisplayName("getAgentConstructor with wrong parameters")
	def getAgentConstructor_E : void {
		typeof(NoSuchMethodException).assertException [
			this.provider.getAgentConstructor(typeof(MyAgent1))
		]
	}

	@Test
	@DisplayName("createAgent with (UUID,UUID)")
	def createAgent_UU : void {
		val pID = UUID::randomUUID
		val aID = UUID::randomUUID
		val skills = #[typeof(DynamicSkillProvider).mock]
		val cons = this.provider.getAgentConstructor(typeof(InvalidMyAgent1))
		val ag = this.provider.createAgent(cons, typeof(InvalidMyAgent1), pID, aID, skills)
		ag.assertNotNull
		pID.assertEquals(ag.parentID)
		aID.assertEquals(ag.ID)
	}

	@Test
	@DisplayName("createAgent with (UUID,UUID,DynamicSkillProvider)")
	def createAgent_UUD : void {
		val pID = UUID::randomUUID
		val aID = UUID::randomUUID
		val skills = #[typeof(DynamicSkillProvider).mock]
		val cons = this.provider.getAgentConstructor(typeof(MyAgent3))
		val ag = this.provider.createAgent(cons, typeof(InvalidMyAgent1), pID, aID, skills)
		ag.assertNotNull
		pID.assertEquals(ag.parentID)
		aID.assertEquals(ag.ID)
	}

	private static class Provider extends AbtractAgentCreatorProvider {
	
		def getAgentCreator(agentClazz : Class<? extends Agent>, parent : UUID, nbAgents : int, skillProviders : DynamicSkillProvider*) : (UUID)=>Agent {
			throw new UnsupportedOperationException()
		}

		override getAgentConstructor(agentType : Class<T>) : Constructor<T> with T extends Agent {
			super.getAgentConstructor(agentType)
		}

		override createAgent(constructor : Constructor<? extends Agent>, agentType : Class<? extends Agent>,
			parentId : UUID, agentId : UUID, skillProvider : DynamicSkillProvider*) : Agent {
			super.createAgent(constructor, agentType, parentId, agentId, skillProvider)
		}
	}

}
