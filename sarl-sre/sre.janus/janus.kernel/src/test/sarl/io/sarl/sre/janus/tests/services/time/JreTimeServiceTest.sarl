/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.time

import io.sarl.api.util.SequenceListenerNotifier
import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.time.JreTimeService
import io.sarl.sre.janus.services.time.TimeListener
import io.sarl.sre.janus.services.time.TimeService
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.concurrent.TimeUnit
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.junit.jupiter.api.Assertions.*
import static org.mockito.Mockito.verifyNoMoreInteractions

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: JreTimeService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class JreTimeServiceTest {

	@Nullable
	var service : JreTimeService
	
	@Nullable
	var listener : TimeListener

	@BeforeEach
	def setUp : void {
		this.listener = typeof(TimeListener).mock
		var coll = new SmartListenerCollection(new SequenceListenerNotifier)
		this.service = new MyTimeService(coll)
		this.service.addTimeListener(this.listener);
	}

	@Test
	def getTime {
		assertEpsilonEquals(0.025, this.service.getTime(TimeUnit::MINUTES))
		assertEpsilonEquals(1.5, this.service.getTime(TimeUnit::SECONDS))
		assertEpsilonEquals(1500.0, this.service.getTime(TimeUnit::MILLISECONDS))
		verifyNoMoreInteractions(this.listener)
	}

	@Test
	def getOSTimeFactor {
		assertEpsilonEquals(1.0, this.service.OSTimeFactor)
		verifyNoMoreInteractions(this.listener)
	}

	@Test
	def evolveTimeIfPossible {
		this.service.evolveTimeIfPossible(15)
		
		var serviceCaptor = ArgumentCaptor::forClass(typeof(TimeService))
		this.listener.verify.timeChanged(serviceCaptor.capture)
		assertSame(this.service, serviceCaptor.value)
	}

	private static class MyTimeService extends JreTimeService {
		def getOSCurrentTime : long {
			1500
		}
	}

}
