/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.executor.jreservice

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.executor.jreservice.JreExecutorService
import io.sarl.sre.janus.services.executor.tasks.SreCallable
import io.sarl.sre.janus.services.executor.tasks.SreRunnable
import io.sarl.sre.janus.tests.services.executor.AbstractExecutorServiceTest
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.lang.Thread.UncaughtExceptionHandler
import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Future
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit
import java.util.logging.Level
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: JreExecutorService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class JreExecutorServiceTest extends AbstractExecutorServiceTest<JreExecutorService> {

	@Nullable
	var handler : UncaughtExceptionHandler

	@Nullable
	var scheduledExecutor : ScheduledExecutorService

	override newService(executor : ExecutorService) : JreExecutorService {
		this.scheduledExecutor = typeof(ScheduledExecutorService).mock
		this.handler = typeof(UncaughtExceptionHandler).mock
		var serv = new JreExecutorService(executor, this.scheduledExecutor, this.handler, this.rootConfig)
		return serv
	}

	@Test
	@DisplayName("executeAsap(Runnable)")
	def executeAsap {
		var run = typeof(Runnable).mock
		this.service.executeAsap(this.logger, run)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify.submit(capturedRunnable.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeAsap(Runnable) with exception")
	def executeAsap_exception {
		var exception = typeof(RuntimeException).mock
		var run : Runnable= [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).submit(typeof(Runnable).any)
		
		this.service.executeAsap(this.logger, run)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify.submit(capturedRunnable.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeAsap(Runnable) : Future")
	def executeAsapFuture {
		var future = typeof(Future).mock
		var run = typeof(Runnable).mock
		when(this.executor.submit(any(typeof(Runnable)))).thenReturn(future)
		
		var rfuture = this.service.executeAsap(this.logger, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify.submit(capturedRunnable.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)

		verifyNoMoreInteractions(this.logger)
	}
	
	@Test
	@DisplayName("executeAsap(Runnable) : Future with exception")
	def executeAsapFuture_exception {
		var future = typeof(Future).mock
		var exception = typeof(RuntimeException).mock
		var run : Runnable= [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return future
		]).when(this.executor).submit(any(typeof(Runnable)))
		
		var rfuture = this.service.executeAsap(this.logger, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify.submit(capturedRunnable.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeAsap(Future, Runnable)")
	def executeAsapRunnableFuture {
		var future = typeof(Future).mock
		var run = typeof(Runnable).mock
		when(this.executor.submit(any(typeof(Runnable)), any)).thenReturn(future)
		
		var rfuture = this.service.executeAsap(this.logger, future, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedFuture = typeof(Future).forClass
		this.executor.verify.submit(capturedRunnable.capture, capturedFuture.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		future.assertSame(capturedFuture.value)

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeAsap(Future, Runnable)")
	def executeAsapRunnableFuture_exception {
		var future = typeof(Future).mock
		var exception = typeof(RuntimeException).mock
		var run : Runnable= [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return future
		]).when(this.executor).submit(any(typeof(Runnable)), any(typeof(Future)))
		
		var rfuture = this.service.executeAsap(this.logger, future, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedFuture = typeof(Future).forClass
		this.executor.verify.submit(capturedRunnable.capture, capturedFuture.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		future.assertSame(capturedFuture.value)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeAsap(Callable)")
	def executeAsapCallable {
		var future = typeof(Future).mock
		var run = typeof(Callable).mock
		when(this.executor.submit(any(typeof(Callable)))).thenReturn(future)
		
		var rfuture = this.service.executeAsap(this.logger, run)
		
		future.assertSame(rfuture)

		var capturedCallable = typeof(Callable).forClass
		this.executor.verify.submit(capturedCallable.capture)
		typeof(SreCallable).assertInstanceOf(capturedCallable.value)
		var jc = capturedCallable.value as SreCallable<?>
		logger.assertSame(jc.logger)
		run.assertSame(jc.getWrappedCallable())

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeAsap(Callable) with exception")
	def executeAsapCallable_exception : void {
		var future = typeof(Future).mock
		var exception = typeof(RuntimeException).mock
		var run : Callable<?> = [throw exception]
		doAnswer([
			(it.getArgument(0) as Callable<?>).call
			return future
		]).when(this.executor).submit(any(typeof(Callable)))
		
		var rfuture = this.service.executeAsap(this.logger, run)
		
		future.assertSame(rfuture)

		var capturedCallable = typeof(Callable).forClass
		this.executor.verify.submit(capturedCallable.capture)
		typeof(SreCallable).assertInstanceOf(capturedCallable.value)
		var jc = capturedCallable.value as SreCallable<?>
		logger.assertSame(jc.logger)
		run.assertSame(jc.getWrappedCallable())
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("schedule(Runnable)")
	def scheduleRunnable {
		var future = typeof(ScheduledFuture).mock
		var run = typeof(Runnable).mock
		when(this.scheduledExecutor.schedule(any(typeof(Runnable)), anyLong(), any)).thenReturn(future)
		
		var rfuture = this.service.schedule(this.logger, 34, TimeUnit::DAYS, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.schedule(capturedRunnable.capture, capturedDelay.capture.longValue,
			capturedUnit.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		34.assertEquals(capturedDelay.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("schedule(Runnable) with exception")
	def scheduleRunnable_exception {
		var future = typeof(ScheduledFuture).mock
		var exception = typeof(RuntimeException).mock
		var run : Runnable= [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return future
		]).when(this.scheduledExecutor).schedule(any(typeof(Runnable)), anyLong(), any)
		
		var rfuture = this.service.schedule(this.logger, 34, TimeUnit::DAYS, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.schedule(capturedRunnable.capture, capturedDelay.capture.longValue,
			capturedUnit.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		34.assertEquals(capturedDelay.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("schedule(Callable)")
	def scheduleCallable {
		var future = typeof(ScheduledFuture).mock
		var run = typeof(Callable).mock
		when(this.scheduledExecutor.schedule(any(typeof(Callable)), anyLong(), any)).thenReturn(future)
		
		var rfuture = this.service.schedule(this.logger, 34, TimeUnit::DAYS, run)
		
		assertSame(future, rfuture)

		var capturedCallable = typeof(Callable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.schedule(capturedCallable.capture, capturedDelay.capture.longValue, capturedUnit.capture)
		typeof(SreCallable).assertInstanceOf(capturedCallable.value)
		var jc = capturedCallable.value as SreCallable<?>
		logger.assertSame(jc.logger)
		run.assertSame(jc.getWrappedCallable())
		34.assertEquals(capturedDelay.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("schedule(Callable) with exception")
	def scheduleCallable_exception {
		var future = typeof(ScheduledFuture).mock
		var exception = typeof(RuntimeException).mock
		var run : Callable<?> = [throw exception]
		doAnswer([
			(it.getArgument(0) as Callable<?>).call
			return future
		]).when(this.scheduledExecutor).schedule(any(typeof(Callable)), anyLong(), any)
		
		var rfuture = this.service.schedule(this.logger, 34, TimeUnit::DAYS, run)
		
		assertSame(future, rfuture)

		var capturedCallable = typeof(Callable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.schedule(capturedCallable.capture, capturedDelay.capture.longValue, capturedUnit.capture)
		typeof(SreCallable).assertInstanceOf(capturedCallable.value)
		var jc = capturedCallable.value as SreCallable<?>
		logger.assertSame(jc.logger)
		run.assertSame(jc.getWrappedCallable())
		34.assertEquals(capturedDelay.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("scheduleAtFixedRate(Runnable)")
	def scheduleAtFixedRate {
		var future = typeof(ScheduledFuture).mock
		var run = typeof(Runnable).mock
		when(this.scheduledExecutor.scheduleAtFixedRate(any(typeof(Runnable)), anyLong(), anyLong(), any)).thenReturn(future)
		
		var rfuture = this.service.scheduleAtFixedRate(this.logger, 12, 34, TimeUnit::DAYS, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedPeriod = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.scheduleAtFixedRate(capturedRunnable.capture, capturedDelay.capture.longValue, 
				capturedPeriod.capture.longValue, capturedUnit.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		12.assertEquals(capturedDelay.value.longValue)
		34.assertEquals(capturedPeriod.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("scheduleAtFixedRate(Runnable) with exception")
	def scheduleAtFixedRate_exception {
		var future = typeof(ScheduledFuture).mock
		var exception = typeof(RuntimeException).mock
		var run : Runnable= [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return future
		]).when(this.scheduledExecutor).scheduleAtFixedRate(any(typeof(Runnable)), anyLong(), anyLong(), any)
		
		var rfuture = this.service.scheduleAtFixedRate(this.logger, 12, 34, TimeUnit::DAYS, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedPeriod = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.scheduleAtFixedRate(capturedRunnable.capture, capturedDelay.capture.longValue, 
				capturedPeriod.capture.longValue, capturedUnit.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		12.assertEquals(capturedDelay.value.longValue)
		34.assertEquals(capturedPeriod.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		assertSame(Level::SEVERE, capturedLevel.value)
		assertSame(exception, capturedException.value)
	}

	@Test
	@DisplayName("scheduleWithFixedDelay(Runnable)")
	def scheduleWithFixedDelay {
		var future = typeof(ScheduledFuture).mock
		var run = typeof(Runnable).mock
		when(this.scheduledExecutor.scheduleWithFixedDelay(any(typeof(Runnable)), anyLong(), anyLong(), any)).thenReturn(future)
		
		var rfuture = this.service.scheduleWithFixedDelay(this.logger, 12, 34, TimeUnit::DAYS, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedPeriod = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.scheduleWithFixedDelay(capturedRunnable.capture, capturedDelay.capture.longValue, 
				capturedPeriod.capture.longValue, capturedUnit.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		12.assertEquals(capturedDelay.value.longValue)
		34.assertEquals(capturedPeriod.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("scheduleWithFixedDelay(Runnable) with exception")
	def scheduleWithFixedDelay_exception {
		var future = typeof(ScheduledFuture).mock
		var exception = typeof(RuntimeException).mock
		var run : Runnable= [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return future
		]).when(this.scheduledExecutor).scheduleWithFixedDelay(any(typeof(Runnable)), anyLong(), anyLong(), any)
		
		var rfuture = this.service.scheduleWithFixedDelay(this.logger, 12, 34, TimeUnit::DAYS, run)
		
		future.assertSame(rfuture)

		var capturedRunnable = typeof(Runnable).forClass
		var capturedDelay = typeof(long).forClass
		var capturedPeriod = typeof(long).forClass
		var capturedUnit = typeof(TimeUnit).forClass
		this.scheduledExecutor.verify.scheduleWithFixedDelay(capturedRunnable.capture, capturedDelay.capture.longValue, 
				capturedPeriod.capture.longValue, capturedUnit.capture)
		typeof(SreRunnable).assertInstanceOf(capturedRunnable.value)
		var jr = capturedRunnable.value as SreRunnable
		logger.assertSame(jr.logger)
		run.assertSame(jr.wrappedRunnable)
		12.assertEquals(capturedDelay.value.longValue)
		34.assertEquals(capturedPeriod.value.longValue)
		TimeUnit::DAYS.assertEquals(capturedUnit.value)
		
		var capturedLevel = typeof(Level).forClass
		var capturedException = typeof(Throwable).forClass
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

}
