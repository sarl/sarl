/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal.mocks

import io.sarl.api.core.Behaviors
import io.sarl.lang.core.Address
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.core.util.ConcurrentCollection

skill BehSkill implements Behaviors {

	override hasRegisteredBehavior : boolean {
		false
	}

	override getRegisteredBehaviors : ConcurrentCollection<Behavior> {
		null
	}

	override registerBehavior(attitude : Behavior, filter : (Event)=>boolean, initializationParameters : Object*) : Behavior {
		null
	}

	override unregisterBehavior(attitude : Behavior) : Behavior {
		null
	}

	override wake(^event : Event, scope : Scope<Address>) {
	}

	override wake(beh : Behavior, ^event : Event) {
	}

	override wake(behs : Iterable<Behavior>, ^event : Event) {
	}

	override asEventListener : EventListener {
		null
	}
}
