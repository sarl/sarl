/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.lang.core.scoping.extensions.time.TimeExtensions
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.time.TimeService
import io.sarl.sre.janus.skills.bic.TimeSkill
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.concurrent.TimeUnit
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: TimeSkill test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class TimeSkillTest {

	@Nullable
	var service : TimeService

	@Nullable
	var ^skill : TimeSkill

	@BeforeEach
	def setUp : void {
		this.service = typeof(TimeService).mock
		when(this.service.getTime(any)).thenAnswer [
			var tu = it.getArgument(0) as TimeUnit
			if (tu === null) {
				tu = TimeUnit::SECONDS
			}
			return TimeExtensions::convertFromTo(1234, TimeUnit::MILLISECONDS, tu)
		]
		when(this.service.getOSTimeFactor).thenReturn(5678.0)
		when(this.service.toOSTime(anyDouble)).thenAnswer [
			var value = (it.getArgument(0) as Number).doubleValue
			return value * 2.0
		]
		when(this.service.fromOSTime(anyDouble)).thenAnswer [
			var value = (it.getArgument(0) as Number).doubleValue
			return value * 3.0
		]
		when(this.service.toOSDuration(anyDouble)).thenAnswer [
			var value = (it.getArgument(0) as Number).doubleValue
			return value * 4.0
		]
		when(this.service.fromOSDuration(anyDouble)).thenAnswer [
			var value = (it.getArgument(0) as Number).doubleValue
			return value * 5.0
		]
		this.^skill = new TimeSkill(this.service)
	}
	
	@Test
	def getTime {
		assertEpsilonEquals(1.234, this.^skill.time)
	}

	@Test
	def getTimeTimeUnit_null {
		assertEpsilonEquals(1.234, this.^skill.getTime(null))
	}

	@Test
	def getTimeTimeUnit_seconds {
		assertEpsilonEquals(1.234, this.^skill.getTime(TimeUnit::SECONDS))
	}

	@Test
	def getTimeTimeUnit_millis {
		assertEpsilonEquals(1234.0, this.^skill.getTime(TimeUnit::MILLISECONDS))
	}

	@Test
	def getOSTimeFactor {
		assertEpsilonEquals(5678.0, this.^skill.OSTimeFactor)
	}

	@Test
	def fromOSDuration {
		assertEpsilonEquals(617.28, this.^skill.fromOSDuration(123.456))
	}

	@Test
	def fromOSTime {
		assertEpsilonEquals(370.368, this.^skill.fromOSTime(123.456))
	}

	@Test
	def toOSDuration {
		assertEpsilonEquals(493.824, this.^skill.toOSDuration(123.456))
	}

	
	@Test
	def toOSTime {
		assertEpsilonEquals(246.912, this.^skill.toOSTime(123.456))
	}

}
