/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.framework.services.context

import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.AbstractContextService
import io.sarl.sre.janus.services.context.Context
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*
import static org.mockito.Mockito.*

import static extension io.sarl.sre.test.framework.^extension.ServiceManagementExtension.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertFalse
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertNull
import static extension org.junit.jupiter.api.Assertions.assertTrue

/** 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
abstract class AbstractContextServiceTest<T extends AbstractContextService> {

	@Nullable
	protected var context : Context

	@Nullable
	protected var rootContext : Context

	@Nullable
	protected var rootContextId : UUID

	@Nullable
	protected var rootSpaceId : UUID

	@Nullable
	protected var service : T
	
	@BeforeEach
	def setUp : void {
		this.rootContextId = UUID::randomUUID
		this.rootContext = typeof(Context).mock
		when(this.rootContext.ID).thenReturn(this.rootContextId)
		this.rootSpaceId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(this.rootContextId, this.rootSpaceId, typeof(OpenEventSpaceSpecification)))
		when(this.rootContext.defaultSpace).thenReturn(^space)
		this.context = typeof(Context).mock
		this.service = newService(this.rootContext)
	}

	protected abstract def newService(rootContext : Context) : T

	protected def startService {
		this.service.startServiceManually
	}

	@Test
	def createContextWithoutRegistration_root {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		var context = this.service.createContextWithoutRegistration(contextId, spaceId, null)

		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		context.isRootContext.assertTrue;
		
		(context !== this.service.rootContext).assertTrue
		this.service.getContext(contextId).assertNull
	}

	@Test
	def createContextWithoutRegistration_notRoot {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		var context = this.service.createContextWithoutRegistration(contextId, spaceId, typeof(Agent).mock)

		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		context.isRootContext.assertFalse;
		
		(context !== this.service.rootContext).assertTrue
		this.service.getContext(contextId).assertNull
	}

	@Test
	def createContext_root {
		var context = this.service.createContext(this.rootContextId, this.rootSpaceId, typeof(Agent).mock)
		assertSame(this.rootContext, context)
	}

	@Test
	def createContext_newContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
	
		var context = this.service.createContext(contextId, spaceId, typeof(Agent).mock)
		
		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		context.isRootContext.assertFalse;

		(context !== this.service.rootContext).assertTrue
		assertSame(this.context, this.service.getContext(contextId))
	}

	@Test
	def createContext_existingContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
	
		var originalContext = this.service.createContext(contextId, spaceId, typeof(Agent).mock)
		
		var context = this.service.createContext(contextId, spaceId, typeof(Agent).mock)

		assertSame(originalContext, context)
		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		context.isRootContext.assertFalse;

		(context !== this.service.rootContext).assertTrue
		assertSame(this.context, this.service.getContext(contextId))
	}

	@Test
	def getContext_rootContext {
		assertSame(this.rootContext, this.service.getContext(this.rootContextId))
	}

	@Test
	def getContext_otherContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		
		this.service.getContext(contextId).assertNull
		
		var context = this.service.createContext(contextId, spaceId, typeof(Agent).mock)
		assertSame(context, this.service.getContext(contextId))
	}

	@Test
	def removeContext_emptyRepository {
		this.service.removeContext(UUID::randomUUID).assertNull
	}

	@Test
	def removeContext_rootContext {
		this.service.removeContext(this.rootContextId).assertNull
	}

	@Test
	def removeContext_unknownContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		this.service.createContext(contextId, spaceId, typeof(Agent).mock)

		this.service.removeContext(UUID::randomUUID).assertNull
	}

	@Test
	def removeContext_knownContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		var context = this.service.createContext(contextId, spaceId, typeof(Agent).mock)

		assertSame(context, this.service.removeContext(contextId))
	}

	@Test
	def getAllContexts {
		var ctx = this.service.allContexts
		ctx.assertNotNull
		var iter = ctx.iterator
		iter.assertNotNull
		iter.hasNext.assertTrue
		assertEquals(this.rootContextId, iter.next.ID)
	}

}
