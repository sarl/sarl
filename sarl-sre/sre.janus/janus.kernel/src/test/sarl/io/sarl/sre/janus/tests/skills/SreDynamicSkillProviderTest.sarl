/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills

import io.bootique.di.Injector
import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.api.core.Time
import io.sarl.lang.core.Capacity
import io.sarl.lang.core.Skill
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.capacities.InternalEventBusCapacity
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.skills.SreDynamicSkillProvider
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import io.sarl.tests.api.tools.TestReflections
import java.util.concurrent.atomic.AtomicInteger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SreDynamicSkillProvider test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SreDynamicSkillProviderTest {

	@Nullable
	var injector : Injector

	@Nullable
	var provider : SreDynamicSkillProvider
	
	@BeforeEach
	def setUp : void {
		this.injector = typeof(Injector).mock
		when(this.injector.getInstance(any as Class<?>)).thenAnswer [
			var param : Class<?> = it.getArgument(0)
			if (typeof(Skill).isAssignableFrom(param)) {
				var sk = param.mock as Skill
				TestReflections::set(sk, "referencesFromCapacityMap", new AtomicInteger(0))
				return sk
			}
			return param.mock
		]
		this.provider = new SreDynamicSkillProvider(this.injector).spy
	}

	private def doInstallSkillTest(capType : Class<? extends Capacity>, adds : Class<? extends Capacity>*) {
		var ^skill = this.provider.createSkill(capType)
		^skill.assertNotNull
		capType.assertInstanceOf(^skill)
	}

	@Test
	def createSkill_Logging : void {
		doInstallSkillTest(typeof(Logging))
	}

	@Test
	def createSkill_Time : void {
		doInstallSkillTest(typeof(Time))
	}

	@Test
	def createSkill_InternalEventBusCapacity : void {
		doInstallSkillTest(typeof(InternalEventBusCapacity))
	}

	@Test
	def createSkill_Lifecycle : void {
		doInstallSkillTest(typeof(Lifecycle))
	}

	@Test
	def createSkill_InnerContextAccess : void {
		doInstallSkillTest(typeof(InnerContextAccess))
	}

	@Test
	def createSkill_Schedules : void {
		doInstallSkillTest(typeof(Schedules), typeof(InternalSchedules))
	}

	@Test
	def createSkill_InternalSchedules : void {
		doInstallSkillTest(typeof(InternalSchedules), typeof(Schedules))
	}

	@Test
	def createSkill_Schedules_InternalSchedules : void {
		var skill0 = this.provider.createSkill(typeof(Schedules))
		skill0.assertNotNull
		//
		var skill1 = this.provider.createSkill(typeof(InternalSchedules))
		skill1.assertNotNull
		//
		skill0.assertNotSame(skill1)
	}
	
	@Test
	def createSkill_Behaviors : void {
		doInstallSkillTest(typeof(Behaviors))
	}

	@Test
	def createSkill_ExternalContextAccess : void {
		doInstallSkillTest(typeof(ExternalContextAccess))
	}

	@Test
	def createSkill_DefaultContextInteractions : void {
		doInstallSkillTest(typeof(DefaultContextInteractions))
	}

}
