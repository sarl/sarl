/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.framework.services.context

import io.bootique.di.Injector
import io.sarl.sre.janus.services.context.AbstractInjectionBasedContextService
import io.sarl.sre.janus.services.context.ContextFactory
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.tests.api.Nullable
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach

import static org.mockito.ArgumentMatchers.*
import static org.mockito.ArgumentMatchers.any
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
abstract class AbstractInjectionBasedContextServiceTest<T extends AbstractInjectionBasedContextService> extends AbstractContextServiceTest<T> {

	@Nullable
	protected var injector : Injector

	@Nullable
	protected var contextFactory : ContextFactory
	
	@Nullable
	protected var loggingService : LoggingService

	@BeforeEach
	override setUp : void {
		this.injector = typeof(Injector).mock
		this.contextFactory = typeof(ContextFactory).mock
		this.loggingService = typeof(LoggingService).mock
		val log = typeof(Logger).mock
		when(this.loggingService.getKernelModuleLogger(anyString)).thenReturn(log)
		when(this.loggingService.getKernelLogger).thenReturn(log)
		when(this.contextFactory.newInstance(any, any, any)).thenAnswer [
			when(this.context.ID).thenReturn(getArgument(0))
			when(this.context.getOwner).thenReturn(getArgument(2))
			when(this.context.isRootContext).thenReturn(getArgument(2) === null)
			return this.context
		]

		super.setUp
	}

}
