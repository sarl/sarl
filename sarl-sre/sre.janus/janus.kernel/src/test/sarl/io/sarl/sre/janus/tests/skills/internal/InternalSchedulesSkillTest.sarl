/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.internal

import io.sarl.lang.core.Agent
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.skills.bic.FailureListenerFactory
import io.sarl.sre.janus.skills.bic.SchedulesSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.internal.mocks.MyAgent
import io.sarl.sre.janus.tests.skills.internal.mocks.MyLoggingSkill
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.Collection
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestReflections.*
import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension io.sarl.tests.api.tools.TestMockito.spy
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: InternalSchedulesSkill test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class InternalSchedulesSkillTest {

	@Nullable
	var contextId : UUID

	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var logger : MyLoggingSkill

	@Nullable
	var executor : ExecutorService

	@Nullable
	var ^skill : SchedulesSkill

	@Nullable
	var failureListenerFactory : FailureListenerFactory

	@BeforeEach
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.logger = new MyLoggingSkill().spy
		this.^agent = new MyAgent(contextId, this.^agentId, this.logger).spy
		this.executor = typeof(ExecutorService).mock
		this.failureListenerFactory = typeof(FailureListenerFactory).mock
		this.^skill = new SchedulesSkill(this.executor, this.failureListenerFactory, [SreTestUtilities::newFactories],
			[SreTestUtilities::newConfigurableAgentInjector])
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	@Test
	def internalSchedules : void {
		typeof(InternalSchedules).assertInstanceOf(this.^skill)
	}
	
	@Test
	def executeAsap : void{
		var runnable = typeof(Runnable).mock
	
		var task = this.^skill.executeAsap(runnable)

		task.assertNotNull

		var loggerCapture = forClass(typeof(Logger))
		var runnableCapture = forClass(typeof(Runnable))
		this.executor.verify(1.times).executeAsap(loggerCapture.capture, runnableCapture.capture)
		
		runnableCapture.value.assertNotNull
		runnable.assertNotSame(runnableCapture.value)

		task.procedure.assertNotNull
		runnableCapture.value.assertNotSame(task.procedure)
	}

	@Test
	@DisplayName("executeBlockingTasks(Collection, true)")
	def executeBlockingTasks_CollectionBoolean_true : void {
		var runs : Collection<Runnable> = typeof(Collection).mock

		this.^skill.executeBlockingTasks(runs, true)

		var loggerCapture = typeof(Logger).forClass
		var runnableCapture = typeof(Collection).forClass
		this.executor.verify(1.times).executeBlockingTasks(loggerCapture.capture, eq(true), runnableCapture.capture)

		loggerCapture.value.assertNotNull
		runs.assertSame(runnableCapture.value)
	}

	@Test
	@DisplayName("executeBlockingTasks(Collection, false)")
	def executeBlockingTasks_CollectionBoolean_false : void {
		var runs : Collection<Runnable> = typeof(Collection).mock

		this.^skill.executeBlockingTasks(runs, false)

		var loggerCapture = typeof(Logger).forClass
		var runnableCapture = typeof(Collection).forClass
		this.executor.verify(1.times).executeBlockingTasks(loggerCapture.capture, eq(false), runnableCapture.capture)

		loggerCapture.value.assertNotNull
		runs.assertSame(runnableCapture.value)
	}

	@Test
	@DisplayName("executeBlockingTasks(Collection)")
	def executeBlockingTasks_Collection : void {
		var runs : Collection<Runnable> = typeof(Collection).mock

		this.^skill.executeBlockingTasks(runs)

		var loggerCapture = typeof(Logger).forClass
		var runnableCapture = typeof(Collection).forClass
		this.executor.verify(1.times).executeBlockingTasks(loggerCapture.capture, eq(false), runnableCapture.capture)

		loggerCapture.value.assertNotNull
		runs.assertSame(runnableCapture.value)
	}

}
