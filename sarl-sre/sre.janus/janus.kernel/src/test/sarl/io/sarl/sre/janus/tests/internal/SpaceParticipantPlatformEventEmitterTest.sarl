/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal

import io.sarl.api.core.ParticipantJoined
import io.sarl.api.core.ParticipantLeft
import io.sarl.api.core.spaces.Participant
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.internal.SpaceParticipantEventEmitter
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestAssertions.assertInstanceOf
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertSame
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SpaceParticipantEventEmitter test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SpaceParticipantEventEmitterTest {

	@Nullable
	var emitter : SpaceParticipantEventEmitter

	@Nullable
	var defaultSpace : EventSpace

	@Nullable
	var defaultSpaceId : SpaceID

	@Nullable
	var logger : Logger

	@BeforeEach
	def setUp : void {
		var contextID = UUID::randomUUID
		this.defaultSpaceId = typeof(SpaceID).mock
		when(this.defaultSpaceId.contextID).thenReturn(contextID)
		when(this.defaultSpaceId.ID).thenReturn(UUID::randomUUID)
		this.defaultSpace = typeof(EventSpace).mock
		when(this.defaultSpace.spaceID).thenReturn(this.defaultSpaceId)
		this.logger = Logger::getLogger("SOME")
		this.logger.useParentHandlers = false
		this.logger = this.logger.spy
		this.emitter = new SpaceParticipantEventEmitter(this.defaultSpace, this.logger)
	}

	@Test
	def participantJoined {
		var spaceId = typeof(SpaceID).mock
		var participantId = UUID::randomUUID
		var addr = typeof(Address).mock
		when(addr.spaceID).thenReturn(spaceId)
		when(addr.ID).thenReturn(participantId)
		var participant = typeof(Participant).mock
		when(participant.address).thenReturn(addr);
		when(participant.participantType).thenReturn("the.type");

		this.emitter.participantJoined(participant)

		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
		scope.value.assertNotNull
		var evt = ^event.value
		evt.assertNotNull
		typeof(ParticipantJoined).assertInstanceOf(evt)
		var spaceEvent = evt as ParticipantJoined
		spaceEvent.source.assertNotNull
		this.defaultSpaceId.assertSame(spaceEvent.source.spaceID)
		participantId.assertEquals(spaceEvent.source.ID)
		spaceId.assertSame(spaceEvent.spaceID)
		"the.type".assertEquals(spaceEvent.agentType)
	}

	@Test
	def participantLeft {
		var spaceId = typeof(SpaceID).mock
		var participantId = UUID::randomUUID
		var addr = typeof(Address).mock
		when(addr.spaceID).thenReturn(spaceId)
		when(addr.ID).thenReturn(participantId)
		var participant = typeof(Participant).mock
		when(participant.address).thenReturn(addr);
		when(participant.participantType).thenReturn("the.type");

		this.emitter.participantLeft(participant)

		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
		scope.value.assertNotNull
		var evt = ^event.value
		evt.assertNotNull
		typeof(ParticipantLeft).assertInstanceOf(evt)
		var spaceEvent = evt as ParticipantLeft
		spaceEvent.source.assertNotNull
		this.defaultSpaceId.assertSame(spaceEvent.source.spaceID)
		participantId.assertEquals(spaceEvent.source.ID)
		spaceId.assertSame(spaceEvent.spaceID)
		"the.type".assertEquals(spaceEvent.agentType)
	}

}
