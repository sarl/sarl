/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal.eventguard.reflect

import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.lang.core.Event
import io.sarl.sre.janus.internal.eventguard.reflect.MethodProxy
import io.sarl.sre.janus.tests.internal.eventguard.reflect.mocks.TestAgent0
import io.sarl.sre.janus.tests.internal.eventguard.reflect.mocks.TestAgent1
import io.sarl.sre.janus.tests.internal.eventguard.reflect.mocks.TestAgent2
import io.sarl.sre.janus.tests.internal.eventguard.reflect.mocks.TestEvent0
import java.util.Collection
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static io.sarl.sre.janus.internal.eventguard.reflect.StaticReflectBehaviorGuardEvaluatorDictionary.*

import static extension org.junit.jupiter.api.Assertions.*

/** 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
@DisplayName("unit: StaticReflectBehaviorGuardEvaluatorDictionary test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class StaticReflectBehaviorGuardEvaluatorDictionaryTest {
	
	@Test
	def getAnnotedMethodsPerEvent_0 {
		var handlers = getAnnotedMethodsPerEvent(typeof(TestAgent0))
		handlers.empty.assertTrue
	}

	@Test
	def getAnnotedMethodsPerEvent_1 {
		var handlers = getAnnotedMethodsPerEvent(typeof(TestAgent1))
		var methods : Collection<MethodProxy>

		handlers.get(typeof(Event)).assertNull

		methods = handlers.get(typeof(TestEvent0))
		methods.assertNotNull
		1.assertEquals(methods.size)

		methods = handlers.get(typeof(Initialize))
		methods.assertNotNull
		1.assertEquals(methods.size)

		handlers.get(typeof(Destroy)).assertNull
	}

	@Test
	def getAnnotedMethodsPerEvent_2 {
		var handlers = getAnnotedMethodsPerEvent(typeof(TestAgent2))
		var methods : Collection<MethodProxy>

		handlers.get(typeof(Event)).assertNull

		methods = handlers.get(typeof(TestEvent0))
		methods.assertNotNull
		2.assertEquals(methods.size)

		methods = handlers.get(typeof(Initialize))
		methods.assertNotNull
		1.assertEquals(methods.size)

		methods = handlers.get(typeof(Destroy))
		methods.assertNotNull
		1.assertEquals(methods.size)
	}

}
