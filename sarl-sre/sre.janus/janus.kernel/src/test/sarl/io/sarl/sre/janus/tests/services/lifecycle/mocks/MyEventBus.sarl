/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.lifecycle.mocks

import io.sarl.lang.core.Event
import io.sarl.lang.core.InformedEventListener
import io.sarl.lang.core.util.ConcurrentCollection
import io.sarl.lang.core.util.OutParameter
import io.sarl.sre.janus.capacities.InternalEventBusCapacity
import io.sarl.sre.janus.skills.internal.EventBus
import java.util.List
import java.util.function.BooleanSupplier

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
skill MyEventBus implements InternalEventBusCapacity {

	override registerEventBusListener(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
	}

	override unregisterEventBusListener(listener : Object, callback : (Object)=>void) {
	}

	override unregisterEventBusListener(type : Class<?>, callback : (Object)=>boolean) {
	}

	override fireEventAndWait(^event : Event, thrownExceptions : boolean) {
	}

	override fireEventAndWaitWithEventGathering(^event : Event, thrownExceptions : boolean,
		events : OutParameter<List<Pair<Event, Object>>>, handler0 : () => void, handler1 : BooleanSupplier) : boolean {
		if (handler1 !== null) {
			return handler1.getAsBoolean
		}
		return true
	}

	override fireEventAndWait(^event : Event, thrownExceptions : boolean, forceEventHandling : boolean, istener : Object) {
	}

	override fireEvent(^event : Event, listener : Object) {
	}

	override fireEvent(^event : Event) {
	}

	override getAssociatedEventBusListener : InformedEventListener {
		null
	}

	override getRegisteredEventBusListeners(type : Class<T>) : ConcurrentCollection<T> with T {
		null
	}

	override getEventBus : EventBus {
		throw new UnsupportedOperationException
	}

	override getEventBus(type : Class<T>) : T with T extends EventBus {
		throw new UnsupportedOperationException
	}

}
