/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.janus.tests.services.lifecycle.mocks

import io.sarl.api.core.Lifecycle
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Capacity
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger

/** 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill LifeSkill implements Lifecycle {

	val orderSource : AtomicInteger
	public var installOrder : Integer
	public var uninstallOrderPre : Integer
	public var uninstallOrderPost : Integer
	public val capacityType : Class<? extends Capacity>
	
	new (s : AtomicInteger) {
		super()
		this.orderSource = s
		this.capacityType = typeof(Lifecycle)
	}

	protected def install {
		this.installOrder = this.orderSource.getAndIncrement()
	}

	protected def prepareUninstallation {
		this.uninstallOrderPre = this.orderSource.getAndIncrement
	}

	protected def uninstall {
		this.uninstallOrderPost = this.orderSource.getAndIncrement
	}

	def getInstallationOrder : int {
		this.installOrder.intValue;
	}
	
	def killMe(terminationCause : Object) {
	}
	
	def spawn(agentType : Class<? extends Agent>, params : Object*) {
	}
	
	def spawn(nbAgents : int, agentType : Class<? extends Agent>, params : Object*) {
	}
	
	def spawnInContext(agentClass : Class<? extends Agent>, context : AgentContext, params : Object*) {
	}
	
	def spawnInContext(nbAgents : int, agentClass : Class<? extends Agent>, context : AgentContext, params : Object*) {
	}
	
	def spawnInContextWithID(agentClass : Class<? extends Agent>, agentID : UUID, context : AgentContext, params : Object*) {
	}
	
	def spawnWithID(agentClass : Class<? extends Agent>, agentID : UUID, params : Object*) {
	}

}
