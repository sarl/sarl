/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.logging.jul

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import io.sarl.sre.janus.boot.configs.subconfigs.LoggingConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ServicesConfig
import io.sarl.sre.janus.services.logging.jul.JulLoggerCreator
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import jakarta.inject.Provider
import java.util.UUID
import java.util.logging.Level
import java.util.logging.Logger
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: JulLoggerCreator test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class JulLoggerCreatorTest {

	@Nullable
	var loggerProvider : (String)=>Logger

	@Nullable
	var logger0 : Logger

	@Nullable
	var logger1 : Logger

	@Nullable
	var configProvider : Provider<SreConfig>

	@Nullable
	var config : SreConfig
	
	@SuppressWarnings("potential_inefficient_value_conversion")
	@BeforeEach
	def setUp : void {
		this.loggerProvider = typeof(Function1).mock
		this.logger0 = typeof(Logger).mock
		when(this.logger0.getLevel).thenReturn(Level::ALL)
		this.logger1 = typeof(Logger).mock
		when(this.logger1.getLevel).thenReturn(Level::ALL)
		when(this.loggerProvider.apply(any)).thenAnswer [
			val name = it.getArgument(0) as String
			if (name.startsWith(JulLoggerCreator::PLATFORM_LOGGER_NAME_PREFIX)) {
				return this.logger0
			}
			return this.logger1
		]

		this.configProvider = typeof(Provider).mock
		this.config = typeof(SreConfig).mock
		when(this.configProvider.get).thenReturn(this.config)

		var bootConfig = typeof(BootConfig).mock
		when(this.config.boot).thenReturn(bootConfig)
		
		when(bootConfig.rootContextID).thenReturn(UUID::randomUUID)

		var servicesConfig = typeof(ServicesConfig).mock
		when(this.config.services).thenReturn(servicesConfig)

		var loggingConfig = typeof(LoggingConfig).mock
		when(loggingConfig.platformMessageFormat).thenReturn("X")
		when(servicesConfig.logging).thenReturn(loggingConfig)
	}

	@Test
	def createPlatformLogger {
		var expectedLevel = Level::CONFIG
		var creator = new JulLoggerCreator(Level::CONFIG, this.configProvider, this.loggerProvider)
		var logger = creator.createPlatformLogger
		this.logger0.assertSame(logger)
		var argument0 = typeof(Level).forClass
		logger.verify(1.times).level = argument0.capture
		expectedLevel.assertEquals(argument0.value)
	}

	@Test
	def createAgentLogger {
		var expectedLevel = Level::CONFIG
		var creator = new JulLoggerCreator(Level::CONFIG, this.configProvider, this.loggerProvider)
		var parent = creator.createPlatformLogger
		var name = UUID::randomUUID.toString
		var logger = creator.createModuleLogger(name, parent)
		this.logger1.assertSame(logger)
		val actualLevel = typeof(Level).forClass
		logger.verify.level = actualLevel.capture
		expectedLevel.assertEquals(actualLevel.value)
	}

}
