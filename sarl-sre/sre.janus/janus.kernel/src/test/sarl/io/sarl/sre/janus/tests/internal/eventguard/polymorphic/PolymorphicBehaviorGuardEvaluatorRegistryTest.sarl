/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal.eventguard.polymorphic

import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.util.ConcurrentSet
import io.sarl.sre.janus.internal.eventguard.polymorphic.PolymorphicBehaviorGuardEvaluator
import io.sarl.sre.janus.internal.eventguard.polymorphic.PolymorphicBehaviorGuardEvaluatorRegistry
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.internal.eventguard.polymorphic.mocks.TestAgent0
import io.sarl.sre.janus.tests.internal.eventguard.polymorphic.mocks.TestAgent1
import io.sarl.sre.janus.tests.internal.eventguard.polymorphic.mocks.TestAgent2
import io.sarl.sre.janus.tests.internal.eventguard.polymorphic.mocks.TestEvent0
import io.sarl.tests.api.Nullable
import java.util.UUID
import java.util.concurrent.ConcurrentMap
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*

/** 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
@DisplayName("unit: PolymorphicBehaviorGuardEvaluatorRegistry test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class PolymorphicBehaviorGuardEvaluatorRegistryTest {

	@Nullable
	var registry : PolymorphicBehaviorGuardEvaluatorRegistry

	@Nullable
	var internalStructure : ConcurrentMap<Class<? extends Event>, ConcurrentSet<PolymorphicBehaviorGuardEvaluator>>

	@BeforeEach
	def setUp : void {
		this.registry = new PolymorphicBehaviorGuardEvaluatorRegistry [SreTestUtilities::newFactories]
		this.internalStructure = this.registry.internalDataStructureForRegisteredListeners
	}

	@Test
	def getInternalDataStructure : void {
		this.internalStructure.assertNotNull
	}

	@Test
	@DisplayName("register(null,f,c)")
	def registerObjectFunction1Procedure1_null_null_null : void {
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, null, null)
		]
	}

	@Test
	@DisplayName("register(null,f,null)")
	def registerObjectFunction1Procedure1_null_obj_null : void {
		val filter = typeof(Function1).mock
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, filter, null)
		]
	}

	@Test
	@DisplayName("register(null,null,c)")
	def registerObjectFunction1Procedure1_null_null_obj : void {
		val callback = typeof(Procedure1).mock
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, null, callback)
		]
	}

	@Test
	@DisplayName("register(null,f,c)")
	def registerObjectFunction1Procedure1_null_obj_obj : void {
		val filter = typeof(Function1).mock
		val callback = typeof(Procedure1).mock
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, filter, callback)
		]
	}

	@Test
	@DisplayName("register(l,null,null)")
	def registerObjectFunction1Procedure1_obj_null_null : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy

		this.registry.register(listener, null, null)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		evaluator.filter.assertNull
		listener.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("register(l,f,null)")
	def registerObjectFunction1Procedure1_obj_objTrue_null : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val filter = typeof(Function1).mock
		when(filter.apply(any)).thenReturn(true)

		this.registry.register(listener, filter, null)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		filter.assertSame(evaluator.filter)
		listener.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("register(l,f,null)")
	def registerObjectFunction1Procedure1_obj_objFalse_null : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val filter = typeof(Function1).mock
		when(filter.apply(any)).thenReturn(false)

		this.registry.register(listener, filter, null)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		filter.assertSame(evaluator.filter)
		listener.assertSame(evaluator.target)
	}
	
	@Test
	@DisplayName("register(l,null,c)")
	def registerObjectFunction1Procedure1_obj_null_obj : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val callback : (Object)=>void = typeof(Procedure1).mock

		this.registry.register(listener, null, callback)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		evaluator.filter.assertNull
		listener.assertSame(evaluator.target)

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		listener.assertSame(callbackParam.value)
	}

	@Test
	@DisplayName("register(l,f,c)")
	def registerObjectFunction1Procedure1_obj_objTrue_obj : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val filter = typeof(Function1).mock
		when(filter.apply(any)).thenReturn(true)
		val callback : (Object)=>void = typeof(Procedure1).mock

		this.registry.register(listener, filter, callback)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		filter.assertSame(evaluator.filter)
		listener.assertSame(evaluator.target)

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		listener.assertSame(callbackParam.value)
	}

	@Test
	@DisplayName("register(l,f,c)")
	def registerObjectFunction1Procedure1_obj_objFalse_obj : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val filter = typeof(Function1).mock
		when(filter.apply(any)).thenReturn(false)
		val callback : (Object) => void = typeof(Procedure1).mock

		this.registry.register(listener, filter, callback)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		filter.assertSame(evaluator.filter)
		listener.assertSame(evaluator.target)

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		listener.assertSame(callbackParam.value)
	}

	@Test
	@DisplayName("register(null,null)")
	def registerObjectFunction1_null_null : void {
		typeof(IllegalArgumentException).assertException [
			var filter : (Event)=>boolean = null
			this.registry.register(null, filter)
		]
	}

	@Test
	@DisplayName("register(null,f)")
	def registerObjectFunction1_null_obj : void {
		val filter = typeof(Function1).mock
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, filter)
		]
	}

	@Test
	@DisplayName("register(l,null)")
	def registerObjectFunction1_obj_null : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		var filter : (Event)=>boolean = null

		this.registry.register(listener, filter)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		evaluator.filter.assertNull
		listener.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("register(l,f)")
	def registerObjectFunction1_obj_objTrue : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val filter = typeof(Function1).mock
		when(filter.apply(any)).thenReturn(true)

		this.registry.register(listener, filter)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		filter.assertSame(evaluator.filter)
		listener.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("register(l,f)")
	def registerObjectFunction1_obj_objFalse : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val filter = typeof(Function1).mock
		when(filter.apply(any)).thenReturn(false)

		this.registry.register(listener, filter)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		filter.assertSame(evaluator.filter)
		listener.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("register(null,null)")
	def registerObjectProcedure1_null_null : void {
		val callback : (Object)=>void = null
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, callback)
		]
	}

	@Test
	@DisplayName("register(null,c)")
	def registerObjectProcedure1_null_obj : void {
		val callback = typeof(Procedure1).mock
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null, callback)
		]
	}

	@Test
	@DisplayName("register(l,null)")
	def registerObjectProcedure1_obj_null : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val callback : (Object)=>void = null

		this.registry.register(listener, callback)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		evaluator.filter.assertNull
		listener.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("register(l,c)")
	def registerObjectProcedure1_obj_obj : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val callback : (Object)=>void = typeof(Procedure1).mock

		this.registry.register(listener, callback)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		evaluator.filter.assertNull
		listener.assertSame(evaluator.target)

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		listener.assertSame(callbackParam.value)
	}

	@Test
	@DisplayName("register(null)")
	def registerObject_null : void {
		typeof(IllegalArgumentException).assertException [
			this.registry.register(null)
		]
	}

	@Test
	@DisplayName("register(l)")
	def registerObject_obj : void {
		val listener = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy

		this.registry.register(listener)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)
		var evaluator = collection.get(0)
		evaluator.assertNotNull
		evaluator.filter.assertNull
		listener.assertSame(evaluator.target)
	}

	@Test
	def hasRegisteredEventListener : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		this.registry.hasRegisteredEventListener(null).assertFalse
		this.registry.hasRegisteredEventListener(typeof(TestAgent0)).assertFalse
		this.registry.hasRegisteredEventListener(typeof(TestAgent1)).assertTrue
		this.registry.hasRegisteredEventListener(typeof(TestAgent2)).assertTrue
	}

	@Test
	@DisplayName("unregisterAll(null)")
	def unregisterAll_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		this.registry.unregisterAll(null)

		this.internalStructure.empty.assertTrue
	}

	@Test
	@DisplayName("unregisterAll(c)")
	def unregisterAll_objTrue : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var callback : (Object)=>boolean = typeof(Function1).mock
		when(callback.apply(any)).thenReturn(true)
		this.registry.unregisterAll(callback)

		this.internalStructure.empty.assertTrue

		val callbackParam = typeof(Object).forClass
		callback.verify(2.times).apply(callbackParam.capture)
		callbackParam.allValues.assertContains(listener0, listener1)
	}

	@Test
	@DisplayName("unregisterAll(c)")
	def unregisterAll_objFalse : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var callback : (Object)=>boolean = typeof(Function1).mock
		when(callback.apply(any)).thenReturn(false)
		this.registry.unregisterAll(callback)

		this.internalStructure.empty.assertTrue

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		// The order of the listeners is not warranty
		if (callbackParam.allValues.contains(listener0)) {
			callbackParam.allValues.assertContains(listener0)
		} else {
			callbackParam.allValues.assertContains(listener1)
		}
	}

	@Test
	@DisplayName("unregister(l,c)")
	def unregisterObjectProcedure1_obj_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var callback : (Object)=>void = typeof(Procedure1).mock
		this.registry.unregister(listener1, callback)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)

		var evaluator0 = collection.get(0)
		evaluator0.assertNotNull
		evaluator0.filter.assertNull
		var isListener0Inside = evaluator0.target === listener0
		if (isListener0Inside) {
			listener0.assertSame(evaluator0.target)
		} else {
			listener1.assertSame(evaluator0.target)
		}

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		// The order of the listeners is not warranty
		if (isListener0Inside) {
			callbackParam.allValues.assertContains(listener1)
		} else {
			callbackParam.allValues.assertContains(listener0)
		}
	}

	@Test
	@DisplayName("unregister(l,null)")
	def unregisterObjectProcedure1_obj_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		this.registry.unregister(listener1, null)

		2.assertEquals(this.internalStructure.size)

		this.internalStructure.get(typeof(Initialize)).assertNotNull

		var collection = this.internalStructure.get(typeof(TestEvent0))
		collection.assertNotNull
		1.assertEquals(collection.size)

		var evaluator0 = collection.get(0)
		evaluator0.assertNotNull
		evaluator0.filter.assertNull
		var isListener0Inside = evaluator0.target === listener0
		if (isListener0Inside) {
			listener0.assertSame(evaluator0.target)
		} else {
			listener1.assertSame(evaluator0.target)
		}
	}

	@Test
	@DisplayName("unregister(null,c)")
	def unregisterObjectProcedure1_null_obj : void {
		typeof(AssertionError).assertException [
			val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
			val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
			this.registry.register(listener0)
			this.registry.register(listener1)
			reset(listener0, listener1)

			var callback : (Object)=>void = typeof(Procedure1).mock
			this.registry.unregister(null, callback)
		]
	}

	@Test
	@DisplayName("unregister(null,null)")
	def unregisterObjectProcedure1_null_null : void {
		typeof(AssertionError).assertException [
			val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
			val listener1 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
			this.registry.register(listener0)
			this.registry.register(listener1)
			reset(listener0, listener1)

			var callback : (Object)=>void = null
			this.registry.unregister(null, callback)
		]
	}

	@Test
	@DisplayName("unregister(t,c)")
	def unregisterClassFunction1_type_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var callback : (Object)=>boolean = typeof(Function1).mock
		this.registry.unregister(typeof(TestAgent2), callback)

		// It is 3 because the key-value pairs are not removed when the value becomes empty
		3.assertEquals(this.internalStructure.size)

		var collection0 = this.internalStructure.get(typeof(Initialize))
		collection0.assertNotNull
		1.assertEquals(collection0.size)
		var evaluator0 = collection0.get(0)
		evaluator0.assertNotNull
		evaluator0.filter.assertNull
		listener0.assertSame(evaluator0.target)

		var collection1 = this.internalStructure.get(typeof(TestEvent0))
		collection1.assertNotNull
		1.assertEquals(collection1.size)
		var evaluator1 = collection1.get(0)
		evaluator1.assertNotNull
		evaluator1.filter.assertNull
		listener0.assertSame(evaluator1.target)

		var collection2 = this.internalStructure.get(typeof(Destroy))
		collection2.assertNotNull
		collection2.empty.assertTrue

		val callbackParam = typeof(Object).forClass
		callback.verify(1.times).apply(callbackParam.capture)
		callbackParam.value.assertSame(listener1)
	}

	@Test
	@DisplayName("unregister(t,null)")
	def unregisterClassFunction1_type_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var callback : (Object)=>boolean = null
		this.registry.unregister(typeof(TestAgent2), callback)

		// It is 3 because the key-value pairs are not removed when the value becomes empty
		3.assertEquals(this.internalStructure.size)

		var collection0 = this.internalStructure.get(typeof(Initialize))
		collection0.assertNotNull
		1.assertEquals(collection0.size)
		var evaluator0 = collection0.get(0)
		evaluator0.assertNotNull
		evaluator0.filter.assertNull
		listener0.assertSame(evaluator0.target)

		var collection1 = this.internalStructure.get(typeof(TestEvent0))
		collection1.assertNotNull
		1.assertEquals(collection1.size)
		var evaluator1 = collection1.get(0)
		evaluator1.assertNotNull
		evaluator1.filter.assertNull
		listener0.assertSame(evaluator1.target)

		var collection2 = this.internalStructure.get(typeof(Destroy))
		collection2.assertNotNull
		collection2.empty.assertTrue
	}

	@Test
	@DisplayName("unregister(null,c)")
	def unregisterClassFunction1_null_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val callback : (Object)=>boolean = typeof(Function1).mock
		typeof(AssertionError).assertException [
			this.registry.unregister(null, callback)
		]
	}

	@Test
	@DisplayName("unregister(null,null)")
	def unregisterClassFunction1_null_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val callback : (Object)=>boolean = null
		typeof(AssertionError).assertException [
			this.registry.unregister(null, callback)
		]
	}

	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForDirectAccessListener(e,listener0)")
	def getBehaviorGuardEvaluatorsForDirectAccessListenerEventObject_obj_listener0 : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val ^event = typeof(TestEvent0).mock
		var evaluators = this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(^event, listener0)

		1.assertEquals(evaluators.size)
		var evaluator = evaluators.get(0) as PolymorphicBehaviorGuardEvaluator
		evaluator.assertNotNull
		listener0.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForDirectAccessListener(e,listener1)")
	def getBehaviorGuardEvaluatorsForDirectAccessListenerEventObject_obj_listener1 : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val ^event = typeof(TestEvent0).mock
		var evaluators = this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(^event, listener1)

		1.assertEquals(evaluators.size)

		var evaluator0 = evaluators.get(0) as PolymorphicBehaviorGuardEvaluator
		evaluator0.assertNotNull
		listener1.assertSame(evaluator0.target)

		var evaluator1 = evaluators.get(0) as PolymorphicBehaviorGuardEvaluator
		evaluator1.assertNotNull
		listener1.assertSame(evaluator1.target)
	}

	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForDirectAccessListener(e,listener2)")
	def getBehaviorGuardEvaluatorsForDirectAccessListenerEventObject_obj_listener2 : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		val listener2 = typeof(TestAgent0).mock
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val ^event = typeof(TestEvent0).mock
		var evaluators = this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(^event, listener2)

		evaluators.empty.assertTrue
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForDirectAccessListener(e,null)")
	def getBehaviorGuardEvaluatorsForDirectAccessListenerEventObject_obj_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val ^event = typeof(TestEvent0).mock
		typeof(AssertionError).assertException [
			var x = this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(^event, null)
		]
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForDirectAccessListener(null,listener0)")
	def getBehaviorGuardEvaluatorsForEventObject_null_listener0 : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		typeof(AssertionError).assertException [
			var x = this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(null, listener0)
		]
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForDirectAccessListener(null,null)")
	def getBehaviorGuardEvaluatorsForDirectAccessListenerEventObject_null_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		typeof(AssertionError).assertException [
			var x = this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(null, null)
		]
	}

	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForRegisteredListeners(e)")
	def getBehaviorGuardEvaluatorsForRegisteredListenersEvent_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val ^event = typeof(TestEvent0).mock
		var evaluators = this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(^event)

		2.assertEquals(evaluators.size)

		var evaluator0 = evaluators.get(0) as PolymorphicBehaviorGuardEvaluator
		evaluator0.assertNotNull
		var listener0consumed0 = (evaluator0.target === listener0)
		if (listener0consumed0) {
			listener0.assertSame(evaluator0.target)
		} else {
			listener1.assertSame(evaluator0.target)
		}

		var evaluator1 = evaluators.get(1) as PolymorphicBehaviorGuardEvaluator
		evaluator1.assertNotNull
		if (listener0consumed0) {
			listener1.assertSame(evaluator1.target)
		} else {
			listener0consumed0 = (evaluator1.target === listener0)
			if (listener0consumed0) {
				listener0.assertSame(evaluator1.target)
			} else {
				listener1.assertSame(evaluator1.target)
			}
		}
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getBehaviorGuardEvaluatorsForRegisteredListeners(null)")
	def getBehaviorGuardEvaluatorsForRegisteredListenersEvent_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val ^event : TestEvent0 = null
		typeof(AssertionError).assertException [
			var x = this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(^event)
		]
	}

	@Test
	@DisplayName("getRegisteredEventListeners(TestAgent2)")
	def getRegisteredEventListenersClass_testagent2 : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var subscribers = this.registry.getRegisteredEventListeners(typeof(TestAgent2))

		1.assertEquals(subscribers.size)

		listener1.assertSame(subscribers.get(0))
	}

	@Test
	@DisplayName("getRegisteredEventListeners(TestAgent1)")
	def getRegisteredEventListenersClass_testagent1 : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var subscribers = this.registry.getRegisteredEventListeners(typeof(TestAgent1))

		2.assertEquals(subscribers.size)

		val listener0isfirst = (subscribers.get(0) === listener0)
		if (listener0isfirst) {
			listener0.assertSame(subscribers.get(0))
			listener1.assertSame(subscribers.get(1))
		} else {
			listener1.assertSame(subscribers.get(0))
			listener0.assertSame(subscribers.get(1))
		}
	}

	@Test
	@DisplayName("getRegisteredEventListeners(Agent)")
	def getRegisteredEventListenersClass_agent : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var subscribers = this.registry.getRegisteredEventListeners(typeof(Agent))

		2.assertEquals(subscribers.size)

		val listener0isfirst = (subscribers.get(0) === listener0)
		if (listener0isfirst) {
			listener0.assertSame(subscribers.get(0))
			listener1.assertSame(subscribers.get(1))
		} else {
			listener1.assertSame(subscribers.get(0))
			listener0.assertSame(subscribers.get(1))
		}
	}

	@Test
	@DisplayName("getRegisteredEventListeners(Behavior)")
	def getRegisteredEventListenersClass_behavior : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		var subscribers = this.registry.getRegisteredEventListeners(typeof(Behavior))

		subscribers.empty.assertTrue
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getRegisteredEventListeners(null)")
	def getRegisteredEventListenersClass_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		typeof(AssertionError).assertException [
			var x = this.registry.getRegisteredEventListeners(null)
		]
	}

	@Test
	@DisplayName("getRegisteredEventListeners(TestAgent2,c)")
	def getRegisteredEventListenersClassCollection_testagent2_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val col = newHashSet

		var subscribers = this.registry.getRegisteredEventListeners(typeof(TestAgent2), col)

		1.assertEquals(col.size)
		1.assertEquals(subscribers)

		listener1.assertSame(col.get(0))
	}

	@Test
	@DisplayName("getRegisteredEventListeners(TestAgent1,c)")
	def getRegisteredEventListenersClassCollection_testagent1_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val col = newHashSet

		var subscribers = this.registry.getRegisteredEventListeners(typeof(TestAgent1), col)

		2.assertEquals(col.size)
		2.assertEquals(subscribers)

		val listener0isfirst = (col.get(0) === listener0)
		if (listener0isfirst) {
			listener0.assertSame(col.get(0))
			listener1.assertSame(col.get(1))
		} else {
			listener1.assertSame(col.get(0))
			listener0.assertSame(col.get(1))
		}
	}

	@Test
	@DisplayName("getRegisteredEventListeners(Agent,c)")
	def getRegisteredEventListenersClassCollection_agent_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val col = newHashSet

		var subscribers = this.registry.getRegisteredEventListeners(typeof(Agent), col)

		2.assertEquals(col.size)
		2.assertEquals(subscribers)

		val listener0isfirst = (col.get(0) === listener0)
		if (listener0isfirst) {
			listener0.assertSame(col.get(0))
			listener1.assertSame(col.get(1))
		} else {
			listener1.assertSame(col.get(0))
			listener0.assertSame(col.get(1))
		}
	}

	@Test
	@DisplayName("getRegisteredEventListeners(Behavior,c)")
	def getRegisteredEventListenersClassCollection_behavior_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		val col = newHashSet

		var subscribers = this.registry.getRegisteredEventListeners(typeof(Behavior), col)

		0.assertEquals(col.size)
		0.assertEquals(subscribers)
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getRegisteredEventListeners(null,c)")
	def getRegisteredEventListenersClassCollection_null_obj : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		typeof(AssertionError).assertException [
			var x = this.registry.getRegisteredEventListeners(null, newHashSet)
		]
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getRegisteredEventListeners(null,null)")
	def getRegisteredEventListenersClassCollection_null_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		typeof(AssertionError).assertException [
			var x = this.registry.getRegisteredEventListeners(null, null)
		]
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("getRegisteredEventListeners(t,null)")
	def getRegisteredEventListenersClassCollection_type_null : void {
		val listener0 = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val listener1 = new TestAgent2(UUID::randomUUID, UUID::randomUUID).spy
		this.registry.register(listener0)
		this.registry.register(listener1)
		reset(listener0, listener1)

		typeof(AssertionError).assertException [
			var x = this.registry.getRegisteredEventListeners(typeof(Agent), null)
		]
	}

}
