/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal

import io.sarl.api.core.ContextJoined
import io.sarl.api.core.ContextLeft
import io.sarl.api.core.Logging
import io.sarl.lang.core.Event
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.internal.SubHolonContextEventEmitter
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.internal.mocks.BehSkill
import io.sarl.sre.janus.tests.internal.mocks.LogSkill
import io.sarl.sre.janus.tests.internal.mocks.MyAgent0
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.junit.jupiter.api.Assertions.*

import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SubHolonContextEventEmitter test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SubHolonContextEventEmitterTest {
		
	@Nullable
	var contextID : UUID

	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : MyAgent0

	@Nullable
	var behaviors : BehSkill

	@Nullable
	var emitter : SubHolonContextEventEmitter

	@Nullable
	var logger : Logging

	@BeforeEach
	def setUp : void {
		this.contextID = UUID::randomUUID
		this.agentId = UUID::randomUUID
		this.logger = new LogSkill().spy
		this.behaviors = new BehSkill().spy
		this.^agent = new MyAgent0(this.behaviors, this.logger, this.contextID, this.agentId).spy
		this.emitter = new SubHolonContextEventEmitter(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
	}
	
	@Test
	def contextJoined {
		var id1 = UUID::randomUUID
		var id2 = UUID::randomUUID
		this.emitter.contextJoined(id1, id2)
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		this.behaviors.verify.wake(^event.capture)
		assertNotNull(^event.value)
		assertInstanceOf(typeof(ContextJoined), ^event.value)
		var evt = ^event.value as ContextJoined
		assertNotNull(evt.source)
		assertEquals(id1, evt.holonContextID)
		assertEquals(id2, evt.defaultSpaceID)
	}

	@Test
	def contextLeft {
		var id1 = UUID::randomUUID
		this.emitter.contextLeft(id1)
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		this.behaviors.verify.wake(^event.capture)
		assertNotNull(^event.value)
		assertInstanceOf(typeof(ContextLeft), ^event.value)
		var evt = ^event.value as ContextLeft
		assertNotNull(evt.source)
		assertEquals(id1, evt.holonContextID)
	}

}
