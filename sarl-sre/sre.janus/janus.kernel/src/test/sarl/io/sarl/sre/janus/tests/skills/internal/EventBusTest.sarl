/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.internal

import io.sarl.lang.core.Event
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.capacities.InternalSchedules
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluator
import io.sarl.sre.janus.internal.eventguard.IBehaviorGuardEvaluatorRegistry
import io.sarl.sre.janus.skills.internal.EventBus
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.Collection
import java.util.logging.Logger
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: EventBus test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class EventBusTest {

	@Nullable
	var registry : IBehaviorGuardEvaluatorRegistry

	@Nullable
	var eventBus : EventBus

	@Nullable
	var executor : InternalSchedules

	@BeforeEach
	def setUp : void {
		this.registry = typeof(IBehaviorGuardEvaluatorRegistry).mock
		this.executor = typeof(InternalSchedules).mock
		this.eventBus = new EventBus([this.executor], this.registry, [SreTestUtilities::newFactories])
	}

	@Test
	def hasRegisteredEventListener {
		when(this.registry.hasRegisteredEventListener(any)).thenReturn(true)
		this.eventBus.hasRegisteredEventListener(typeof(Event)).assertTrue
	}

	@Test
	def getRegisteredEventListeners {
		when(this.registry.hasRegisteredEventListener(any)).thenReturn(true)
		this.eventBus.hasRegisteredEventListener(typeof(Event)).assertTrue
	}

	@Test
	def register {
		var listener = typeof(Object).mock
		var filter = typeof(Function1).mock
		var callback = typeof(Procedure1).mock
		this.eventBus.register(listener, filter, callback)
		var capturedListener = typeof(Object).forClass
		var capturedFilter = typeof(Function1).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.registry.verify.register(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		listener.assertSame(capturedListener.value)
		filter.assertSame(capturedFilter.value)
		callback.assertSame(capturedCallback.value)
	}

	@Test
	def unregister {
		var listener = typeof(Object).mock
		var callback = typeof(Procedure1).mock
		this.eventBus.unregister(listener, callback)
		var capturedListener = typeof(Object).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.registry.verify.unregister(capturedListener.capture, capturedCallback.capture)
		listener.assertSame(capturedListener.value)
		callback.assertSame(capturedCallback.value)
	}

	@Test
	def unregisterAll {
		var callback = typeof(Function1).mock
		this.eventBus.unregisterAll(callback)
		var capturedCallback = typeof(Function1).forClass
		this.registry.verify.unregisterAll(capturedCallback.capture)
		callback.assertSame(capturedCallback.value)
	}

	@SuppressWarnings("raw_type")
	@Test
	@DisplayName("asyncDispatch with single event handler")
	def asyncDispatch_singleHandler {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(IBehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)).thenAnswer [
			var evaluators = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler = typeof(Runnable).mock
		doAnswer [
			(it.getArgument(1) as Collection) += eventHandler
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock
	
		// Dispatch
		this.eventBus.asyncDispatch(^event, logger)
		
		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify(2.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	@DisplayName("asyncDispatch with two event handlers")
	def asyncDispatch_twoHandlers {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(IBehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)).thenAnswer [
			var evaluators = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.asyncDispatch(^event, logger)

		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify(3.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	@DisplayName("asyncDispatchTo with single event handler")
	def asyncDispatchTo_singleHandler {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(IBehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)).thenAnswer [
			var evaluators = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler = typeof(Runnable).mock
		doAnswer [
			(it.getArgument(1) as Collection) += eventHandler
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock
	
		// Dispatch
		this.eventBus.asyncDispatchTo(typeof(Object).mock, ^event, logger)
		
		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluatorsForDirectAccessListener(typeof(Event).any, typeof(Object).any)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify(1.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	@DisplayName("asyncDispatchTo with two event handlers")
	def asyncDispatchTo_twoHandlers {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(IBehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)).thenAnswer [
			var evaluators = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.asyncDispatchTo(typeof(Object).mock, ^event, logger)

		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluatorsForDirectAccessListener(typeof(Event).any, typeof(Object).any)

		var capturedRunnable = typeof(Runnable).forClass
		this.executor.verify(1.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	def immediateDispatch : void {
		// Prepare mocks
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(IBehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)).thenAnswer [
			var evaluators = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.immediateDispatch(^event, true, logger)

		// Verify
		var capturedCollection = typeof(Collection).forClass
		this.executor.verify(1.times).executeBlockingTasks(capturedCollection.capture, eq(true))
		capturedCollection.value.assertNotNull

		verifyNoMoreInteractions(this.executor)

		this.registry.verify(1.times).getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)
	}

	@SuppressWarnings("raw_type")
	@Test
	def immediateDispatchTo : void {
		// Prepare mocks
		var listener = typeof(Object).mock
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(IBehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsForDirectAccessListener(typeof(Event).any, typeof(Object).any)).thenAnswer [
			var evaluators = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.immediateDispatchTo(listener, ^event, true, logger)

		// Verify
		var capturedCollection = typeof(Collection).forClass
		this.executor.verify(1.times).executeBlockingTasks(capturedCollection.capture, eq(true))
		capturedCollection.value.assertNotNull

		verifyNoMoreInteractions(this.executor)

		this.registry.verify(1.times).getBehaviorGuardEvaluatorsForRegisteredListeners(typeof(Event).any)
	}

}
