/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.InformedEventListener
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.context.InternalContextMembershipListener
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.skills.bic.ExternalContextAccessSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent4
import io.sarl.sre.janus.tests.skills.bic.mocks.MyInternalEventBusSkill2
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestReflections.*
import static java.util.UUID.*
import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: ExternalContextAccessSkill test")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class ExternalContextAccessSkillTest {

	@Nullable
	var service : ContextService
	
	@Nullable
	var contextId : UUID
	
	@Nullable
	var agentId : UUID

	@Nullable
	var rootContext : Context

	@Nullable
	var defaultContext : Context

	@Nullable
	var defaultSpace : OpenEventSpace

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : ExternalContextAccessSkill

	@Nullable
	var eventBusListener : InformedEventListener

	@Nullable
	var eventBus : MyInternalEventBusSkill2

	@Nullable
	var emitter1 : ExternalContextMemberListener

	@Nullable
	var emitter2 : InternalContextMembershipListener
	
	@BeforeEach
	def setUp : void {
		this.contextId = randomUUID
		this.^agentId = randomUUID
		this.eventBusListener = typeof(InformedEventListener).mock
		this.eventBus = new MyInternalEventBusSkill2().spy
		when(this.eventBus.associatedEventBusListener).thenReturn(this.eventBusListener)
		this.rootContext = typeof(Context).mock
		this.service = typeof(ContextService).mock
		when(this.service.rootContext).thenReturn(this.rootContext)
		this.^agent = spy(new MyAgent4(contextId, this.^agentId, this.eventBus))
		var defSpaceId = new SpaceID(this.contextId, randomUUID, typeof(OpenEventSpaceSpecification))
		var adr = new Address(defSpaceId, this.^agentId)
		this.defaultSpace = typeof(OpenEventSpace).mock
		when(this.defaultSpace.spaceID).thenReturn(defSpaceId)
		this.defaultContext = typeof(Context).mock
		when(this.defaultContext.ID).thenReturn(this.contextId)
		when(this.defaultContext.defaultSpace).thenReturn(this.defaultSpace)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(defaultContext, adr)
		this.emitter1 = typeof(ExternalContextMemberListener).mock
		this.emitter2 = typeof(InternalContextMembershipListener).mock
		this.^skill = new ExternalContextAccessSkill(this.service, [emitter1], [emitter2], [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
		invokeProc(this.^skill.class, this.^skill, "install", #[])
	}

	private def forceOneExternalContextCreation : Context[] {
		var id1 = UUID::fromString("00000001-0000-0000-0000-000000000000")
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(id1)
		var sid1 = new SpaceID(id1, UUID::fromString("00000001-0001-0000-0000-000000000000"), typeof(OpenEventSpaceSpecification))
		var space1 = typeof(OpenEventSpace).mock
		when(space1.spaceID).thenReturn(sid1)
		when(ctx1.defaultSpace).thenReturn(space1)
		var adr1 = new Address(sid1, this.^agentId)
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).addExternalContext(ctx1, adr1)
		return #[ctx1]
	}

	private def forceTwoExternalContextCreation : Context[] {
		var first = forceOneExternalContextCreation
		var id2 = UUID::fromString("00000002-0000-0000-0000-000000000000")
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(id2)
		var sid2 = new SpaceID(id2, UUID::fromString("00000001-0001-0000-0000-000000000000"), typeof(OpenEventSpaceSpecification))
		var space2 = typeof(OpenEventSpace).mock
		when(space2.spaceID).thenReturn(sid2)
		when(ctx2.defaultSpace).thenReturn(space2)
		var adr2 = new Address(sid2, this.^agentId)
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).addExternalContext(ctx2, adr2)

		return #[first.get(0), ctx2]
	}

	@Test
	def getUniverseContext {
		this.rootContext.assertSame(this.^skill.universeContext)
	}

	@Test
	@DisplayName("getContext(UUID) without external context")
	def getContext_noExternalContext {
		this.defaultContext.assertSame(this.^skill.getContext(this.contextId))
		this.^skill.getContext(randomUUID).assertNull
	}

	@Test
	@DisplayName("getContext(UUID) with 2 external contexts")
	def getContext_withExternalContext {
		var ctx = forceTwoExternalContextCreation
		this.defaultContext.assertSame(this.^skill.getContext(this.contextId))
		for (c : ctx) {
			c.assertSame(this.^skill.getContext(c.ID))
		}
		this.^skill.getContext(randomUUID).assertNull
	}

	@Test
	@DisplayName("getAllContexts() without external context")
	def getAllContexts_noExternalContext {
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext)
	}

	@Test
	@DisplayName("getAllContexts() with 2 external contexts")
	def getAllContexts_withExternalContext {
		var ctx = forceTwoExternalContextCreation
		var actual = this.^skill.allContexts
		actual.assertContains(ctx.get(0), ctx.get(1), this.defaultContext)
	}

	@Test
	@DisplayName("isInSpace(Event, UUID)")
	def isInSpaceUUID {
		var spaceId1 = randomUUID
		var spaceId2 = randomUUID
		var ^event = typeof(Event).mock
		var adr1 = new Address(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)), this.^agentId)
		when(^event.source).thenReturn(adr1)
		
		this.^skill.isInSpace(^event, spaceId1).assertTrue
		this.^skill.isInSpace(^event, spaceId2).assertFalse
	}

	@Test
	@DisplayName("isInSpace(Event, SpaceID)")
	def isInSpaceSpaceID {
		var spaceId1 = randomUUID
		var spaceId2 = randomUUID
		var ^event = typeof(Event).mock
		var adr1 = new Address(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)), this.^agentId)
		when(^event.source).thenReturn(adr1)
		
		this.^skill.isInSpace(^event, new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification))).assertTrue
		this.^skill.isInSpace(^event, new SpaceID(this.contextId, spaceId2, typeof(OpenEventSpaceSpecification))).assertFalse
		this.^skill.isInSpace(^event, new SpaceID(randomUUID, spaceId1, typeof(OpenEventSpaceSpecification))).assertFalse
		this.^skill.isInSpace(^event, new SpaceID(randomUUID, spaceId2, typeof(OpenEventSpaceSpecification))).assertFalse
	}

	@Test
	@DisplayName("isInSpace(Event, Space)")
	def isInSpaceSpace {
		var spaceId1 = randomUUID
		var spaceId2 = randomUUID
		var ^event = typeof(Event).mock
		var adr1 = new Address(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)), this.^agentId)
		when(^event.source).thenReturn(adr1)
	
		var space1 = typeof(Space).mock
		when(space1.spaceID).thenReturn(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)))
		
		var space2 = typeof(Space).mock
		when(space2.spaceID).thenReturn(new SpaceID(this.contextId, spaceId2, typeof(OpenEventSpaceSpecification)))

		var space3 = typeof(Space).mock
		when(space3.spaceID).thenReturn(new SpaceID(randomUUID, spaceId1, typeof(OpenEventSpaceSpecification)))

		var space4 = typeof(Space).mock
		when(space4.spaceID).thenReturn(new SpaceID(randomUUID, spaceId2, typeof(OpenEventSpaceSpecification)))

		this.^skill.isInSpace(^event, space1).assertTrue
		this.^skill.isInSpace(^event, space2).assertFalse
		this.^skill.isInSpace(^event, space3).assertFalse
		this.^skill.isInSpace(^event, space4).assertFalse
	}

	@Test
	@DisplayName("join(UUID, UUID) the default context")
	def join_defaultContext {
		this.^skill.join(this.contextId, this.defaultSpace.spaceID.ID).assertNull
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	@DisplayName("join(UUID, UUID) an already joined external context")
	def join_joinedExternalContext {
		var ctxs = forceTwoExternalContextCreation
		
		this.^skill.join(ctxs.get(0).ID, ctxs.get(0).defaultSpace.spaceID.ID).assertNull
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext, ctxs.get(0), ctxs.get(1))
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	@DisplayName("join(UUID, UUID) unknown context")
	def join_unknownContext {
		this.^skill.join(randomUUID, this.defaultSpace.spaceID.ID).assertNull
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	@DisplayName("join(UUID, UUID) with invalid space id")
	def join_invalidSpaceId {
		// Create a context into the context service
		var ctxId = randomUUID
		var spId = randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)
		
		this.^skill.join(ctxId, this.defaultSpace.spaceID.ID).assertNull

		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	@DisplayName("join(UUID, UUID) with 1 external context when agent is not alive")
	def join_validSpaceId_firstExternalContext_notAlive {
		// Create a context into the context service
		var ctxId = randomUUID
		var spId = randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		this.^skill.join(ctxId, spId).assertNull
	}

	@Test
	@DisplayName("join(UUID, UUID) with 1 external context when agent is alive")
	def join_validSpaceId_firstExternalContext_alive {
		// Create a context into the context service
		var ctxId = randomUUID
		var spId = randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		// Force alive
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		context.assertSame(this.^skill.join(ctxId, spId))
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext, context)
		
		var captedContextId = typeof(UUID).forClass
		var captedSpaceId = typeof(UUID).forClass
		emitter2.verify(1.times).contextJoined(captedContextId.capture, captedSpaceId.capture)
		ctxId.assertEquals(captedContextId.value)
		spId.assertEquals(captedSpaceId.value)

		var captedContext = typeof(AgentContext).forClass
		var captedSpaceID = typeof(SpaceID).forClass
		var captedAgentID = typeof(UUID).forClass
		var captedType = typeof(String).forClass
		emitter1.verify(1.times).memberJoined(
				captedContext.capture, captedSpaceID.capture,
				captedAgentID.capture, captedType.capture)
		context.assertSame(captedContext.value)
		new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)).assertEquals(captedSpaceID.value)
		this.^agentId.assertEquals(captedAgentID.value)
		this.^agent.class.name.assertEquals(captedType.value)
	}

	@Test
	@DisplayName("join(UUID, UUID) with 2 external contexts when agent is not alive")
	def join_validSpaceId_withExternalContexts_notAlive {
		forceTwoExternalContextCreation
		
		// Create a context into the context service
		var ctxId = randomUUID
		var spId = randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		this.^skill.join(ctxId, spId).assertNull
	}

	@Test
	@DisplayName("join(UUID, UUID) with 2 external contexts when agent is alive")
	def join_validSpaceId_withExternalContexts_alive {
		var ctxs = forceTwoExternalContextCreation
		
		// Create a context into the context service
		var ctxId = randomUUID
		var spId = randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		// Force alive
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE

		context.assertSame(this.^skill.join(ctxId, spId))
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext, ctxs.get(0), ctxs.get(1), context)

		var captedContextId = typeof(UUID).forClass
		var captedSpaceId = typeof(UUID).forClass
		emitter2.verify(1.times).contextJoined(captedContextId.capture, captedSpaceId.capture)
		ctxId.assertEquals(captedContextId.value)
		spId.assertEquals(captedSpaceId.value)

		var captedContext = typeof(AgentContext).forClass
		var captedSpaceID = typeof(SpaceID).forClass
		var captedAgentID = typeof(UUID).forClass
		var captedType = typeof(String).forClass
		emitter1.verify(1.times).memberJoined(
				captedContext.capture, captedSpaceID.capture,
				captedAgentID.capture, captedType.capture)
		context.assertSame(captedContext.value)
		new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)).assertEquals(captedSpaceID.value)
		this.^agentId.assertEquals(captedAgentID.value)
		this.^agent.class.name.assertEquals(captedType.value)
	}

	@Test
	@DisplayName("leave(UUID) from unknown context")
	def leave_unknownContext {
		this.^skill.leave(randomUUID).assertFalse
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext)
		this.defaultContext.assertSame(this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).defaultContext.context)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	@DisplayName("leave(UUID) from default context without external context")
	def leave_defaultContext_noExternalContext {
		this.^skill.leave(this.contextId).assertFalse
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext)
		this.defaultContext.assertSame(this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).defaultContext.context)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	@DisplayName("leave(UUID) from default context without 2 external contexts")
	def leave_defaultContext_twoExternalContext {
		var ctxs = forceTwoExternalContextCreation

		this.^skill.leave(this.contextId).assertTrue
		
		var actual = this.^skill.allContexts
		actual.assertContains(ctxs.get(0), ctxs.get(1))
		ctxs.get(0).assertSame(this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).defaultContext.context)

		var captedContextId = typeof(UUID).forClass
		emitter2.verify(1.times).contextLeft(captedContextId.capture)
		this.contextId.assertEquals(captedContextId.value)

		var captedContext = typeof(AgentContext).forClass
		var captedSpaceID = typeof(SpaceID).forClass
		var captedAgentID = typeof(UUID).forClass
		var captedType = typeof(String).forClass
		emitter1.verify(1.times).memberLeft(captedContext.capture, captedSpaceID.capture, captedAgentID.capture,
			captedType.capture)
		this.defaultContext.assertSame(captedContext.value)
		new SpaceID(this.contextId, this.defaultSpace.spaceID.ID, typeof(OpenEventSpaceSpecification)).assertEquals(
			captedSpaceID.value)
		this.^agentId.assertEquals(captedAgentID.value)
		this.^agent.class.name.assertEquals(captedType.value)
	}

	@Test
	@DisplayName("leave(UUID) from default context without 1 external context")
	def leave_defaultContext_oneExternalContext {
		var ctxs = forceOneExternalContextCreation

		this.^skill.leave(this.contextId).assertTrue
		
		var actual = this.^skill.allContexts
		actual.assertContains(ctxs.get(0))
		ctxs.get(0).assertSame(this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).defaultContext.context)

		var captedContextId = typeof(UUID).forClass
		emitter2.verify(1.times).contextLeft(captedContextId.capture)
		this.contextId.assertEquals(captedContextId.value)

		var captedContext = typeof(AgentContext).forClass
		var captedSpaceID = typeof(SpaceID).forClass
		var captedAgentID = typeof(UUID).forClass
		var captedType = typeof(String).forClass
		emitter1.verify(1.times).memberLeft(captedContext.capture, captedSpaceID.capture, captedAgentID.capture, captedType.capture)
		this.defaultContext.assertSame(captedContext.value)
		new SpaceID(
				this.contextId,
				this.defaultSpace.spaceID.ID,
				typeof(OpenEventSpaceSpecification)).assertEquals(
				captedSpaceID.value)
		this.^agentId.assertEquals(captedAgentID.value)
		this.^agent.class.name.assertEquals(captedType.value)
	}

	@Test
	@DisplayName("leave(UUID) from external context")
	def leave_externalContext {
		var ctxs = forceTwoExternalContextCreation

		this.^skill.leave(ctxs.get(1).ID).assertTrue
		
		var actual = this.^skill.allContexts
		actual.assertContains(this.defaultContext, ctxs.get(0))
		this.defaultContext.assertSame(this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).defaultContext.context)


		var captedContextId = typeof(UUID).forClass
		emitter2.verify(1.times).contextLeft(captedContextId.capture)
		ctxs.get(1).ID.assertEquals(captedContextId.value)

		var captedContext = typeof(AgentContext).forClass
		var captedSpaceID = typeof(SpaceID).forClass
		var captedAgentID = typeof(UUID).forClass
		var captedType = typeof(String).forClass
		emitter1.verify(1.times).memberLeft(captedContext.capture, captedSpaceID.capture, captedAgentID.capture, captedType.capture)
		ctxs.get(1).assertSame(captedContext.value)
		new SpaceID(
				ctxs.get(1).ID,
				ctxs.get(1).defaultSpace.spaceID.ID,
				typeof(OpenEventSpaceSpecification)).assertEquals(
				captedSpaceID.value)
		this.^agentId.assertEquals(captedAgentID.value)
		this.^agent.class.name.assertEquals(captedType.value)
	}

}
