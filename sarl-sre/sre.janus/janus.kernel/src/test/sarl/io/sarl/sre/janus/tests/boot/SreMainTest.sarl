/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.boot

import io.bootique.BQRuntime
import io.bootique.Bootique
import io.bootique.command.CommandOutcome
import io.bootique.config.ConfigurationFactory
import io.bootique.di.Injector
import io.sarl.apputils.bootiqueapp.config.LogConfig
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.SREBootstrap
import io.sarl.lang.core.SREListener
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.Kernel
import io.sarl.sre.janus.boot.SreMain
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.BootConfig
import io.sarl.sre.janus.boot.configs.subconfigs.InvalidAgentNameException
import io.sarl.sre.janus.boot.configs.subconfigs.NoBootAgentNameException
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.test.framework.agents.ShortLifeTestingAgent
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.mockito.ModuleMock
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.logging.Level
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestAssertions.assertException
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SreMain test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SreMainTest {

	public val DEFAULT_OPTIONS = #[
		"agent-spawns-per-thread",
		"async-probe-update",
		"boot-type",
		"classpath",
		"config",
		"cp",
		"default-space-id",
		"event-bus",
		"help",
		"help-config",
		"inject-agents",
		"internal-error-log-level",
		"json",
		"keep-alive",
		"log",
		"min-threads",
		"max-threads",
		"name",
		"no-agent",
		"printconfig",
		"root-context-id",
		"service-start-timeout",
		"service-stop-timeout",
		"thread-purge",
		"thread-timeout",
		"version",
		"xml"
	]

	@Nullable
	var bootstrap : SreMain
	
	@Nullable
	var kernel : Kernel
	
	@Nullable
	var bootique : Bootique

	@Nullable
	var runtime : BQRuntime

	@Nullable
	var rootContext : AgentContext

	@Nullable
	var configurationFactory : ConfigurationFactory

	@Nullable
	var sreConfig : SreConfig

	@Nullable
	var injector : Injector

	@Nullable
	var loggingService : LoggingService

	private def createConfiguration(bootAgent : Class<?>) {
		var bootConfig = this.sreConfig.boot
		bootConfig.bootAgent = bootAgent.name
		bootConfig.agentStartArgs = #["a"]
		bootConfig.commandLineArgs = #[typeof(ShortLifeTestingAgent).name, "a"]
		bootConfig = bootConfig.spy
		when(this.configurationFactory.config(typeof(Class).any, typeof(String).any)).thenReturn(bootConfig)
	}
	
	private def createBootiqueMock(instances : (Class<?>) => Object = null) {
		this.loggingService = typeof(LoggingService).mock
		this.sreConfig = new SreConfig().spy
		this.configurationFactory = typeof(ConfigurationFactory).mock
		this.rootContext = typeof(AgentContext).mock
		this.kernel = typeof(Kernel).mock
		when(this.kernel.rootContext).thenReturn(this.rootContext)
		when(this.kernel.getService(typeof(Class).any)).thenReturn(typeof(LifecycleService).mock)

		this.injector = typeof(Injector).mock
		when(this.injector.getInstance(typeof(Class).any)).thenAnswer [
			val type : Class<?> = it.getArgument(0)
			if (instances !== null) {
				var obj = instances.apply(type)
				if (obj !== null) {
					return obj
				}
			}
			if (typeof(Kernel) == type) {
				return this.kernel
			}
			if (typeof(ConfigurationFactory) == type) {
				return this.configurationFactory
			}
			if (typeof(SreConfig) == type) {
				return this.sreConfig
			}
			throw new IllegalStateException(type.name)
		]
		this.runtime = typeof(BQRuntime).mock
		when(this.runtime.getInstance(typeof(Class).any)).thenAnswer [
			val type : Class<?> = it.getArgument(0)
			if (instances !== null) {
				var obj = instances.apply(type)
				if (obj !== null) {
					return obj
				}
			}
			if (typeof(Kernel) == type) {
				return this.kernel
			}
			if (typeof(ConfigurationFactory) == type) {
				return this.configurationFactory
			}
			if (typeof(BootConfig) == type) {
				return this.sreConfig.boot
			}
			if (typeof(SreConfig) == type) {
				return this.sreConfig
			}
			if (typeof(Injector) == type) {
				return this.injector
			}
			if (typeof(LoggingService) == type) {
				return this.loggingService
			}
			throw new IllegalStateException(type.name)
		]
		this.bootique = typeof(Bootique).mock
		when(this.bootique.module(typeof(Class).any)).thenReturn(this.bootique)
		when(this.bootique.autoLoadModules).thenReturn(this.bootique)
		when(this.bootique.createRuntime).thenReturn(this.runtime)
		
		this.bootstrap.runtime = this.runtime
	}

	@BeforeEach
	def setUp {
		this.bootstrap = new SreMain
	}

	@Test
	def getKernel_start0 {
		this.bootstrap.kernel.assertNull
	}

	@Test
	def getKernel_start1 {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(false, this.bootique)
		this.kernel.assertSame(this.bootstrap.kernel)
	}

	@Test
	def getRuntime_start0 {
		this.bootstrap.runtime.assertNull
	}

	@Test
	def getRuntime_start1 {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(false, this.bootique)
		this.runtime.assertSame(this.bootstrap.runtime)
	}

	@Test
	def getService_start0 {
		this.bootstrap.getService(typeof(LoggingService)).assertNull
	}

	@Test
	def getService_start1 : void {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(false, this.bootique)
		var serv = this.bootstrap.getService(typeof(LifecycleService))
		serv.assertNotNull
		typeof(LifecycleService).assertInstanceOf(serv)
	}

	@Test
	def isActive_start0 {
		this.bootstrap.active.assertTrue
	}

	@Test
	def isActive_start1 {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(false, this.bootique)
		this.bootstrap.active.assertTrue
	}

	@Test
	def setVerboseLevel {
		var configInstance = new LogConfig
		createBootiqueMock [
			if (it == typeof(LogConfig)) {
				return configInstance
			}
		]
		var config = this.runtime.getInstance(typeof(LogConfig))
		
		Level::INFO.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = -1
		Level::OFF.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 0
		Level::OFF.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 1
		Level::SEVERE.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 2
		Level::WARNING.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 3
		Level::INFO.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 4
		Level::FINE.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 5
		Level::FINEST.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 6
		Level::FINEST.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 7
		Level::ALL.assertEquals(config.level.toJul)

		this.bootstrap.verboseLevel = 8
		Level::ALL.assertEquals(config.level.toJul)
	}

	@Test
	def startAgentClassObjectArray {
		createBootiqueMock
		typeof(ShortLifeTestingAgent).createConfiguration
		this.bootstrap.startWithoutAgent(false, this.bootique)
		this.bootstrap.startAgent(typeof(ShortLifeTestingAgent), "a")
		var arg0 = typeof(Class).forClass
		var arg1 = typeof(Object[]).forClass
		this.kernel.verify.spawn(arg0.capture, arg1.capture)
		typeof(ShortLifeTestingAgent).assertEquals(arg0.value)
		"a".assertEquals(arg1.value.get(0))
	}

	@Test
	def startAgentIntClassObjectArray {
		createBootiqueMock
		typeof(ShortLifeTestingAgent).createConfiguration
		this.bootstrap.startWithoutAgent(false, this.bootique)
		this.bootstrap.startAgent(1, typeof(ShortLifeTestingAgent), "a")
		var arg0 = typeof(int).forClass
		var arg1 = typeof(Class).forClass
		var arg2 = typeof(Object[]).forClass
		this.kernel.verify.spawn(arg0.capture.intValue, arg1.capture, arg2.capture)
		1.assertEquals(arg0.value)
		typeof(ShortLifeTestingAgent).assertEquals(arg1.value)
		"a".assertEquals(arg2.value.get(0))
	}

	@Test
	def startBootAgent_start0 : void {
		typeof(NoBootAgentNameException).assertException [
			var configInstance = new SreConfig().spy
			createBootiqueMock [
				if (it == typeof(SreConfig)) {
					return configInstance
				}
			]
			this.bootstrap.startWithoutAgent(false, this.bootique)
			this.bootstrap.startBootAgent
		]
	}

	@Test
	def startBootAgent_start1 : void {
		typeof(InvalidAgentNameException).assertException [
			createBootiqueMock
			typeof(String).createConfiguration
			this.bootstrap.startWithoutAgent(false, this.bootique)
			this.bootstrap.startBootAgent
		]
	}

	
	@Test
	def startBootAgent_start2 {
		createBootiqueMock
		typeof(ShortLifeTestingAgent).createConfiguration
		this.bootstrap.startWithoutAgent(false, this.bootique)
		this.bootstrap.startBootAgent
		var arg0 = typeof(Class).forClass
		var arg1 = typeof(Object[]).forClass
		this.kernel.verify.spawn(arg0.capture, arg1.capture)
		typeof(ShortLifeTestingAgent).assertEquals(arg0.value)
		"a".assertEquals(arg1.value.get(0))
	}

	@Test
	def startWithoutAgentBootique_start0 {
		createBootiqueMock
		var ctx = this.bootstrap.startWithoutAgent(false, this.bootique)
		this.rootContext.assertSame(ctx)
		this.kernel.assertSame(this.bootstrap.kernel)
		this.runtime.assertSame(this.bootstrap.runtime)
	}

	@Test
	def startWithoutAgentBootique_start1 {
		createBootiqueMock
		var ctx0 = this.bootstrap.startWithoutAgent(false, this.bootique)
		this.rootContext.assertSame(ctx0)
		this.kernel.assertSame(this.bootstrap.kernel)
		this.runtime.assertSame(this.bootstrap.runtime)
		var ctx1 = this.bootstrap.startWithoutAgent(false, this.bootique)
		this.rootContext.assertSame(ctx1)
		ctx0.assertSame(ctx1)
		this.kernel.assertSame(this.bootstrap.kernel)
		this.runtime.assertSame(this.bootstrap.runtime)
	}

	@Test
	def startWithoutAgentBootiqueClass_start0 {
		createBootiqueMock
		var ctx = this.bootstrap.startWithoutAgent(false, this.bootique, typeof(ModuleMock))
		this.rootContext.assertSame(ctx);
		this.kernel.assertSame(this.bootstrap.getKernel());
		this.runtime.assertSame(this.bootstrap.getRuntime());
	}

	@Test
	def startWithoutAgentBootiqueClass_start1 {
		createBootiqueMock
		var ctx0 = this.bootstrap.startWithoutAgent(false, this.bootique, typeof(ModuleMock))
		this.rootContext.assertSame(ctx0)
		this.kernel.assertSame(this.bootstrap.kernel)
		this.runtime.assertSame(this.bootstrap.runtime)
		var ctx1 = this.bootstrap.startWithoutAgent(false, this.bootique, typeof(ModuleMock))
		this.rootContext.assertSame(ctx1)
		ctx0.assertSame(ctx1)
		this.kernel.assertSame(this.bootstrap.kernel)
		this.runtime.assertSame(this.bootstrap.runtime)
	}

	@Test
	def runSREObjectArray_start0 : void {
		createBootiqueMock
		typeof(ShortLifeTestingAgent).createConfiguration

		var retcode = this.bootstrap.runSRE("--version")

		// Because run() function is not binded to the real code.
		255.assertEquals(retcode)

		this.runtime.verify(only).run
	}

	@Test
	def runSREObjectArray_start1 : void {
		createBootiqueMock
		typeof(ShortLifeTestingAgent).createConfiguration
		
		var outcome = typeof(CommandOutcome).mock
		when(outcome.exitCode).thenReturn(1234)
		when(outcome.isSuccess).thenReturn(false)
		when(this.runtime.run).thenReturn(outcome)

		var retcode = this.bootstrap.runSRE("--version")

		1234.assertEquals(retcode)

		this.runtime.verify(only).run
	}

	@Test
	def runSREObjectArray_start2 : void {
		createBootiqueMock
		typeof(ShortLifeTestingAgent).createConfiguration

		var outcome = typeof(CommandOutcome).mock
		when(outcome.exitCode).thenReturn(0)
		when(outcome.isSuccess).thenReturn(true)
		when(this.runtime.run).thenReturn(outcome)

		var retcode = this.bootstrap.runSRE("--version")

		0.assertEquals(retcode)

		this.runtime.verify(only).run
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	def shutdown_01 : void {
		createBootiqueMock
		this.bootstrap.startWithoutAgent

		this.bootstrap.shutdown

		this.bootstrap.kernel.assertNull
		this.bootstrap.isRunning.assertFalse
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	def shutdownInt_01 : void {
		createBootiqueMock
		this.bootstrap.startWithoutAgent

		this.bootstrap.shutdown(1000)

		this.bootstrap.kernel.assertNull
		this.bootstrap.isRunning.assertFalse
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	def shutdownBoolean_01 : void {
		createBootiqueMock
		this.bootstrap.startWithoutAgent

		this.bootstrap.shutdown(true)

		this.bootstrap.kernel.assertNull
		this.bootstrap.isRunning.assertFalse
	}

	@Test
	@DisplayName("addSREListener with 1 observer")
	def addSREListener01 : void {
		val observer = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer)
		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)
		val argument = typeof(SREBootstrap).forClass
		observer.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
	}

	@Test
	@DisplayName("addSREListener with 2 observers")
	def addSREListener02 : void {
		val observer0 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer0)
		val observer1 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer1)
		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)
		val argument = typeof(SREBootstrap).forClass
		observer0.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
		observer1.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
	}

	@Test
	@DisplayName("addSREListener with 3 observers")
	def addSREListener03 : void {
		val observer0 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer0)
		val observer1 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer1)
		val observer2 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer2)
		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)
		val argument = typeof(SREBootstrap).forClass
		observer0.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
		observer1.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
		observer2.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
	}

	@Test
	@DisplayName("removeSREListener with 1 observer")
	def removeSREListener01 : void {
		val observer = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer)

		this.bootstrap.removeSREListener(observer)

		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)
		observer.verify(never).sreStarted(typeof(SREBootstrap).any)
	}

	@Test
	@DisplayName("removeSREListener with 2 observers")
	def removeSREListener02 : void {
		val observer0 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer0)
		val observer1 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer1)

		this.bootstrap.removeSREListener(observer0)

		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)

		val argument = typeof(SREBootstrap).forClass

		observer0.verify(never).sreStarted(typeof(SREBootstrap).any)

		observer1.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
	}

	@Test
	@DisplayName("removeSREListener with 3 observers")
	def removeSREListener03 : void {
		val observer0 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer0)
		val observer1 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer1)
		val observer2 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer2)

		this.bootstrap.removeSREListener(observer0)

		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)

		val argument = typeof(SREBootstrap).forClass

		observer0.verify(never).sreStarted(typeof(SREBootstrap).any)

		observer1.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)

		observer2.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)
	}

	@Test
	def fireSREStarted : void {
		val observer0 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer0)
		val observer1 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer1)
		val observer2 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer2)

		val meth = typeof(SreMain).getDeclaredMethod("fireSREStarted")
		meth.accessible = true
		meth.invoke(this.bootstrap)

		val argument = typeof(SREBootstrap).forClass

		observer0.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)

		observer0.verify(never).sreStopped(typeof(SREBootstrap).any)

		observer1.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)

		observer1.verify(never).sreStopped(typeof(SREBootstrap).any)

		observer2.verify(only).sreStarted(argument.capture)
		this.bootstrap.assertSame(argument.value)

		observer2.verify(never).sreStopped(typeof(SREBootstrap).any)
	}

	@Test
	def fireSREStopped : void {
		val observer0 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer0)
		val observer1 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer1)
		val observer2 = typeof(SREListener).mock
		this.bootstrap.addSREListener(observer2)

		val meth = typeof(SreMain).getDeclaredMethod("fireSREStopped")
		meth.accessible = true
		meth.invoke(this.bootstrap)

		val argument = typeof(SREBootstrap).forClass

		observer0.verify(never).sreStarted(argument.capture)

		observer0.verify(only).sreStopped(argument.capture)
		this.bootstrap.assertSame(argument.value)

		observer1.verify(never).sreStarted(argument.capture)

		observer1.verify(only).sreStopped(argument.capture)
		this.bootstrap.assertSame(argument.value)

		observer2.verify(never).sreStarted(argument.capture)

		observer2.verify(only).sreStopped(argument.capture)
		this.bootstrap.assertSame(argument.value)
	}

}
