/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.namespace

import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.SpaceWithParticipants
import io.sarl.api.naming.name.SpaceName
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.namespace.SpaceNamespaceFinder
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNull
import static extension org.junit.jupiter.api.Assertions.assertSame

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SpaceNamespaceFinder test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SpaceNamespaceFinderTest {

	@Nullable
	var contextService : ContextService

	@Nullable
	var finder : SpaceNamespaceFinder

	@Nullable
	var cid0 : UUID

	@Nullable
	var sid0 : UUID

	@Nullable
	var spc0 : MySpace

	@Nullable
	var cid1 : UUID

	@Nullable
	var sid1 : UUID

	@Nullable
	var spc1 : MySpace

	@SuppressWarnings("use_reserved_sarl_annotation")
	@BeforeEach
	@PrivateAPI(isCallerOnly = true)
	def setUp : void {
		this.contextService = typeof(ContextService).mock
		this.finder = new SpaceNamespaceFinder(this.contextService)
		
		// Default space creation
		this.sid0 = UUID::randomUUID
		this.spc0 = typeof(MySpace).mock
		this.cid0 = UUID::randomUUID
		var ctx0 = typeof(Context).mock
		when(ctx0.defaultSpace).thenReturn(this.spc0)
		when(ctx0.getSpace(any(typeof(UUID)))).thenAnswer [
			if (it.getArgument(0) == this.sid0) {
				return this.spc0
			} else {
				return null
			}
		]

		// Other space creation
		this.sid1 = UUID::randomUUID
		this.spc1 = typeof(MySpace).mock
		this.cid1 = UUID::randomUUID
		var ctx1 = typeof(Context).mock
		when(ctx1.defaultSpace).thenReturn(this.spc1)
		when(ctx1.getSpace(any(typeof(UUID)))).thenAnswer [
			if (it.getArgument(0) == this.sid1) {
				return this.spc1
			} else {
				return null
			}
		]

		when(this.contextService.rootContext).thenReturn(ctx0)
		when(this.contextService.getContext(any(typeof(UUID)))).thenAnswer [
			if (it.getArgument(0) == this.cid0) {
				return ctx0
			} else if (it.getArgument(0) == this.cid1) {
				return ctx1
			} else {
				return null
			}
		]
	}

	@Test
	def getScheme : void {
		SpaceName::SCHEME.assertEquals(this.finder.scheme)
	}

	@Test
	def find_SpaceName_null : void {
		this.finder.find(null).assertNull
	}

	@Test
	def find_SpaceName_nocid_nosid : void {
		var name = typeof(SpaceName).mock
		this.spc0.assertSame(this.finder.find(name))
	}

	@Test
	def find_SpaceName_nocid_sid_validSpace : void {
		var name = typeof(SpaceName).mock
		when(name.spaceId).thenReturn(this.sid0)
		this.spc0.assertSame(this.finder.find(name))
	}

	@Test
	def find_SpaceName_nocid_sid_invalidSpace : void {
		var name = typeof(SpaceName).mock
		when(name.spaceId).thenReturn(UUID::randomUUID)
		this.finder.find(name).assertNull
	}

	@Test
	def find_SpaceName_cid_nosid_validContext : void {
		var name = typeof(SpaceName).mock
		when(name.contextId).thenReturn(this.cid1)
		this.spc1.assertSame(this.finder.find(name))
	}

	@Test
	def find_SpaceName_cid_nosid_invalidContext : void {
		var name = typeof(SpaceName).mock
		when(name.contextId).thenReturn(UUID::randomUUID)
		this.finder.find(name).assertNull
	}
	
	private static interface MySpace extends OpenEventSpace, SpaceWithParticipants {
		//
	}

}
