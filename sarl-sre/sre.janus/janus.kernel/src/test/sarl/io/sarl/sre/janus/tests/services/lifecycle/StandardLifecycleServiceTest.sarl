/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.lifecycle

import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.sre.janus.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.janus.services.context.ExternalContextMemberListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.lifecycle.AgentCreatorProvider
import io.sarl.sre.janus.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.janus.services.lifecycle.SkillUninstaller
import io.sarl.sre.janus.services.lifecycle.StandardLifecycleService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import jakarta.inject.Provider
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@DisplayName("unit: StandardLifecycleService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class StandardLifecycleServiceTest extends AbstractLifecycleServiceTest<StandardLifecycleService> {

	override newService(executor : ExecutorService, logger : LoggingService,
		skillProvider : DynamicSkillProvider, skillUninstaller : SkillUninstaller,
		agentCreatorProvider : AgentCreatorProvider, contextListenerProvider : Provider<ExternalContextMemberListener>,
		lifecycleListenerProvider : Provider<LifecycleServiceListener>,
		lifecycleConfig : Provider<LifecycleConfig>) : StandardLifecycleService {
		return new StandardLifecycleService(
			this.checker,
			agentCreatorProvider,
			lifecycleListenerProvider,
			contextListenerProvider,
			[SreTestUtilities::newFactories],
			[SreTestUtilities::newConfigurableAgentInjector],
			skillProvider,
			skillUninstaller,
			executor,
			logger,
			lifecycleConfig.get)
	}

}
