/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.lifecycle

import com.google.common.collect.Iterables
import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.InformedEventListener
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.util.OutParameter
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.services.lifecycle.ContextReference
import io.sarl.sre.janus.services.lifecycle.SkillUninstaller
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MyAgent1
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MyLogging
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MySkill
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.Iterator
import java.util.List
import java.util.TreeSet
import java.util.UUID
import java.util.function.BooleanSupplier
import java.util.logging.Level
import java.util.logging.Logger
import org.eclipse.xtext.xbase.lib.Procedures.Procedure0
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.anyString
import static org.mockito.Mockito.*
import static org.mockito.Mockito.doAnswer
import static org.mockito.Mockito.reset
import static org.mockito.Mockito.verifyNoMoreInteractions

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AgentLife test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class AgentLifeTest {

	@Nullable
	var eventBus : MySkill

	@Nullable
	var ^agent : Agent

	@Nullable
	var life : AgentLife

	@Nullable
	var logging : Logging

	@BeforeEach
	def setUp : void {
		this.eventBus = new MySkill().spy
		this.logging = new MyLogging().spy
		this.^agent = new MyAgent1(this.eventBus, this.logging).spy
		this.life = ^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		// Remove the interaction
		reset(this.eventBus)
	}

	@Test
	@DisplayName("getAgent")
	def getAgent {
		this.^agent.assertSame(this.life.^agent)
	}

	@Test
	@DisplayName("setAgent")
	def setAgent {
		var ag = typeof(Agent).mock
		this.life.^agent = ag
		ag.assertSame(this.life.^agent)
	}

	@Test
	@DisplayName("getState")
	def getState {
		AgentState::UNSTARTED.assertSame(this.life.state)
	}

	@Test
	@DisplayName("setState")
	def setState {
		this.life.state = AgentState::DEAD
		AgentState::DEAD.assertSame(this.life.state)
	}

	@Test
	@DisplayName("setInnerContext")
	def setInnerContext {
		var ctx2 = typeof(Context).mock
		var ctx1 = this.life.setInnerContext(ctx2)
		ctx1.assertNull
		ctx2.assertSame(this.life.getInnerContext(null))

		var ctx3 = typeof(Context).mock
		ctx1 = this.life.setInnerContext(ctx3)
		ctx2.assertSame(ctx1)
		ctx3.assertSame(this.life.getInnerContext(null))
	}

	@Test
	@DisplayName("getInnerContext without factory")
	def getInnerContext {
		this.life.getInnerContext(null).assertNull
	}

	@Test
	@DisplayName("getInnerContext with factory")
	def getInnerContext_withFactory {
		val m = typeof(Context).mock
		m.assertSame(this.life.getInnerContext([m]))
	}

	
	@Test
	@DisplayName("getAddressInInnerDefaultSpace")
	def getAddressInInnerDefaultSpace {
		var adr = this.life.addressInInnerDefaultSpace
		adr.assertNotNull
		this.^agent.ID.assertEquals(adr.ID)
		this.^agent.ID.assertEquals(adr.spaceID.contextID)
		this.^agent.ID.assertNotEquals(adr.spaceID.ID)
	}

	@Test
	@DisplayName("getExternalContexts")
	def getExternalContexts {
		var context = this.life.externalContexts
		context.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("getEnclosingContexts without enclosing context")
	def getEnclosingContexts_0 {
		// No enclosing context
		var context = this.life.enclosingContexts
		context.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("getEnclosingContexts with enclosing context")
	def getEnclosingContexts_1 {
		// One enclosing context: the default context
		var ctx = typeof(Context).mock
		var adr = typeof(Address).mock
		this.life.setDefaultContext(ctx, adr)
		var context = this.life.enclosingContexts
		var iterator = context.iterator
		
		iterator.hasNext.assertTrue
		var ref = iterator.next
		ctx.assertSame(ref.context)
		adr.assertSame(ref.addressInDefaultSpace)

		iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("getEnclosingContexts with 2 enclosing contexts")
	def getEnclosingContexts_2 {
		// Two external contexts: ctx1 and ctx2
		var minmax = #[UUID::randomUUID, UUID::randomUUID].sort
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(0))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(1))
		var adr2 = typeof(Address).mock
		var ref1 = this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)
		var context = this.life.enclosingContexts
		var iterator = context.iterator

		#[ref1.clone, ref2.clone].assertUnorderedContexts(iterator)
	}

	@Test
	@DisplayName("getEnclosingContexts with 3 enclosing contexts")
	def getEnclosingContexts_3 {
		var minmax = #[UUID::randomUUID, UUID::randomUUID, UUID::randomUUID].sort
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(minmax.get(0))
		var adr0 = typeof(Address).mock
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(1))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(2))
		var adr2 = typeof(Address).mock
		this.life.setDefaultContext(ctx0, adr0)
		var ref0 = new ContextReference(this.life, ctx0, adr0)
		var ref1 = this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)
		var context = this.life.enclosingContexts
		var iterator = context.iterator

		#[ref0, ref1.clone, ref2.clone].assertUnorderedContexts(iterator)
	}

	@Test
	@DisplayName("getEnclosingContexts with 4 enclosing contexts")
	def getEnclosingContexts_4 {
		var minmax = #[UUID::randomUUID, UUID::randomUUID, UUID::randomUUID].sort
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(minmax.get(2))
		var adr0 = typeof(Address).mock
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(0))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(1))
		var adr2 = typeof(Address).mock
		this.life.setDefaultContext(ctx0, adr0)
		var ref0 = new ContextReference(this.life, ctx0, adr0)
		var ref1 =this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)

		var context = this.life.enclosingContexts
		var iterator = context.iterator

		#[ref0, ref1.clone, ref2.clone].assertUnorderedContexts(iterator)
	}

	@Test
	@DisplayName("getExternalContexts without external context")
	def getExternalContexts_0 {
		var context = this.life.externalContexts
		assertFalse(context.iterator.hasNext)
	}

	@Test
	@DisplayName("getExternalContexts with 1 external context")
	def getExternalContexts_1 {
		var ctx = typeof(Context).mock
		var adr = typeof(Address).mock
		this.life.setDefaultContext(ctx, adr)
		var context = this.life.externalContexts
		var iterator = context.iterator
		
		iterator.hasNext.assertFalse
	}
	
	@Test
	@DisplayName("getExternalContexts with 2 external contexts")
	def getExternalContexts_2 {
		var minmax = #[UUID::randomUUID, UUID::randomUUID].sort
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(0))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(1))
		var adr2 = typeof(Address).mock
		var ref1 = this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)
		var context = this.life.externalContexts
		var iterator = context.iterator
		
		#[ref1.clone, ref2.clone].assertUnorderedContexts(iterator)
	}

	@Test
	@DisplayName("getExternalContexts with 3 external contexts")
	def getExternalContexts_3 {
		var minmax = #[UUID::randomUUID, UUID::randomUUID, UUID::randomUUID].sort
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(minmax.get(0))
		var adr0 = typeof(Address).mock
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(1))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(2))
		var adr2 = typeof(Address).mock
		this.life.setDefaultContext(ctx0, adr0)
		var ref1 = this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)
		var context = this.life.externalContexts
		var iterator = context.iterator

		#[ref1.clone, ref2.clone].assertUnorderedContexts(iterator)
	}

	@Test
	@DisplayName("getExternalContextCount without external contexts")
	def getExternalContextCount_0 {
		0.assertEquals(this.life.externalContextCount)
	}

	@Test
	@DisplayName("getExternalContextCount with 1 external context")
	def getExternalContextCount_1 {
		var ctx = typeof(Context).mock
		var adr = typeof(Address).mock
		this.life.setDefaultContext(ctx, adr)
		0.assertEquals(this.life.externalContextCount)
	}
	
	@Test
	@DisplayName("getExternalContextCount with 2 external contexts")
	def getExternalContextCount_2 {
		var minmax = #[UUID::randomUUID, UUID::randomUUID].sort
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(0))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(1))
		var adr2 = typeof(Address).mock
		this.life.addExternalContext(ctx1, adr1)
		this.life.addExternalContext(ctx2, adr2)
		2.assertEquals(this.life.externalContextCount)
	}

	@Test
	@DisplayName("getExternalContextCount with 3 external contexts")
	def getExternalContextCount_3 {
		var minmax = #[UUID::randomUUID, UUID::randomUUID, UUID::randomUUID].sort
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(minmax.get(0))
		var adr0 = typeof(Address).mock
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(1))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(2))
		var adr2 = typeof(Address).mock
		this.life.setDefaultContext(ctx0, adr0)
		this.life.addExternalContext(ctx1, adr1)
		this.life.addExternalContext(ctx2, adr2)
		
		2.assertEquals(this.life.externalContextCount)
	}

	@Test
	@DisplayName("setDefaultContext")
	def setDefaultContext {
		var ctx = typeof(Context).mock
		this.life.setDefaultContext(ctx, typeof(Address).mock)
		assertSame(ctx, this.life.defaultContext.context)
		ctx = typeof(Context).mock
		var ref = this.life.setDefaultContext(ctx, typeof(Address).mock)
		ctx.assertSame(this.life.defaultContext.context)
		ref.assertNotNull
		ref.context.assertNotEquals(ctx)
	}

	@Test
	@DisplayName("getDefaultContext")
	def getDefaultContext {
		assertNull(this.life.defaultContext)
		var ctx = typeof(Context).mock
		this.life.setDefaultContext(ctx, typeof(Address).mock)
		ctx.assertSame(this.life.defaultContext.context)
		ctx = typeof(Context).mock
		this.life.setDefaultContext(ctx, typeof(Address).mock)
		ctx.assertSame(this.life.defaultContext.context)
	}

	@Test
	@DisplayName("addExternalContext")
	def addExternalContext {
		var minmax : List<UUID> = #[UUID::randomUUID, UUID::randomUUID]
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(minmax.get(0))
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(minmax.get(1))
		var adr2 = typeof(Address).mock
		var ref1 = this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)
		
		ref1.assertNotNull
		ctx1.assertSame(ref1.context)
		adr1.assertSame(ref1.addressInDefaultSpace)
		ref2.assertNotNull
		ctx2.assertSame(ref2.context)
		adr2.assertSame(ref2.addressInDefaultSpace)
		
		var context = this.life.externalContexts
		var iterator = context.iterator

		#[ref1, ref2].assertUnorderedContexts(iterator)
	}

	private static def assertUnorderedContexts(expected : Collection<ContextReference>, iterator : Iterator<ContextReference>) : void {
		val actual = newArrayList
		while (iterator.hasNext) {
			var ref = iterator.next
			actual += ref	
		}
		val le = new ArrayList
		Iterables::addAll(le, expected)
		val unexpectedElements = new TreeSet
		val it1 = actual.iterator
		while (it1.hasNext) {
			val ac = it1.next
			it1.remove
			if (ac !== null) {
				var found = false
				var it2 = le.iterator
				while (it2.hasNext) {
					val ec = it2.next
					if (ec !== null) {
						if (ec.context.ID === ac.context.ID) {
							it2.remove
							assertSame(ec.addressInDefaultSpace, ac.addressInDefaultSpace)
							found = true
							break
						}
					}
				}
				if (!found) {
					unexpectedElements.add(ac.toString)
				}
			}
		}

		if (!unexpectedElements.empty) {
			fail("Unexpected elements:\n" + unexpectedElements.toString + "\nActual elements are:\n" +
					Iterables::toString(actual) + "\nExpected elements are:\n" + Iterables::toString(expected))
		} else if (!le.empty) {
			fail("Expecting the following elements:\n" + le.toString + "\nActual elements are:\n" +
					Iterables::toString(actual) + "\nExpected elements are:\n" + Iterables::toString(expected))
		}
	}

	@Test
	@DisplayName("removeExternalContext(Context)")
	def removeExternalContextContext {
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(UUID::randomUUID)
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(UUID::randomUUID)
		var adr2 = typeof(Address).mock
		this.life.addExternalContext(ctx1, adr1)
		var ref2 = this.life.addExternalContext(ctx2, adr2)
		
		var rref = this.life.removeExternalContext(ctx1)

		rref.assertNotNull
		ctx1.assertSame(rref.context)
		adr1.assertSame(rref.addressInDefaultSpace)

		var context = this.life.externalContexts
		var iterator = context.iterator

		#[ref2.clone].assertUnorderedContexts(iterator)
	}

	@Test
	@DisplayName("removeExternalContext(ContextReference)")
	def removeExternalContextContextReference {
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(UUID::randomUUID)
		var adr1 = typeof(Address).mock
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(UUID::randomUUID)
		var adr2 = typeof(Address).mock
		var ref1 = this.life.addExternalContext(ctx1, adr1)
		this.life.addExternalContext(ctx2, adr2)
		
		this.life.removeExternalContext(ref1)
		
		var context = this.life.externalContexts
		var iterator = context.iterator
		
		iterator.hasNext.assertTrue
		var ref = iterator.next
		ctx2.assertSame(ref.context)
		adr2.assertSame(ref.addressInDefaultSpace)

		iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("start with failing on Initialize")
	def start_failingInOnInitialize : void {
		var installer = typeof(SkillUninstaller).mock
		when(installer.uninstallSkillsBeforeDestroy(any)).thenReturn(new ArrayList)
		var logger = typeof(LoggingService).mock
		var loglog = typeof(Logger).mock
		when(logger.getKernelLogger).thenReturn(loglog)
		when(logger.getKernelModuleLogger(anyString)).thenReturn(loglog)
		var parent = UUID::randomUUID
		var spawner = UUID::randomUUID
		var spawningContext = typeof(Context).mock
		when(spawningContext.ID).thenReturn(parent)
		var spawningSpace = typeof(OpenEventSpace).mock
		when(spawningSpace.spaceID).thenReturn(new SpaceID(parent, UUID::randomUUID, typeof(OpenEventSpaceSpecification)))
		when(spawningContext.defaultSpace).thenReturn(spawningSpace)
		var params = #[UUID::randomUUID, UUID::randomUUID.toString]
		
		this.eventBus.failure = true
		
		try {
			this.life.start(this.^agent, installer, typeof(Logger).mock, spawner, spawningContext, params)
		} catch (ex : RuntimeException) {
			//
		}
		
		AgentState.DEAD.assertSame(this.life.getState())
		
		var event0 = ArgumentCaptor::forClass(typeof(Event))
		var gath0 = ArgumentCaptor::forClass(typeof(boolean))
		var handler0 = ArgumentCaptor::forClass(typeof(Procedure0))
		var handler1 = ArgumentCaptor::forClass(typeof(BooleanSupplier))
		var eventList = ArgumentCaptor::forClass(typeof(OutParameter))
		this.eventBus.verify(1.times).fireEventAndWaitWithEventGathering(event0.capture, gath0.capture.booleanValue,
			eventList.capture, handler0.capture, handler1.capture)
		typeof(Initialize).assertInstanceOf(event0.value)
		gath0.value.assertTrue
		handler0.value.assertNotNull
		handler1.value.assertNotNull

		var event1 = ArgumentCaptor::forClass(typeof(Event))
		var gath1 = ArgumentCaptor::forClass(typeof(boolean))
		this.eventBus.verify(1.times).fireEventAndWait(event1.capture, gath1.capture.booleanValue)
		typeof(Destroy).assertInstanceOf(event1.value)
		gath1.value.assertTrue
	}

	@Test
	@DisplayName("start")
	def start_success : void {
		var eventListener = typeof(InformedEventListener).mock
		when(this.eventBus.associatedEventBusListener).thenReturn(eventListener)
		var installer = typeof(SkillUninstaller).mock
		when(installer.uninstallSkillsBeforeDestroy(any)).thenReturn(new ArrayList)
		var logger = typeof(LoggingService).mock
		var loglog = typeof(Logger).mock
		when(logger.getKernelLogger).thenReturn(loglog)
		when(logger.getKernelModuleLogger(anyString)).thenReturn(loglog)
		// Force the logger to forward the exception
		doAnswer([
			Exceptions::sneakyThrow(it.getArgument(0) as Throwable)
			return null
		]).when(loglog).log(typeof(Level).any, anyString, typeof(Throwable).any)
		var parent = UUID::randomUUID
		var spawner = UUID::randomUUID
		var spawningContext = typeof(Context).mock
		when(spawningContext.ID).thenReturn(parent)
		var params : Object[] = #[UUID::randomUUID, UUID::randomUUID.toString]
		var defaultSpace = typeof(OpenEventSpace).mock
		when(spawningContext.defaultSpace).thenReturn(defaultSpace)
		var defaultSpaceID = new SpaceID(parent, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		when(defaultSpace.spaceID).thenReturn(defaultSpaceID)

		this.life.start(this.^agent, installer, typeof(Logger).mock, spawner, spawningContext, params).assertTrue

		AgentState::ALIVE.assertSame(this.life.state)

		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var gath = ArgumentCaptor::forClass(typeof(boolean))
		var handler0 = ArgumentCaptor::forClass(typeof(Procedure0))
		var handler1 = ArgumentCaptor::forClass(typeof(BooleanSupplier))
		var eventList = ArgumentCaptor::forClass(typeof(OutParameter))
		this.eventBus.verify(1.times).fireEventAndWaitWithEventGathering(^event.capture, gath.capture.booleanValue,
			eventList.capture, handler0.capture, handler1.capture)
		typeof(Initialize).assertInstanceOf(^event.value)
		var init = ^event.value as Initialize
		init.source.assertNotNull
		params.assertSame(init.parameters)
		spawner.assertEquals(init.spawner)
		
		gath.value.assertTrue
		handler0.value.assertNotNull
		handler1.value.assertNotNull
		
		verifyNoMoreInteractions(installer)
		verifyNoMoreInteractions(this.eventBus)
	}

	@Test
	@DisplayName("stop")
	def stop {
		var installer = typeof(SkillUninstaller).mock
		var it = new ArrayList(Collections.singletonList(this.eventBus))
		when(installer.uninstallSkillsBeforeDestroy(any)).thenReturn(it)
		
		this.life.stop(this.^agent, installer, typeof(Logger).mock, true)
		
		AgentState::DEAD.assertSame(this.life.state)
		
		var ^agent = ArgumentCaptor::forClass(typeof(Agent))
		installer.verify.uninstallSkillsBeforeDestroy(^agent.capture)
		this.^agent.assertSame(^agent.value)
		var skills = ArgumentCaptor::forClass(typeof(List))
		installer.verify.uninstallSkillsAfterDestroy(^agent.capture, skills.capture)
		this.^agent.assertSame(^agent.value)
		var iterator = skills.value.iterator
		iterator.hasNext.assertTrue
		this.eventBus.assertSame(iterator.next)
		iterator.hasNext.assertFalse
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var gath = ArgumentCaptor::forClass(typeof(boolean))
		this.eventBus.verify.fireEventAndWait(^event.capture, gath.capture.booleanValue)
		typeof(Destroy).assertInstanceOf(^event.value)
		var destroy = ^event.value as Destroy
		destroy.source.assertNotNull
		
		gath.value.assertTrue
		
		var x = this.eventBus.verify(1.times).associatedEventBusListener
		x.assertNull

		verifyNoMoreInteractions(installer, this.eventBus)
	}

	@RepeatedTest(10)
	@DisplayName("getEventBus")
	def getEventBus {
		val eb0 = this.life.getEventBus(null)
		eb0.assertNotNull
		val eb1 = this.life.getEventBus(null)
		eb0.assertSame(eb1)
	}

	@RepeatedTest(10)
	@DisplayName("getAgentLogger")
	def getAgentLogger {
		val al0 = this.life.agentLogger
		al0.assertNotNull
		val al1 = this.life.agentLogger
		al0.assertSame(al1)
	}

}
