/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.spaces

import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.spaces.AbstractSpace
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*

/** 
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AbstractSpace test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class XAbstractSpaceTest {

	@Test
	def getSpaceID {
		var spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var base = new AbstractSpace(spaceId) {
			def forEachStrongParticipant(callback : (UUID)=>void) {
				throw new UnsupportedOperationException
			}
			def getNumberOfStrongParticipants : int {
				throw new UnsupportedOperationException
			}
			def forEachWeakParticipant(callback : (UUID)=>void) {
				throw new UnsupportedOperationException
			}
			def getNumberOfWeakParticipants : int {
				throw new UnsupportedOperationException
			}
			def isPseudoEmpty(id : UUID) : boolean {
				throw new UnsupportedOperationException
			}
			
		}
		assertEquals(spaceId, base.spaceID)
	}

}
