/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.skills.bic.DefaultContextInteractionsSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent3
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestReflections.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: DefaultContextInteractionsSkill test")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class DefaultContextInteractionsSkillTest {

	@Nullable
	var contextId : UUID

	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : DefaultContextInteractionsSkill

	@BeforeEach
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.^agent = new MyAgent3(contextId, this.^agentId).spy
		this.^skill = new DefaultContextInteractionsSkill([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	@Test
	def getDefaultContext {
		var ctx = typeof(Context).mock
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)
		assertSame(ctx, this.^skill.defaultContext)
	}

	@Test
	def getDefaultSpace {
		var ctx = typeof(Context).mock
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)

		assertSame(^space, this.^skill.defaultSpace)
	}

	@Test
	def getDefaultAddress {
		var adr = typeof(Address).mock
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(typeof(Context).mock, adr)

		assertSame(adr, this.^skill.defaultAddress)
	}

	@Test
	def isDefaultContextAgentContext {
		var id0 = UUID::randomUUID
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(id0)
		var id1 = UUID::randomUUID
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(id1)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultContext(ctx0))
		assertTrue(this.^skill.isDefaultContext(ctx1))
	}

	@Test
	def isDefaultContextUUID {
		var id0 = UUID::randomUUID
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(id0)
		var id1 = UUID::randomUUID
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(id1)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultContext(id0))
		assertTrue(this.^skill.isDefaultContext(id1))
	}

	@Test
	def isDefaultSpaceSpace {
		var ctx0 = typeof(Context).mock
		var space0 = typeof(OpenEventSpace).mock
		var id0 = typeof(SpaceID).mock
		when(space0.spaceID).thenReturn(id0)
		when(ctx0.defaultSpace).thenReturn(space0)
		var ctx1 = typeof(Context).mock
		var space1 = typeof(OpenEventSpace).mock
		var id1 = typeof(SpaceID).mock
		when(space1.spaceID).thenReturn(id1)
		when(ctx1.defaultSpace).thenReturn(space1)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultSpace(space0))
		assertTrue(this.^skill.isDefaultSpace(space1))
	}

	@Test
	def isDefaultSpaceSpaceID {
		var ctx0 = typeof(Context).mock
		var space0 = typeof(OpenEventSpace).mock
		var id0 = typeof(SpaceID).mock
		when(space0.spaceID).thenReturn(id0)
		when(ctx0.defaultSpace).thenReturn(space0)
		var ctx1 = typeof(Context).mock
		var space1 = typeof(OpenEventSpace).mock
		var id1 = typeof(SpaceID).mock
		when(space1.spaceID).thenReturn(id1)
		when(ctx1.defaultSpace).thenReturn(space1)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultSpace(id0))
		assertTrue(this.^skill.isDefaultSpace(id1))
	}

	@Test
	def isDefaultSpaceUUID {
		var ctx0 = typeof(Context).mock
		var space0 = typeof(OpenEventSpace).mock
		var id0 = UUID::randomUUID
		when(space0.spaceID).thenReturn(new SpaceID(UUID::randomUUID, id0, typeof(OpenEventSpaceSpecification)))
		when(ctx0.defaultSpace).thenReturn(space0)
		var ctx1 = typeof(Context).mock
		var space1 = typeof(OpenEventSpace).mock
		var id1 = UUID::randomUUID
		when(space1.spaceID).thenReturn(new SpaceID(UUID::randomUUID, id1, typeof(OpenEventSpaceSpecification)))
		when(ctx1.defaultSpace).thenReturn(space1)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultSpace(id0))
		assertTrue(this.^skill.isDefaultSpace(id1))
	}

	@Test
	def isInDefaultSpace {
		var id0 = typeof(SpaceID).mock
		var adr0 = new Address(id0, UUID::randomUUID)
		var event0 = typeof(Event).mock
		when(event0.source).thenReturn(adr0)
		var space0 = typeof(OpenEventSpace).mock
		when(space0.spaceID).thenReturn(id0)

		var id1 = typeof(SpaceID).mock
		var adr1 = new Address(id1, UUID::randomUUID)
		var event1 = typeof(Event).mock
		when(event1.source).thenReturn(adr1)
		var space1 = typeof(OpenEventSpace).mock
		when(space1.spaceID).thenReturn(id1)

		var ctx0 = typeof(Context).mock
		when(ctx0.defaultSpace).thenReturn(space1)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx0, typeof(Address).mock)

		assertFalse(this.^skill.isInDefaultSpace(event0))
		assertTrue(this.^skill.isInDefaultSpace(event1))
	}

	@Test
	def emit_noScope {
		var ^space = typeof(OpenEventSpace).mock
		var ctx = typeof(Context).mock
		when(ctx.defaultSpace).thenReturn(^space)
		var ^event = new Event {}.spy
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)
		
		this.^skill.emit(^event)
		
		var capturedSource = typeof(UUID).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedScope = typeof(Scope).forClass
		^space.verify.emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNull(capturedScope.value)
		assertNotNull(^event.source)
	}

	@Test
	def emit_scope {
		var ^space = typeof(OpenEventSpace).mock
		var ctx = typeof(Context).mock
		when(ctx.defaultSpace).thenReturn(^space)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)
		var ^event = new Event {}.spy
		var scope = typeof(Scope).mock
		
		this.^skill.emit(^event, scope)
		
		var capturedSource = typeof(UUID).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedScope = typeof(Scope).forClass
		verify(^space).emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertSame(scope, capturedScope.value)
		assertNotNull(^event.source)
	}

	@Test
	def getDefaultParentID {
		var ctx = typeof(Context).mock
		val expectedParentId = UUID::randomUUID
		when(ctx.ID).thenReturn(expectedParentId)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)

		val parentID = this.^skill.defaultParentID

		expectedParentId.assertEquals(parentID)
	}

	@Test
	def getDefaultParentScope {
		var ctx = typeof(Context).mock
		val expectedParentId = UUID::randomUUID
		when(ctx.ID).thenReturn(expectedParentId)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)

		val scope = this.^skill.defaultParentScope

		scope.assertNotNull

		val spaceID0 = new SpaceID(expectedParentId, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		val adr0 = new Address(spaceID0, expectedParentId)
		scope.matches(adr0).assertTrue

		val other = UUID::randomUUID
		val spaceID1 = new SpaceID(other, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		val adr1 = new Address(spaceID1, other)
		scope.matches(adr1).assertFalse
	}

	@Test
	def emitToParent {
		var ^space = typeof(OpenEventSpace).mock
		val expectedParentId = UUID::randomUUID
		var ctx = typeof(Context).mock
		when(ctx.ID).thenReturn(expectedParentId)
		when(ctx.defaultSpace).thenReturn(^space)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(ctx, typeof(Address).mock)
		var ^event = new Event {}.spy
		
		this.^skill.emitToParent(^event)
		
		var capturedSource = typeof(UUID).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedScope = typeof(Scope).forClass
		^space.verify.emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		this.agentId.assertEquals(capturedSource.value)
		^event.assertSame(capturedEvent.value)
		capturedScope.value.assertNotNull
		^event.source.assertNotNull

		val spaceID0 = new SpaceID(expectedParentId, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		val adr0 = new Address(spaceID0, expectedParentId)
		capturedScope.value.matches(adr0).assertTrue

		val other = UUID::randomUUID
		val spaceID1 = new SpaceID(other, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		val adr1 = new Address(spaceID1, other)
		capturedScope.value.matches(adr1).assertFalse
	}

}
