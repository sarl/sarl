/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.probing.probes

import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.name.SpaceName
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.probing.IProbeListener
import io.sarl.api.probing.IProbeReleaseListener
import io.sarl.api.probing.Probe
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.probing.probes.ShortFieldProbe
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.net.URI
import java.util.UUID
import javax.annotation.Nullable
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertFalse
import static extension org.junit.jupiter.api.Assertions.assertNull
import static extension org.junit.jupiter.api.Assertions.assertSame
import static extension org.junit.jupiter.api.Assertions.assertTrue
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: ShortFieldProbe test")
@SuppressWarnings("all")
abstract class ShortFieldProbeTest {

	package val INIT_VALUE = 34 as short

	package val N_VALUE = 56 as short

	@Nullable
	var field : FieldAccess

	@Nullable
	var uri : URI

	@Nullable
	var name : String

	@Nullable
	var releaseListener : IProbeReleaseListener

	@Nullable
	var probeListener : IProbeListener

	@Nullable
	var probe : ShortFieldProbe

	@Nullable
	var nameObject : SarlName

	@BeforeEach
	def setUp : void {
		this.nameObject = typeof(SarlName).mock
		when(this.nameObject.scheme).thenReturn(SpaceName::SCHEME)
		this.field = createField(this.nameObject)
		this.releaseListener = typeof(IProbeReleaseListener).mock
		this.probeListener = typeof(IProbeListener).mock
		this.uri = URI::create("context://mycontext#myfield")
		this.name = UUID::randomUUID.toString
		this.probe = new ShortFieldProbe(this.releaseListener, this.name, this.uri, this.field, [SreTestUtilities::newFactories]) 
		this.probe.addProbeListener(this.probeListener)
	}

	protected def isInitialized : boolean {
		true
	}

	protected def createField(name : SarlName) : FieldAccess {
		var jfield = this.class.getDeclaredField("field")
		var faccess = new FieldAccess(name, jfield, this, true)
		return faccess.spy
	}

	@Test
	def getValue : void {
		this.probe.invalid.assertFalse

		if (isInitialized) {
			INIT_VALUE.assertEquals(this.probe.value)
		} else {
			this.probe.value.assertNull
		}

		this.probe.invalid.assertFalse

		this.releaseListener.verify(never).onProbeReleasedProbe(any)

		var x = this.field.verify(1.times).get

		this.probeListener.verify(never).probeValueChanged(any, anyBoolean)
	}

	@Test
	def setValue_nosync : void {
		this.probe.value = N_VALUE

		this.releaseListener.verify(never).onProbeReleasedProbe(any)

		this.field.verify(never).set(any)

		this.probeListener.verify(never).probeValueChanged(any, anyBoolean)
	}

	@Test
	def setValue_sync : void {
		this.probe.value = N_VALUE

		this.probe.sync

		this.releaseListener.verify(never).onProbeReleasedProbe(any)

		var capture0 = ArgumentCaptor::forClass(typeof(Object))
		this.field.verify(1.times).set(capture0.capture)
		N_VALUE.assertEquals(capture0.value)

		var capture1 = ArgumentCaptor::forClass(typeof(Probe))
		var capture2 = ArgumentCaptor::forClass(typeof(boolean))
		this.probeListener.verify(1.times).probeValueChanged(capture1.capture, capture2.capture.booleanValue)
		this.probe.assertSame(capture1.value)
		capture2.value.assertTrue
	}
	
	@Test
	def sync : void {
		this.probe.value = N_VALUE

		this.probe.sync

		this.releaseListener.verify(never).onProbeReleasedProbe(any)

		var capture0 = ArgumentCaptor::forClass(typeof(Object))
		this.field.verify(1.times).set(capture0.capture)
		N_VALUE.assertEquals(capture0.value)

		var capture1 = ArgumentCaptor::forClass(typeof(Probe))
		var capture2 = ArgumentCaptor::forClass(typeof(boolean))
		this.probeListener.verify(1.times).probeValueChanged(capture1.capture, capture2.capture.booleanValue)
		this.probe.assertSame(capture1.value)
		capture2.value.assertTrue
	}

	@Test
	def release : void {
		this.probe.release

		var capture0 = ArgumentCaptor::forClass(typeof(Probe))
		this.releaseListener.verify(1.times).onProbeReleasedProbe(capture0.capture)
		this.probe.assertSame(capture0.value)

		this.field.verify(never).set(any)

		this.probeListener.verify(never).probeValueChanged(any, anyBoolean)
	}

	@Test
	def isActive : void {
		this.probe.isActive.assertTrue
	}

	@Test
	def isInvalid : void {
		this.probe.isInvalid.assertFalse
		this.probe.sync
		this.probe.isInvalid.assertFalse
		this.probe.value = N_VALUE
		this.probe.isInvalid.assertTrue
		this.probe.sync
		this.probe.isInvalid.assertFalse
	}

	/**
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	@DisplayName("unit: ShortFieldProbe test with primitive short")
	@Nested
	@Tag("unit")
	@Tag("janus")
	@Tag("sre-unit")
	static class PrimitiveShortFieldProbeTest extends ShortFieldProbeTest {

		@SuppressWarnings("unused_private_member")
		var field : short = INIT_VALUE

	}

	/**
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	@DisplayName("unit: ShortFieldProbe test with final primitive short")
	@Nested
	@Tag("unit")
	@Tag("janus")
	@Tag("sre-unit")
	static class FinalPrimitiveShortFieldProbeTest extends ShortFieldProbeTest {

		val field : short = INIT_VALUE

	}

	/**
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	@DisplayName("unit: ShortFieldProbe test with Short")
	@Nested
	@Tag("unit")
	@Tag("janus")
	@Tag("sre-unit")
	static class ObjectShortFieldProbeTest extends ShortFieldProbeTest {

		var field : Short = INIT_VALUE

	}

	/**
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	@DisplayName("unit: ShortFieldProbe test with null Short")
	@Nested
	@Tag("unit")
	@Tag("janus")
	@Tag("sre-unit")
	static class NullShortFieldProbeTest extends ShortFieldProbeTest {

		var field : Short

		protected def isInitialized : boolean {
			false
		}

	}

	/**
	 * @author $Author: sgalland$
	 * @version janus.kernel 3.0.13.0 20230919-093058
	 * @mavengroupid io.sarl.sre.janus
	 * @mavenartifactid janus.kernel
	 */
	@DisplayName("unit: ShortFieldProbe test with final Short")
	@Nested
	@Tag("unit")
	@Tag("janus")
	@Tag("sre-unit")
	static class FinalObjectShortFieldProbeTest extends ShortFieldProbeTest {

		val field : Short = INIT_VALUE

	}

}
