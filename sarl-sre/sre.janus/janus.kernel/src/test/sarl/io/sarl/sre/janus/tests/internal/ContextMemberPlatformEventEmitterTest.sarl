/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal

import io.sarl.api.core.MemberJoined
import io.sarl.api.core.MemberLeft
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.internal.ContextMemberEventEmitter
import io.sarl.sre.test.framework.agents.ShortLifeTestingAgent
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: ContextMemberEventEmitter test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class ContextMemberEventEmitterTest {
		
	@Nullable
	var agentId : UUID

	@Nullable
	var emitter : ContextMemberEventEmitter 

	@Nullable
	var logger : Logger

	@BeforeEach
	def setUp : void {
		this.agentId = UUID::randomUUID
		this.logger = Logger::getLogger("SOME")
		this.logger.useParentHandlers = false
		this.logger = this.logger.spy
		this.emitter = new ContextMemberEventEmitter(this.logger)
	}

	@Test
	def memberJoined {
		var ctx = typeof(AgentContext).mock
		var ctxid = UUID::randomUUID
		var spaceid = UUID::randomUUID
		when(ctx.ID).thenReturn(ctxid)
		var ^space = typeof(EventSpace).mock
		var spaceidobj = new SpaceID(ctxid, spaceid, typeof(OpenEventSpaceSpecification))
		when(^space.spaceID).thenReturn(spaceidobj)
		when(ctx.defaultSpace).thenReturn(^space)
		this.emitter.memberJoined(ctx, spaceidobj, this.agentId, typeof(ShortLifeTestingAgent).name)

		var ^event = typeof(Event).forClass
		var scope = typeof(Scope).forClass
		^space.verify.emit(any, ^event.capture, scope.capture)
		^event.value.assertNotNull
		typeof(MemberJoined).assertInstanceOf(^event.value)
		var evt = ^event.value as MemberJoined
		evt.source.assertNotNull
		this.agentId.assertEquals(evt.agentID)
		ctxid.assertEquals(evt.source.ID)
		scope.value.assertNotNull
	}

	@Test
	def memberLeft {
		var ctx = typeof(AgentContext).mock
		var ctxid = UUID::randomUUID
		var spaceid = UUID::randomUUID
		when(ctx.ID).thenReturn(ctxid)
		var ^space = typeof(EventSpace).mock
		var spaceidobj = new SpaceID(ctxid, spaceid, typeof(OpenEventSpaceSpecification))
		when(^space.spaceID).thenReturn(spaceidobj)
		when(ctx.defaultSpace).thenReturn(^space)
		this.emitter.memberLeft(ctx, spaceidobj, this.agentId, typeof(ShortLifeTestingAgent).name)

		var ^event = typeof(Event).forClass
		var scope = typeof(Scope).forClass
		^space.verify.emit(any, ^event.capture, scope.capture)
		^event.value.assertNotNull
		typeof(MemberLeft).assertInstanceOf(^event.value)
		var evt = ^event.value as MemberLeft
		evt.source.assertNotNull
		this.agentId.assertEquals(evt.agentID)
		ctxid.assertEquals(evt.source.ID)
		scope.value.assertNotNull
	}
}
