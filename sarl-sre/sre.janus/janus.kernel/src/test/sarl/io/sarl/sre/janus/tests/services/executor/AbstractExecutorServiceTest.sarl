/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.executor

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.executor.tasks.EarlyExitException
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.concurrent.ThreadPoolExecutor
import java.util.logging.Level
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static io.sarl.sre.test.framework.^extension.ServiceManagementExtension.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestAssertions.assertException
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
abstract class AbstractExecutorServiceTest<T extends ExecutorService> {

	@Nullable
	protected var executor : java.util.concurrent.ExecutorService

	@Nullable
	protected var logger : Logger

	@Nullable
	protected var rootConfig : SreConfig

	@Nullable
	protected var service : T
	
	@BeforeEach
	def setUp : void {
		this.rootConfig = new SreConfig
		this.logger = typeof(Logger).mock
		this.executor = typeof(java.util.concurrent.ExecutorService).mock
		this.service = newService(this.executor)
	}

	protected def resetToThreadPoolExecutor : ThreadPoolExecutor {
		val tpe = typeof(ThreadPoolExecutor).mock
		this.executor = tpe
		this.service = newService(tpe)
		return tpe
	}

	protected abstract def newService(executor : java.util.concurrent.ExecutorService) : T

	protected def startService {
		startServiceManually(this.service)
	}
	
	@Test
	@DisplayName("neverReturn -> null")
	def neverReturn_noPostCommand : void {
		typeof(EarlyExitException).assertException [
			ExecutorService.neverReturn(null)
		]
	}

	@Test
	@DisplayName("neverReturn -> []")
	def neverReturn_postCommand : void {
		typeof(EarlyExitException).assertException [
			ExecutorService.neverReturn[]
		]
	}

	@Test
	@DisplayName("applyBlockingConsumer")
	def applyBlockingConsumer : void {
		var list = <Integer>newArrayList
		for (i : 0..<100) {
			list.add(i)
		}
		var set = <Integer>newTreeSet(null)
		this.service.applyBlockingConsumer(this.logger, list) [
			synchronized (set) {
				set.add(it * 10)
			}
		]
		100.assertEquals(set.size)
		for (var i = 0; i < 1000; i += 10) {
			set.contains(i).assertTrue
		}
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("applyBlockingConsumer with exception #1")
	def applyBlockingConsumer_exception_01 : void {
		var list = <Integer>newArrayList
		for (i : 0..<100) {
			list.add(i)
		}

		this.service.applyBlockingConsumer(this.logger, list) [ throw new RuntimeException ]

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(atLeastOnce).log(capturedLevel.capture, capturedException.capture, any)
		Level.SEVERE.assertSame(capturedLevel.value)
		typeof(RuntimeException).assertInstanceOf(capturedException.value)
	}

	@Test
	@DisplayName("applyBlockingConsumer with exception #2")
	def applyBlockingConsumer_exception_02 : void {
		var list = <Integer>newArrayList
		for (i : 0..<100) {
			list.add(i)
		}

		this.service.applyBlockingConsumer(this.logger, list) [
			ExecutorService.neverReturn(null)
		]
	}

	@Test
	@DisplayName("applyBlockingConsumer with exception #3")
	def applyBlockingConsumer_exception_03 : void {
		var list = <Integer>newArrayList
		for (i : 0..<100) {
			list.add(i)
		}

		this.service.applyBlockingConsumer(this.logger, list) [
			throw new RuntimeException(new IllegalStateException)
		]

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(atLeastOnce).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		typeof(IllegalStateException).assertInstanceOf(capturedException.value)
	}

	@Test
	@DisplayName("applyBlockingConsumer no logger with exception #1")
	def applyBlockingConsumer_exception_noLogger_01 : void {
		var list = <Integer>newArrayList
		for (i : 0 ..< 100) {
			list.add(i)
		}

		typeof(RuntimeException).assertException [
			this.service.applyBlockingConsumer(null, list)[
				throw new RuntimeException
			]
		]

		verifyNoInteractions(this.logger)
	}

	@Test
	@DisplayName("applyBlockingConsumer no logger with exception #2")
	def applyBlockingConsumer_exception_noLogger_02 : void {
		var list = <Integer>newArrayList
		for (i : 0 ..< 100) {
			list.add(i)
		}

		this.service.applyBlockingConsumer(null, list) [
			ExecutorService.neverReturn(null)
		]

		verifyNoInteractions(this.logger)
	}

	@Test
	@DisplayName("applyBlockingConsumer no logger with exception #3")
	def applyBlockingConsumer_exception_noLogger_03 : void {
		var list = <Integer>newArrayList
		for (i : 0 ..< 100) {
			list.add(i)
		}

		typeof(IllegalStateException).assertException [
			this.service.applyBlockingConsumer(null, list) [
				throw new RuntimeException(new IllegalStateException)
			]
		]

		verifyNoInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTasks forwards Exception")
	def executeBlockingTasks_throws_noException {
		var run1 = typeof(Runnable).mock
		var run2 = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		this.service.executeBlockingTasks(this.logger, true, #[run1, run2])

		this.executor.verify(2.times).execute(any)
		
		run1.verify(only).run
		run2.verify(only).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTasks forwards Exception with error")
	def executeBlockingTasks_throws_exception {
		var exception = new RuntimeException
		var run1 :Runnable = [throw exception]
		var run2 = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		try {
			this.service.executeBlockingTasks(this.logger, true, #[run1, run2])
			fail("Expecting exception: " + exception)
		} catch (ex : Throwable) {
			assertSame(exception, ex)
		}

		this.executor.verify(2.times).execute(any)
		
		run2.verify(only).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTasks not forwards Exception")
	def executeBlockingTasks_notThrows_noException {
		var run1 = typeof(Runnable).mock
		var run2 = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		this.service.executeBlockingTasks(this.logger, false, #[run1, run2])

		this.executor.verify(2.times).execute(any)
		
		run1.verify(only).run
		run2.verify(only).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTasks not forwards Exception with error")
	def executeBlockingTasks_notThrows_exception {
		var exception = new RuntimeException
		var run1 : Runnable = [throw exception]
		var run2 = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeBlockingTasks(this.logger, false, #[run1, run2])

		this.executor.verify(2.times).execute(any)
		
		run2.verify(only).run

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify.log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeBlockingTask 1 task")
	def executeBlockingTask_noException_1task {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		1.assertEquals(this.service.executeBlockingTask(this.logger, 1, 100, run))

		this.executor.verify(never).execute(any)
		
		run.verify(1.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTask 4 tasks with 1 task per group")
	def executeBlockingTask_noException_4tasks_1member {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		assertEquals(4, this.service.executeBlockingTask(this.logger, 4, 1, run))

		this.executor.verify(4.times).execute(any)
		
		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTask 4 tasks with 2 tasks per group")
	def executeBlockingTask_noException_4tasks_2members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		4.assertEquals(this.service.executeBlockingTask(this.logger, 4, 2, run))

		this.executor.verify(2.times).execute(any)
		
		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTask 4 tasks with 3 tasks per group")
	def executeBlockingTask_noException_4tasks_3members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		4.assertEquals(this.service.executeBlockingTask(this.logger, 4, 3, run))

		this.executor.verify(2.times).execute(any)
		
		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTask 4 tasks with 4 tasks per group")
	def executeBlockingTask_noException_4tasks_4members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		4.assertEquals(this.service.executeBlockingTask(this.logger, 4, 4, run))

		this.executor.verify(1.times).execute(any)
		
		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTask 4 tasks with 5 tasks per group")
	def executeBlockingTask_noException_4tasks_5members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		4.assertEquals(this.service.executeBlockingTask(this.logger, 4, 5, run))

		this.executor.verify(1.times).execute(any)
		
		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeBlockingTask 1 erroneous task")
	def executeBlockingTask_exception_1task {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		0.assertEquals(this.service.executeBlockingTask(this.logger, 1, 100, run))

		this.executor.verify(never).execute(any)
		
		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeBlockingTask 4 erroneous task with 1 task per group")
	def executeBlockingTask_exception_4tasks_1member {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		0.assertEquals(this.service.executeBlockingTask(this.logger, 4, 1, run))

		this.executor.verify(4.times).execute(any)
	
		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeBlockingTask 4 erroneous task with 2 tasks per group")
	def executeBlockingTask_exception_4tasks_2members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		0.assertEquals(this.service.executeBlockingTask(this.logger, 4, 2, run))

		this.executor.verify(2.times).execute(any)
		
		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeBlockingTask 4 erroneous task with 3 tasks per group")
	def executeBlockingTask_exception_4tasks_3members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		0.assertEquals(this.service.executeBlockingTask(this.logger, 4, 3, run))

		this.executor.verify(2.times).execute(any)
		
		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeBlockingTask 4 erroneous task with 3 tasks per group")
	def executeBlockingTask_exception_4tasks_4members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		0.assertEquals(this.service.executeBlockingTask(this.logger, 4, 4, run))

		this.executor.verify(1.times).execute(any)
		
		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeBlockingTask 4 erroneous task with 5 tasks per group")
	def executeBlockingTask_exception_4tasks_5members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)
		
		0.assertEquals(this.service.executeBlockingTask(this.logger, 4, 5, run))

		verify(this.executor, times(1)).execute(any)
		
		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level.SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeNotBlockingTask 1 task")
	def executeNotBlockingTask_noException_1task {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 1, 100, run)

		this.executor.verify(1.times).execute(any)

		run.verify(1.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 tasks with 1 task per group")
	def executeNotBlockingTask_noException_4tasks_1member {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 1, run)

		this.executor.verify(4.times).execute(any)

		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 tasks with 2 tasks per group")
	def executeNotBlockingTask_noException_4tasks_2members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 2, run)

		this.executor.verify(2.times).execute(any)

		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 tasks with 3 tasks per group")
	def executeNotBlockingTask_noException_4tasks_3members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 3, run)

		this.executor.verify(2.times).execute(any)

		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 tasks with 4 tasks per group")
	def executeNotBlockingTask_noException_4tasks_4members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 4, run)

		this.executor.verify(1.times).execute(any)

		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 tasks with 5 tasks per group")
	def executeNotBlockingTask_noException_4tasks_5members {
		var run = typeof(Runnable).mock
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeBlockingTask(this.logger, 4, 5, run)

		this.executor.verify(1.times).execute(any)

		run.verify(4.times).run

		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("executeNotBlockingTask 1 erroneous task")
	def executeNotBlockingTask_exception_1task {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 1, 100, run)

		this.executor.verify(1.times).execute(any)

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(1.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 erroneous task with 1 task per group")
	def executeNotBlockingTask_exception_4tasks_1member {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 1, run)

		this.executor.verify(4.times).execute(any)

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 erroneous task with 2 tasks per group")
	def executeNotBlockingTask_exception_4tasks_2members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 2, run)

		this.executor.verify(2.times).execute(any)

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 erroneous task with 3 tasks per group")
	def executeNotBlockingTask_exception_4tasks_3members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeBlockingTask(this.logger, 4, 3, run)

		this.executor.verify(2.times).execute(any)

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 erroneous task with 3 tasks per group")
	def executeNotBlockingTask_exception_4tasks_4members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 4, run)

		this.executor.verify(1.times).execute(any)

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level::SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

	@Test
	@DisplayName("executeNotBlockingTask 4 erroneous task with 5 tasks per group")
	def executeNotBlockingTask_exception_4tasks_5members {
		var exception = typeof(RuntimeException).mock
		var run : Runnable = [throw exception]
		doAnswer([
			(it.getArgument(0) as Runnable).run
			return null
		]).when(this.executor).execute(any)

		this.service.executeNotBlockingTask(this.logger, 4, 5, run)

		verify(this.executor, times(1)).execute(any)

		var capturedLevel = ArgumentCaptor::forClass(typeof(Level))
		var capturedException = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify(4.times).log(capturedLevel.capture, capturedException.capture, any)
		Level.SEVERE.assertSame(capturedLevel.value)
		exception.assertSame(capturedException.value)
	}

}
