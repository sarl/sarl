/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.Kernel
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.test.framework.agents.ShortLifeTestingAgent
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.lang.Thread.UncaughtExceptionHandler
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.verify
import org.arakhne.afc.services.IServiceManager

/** 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
@DisplayName("unit: Kernel test")
class KernelTest {

	@Nullable
	var handler : UncaughtExceptionHandler

	@Nullable
	var serviceManager : IServiceManager

	@Nullable
	var logger : LoggingService

	@Nullable
	var lifecycle : LifecycleService

	@Nullable
	var context : ContextService

	@Nullable
	var rootContext : Context

	@Nullable
	var kernel : Kernel

	@Nullable
	var configuration : SreConfig
	
	@BeforeEach
	def setUp {
		this.configuration = typeof(SreConfig).mock
		this.rootContext = typeof(Context).mock
		this.handler = typeof(UncaughtExceptionHandler).mock
		this.logger = typeof(LoggingService).mock
		when(this.logger.getKernelLogger).thenReturn(typeof(Logger).mock)
		when(this.logger.getKernelModuleLogger(anyString)).thenReturn(typeof(Logger).mock)
		this.lifecycle = typeof(LifecycleService).mock
		this.context = typeof(ContextService).mock
		when(this.context.rootContext).thenReturn(this.rootContext)
		this.serviceManager = typeof(IServiceManager).mock
		when(this.serviceManager.getService(any)).thenAnswer [
			if (typeof(LoggingService) == it.getArgument(0)) {
				return this.logger
			}
			if (typeof(LifecycleService) == it.getArgument(0)) {
				return this.lifecycle
			}
			if (typeof(ContextService) == it.getArgument(0)) {
				return this.context
			}
			return null
		]
		this.kernel = new Kernel([this.serviceManager], [this.handler], [this.configuration], [SreTestUtilities::newFactories])
		this.lifecycle.verify.addKernelAgentLifecycleListener(any)
		this.serviceManager.verify.startServices(any)
	}

	@Test
	@DisplayName("isRunning")
	def isRunning {
		// As soon the kernel is created, it is running.
		this.kernel.running.assertTrue
	}

	@Test
	@DisplayName("getLogger")
	def getLogger {
		var log0 = typeof(Logger).mock
		var log1 = typeof(Logger).mock
		when(this.logger.getKernelModuleLogger(anyString)).thenReturn(log1)
		when(this.logger.getKernelLogger).thenReturn(log0)
		var l = this.kernel.getLogger
		log0.assertSame(l)
	}

	@Test
	@DisplayName("spawn(Class, Object*)")
	def spawnClassObjectArray {
		this.kernel.spawn(typeof(ShortLifeTestingAgent), 1, "a")
		
		var capturedNb = typeof(int).forClass
		var capturedSpawner = typeof(UUID).forClass
		var capturedContext = typeof(Context).forClass
		var capturedAgentId = typeof(UUID).forClass
		var capturedAgentType = typeof(Class).forClass
		var capturedParams = typeof(Object[]).forClass
		this.lifecycle.verify.spawnAgent(capturedNb.capture.intValue, capturedSpawner.capture, capturedContext.capture,
			capturedAgentId.capture, capturedAgentType.capture, capturedParams.capture)
		1.assertEquals(capturedNb.value)
		capturedSpawner.value.assertNull
		this.rootContext.assertSame(capturedContext.value)
		capturedAgentId.value.assertNull
		typeof(ShortLifeTestingAgent).assertEquals(capturedAgentType.value)
		capturedParams.value.assertContains(1, "a")
	}

	@Test
	@DisplayName("spawn(UUID, Class, Object*)")
	def spawnUUIDClassObjectArray : void {
		var expectedId = UUID::randomUUID

		this.kernel.spawn(expectedId, typeof(ShortLifeTestingAgent), 1, "a");
		
		var capturedNb = typeof(int).forClass
		var capturedSpawner = typeof(UUID).forClass
		var capturedContext = typeof(Context).forClass
		var capturedAgentId = typeof(UUID).forClass
		var capturedAgentType = typeof(Class).forClass
		var capturedParams = typeof(Object[]).forClass
		this.lifecycle.verify.spawnAgent(capturedNb.capture.intValue, capturedSpawner.capture,
				capturedContext.capture, capturedAgentId.capture, capturedAgentType.capture,
				capturedParams.capture)
		1.assertEquals(capturedNb.value)
		capturedSpawner.value.assertNull
		this.rootContext.assertSame(capturedContext.value)
		expectedId.assertSame(capturedAgentId.value)
		typeof(ShortLifeTestingAgent).assertEquals(capturedAgentType.value)
		capturedParams.value.assertContains(1, "a")
	}

	@Test
	@DisplayName("spawn(int, Class, Object*)")
	def spawnIntClassObjectArray {
		this.kernel.spawn(34, typeof(ShortLifeTestingAgent), 1, "a")
		
		var capturedNb = typeof(int).forClass
		var capturedSpawner = typeof(UUID).forClass
		var capturedContext = typeof(Context).forClass
		var capturedAgentId = typeof(UUID).forClass
		var capturedAgentType = typeof(Class).forClass
		var capturedParams = typeof(Object[]).forClass
		this.lifecycle.verify.spawnAgent(capturedNb.capture.intValue, capturedSpawner.capture,
				capturedContext.capture, capturedAgentId.capture, capturedAgentType.capture,
				capturedParams.capture)
		34.assertEquals(capturedNb.value)
		capturedSpawner.value.assertNull
		this.rootContext.assertSame(capturedContext.value)
		capturedAgentId.value.assertNull
		typeof(ShortLifeTestingAgent).assertEquals(capturedAgentType.value)
		capturedParams.value.assertContains(1, "a")
	}

	@Test
	@DisplayName("getService")
	def getService {
		assertSame(this.logger, this.kernel.getService(typeof(LoggingService)))
	}

}
