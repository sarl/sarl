/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.mocks

import io.sarl.sre.janus.services.infrastructure.InfrastructureService
import java.util.concurrent.atomic.AtomicInteger
import org.arakhne.afc.services.IService
import org.arakhne.afc.services.AbstractService

interface Serv extends IService {
	def getStartOrder : int
	def getStopOrder : int
}

interface SreServ1 extends Serv {
}

class SreServ1Impl extends AbstractService implements SreServ1 {
	public var order = -1
	public var sorder = -1
	val counter : AtomicInteger
	val counter2 : AtomicInteger
	new (counter : AtomicInteger, counter2 : AtomicInteger) {
		this.counter = counter
		this.counter2 = counter2
	}
	override getStartOrder : int {
		this.order
	}
	override getStopOrder : int {
		this.sorder
	}
	override onStart {
		this.order = counter.getAndIncrement
	}
	override onStop {
		this.sorder = counter2.getAndIncrement
	}
	def getReferenceType : Class<? extends IService> {
		typeof(SreServ1)
	}
}

interface SreServ2 extends Serv {		
}

class SreServ2Impl extends AbstractService implements SreServ2 {
	public var order = -1;
	public var sorder = -1;
	val counter : AtomicInteger
	val counter2 : AtomicInteger
	new (counter : AtomicInteger, counter2 : AtomicInteger) {
		this.counter = counter
		this.counter2 = counter2
	}
	override getStartOrder : int {
		this.order
	}
	override getStopOrder : int {
		this.sorder
	}
	override onStart {
		this.order = counter.getAndIncrement
	}
	override onStop {
		this.sorder = counter2.getAndIncrement
	}
	def getReferenceType : Class<? extends IService> {
		typeof(SreServ2)
	}
}

interface SreServ3 extends Serv {		
}

class SreServ3Impl extends AbstractService implements SreServ3 {
	public var order = -1
	public var sorder = -1
	val counter : AtomicInteger
	val counter2 : AtomicInteger
	new (counter : AtomicInteger, counter2 : AtomicInteger) {
		this.counter = counter
		this.counter2 = counter2
	}
	override getStartOrder : int {
		this.order
	}
	override getStopOrder : int {
		this.sorder
	}
	override onStart {
		this.order = counter.getAndIncrement
	}
	override onStop {
		this.sorder = counter2.getAndIncrement
	}
	def getReferenceType : Class<? extends IService> {
		typeof(SreServ3)
	}
}

interface SreServ4 extends Serv {		
}

class SreServ4Impl extends AbstractService implements SreServ4 {
	public var order = -1
	public var sorder = -1
	val counter : AtomicInteger
	val counter2 : AtomicInteger
	new (counter : AtomicInteger, counter2 : AtomicInteger) {
		this.counter = counter
		this.counter2 = counter2
	}
	override getStartOrder : int {
		this.order
	}
	override getStopOrder : int {
		this.sorder
	}
	override onStart {
		this.order = counter.getAndIncrement
	}
	override onStop {
		this.sorder = counter2.getAndIncrement
	}
	def getReferenceType : Class<? extends IService> {
		typeof(SreServ4)
	}
}

interface SreServ5 extends Serv, InfrastructureService {
}

class SreServ5Impl extends AbstractService implements SreServ5 {
	public var order = -1
	public var sorder = -1
	val counter : AtomicInteger
	val counter2 : AtomicInteger
	new (counter : AtomicInteger, counter2 : AtomicInteger) {
		this.counter = counter
		this.counter2 = counter2
	}
	override getStartOrder : int {
		this.order
	}
	override getStopOrder : int {
		this.sorder
	}
	override onStart {
		this.order = counter.getAndIncrement
	}
	override onStop {
		this.sorder = counter2.getAndIncrement
	}
	def getReferenceType : Class<? extends IService> {
		typeof(SreServ5)
	}
}
