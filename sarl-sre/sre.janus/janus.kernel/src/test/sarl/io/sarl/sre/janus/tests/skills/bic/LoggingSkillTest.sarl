/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.lang.core.Agent
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.skills.bic.LoggingSkill
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent2
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import java.util.logging.Handler
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static io.sarl.tests.api.tools.TestReflections.*
import static java.lang.Math.*
import static org.junit.jupiter.api.Assertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: LoggingSkill test")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class LoggingSkillTest {

	@Nullable
	protected var handler : Handler

	@Nullable
	protected var owner : Agent

	@Nullable
	protected var logService : LoggingService

	@Nullable
	protected var ^skill : LoggingSkill

	@Nullable
	protected var logger : Logger

	@Nullable
	protected var parentLogger : Logger

	@BeforeEach
	def setUp : void {
		this.handler = typeof(Handler).mock
		//
		this.parentLogger = Logger::getLogger("ROOT").spy
		this.parentLogger.useParentHandlers = false
		reset(this.parentLogger)
		when(this.parentLogger.handlers).thenReturn(#[this.handler])
		this.logger = Logger::getLogger("CHILD")
		this.logger.parent = this.parentLogger
		this.logger = this.logger.spy
		//
		this.logService = typeof(LoggingService).mock
		when(this.logService.getKernelLogger).thenReturn(this.parentLogger)
		when(this.logService.getKernelModuleLogger(anyString)).thenReturn(this.parentLogger)
		when(this.logService.createAgentLogger(any)).thenReturn(this.logger)
		when(this.logService.createAgentLogger(any, any)).thenReturn(this.logger)
		//
		var agentId = UUID::randomUUID
		this.^skill = new LoggingSkill(this.logService)
		this.owner = new MyAgent2(agentId, this.^skill)
		this.owner = this.owner.spy
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^owner)
	}

	@Test
	def errorObject_off {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		//
		this.logger.level = Level::OFF
		this.^skill.error(message)
		this.logger.verify(1.times).isLoggable(argument1.capture)
		assertSame(Level::SEVERE, argument1.value)
		verifyNoMoreInteractions(this.parentLogger)
	}

	@Test
	def errorObject_on {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		var argument2 = ArgumentCaptor::forClass(typeof(Level))
		var argument3 = ArgumentCaptor::forClass(typeof(String))
		var argument4 = ArgumentCaptor::forClass(typeof(LogRecord))
		var argument5 = ArgumentCaptor::forClass(typeof(Object[]))
		//
		this.logger.level = Level::ALL
		this.^skill.error(message)
		//
		this.logger.verify(3.times).isLoggable(argument1.capture)
		assertSame(Level::SEVERE, argument1.value)
		//
		this.logger.verify(1.times).log(argument2.capture, argument3.capture, argument5.capture)
		assertSame(Level::SEVERE, argument2.value)
		assertEquals(message, argument3.value)
		//
		this.handler.verify.publish(argument4.capture)
		assertNotNull(argument4.value)
		assertSame(Level::SEVERE, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertNull(argument4.value.thrown)
	}

	@Test
	def errorObjectThrowable_off {
		var ex = new Exception()
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		//
		this.logger.level = Level::OFF
		this.^skill.error(message, ex)
		this.logger.verify(1.times).isLoggable(argument1.capture)
		assertSame(Level::SEVERE, argument1.value)
		verifyNoMoreInteractions(this.parentLogger)
	}

	@Test
	def errorObjectThrowable_on {
		var ex = new Exception()
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		var argument4 = ArgumentCaptor::forClass(typeof(LogRecord))
		//
		this.logger.level = Level::ALL
		this.^skill.error(message, ex)
		//
		this.logger.verify(2.times).isLoggable(argument1.capture)
		assertSame(Level::SEVERE, argument1.value)
		//
		this.logger.verify(1.times).log(argument4.capture)
		assertSame(Level::SEVERE, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertSame(ex, argument4.value.thrown)
		//
		this.handler.verify.publish(argument4.capture)
		assertNotNull(argument4.value)
		assertSame(Level::SEVERE, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertSame(ex, argument4.value.thrown)
	}

	@Test
	def warningObject_off {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		//
		this.logger.level = Level::OFF
		this.^skill.warning(message)
		this.logger.verify(1.times).isLoggable(argument1.capture)
		assertSame(Level::WARNING, argument1.value)
		verifyNoMoreInteractions(this.parentLogger)
	}

	@Test
	def warningObject_on {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		var argument2 = ArgumentCaptor::forClass(typeof(Level))
		var argument3 = ArgumentCaptor::forClass(typeof(String))
		var argument4 = ArgumentCaptor::forClass(typeof(LogRecord))
		var argument5 = ArgumentCaptor::forClass(typeof(Object[]))
		//
		this.logger.level = Level::ALL
		this.^skill.warning(message)
		//
		this.logger.verify(atLeast(1)).isLoggable(argument1.capture)
		assertSame(Level::WARNING, argument1.value)
		//
		this.logger.verify(1.times).log(argument2.capture, argument3.capture, argument5.capture)
		assertSame(Level::WARNING, argument2.value)
		assertEquals(message, argument3.value)
		//
		this.handler.verify.publish(argument4.capture)
		assertNotNull(argument4.value)
		assertSame(Level::WARNING, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertNull(argument4.value.thrown)
	}

	@Test
	def warningObjectThrowable_off {
		var ex = new Exception()
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		//
		this.logger.level = Level::OFF
		this.^skill.warning(message, ex)
		this.logger.verify(1.times).isLoggable(argument1.capture)
		assertSame(Level::WARNING, argument1.value)
		verifyNoMoreInteractions(this.parentLogger)
	}

	@Test
	def warningObjectThrowable_on {
		var ex = new Exception()
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		var argument4 = ArgumentCaptor::forClass(typeof(LogRecord))
		//
		this.logger.level = Level::ALL
		this.^skill.warning(message, ex)
		//
		this.logger.verify(2.times).isLoggable(argument1.capture)
		assertSame(Level::WARNING, argument1.value)
		//
		this.logger.verify(1.times).log(argument4.capture)
		assertSame(Level::WARNING, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertSame(ex, argument4.value.thrown)
		//
		this.handler.verify.publish(argument4.capture)
		assertNotNull(argument4.value)
		assertSame(Level::WARNING, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertSame(ex, argument4.value.thrown)
	}

	@Test
	def info_off {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		//
		this.logger.level = Level::OFF
		this.^skill.info(message)
		this.logger.verify(1.times).isLoggable(argument1.capture)
		assertSame(Level::INFO, argument1.value)
		verifyNoMoreInteractions(this.parentLogger)
	}

	@Test
	def info_on {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		var argument4 = ArgumentCaptor::forClass(typeof(LogRecord))
		//
		this.logger.level = Level::ALL
		this.^skill.info(message)
		//
		this.logger.verify(3.times).isLoggable(argument1.capture)
		assertSame(Level::INFO, argument1.value)
		//
		this.logger.verify(1.times).log(argument4.capture)
		assertSame(Level::INFO, argument4.value.level)
		assertEquals(message, argument4.value.message)
		//
		this.handler.verify.publish(argument4.capture)
		assertNotNull(argument4.value)
		assertSame(Level::INFO, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertNull(argument4.value.thrown)
	}

	@Test
	def debug_off {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		//
		this.logger.level = Level::OFF
		this.^skill.debug(message)
		this.logger.verify(1.times).isLoggable(argument1.capture)
		assertSame(Level::CONFIG, argument1.value)
		verifyNoMoreInteractions(this.parentLogger)
	}

	@Test
	def debug_on {
		var message = UUID::randomUUID.toString
		var argument1 = ArgumentCaptor::forClass(typeof(Level))
		var argument2 = ArgumentCaptor::forClass(typeof(Level))
		var argument3 = ArgumentCaptor::forClass(typeof(String))
		var argument4 = ArgumentCaptor::forClass(typeof(LogRecord))
		var argument5 = ArgumentCaptor::forClass(typeof(Object[]))
		//
		this.logger.level = Level::ALL
		this.^skill.debug(message)
		//
		this.logger.verify(3.times).isLoggable(argument1.capture)
		assertSame(Level::CONFIG, argument1.value)
		//
		this.logger.verify(1.times).log(argument2.capture, argument3.capture, argument5.capture)
		assertSame(Level::CONFIG, argument2.value)
		assertEquals(message, argument3.value)
		//
		this.handler.verify.publish(argument4.capture)
		assertNotNull(argument4.value)
		assertSame(Level::CONFIG, argument4.value.level)
		assertEquals(message, argument4.value.message)
		assertNull(argument4.value.thrown)
	}

	@Test
	def getLogLevel {
		assertEquals(4, this.^skill.logLevel)
	}

	@Test
	def setLogLevel {
		for (i : 0..<10) {
			this.^skill.logLevel = i
			assertEquals(max(0, min(4, i)), this.^skill.getLogLevel)
		}
	}

	@Test
	def isErrorLogEnabled {
		this.^skill.setLogLevel(0)
		assertFalse(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(1)
		assertTrue(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(2)
		assertTrue(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(3)
		assertTrue(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(4)
		assertTrue(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(5)
		assertTrue(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(6)
		assertTrue(this.^skill.isErrorLogEnabled)
		this.^skill.setLogLevel(7)
		assertTrue(this.^skill.isErrorLogEnabled)
	}

	@Test
	def isWarningLogEnabled {
		this.^skill.setLogLevel(0)
		assertFalse(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(1)
		assertFalse(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(2)
		assertTrue(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(3)
		assertTrue(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(4)
		assertTrue(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(5)
		assertTrue(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(6)
		assertTrue(this.^skill.isWarningLogEnabled)
		this.^skill.setLogLevel(7)
		assertTrue(this.^skill.isWarningLogEnabled)
	}

	@Test
	def isInfoLogEnabled {
		this.^skill.setLogLevel(0)
		assertFalse(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(1)
		assertFalse(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(2)
		assertFalse(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(3)
		assertTrue(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(4)
		assertTrue(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(5)
		assertTrue(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(6)
		assertTrue(this.^skill.isInfoLogEnabled)
		this.^skill.setLogLevel(7)
		assertTrue(this.^skill.isInfoLogEnabled)
	}

	@Test
	def isDebugLogEnabled {
		this.^skill.setLogLevel(0)
		assertFalse(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(1)
		assertFalse(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(2)
		assertFalse(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(3)
		assertFalse(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(4)
		assertTrue(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(5)
		assertTrue(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(6)
		assertTrue(this.^skill.isDebugLogEnabled)
		this.^skill.setLogLevel(7)
		assertTrue(this.^skill.isDebugLogEnabled)
	}

}
