/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import io.sarl.sre.janus.skills.bic.LifecycleSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent3
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestReflections.*
import static org.mockito.Mockito.*

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: LifecycleSkill test")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class LifecycleSkillTest {

	@Nullable
	var service : LifecycleService
	
	@Nullable
	var spawnerID : UUID

	@Nullable
	var context : Context

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : LifecycleSkill

	@BeforeEach
	def setUp : void {
		this.spawnerID = UUID::randomUUID
		this.service = typeof(LifecycleService).mock
		this.context = typeof(Context).mock
		when(this.context.ID).thenReturn(UUID::randomUUID)
		this.^agent = new MyAgent3(this.context.ID, this.spawnerID).spy
		AgentLife::getAgentLife(^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(this.context, typeof(Address).mock)
		this.^skill = new LifecycleSkill(this.service, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	private def forceAlive {
		// Force being alive
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
	}

	@Test
	@DisplayName("spawn(Class, Object*) with dead agent")
	def spawn_notAlive : void{
		this.^skill.spawn(typeof(MyAgent3), 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	@DisplayName("spawn(Class, Object*)")
	def spawn_alive : void {
		forceAlive
		
		this.^skill.spawn(typeof(MyAgent3), 1, "value")
		
		var argument0 = typeof(int).forClass
		var argument1 = typeof(UUID).forClass
		var argument2 = typeof(Context).forClass
		var argument3 = typeof(UUID).forClass
		var argument4 = typeof(Class).forClass
		var argument6 = typeof(Object[]).forClass
		this.service.verify(1.times).spawnAgent(
			argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, argument6.capture)
		1.assertEquals(argument0.value)
		this.spawnerID.assertSame(argument1.value)
		this.context.assertSame(argument2.value)
		argument3.value.assertNull
		typeof(MyAgent3).assertEquals(argument4.value)
		argument6.value.assertContains(1, "value")
	}

	@Test
	@DisplayName("spawn(int, Class, Object*) with dead agent")
	def spawnInteger_notAlive {
		this.^skill.spawn(3, typeof(MyAgent3), 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	@DisplayName("spawn(int, Class, Object*)")
	def spawnInteger_alive : void {
		forceAlive
		
		this.^skill.spawn(3, typeof(MyAgent3), 1, "value")
		
		var argument0 = typeof(int).forClass
		var argument1 = typeof(UUID).forClass
		var argument2 = typeof(Context).forClass
		var argument3 = typeof(UUID).forClass
		var argument4 = typeof(Class).forClass
		var argument6 = typeof(Object[]).forClass
		this.service.verify(1.times).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, argument6.capture)
		3.assertEquals(argument0.value)
		this.spawnerID.assertSame(argument1.value)
		this.context.assertSame(argument2.value)
		argument3.value.assertNull
		typeof(MyAgent3).assertEquals(argument4.value)
		argument6.value.assertContains(1, "value")
	}

	@Test
	@DisplayName("spawnInContext(Class, Context, Object*) with dead agent")
	def spawnInContext_notAlive : void {
		var otherContext = typeof(Context).mock
		this.^skill.spawnInContext(typeof(MyAgent3), otherContext, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	@DisplayName("spawnInContext(Class, Context, Object*)")
	def spawnInContext_alive : void {
		var otherContext = typeof(Context).mock

		forceAlive
		
		this.^skill.spawnInContext(typeof(MyAgent3), otherContext, 1, "value")
		
		var argument0 = typeof(int).forClass
		var argument1 = typeof(UUID).forClass
		var argument2 = typeof(Context).forClass
		var argument3 = typeof(UUID).forClass
		var argument4 = typeof(Class).forClass
		var argument6 = typeof(Object[]).forClass
		this.service.verify(1.times).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, argument6.capture)
		1.assertEquals(argument0.value)
		this.spawnerID.assertSame(argument1.value)
		otherContext.assertSame(argument2.value)
		argument3.value.assertNull
		typeof(MyAgent3).assertEquals(argument4.value)
		argument6.value.assertContains(1, "value")
	}

	@Test
	@DisplayName("spawnInContext(int, Class, Context, Object*) with dead agent")
	def spawnInContextInteger_notAlive : void {
		var otherContext = typeof(Context).mock
		this.^skill.spawnInContext(3, typeof(MyAgent3), otherContext, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	@DisplayName("spawnInContext(int, Class, Context, Object*)")
	def spawnInContextInteger_alive : void {
		var otherContext = typeof(Context).mock

		forceAlive

		this.^skill.spawnInContext(3, typeof(MyAgent3), otherContext, 1, "value")
		
		var argument0 = typeof(int).forClass
		var argument1 = typeof(UUID).forClass
		var argument2 = typeof(Context).forClass
		var argument3 = typeof(UUID).forClass
		var argument4 = typeof(Class).forClass
		var argument6 = typeof(Object[]).forClass
		this.service.verify(1.times).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, argument6.capture)
		3.assertEquals(argument0.value)
		this.spawnerID.assertSame(argument1.value)
		otherContext.assertSame(argument2.value)
		argument3.value.assertNull
		typeof(MyAgent3).assertEquals(argument4.value)
		argument6.value.assertContains(1, "value")
	}

	@Test
	@DisplayName("spawnInContextWithID(Class, UUID, Context, Object*) with dead agent")
	def spawnInContextWithID_notAlive : void {
		var agentID = UUID::randomUUID
		var otherContext = typeof(Context).mock
		this.^skill.spawnInContextWithID(typeof(MyAgent3), agentID, otherContext, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	@DisplayName("spawnInContextWithID(Class, UUID, Context, Object*)")
	def spawnInContextWithID_alive : void {
		var agentID = UUID::randomUUID
		var otherContext = typeof(Context).mock

		forceAlive

		this.^skill.spawnInContextWithID(typeof(MyAgent3), agentID, otherContext, 1, "value")
		
		var argument0 = typeof(int).forClass
		var argument1 = typeof(UUID).forClass
		var argument2 = typeof(Context).forClass
		var argument3 = typeof(UUID).forClass
		var argument4 = typeof(Class).forClass
		var argument6 = typeof(Object[]).forClass
		verify(this.service, times(1)).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, argument6.capture)
		1.assertEquals(argument0.value)
		this.spawnerID.assertSame(argument1.value)
		otherContext.assertSame(argument2.value)
		agentID.assertSame(argument3.value)
		typeof(MyAgent3).assertEquals(argument4.value)
		argument6.value.assertContains(1, "value")
	}

	@Test
	@DisplayName("spawnWithID(Class, UUID, Object*) with dead agent")
	def spawnWithID_notAlive : void {
		var agentID = UUID::randomUUID
		this.^skill.spawnWithID(typeof(MyAgent3), agentID, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	@DisplayName("spawnWithID(Class, UUID, Object*)")
	def spawnWithID_alive : void {
		var agentID = UUID::randomUUID

		forceAlive

		this.^skill.spawnWithID(typeof(MyAgent3), agentID, 1, "value")
		
		var argument0 = typeof(int).forClass
		var argument1 = typeof(UUID).forClass
		var argument2 = typeof(Context).forClass
		var argument3 = typeof(UUID).forClass
		var argument4 = typeof(Class).forClass
		var argument6 = typeof(Object[]).forClass
		verify(this.service, times(1)).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, argument6.capture)
		1.assertEquals(argument0.value)
		this.spawnerID.assertSame(argument1.value)
		this.context.assertSame(argument2.value)
		agentID.assertSame(argument3.value)
		typeof(MyAgent3).assertEquals(argument4.value)
		argument6.value.assertContains(1, "value")
	}

}
