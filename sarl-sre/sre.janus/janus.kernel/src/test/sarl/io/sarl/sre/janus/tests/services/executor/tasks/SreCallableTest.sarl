/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.executor.tasks

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.executor.tasks.Runnables
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.MockInitializerExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.concurrent.atomic.AtomicBoolean
import java.util.function.Supplier
import java.util.logging.Level
import java.util.logging.Logger
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor
import org.mockito.Mock

import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(MockInitializerExtension)
])
@DisplayName("unit: SreCallable test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class SreCallableTest {

	@Mock
	var logger : Logger
	
	@Test
	@DisplayName("Success with logger")
	def call_logger_successTask : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([run.set(true) return "a"], this.logger)
		var value = callable.call
		callable.isSuccess.assertTrue
		"a".assertEquals(value)
		run.get.assertTrue
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("Early exit #1 with logger")
	def call_logger_earlyExit1 : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([run.set(true); ExecutorService.neverReturn(null); return "b"], this.logger)
		var value = callable.call
		callable.isSuccess.assertTrue
		value.assertNull
		run.get.assertTrue
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("Early exit #2 with logger")
	def call_logger_earlyExit2 : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([ExecutorService.neverReturn(null); run.set(true); return "c"], this.logger)
		var value = callable.call
		callable.isSuccess.assertTrue
		value.assertNull
		run.get.assertFalse
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("Exception with logger")
	def call_logger_exception : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([run.set(true); throw new IllegalStateException()], this.logger)
		var value = callable.call
		callable.isSuccess.assertFalse
		value.assertNull
		run.get.assertTrue
		
		var level = ArgumentCaptor::forClass(typeof(Level))
		var msg = ArgumentCaptor::forClass(typeof(Supplier))
		var ex = ArgumentCaptor::forClass(typeof(Throwable))
		this.logger.verify.log(level.capture, ex.capture, msg.capture)
		Level::SEVERE.assertSame(level.value)
		assertEquals(typeof(IllegalStateException).simpleName, msg.value.get)
		assertInstanceOf(typeof(IllegalStateException), ex.value)
	}

	@Test
	@DisplayName("Success without logger")
	def call_noLogger_successTask : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([run.set(true); return "d"], null)
		var value = callable.call
		callable.isSuccess.assertTrue
		"d".assertEquals(value)
		run.get.assertTrue
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("Early exit #1 without logger")
	def call_noLogger_earlyExit1 : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([run.set(true); ExecutorService.neverReturn(null); return "e"], null)
		var value = callable.call
		callable.isSuccess.assertTrue
		value.assertNull
		run.get.assertTrue
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("Early exit #2 without logger")
	def call_noLogger_earlyExit2 : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([ExecutorService.neverReturn(null); run.set(true); return "f"], null)
		var value = callable.call
		callable.isSuccess.assertTrue
		value.assertNull
		run.get.assertFalse
		verifyNoMoreInteractions(this.logger)
	}

	@Test
	@DisplayName("Exception without logger")
	def call_noLogger_exception : void {
		var run = new AtomicBoolean
		var callable = Runnables::protectCallable([run.set(true); throw new IllegalStateException], null)
		typeof(IllegalStateException).assertException [
			callable.call
		]
		callable.isSuccess.assertFalse
		run.get.assertTrue
		verifyNoMoreInteractions(this.logger)
	}

}
