/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.internal

import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.util.OutParameter
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.skills.internal.EventBus
import io.sarl.sre.janus.skills.internal.InternalEventBusSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.internal.mocks.MyAgent
import io.sarl.sre.janus.tests.skills.internal.mocks.MyLoggingSkill
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock
import java.util.function.BooleanSupplier
import java.util.logging.Logger
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure0
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.sre.janus.services.lifecycle.AgentLife.*
import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension io.sarl.tests.api.tools.TestReflections.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: InternalEventBusSkill test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class InternalEventBusSkillTest {

	@Nullable
	var contextId : UUID

	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : InternalEventBusSkill

	@Nullable
	var eventBus : EventBus

	@Nullable
	var lock : ReadWriteLock

	@Nullable
	var logger : MyLoggingSkill

	@BeforeEach
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.eventBus = typeof(EventBus).mock
		this.logger = new MyLoggingSkill().spy
		this.lock = typeof(ReadWriteLock).mock
		when(this.lock.readLock).thenAnswer [typeof(Lock).mock]
		when(this.lock.writeLock).thenAnswer [typeof(Lock).mock]
		this.^agent = new MyAgent(contextId, this.^agentId, this.logger).spy
		this.^skill = new InternalEventBusSkill(this.eventBus, this.lock, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		this.^skill.eventBuffering = false
		this.^skill.class.invokeProc(this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	@Test
	@DisplayName("getAssociatedEventBusListener not installed skill")
	def getAssociatedEventBusListener_notInstalled {
		var listener = this.^skill.associatedEventBusListener
		listener.assertNull
	}

	@Test
	@DisplayName("getAssociatedEventBusListener installed skill")
	def getAssociatedEventBusListener_installed {
		this.^skill.class.invokeProc(this.^skill, "install", #[])

		var listener1 = this.^skill.associatedEventBusListener
		var listener2 = this.^skill.associatedEventBusListener
		listener1.assertNotNull
		listener2.assertNotNull
		listener1.assertSame(listener2)
	}

	@Test
	@DisplayName("getRegisteredEventBusListeners")
	def getRegisteredEventBusListeners {
		var iterable = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection.spy
		when(this.eventBus.getRegisteredEventListeners(any)).thenReturn(iterable)
		var list = this.^skill.getRegisteredEventBusListeners(null)
		iterable.assertSame(list)
	}

	@Test
	@DisplayName("registerEventBusListener(listener)")
	def registerEventBusListener_notFilter_noCallback {
		var listener1 = typeof(EventListener).mock
		this.^skill.registerEventBusListener(listener1)
		
		var capturedListener = typeof(Object).forClass
		var capturedFilter = typeof(Function1).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.eventBus.verify.register(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		listener1.assertSame(capturedListener.value)
		capturedFilter.value.assertNull
		capturedCallback.value.assertNull
	}

	@Test
	@DisplayName("registerEventBusListener(listener, filter)")
	def registerEventBusListener_filter_noCallback {
		var listener1 = typeof(EventListener).mock
		var filter = typeof(Function1).mock
		this.^skill.registerEventBusListener(listener1, filter)
		
		var capturedListener = typeof(Object).forClass
		var capturedFilter = typeof(Function1).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.eventBus.verify.register(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		listener1.assertSame(capturedListener.value)
		filter.assertSame(capturedFilter.value)
		capturedCallback.value.assertNull
	}

	@Test
	@DisplayName("registerEventBusListener(listener, callback)")
	def registerEventBusListener_notFilter_callback {
		var callback = typeof(Procedure1).mock
		var listener1 = typeof(EventListener).mock
		this.^skill.registerEventBusListener(listener1, null, callback)
		
		var capturedListener = typeof(Object).forClass
		var capturedFilter = typeof(Function1).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.eventBus.verify.register(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		listener1.assertSame(capturedListener.value)
		capturedFilter.value.assertNull
		callback.assertSame(capturedCallback.value)
	}

	@Test
	@DisplayName("registerEventBusListener(listener, filter, callback)")
	def registerEventBusListener_filter_callback {
		var callback = typeof(Procedure1).mock
		var listener1 = typeof(EventListener).mock
		var filter = typeof(Function1).mock
		this.^skill.registerEventBusListener(listener1, filter, callback)
		
		var capturedListener = typeof(Object).forClass
		var capturedFilter = typeof(Function1).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.eventBus.verify.register(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		listener1.assertSame(capturedListener.value)
		filter.assertSame(capturedFilter.value)
		callback.assertSame(capturedCallback.value)
	}

	@Test
	@DisplayName("unregisterEventBusListener")
	def unregisterEventBusListener {
		var listener1 = typeof(EventListener).mock
		this.^skill.unregisterEventBusListener(listener1)
		
		var capturedListener = typeof(Object).forClass
		var capturedCallback = typeof(Procedure1).forClass
		this.eventBus.verify.unregister(capturedListener.capture, capturedCallback.capture)
		listener1.assertSame(capturedListener.value)
		capturedCallback.value.assertNull
	}

	@Test
	@DisplayName("fireEvent(event) not started agent no event handling")
	def fireEvent_agentNotStarted_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event) initialization no event handling")
	def fireEvent_agentInitialization_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		var capturedEvent = typeof(Event).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.asyncDispatch(capturedEvent.capture, capturedLogger.capture)
		assertSame(^event, capturedEvent.value)
		assertSame(this.logger.logger, capturedLogger.value)
		assertFalse(this.^skill.bufferedEvents.iterator.hasNext)
	}

	@Test
	@DisplayName("fireEvent(event) no event handling")
	def fireEvent_agentAlive_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		var capturedEvent = typeof(Event).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.asyncDispatch(capturedEvent.capture, capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event) dying agent no event handling")
	def fireEvent_agentDying_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event) dead agent")
	def fireEvent_agentDead_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event) dying agent")
	def fireEvent_agentNotStarted_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event) not started agent event handling")
	def fireEvent_agentInitialization_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.assertContains(Pair::of(^event, null))
	}

	@Test
	@DisplayName("fireEvent(event) event handling")
	def fireEvent_agentAlive_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.assertContains(Pair::of(^event, null))
	}

	@Test
	@DisplayName("fireEvent(event) dying agent event handling")
	def fireEvent_agentDying_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event) dead agent event handling")
	def fireEvent_agentDead_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch, no listener) agent not initialized")
	def fireEventAndWait_notExceptionThrowing_agentNotStarted {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, false)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch) agent initializing")
	def fireEventAndWait_notExceptionThrowing_agentInitializing {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, false)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch) alive agent")
	def fireEventAndWait_notExceptionThrowing_agentAlive {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, false)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch) dying agent")
	def fireEventAndWait_notExceptionThrowing_agentDying {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, false)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch) dead agent")
	def fireEventAndWait_notExceptionThrowing_agentDead {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, false)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch, no listener) agent not initialized")
	def fireEventAndWait_exceptionThrowing_agentNotStarted {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, true)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch) agent initializing")
	def fireEventAndWait_exceptionThrowing_agentInitializing {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, true)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch) alive agent")
	def fireEventAndWait_exceptionThrowing_agentAlive {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, true)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch) dying agent")
	def fireEventAndWait_exceptionThrowing_agentDying {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, true)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch) dead agent")
	def fireEventAndWait_exceptionThrowing_agentDead {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		var ^event = typeof(Event).mock
		
		this.^skill.fireEventAndWait(^event, true)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}
	@Test
	@DisplayName("fireEventAndWait(event, no exception catch, listener) agent not initialized")
	def fireEventAndWait_notExceptionThrowing_listener_agentNotStarted {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, false, false, listener)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch, listener) agent initializing")
	def fireEventAndWait_notExceptionThrowing_listener_agentInitializing {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, false, false, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatchTo(
			capturedListener.capture,
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch, listener) alive agent")
	def fireEventAndWait_notExceptionThrowing_listener_agentAlive {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, false, false, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatchTo(
			capturedListener.capture,
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch, listener) dying agent")
	def fireEventAndWait_notExceptionThrowing_listener_agentDying {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, false, false, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatchTo(
			capturedListener.capture,
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, no exception catch, listener) dead agent")
	def fireEventAndWait_notExceptionThrowing_listener_agentDead {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, false, false, listener)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch, listener) agent not initialized")
	def fireEventAndWait_exceptionThrowing_listener_agentNotStarted {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, true, false, listener)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch, listener) agent initializing")
	def fireEventAndWait_exceptionThrowing_listener_agentInitializing {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, true, false, listener)

		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatchTo(
			capturedListener.capture,
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch, listener) alive agent")
	def fireEventAndWait_exceptionThrowing_listener_agentAlive {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, true, false, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatchTo(
			capturedListener.capture,
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch, listener) dying agent")
	def fireEventAndWait_exceptionThrowing_listener_agentDying {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, true, false, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatchTo(
			capturedListener.capture,
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEventAndWait(event, exception catch, listener) dead agent")
	def fireEventAndWait_exceptionThrowing_listener_agentDead {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEventAndWait(^event, true, false, listener)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}


	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, no exception catch, no listener) agent not initialized")
	def fireEventAndWaitWithEventGathering_notExceptionThrowing_agentNotStarted {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, false, events, handler0, handler1)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		verifyNoMoreInteractions(handler0)
		verifyNoMoreInteractions(handler1)
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, no exception catch) agent initializing")
	@SuppressWarnings("unused_local_variable")
	def fireEventAndWaitWithEventGathering_notExceptionThrowing_agentInitializing : void {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, false, events, handler0, handler1)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		handler0.verify(1.times).apply
		var x = handler1.verify(1.times).getAsBoolean
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, no exception catch) alive agent")
	@SuppressWarnings("unused_local_variable")
	def fireEventAndWaitWithEventGathering_notExceptionThrowing_agentAlive : void {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, false, events, handler0, handler1)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		handler0.verify(1.times).apply
		var x = handler1.verify(1.times).getAsBoolean
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, no exception catch) dying agent")
	@SuppressWarnings("unused_local_variable")
	def fireEventAndWaitWithEventGathering_notExceptionThrowing_agentDying : void {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, false, events, handler0, handler1)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertFalse
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		handler0.verify(1.times).apply
		var x = handler1.verify(1.times).getAsBoolean
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, no exception catch) dead agent")
	def fireEventAndWaitWithEventGathering_notExceptionThrowing_agentDead {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, false, events, handler0, handler1)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		verifyNoMoreInteractions(handler0)
		verifyNoMoreInteractions(handler1)
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, exception catch, no listener) agent not initialized")
	def fireEventAndWaitWithEventGathering_exceptionThrowing_agentNotStarted {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, true, events, handler0, handler1)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		verifyNoMoreInteractions(handler0)
		verifyNoMoreInteractions(handler1)
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, exception catch) agent initializing")
	@SuppressWarnings("unused_local_variable")
	def fireEventAndWaitWithEventGathering_exceptionThrowing_agentInitializing : void {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, true, events, handler0, handler1)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		handler0.verify(1.times).apply
		var x = handler1.verify(1.times).getAsBoolean
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, exception catch) alive agent")
	@SuppressWarnings("unused_local_variable")
	def fireEventAndWaitWithEventGathering_exceptionThrowing_agentAlive : void {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, true, events, handler0, handler1)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		handler0.verify(1.times).apply
		var x = handler1.verify(1.times).getAsBoolean
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, exception catch) dying agent")
	@SuppressWarnings("unused_local_variable")
	def fireEventAndWaitWithEventGathering_exceptionThrowing_agentDying : void {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, true, events, handler0, handler1)
		
		var capturedEvent = typeof(Event).forClass
		var capturedExceptions = typeof(boolean).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.immediateDispatch(
			capturedEvent.capture,
			capturedExceptions.capture.booleanValue,
			capturedLogger.capture)
		^event.assertSame(capturedEvent.value)
		capturedExceptions.value.assertTrue
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		handler0.verify(1.times).apply
		var x = handler1.verify(1.times).getAsBoolean
	}

	@Test
	@DisplayName("fireEventAndWaitWithEventGathering(event, exception catch) dead agent")
	def fireEventAndWaitWithEventGathering_exceptionThrowing_agentDead {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		var ^event = typeof(Event).mock
		var handler0 : () => void = typeof(Procedure0).mock
		var handler1 = typeof(BooleanSupplier).mock
		when(handler1.getAsBoolean).thenReturn(true)
		var events = new OutParameter
		
		this.^skill.fireEventAndWaitWithEventGathering(^event, true, events, handler0, handler1)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
		verifyNoMoreInteractions(handler0)
		verifyNoMoreInteractions(handler1)
	}

	@Test
	@DisplayName("fireEvent(event,listener) not started agent no event handling")
	def fireEventListener_agentNotStarted_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) initialization no event handling")
	def fireEventListener_agentInitialization_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEvent(^event, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.asyncDispatchTo(capturedListener.capture, capturedEvent.capture, capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) no event handling")
	def fireEventListener_agentAlive_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		var listener = typeof(Object).mock
		
		this.^skill.fireEvent(^event, listener)
		
		var capturedListener = typeof(Object).forClass
		var capturedEvent = typeof(Event).forClass
		var capturedLogger = typeof(Logger).forClass
		this.eventBus.verify.asyncDispatchTo(capturedListener.capture, capturedEvent.capture, capturedLogger.capture)
		listener.assertSame(capturedListener.value)
		^event.assertSame(capturedEvent.value)
		this.logger.logger.assertSame(capturedLogger.value)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) dying agent no event handling")
	def fireEventListener_agentDying_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) dead agent")
	def fireEventListener_agentDead_notEventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		this.^skill.eventBuffering = false
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) dying agent")
	def fireEventListener_agentNotStarted_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::UNSTARTED
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) not started agent event handling")
	def fireEventListener_agentInitialization_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::INITIALIZING
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.assertContains(Pair::of(^event, null))
	}

	@Test
	@DisplayName("fireEvent(event,listener) event handling")
	def fireEventListener_agentAlive_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.assertContains(Pair::of(^event, null))
	}

	@Test
	@DisplayName("fireEvent(event,listener) dying agent event handling")
	def fireEventListener_agentDying_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DYING
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("fireEvent(event,listener) dead agent event handling")
	def fireEventListener_agentDead_eventCaching {
		this.^agent.getAgentLife([SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::DEAD
		
		this.^skill.eventBuffering = true
		var ^event = typeof(Event).mock
		
		this.^skill.fireEvent(^event, null)
		
		verifyNoMoreInteractions(this.eventBus)
		this.^skill.bufferedEvents.iterator.hasNext.assertFalse
	}

}
