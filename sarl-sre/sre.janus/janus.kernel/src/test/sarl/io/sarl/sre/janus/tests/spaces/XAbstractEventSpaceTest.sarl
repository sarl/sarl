/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.spaces

import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.capacities.InformedEventListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.spaces.AbstractEventSpace
import io.sarl.sre.janus.spaces.Participant
import io.sarl.sre.janus.tests.spaces.mocks.XAbstractEventSpaceMock
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.Set
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor
import org.mockito.Mock

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension io.sarl.tests.api.tools.TestReflections.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.*
import static extension org.mockito.MockitoAnnotations.openMocks

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AbstractEventSpace test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class XAbstractEventSpaceTest {

	@Nullable
	var agentId : UUID

	@Nullable
	var agentId2 : UUID

	@Nullable
	var spaceId : SpaceID

	@Nullable
	var address : Address

	@Nullable
	var listener1 : InformedEventListener

	@Nullable
	var listener2 : InformedEventListener 

	@Mock
	var executor : ExecutorService 

	@Nullable
	var strongParticipants : ConcurrentHashMap<UUID, Participant>

	@Nullable
	var weakParticipants : ConcurrentHashMap<UUID, Participant>
	
	@Nullable
	var ^space : AbstractEventSpace 

	@BeforeEach
	def setUp : void {
		this.strongParticipants = new ConcurrentHashMap
		this.weakParticipants = new ConcurrentHashMap

		this.agentId = UUID::randomUUID

		this.agentId2 = UUID::randomUUID

		this.spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))

		this.address = new Address(this.spaceId, this.agentId)

		this.^space = new XAbstractEventSpaceMock(this.strongParticipants, this.weakParticipants, this.spaceId)

		this.listener1 = typeof(InformedEventListener).mock
		when(this.listener1.ID).thenReturn(this.agentId)

		this.listener2 = typeof(InformedEventListener).mock
		when(this.listener2.ID).thenReturn(this.agentId2)

		openMocks

		doAnswer [
			var r = it.getArguments().get(0) as Runnable
			r.run
			return null
		].when(this.executor).executeAsap(typeof(Runnable).any)
	}

	private def register(registerAgent2 : boolean = true, registerAgent3 : boolean = true, nbWeaks : int = 1) : Set<UUID> {
		var participant1 = typeof(Participant).mock
		when(participant1.address).thenReturn(this.address)
		when(participant1.participant).thenReturn(this.listener1)
		this.strongParticipants.put(this.agentId, participant1)

		if (registerAgent2) {
			var participant2 = typeof(Participant).mock
			when(participant2.address).thenReturn(new Address(this.spaceId, this.agentId2))
			when(participant2.participant).thenReturn(this.listener2)
			this.strongParticipants.put(this.agentId2, participant2)
		}
		if (registerAgent3) {
			val id3 = UUID::randomUUID
			var participant3 = typeof(Participant).mock
			when(participant3.address).thenReturn(new Address(this.spaceId, id3))
			when(participant3.participant).thenReturn(typeof(InformedEventListener).mock)
			this.strongParticipants.put(id3, participant3)
		}

		val weaks = newHashSet
		for (i : 1 .. nbWeaks) {
			val id1w = UUID::randomUUID
			var participant1w = typeof(Participant).mock
			when(participant1w.address).thenReturn(new Address(this.spaceId, id1w))
			when(participant1w.participant).thenReturn(typeof(InformedEventListener).mock)
			this.weakParticipants.put(id1w, participant1w)
			weaks += id1w
		}
		return weaks
	}

	@Test
	def getAddressUUID {
		this.^space.getAddress(this.listener1.ID).assertNull
		register
		this.address.assertSame(this.^space.getAddress(this.listener1.ID))
	}

	private def emitLocally(^event : Event, scope : Scope<Address>) {
		this.^space.class.invokeProc(this.^space, "emitLocally",
			#[typeof(Event), typeof(Scope)], ^event, scope)
	}

	@Test
	def emitLocally_nullScope {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally(null)
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally(null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)

		this.listener2.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
	}

	@Test
	def emitLocally_allParticipants {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [true]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [true]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)

		this.listener2.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
	}

	@Test
	def emitLocally_singleAddress {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [this.address == it]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [this.address == it]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
		verifyNoMoreInteractions(this.listener2)
	}

	@Test
	def emit_nullScope {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)

		this.listener2.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
	}

	@Test
	def emit_allParticipants {
		var ^event = mock(typeof(Event))
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [true]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [true]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)

		verify(this.listener2).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def emit_singleAddress {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [this.address == it]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [this.address == it]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
		verifyNoMoreInteractions(this.listener2)
	}

	@Test
	@DisplayName("getNumberOfStrongParticipants without participant")
	def getNumberOfStrongParticipants_registration0 {
		0.assertEquals(this.^space.numberOfStrongParticipants)
	}

	@Test
	@DisplayName("getNumberOfStrongParticipants with 1 participant")
	def getNumberOfStrongParticipants_registration1 {
		register(false, false)
		1.assertEquals(this.^space.numberOfStrongParticipants)
	}

	@Test
	@DisplayName("getNumberOfStrongParticipants with 2 participants")
	def getNumberOfStrongParticipants_registration2 {
		register(true, false)
		2.assertEquals(this.^space.numberOfStrongParticipants)
	}

	@Test
	@DisplayName("getNumberOfStrongParticipants with 3 participants")
	def getNumberOfStrongParticipants_registration3 {
		register
		3.assertEquals(this.^space.numberOfStrongParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants without participant")
	def getNumberOfWeakParticipants_registration0 {
		0.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants with 1 strong and 1 weak")
	def getNumberOfWeakParticipants_registration1 {
		register(false, false)
		1.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants with 2 strongs and 1 weak")
	def getNumberOfWeakParticipants_registration2 {
		register(true, false)
		1.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants with 3 strongs and 1 weak")
	def getNumberOfWeakParticipants_registration3 {
		register
		1.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants with 1 strong and 2 weaks")
	def getNumberOfWeakParticipants_registration4 {
		register(false, false, 2)
		2.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants with 2 strongs and 2 weaks")
	def getNumberOfWeakParticipants_registration5 {
		register(true, false, 2)
		2.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@Test
	@DisplayName("getNumberOfWeakParticipants with 3 strongs and 2 weaks")
	def getNumberOfWeakParticipants_registration6 {
		register(true, true, 2)
		2.assertEquals(this.^space.numberOfWeakParticipants)
	}

	@RepeatedTest(5)
	@DisplayName("isPseudoEmpty(UUID) without participant")
	def isPseudoEmptyUUID_noRegistration : void {
		this.^space.isPseudoEmpty(this.agentId).assertTrue
		this.^space.isPseudoEmpty(this.agentId2).assertTrue
		this.^space.isPseudoEmpty(UUID::randomUUID).assertTrue
	}

	@RepeatedTest(5)
	@DisplayName("isPseudoEmpty(UUID) with 1 participant")
	def isPseudoEmptyUUID_registration1 : void {
		register(false, false)
		this.^space.isPseudoEmpty(this.agentId).assertTrue
		this.^space.isPseudoEmpty(this.agentId2).assertFalse
		this.^space.isPseudoEmpty(UUID::randomUUID).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isPseudoEmpty(UUID) with 2 participants")
	def isPseudoEmptyUUID_registration2 : void {
		register(true, false)
		this.^space.isPseudoEmpty(this.agentId).assertFalse
		this.^space.isPseudoEmpty(this.agentId2).assertFalse
		this.^space.isPseudoEmpty(UUID::randomUUID).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isPseudoEmpty(UUID) with 3 participants")
	def isPseudoEmptyUUID_registration3 : void {
		register
		this.^space.isPseudoEmpty(this.agentId).assertFalse
		this.^space.isPseudoEmpty(this.agentId2).assertFalse
		this.^space.isPseudoEmpty(UUID::randomUUID).assertFalse
	}

	@Test
	@DisplayName("isPseudoEmpty without participant")
	def isPseudoEmpty_noRegistration : void {
		this.^space.isPseudoEmpty.assertTrue
	}

	@Test
	@DisplayName("isPseudoEmpty with 1 participant")
	def isPseudoEmpty_registration1 : void {
		register(false, false)
		this.^space.isPseudoEmpty.assertFalse
	}

	@Test
	@DisplayName("isPseudoEmpty with 2 participants")
	def isPseudoEmpty_registration2 : void {
		register(true, false)
		this.^space.isPseudoEmpty.assertFalse
	}

	@Test
	@DisplayName("isPseudoEmpty with 3 participants")
	def isPseudoEmpty_registration3 : void {
		register
		this.^space.isPseudoEmpty.assertFalse
	}

	@Test
	@DisplayName("forEachStrongParticipant without participant")
	def forEachStrongParticipant_registration0 : void {
		val col = newArrayList
		this.^space.forEachStrongParticipant[col += it]
		col.empty.assertTrue
	}

	@Test
	@DisplayName("forEachStrongParticipant with 1 participant")
	def forEachStrongParticipant_registration1 : void {
		register(false, false)
		val col = newArrayList
		this.^space.forEachStrongParticipant[col += it]
		col.assertContains(this.agentId)
	}

	@Test
	@DisplayName("forEachStrongParticipant with 2 participants")
	def forEachStrongParticipant_registration2 : void {
		register(true, false)
		val col = newArrayList
		this.^space.forEachStrongParticipant[col += it]
		col.assertContains(this.agentId, this.agentId2)
	}

	@Test
	@DisplayName("forEachStrongParticipant with 3 participants")
	def forEachStrongParticipant_registration3 : void {
		register
		val col = newArrayList
		this.^space.forEachStrongParticipant[col += it]
		3.assertEquals(col.size)
		col.contains(this.agentId).assertTrue
		col.contains(this.agentId2).assertTrue
	}

	@Test
	@DisplayName("forEachWeakParticipant without participant")
	def forEachWeakParticipant_registration0 : void {
		val col = newArrayList
		this.^space.forEachWeakParticipant[col += it]
		col.empty.assertTrue
	}

	@Test
	@DisplayName("forEachWeakParticipant with 1 strong and 1 weak")
	def forEachWeakParticipant_registration1 : void {
		val weaks = register(false, false)
		val col = newArrayList
		this.^space.forEachWeakParticipant[col += it]
		weaks.assertContainsCollection(col)
	}

	@Test
	@DisplayName("forEachWeakParticipant with 2 strongs and 1 weak")
	def forEachWeakParticipant_registration2 : void {
		val weaks = register(true, false)
		val col = newArrayList
		this.^space.forEachWeakParticipant[col += it]
		weaks.assertContainsCollection(col)
	}

	@Test
	@DisplayName("forEachWeakParticipant with 3 strongs and 1 weak")
	def forEachWeakParticipant_registration3 : void {
		val weaks = register
		val col = newArrayList
		this.^space.forEachWeakParticipant[col += it]
		weaks.assertContainsCollection(col)
	}

	@Test
	@DisplayName("forEachWeakParticipant with 2 strongs and 2 weaks")
	def forEachWeakParticipant_registration4 : void {
		val weaks = register(true, false, 2)
		val col = newArrayList
		this.^space.forEachWeakParticipant[col += it]
		weaks.assertContainsCollection(col)
	}

	@Test
	@DisplayName("forEachWeakParticipant with 3 strongs and 2 weaks")
	def forEachWeakParticipant_registration5 : void {
		val weaks = register(true, true, 2)
		val col = newArrayList
		this.^space.forEachWeakParticipant[col += it]
		weaks.assertContainsCollection(col)
	}

}
