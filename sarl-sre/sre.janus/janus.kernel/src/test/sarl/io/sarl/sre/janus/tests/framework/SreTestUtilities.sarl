/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.framework

import io.sarl.api.util.SequenceListenerNotifier
import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.core.Agent
import io.sarl.lang.core.util.DefaultConcurrentCollectionFactory
import io.sarl.sre.janus.boot.SreMain
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.internal.ConfigurableAgentInjector
import io.sarl.sre.janus.internal.Factories
import io.sarl.sre.janus.internal.NopConfigurableAgentInjector
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.services.lifecycle.LifecycleService
import io.sarl.sre.test.framework.context.SreRunContext
import java.util.UUID
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock

import static extension org.mockito.Mockito.*

/** Various utilities for helping to set up the tests for the SRE.
 * These utilities are specific to the Janus framework.
 *
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.11
 */
final class SreTestUtilities {

	/** Replies the inner context, if it is defined for the agent with the given identifier.
	 *
	 * @param rc is the current run-time context that is used for tests.
	 * @param id is the identifier of the agent.
	 * @return the inner context or {@code null} if the agent has not explicitly defined its inner context.
	 */
	static def getInnerContextForAgent(rc : SreRunContext, id : UUID) : Context {
		val contextService = rc.bootstrap.getService(typeof(ContextService))
		assert contextService !== null
		return contextService.getContext(id)
	}

	/** Spawn into the given context an agent of the given type and with the given identifier.
	 * 
	 * @param rc is the current run-time context that is used for tests.
	 * @param context is the context in which the agent will be spawn.
	 * @param type is the type of the agent.
	 * @param id is the identifier of the agent.
	 * @param params are the initialization parameters.
	 */
	static def startAgentInContextWithID(rc : SreRunContext, context : Context, type : Class<? extends Agent>,
		id : UUID, params : Object*) : void {
		val lifeService = rc.bootstrap.getService(typeof(LifecycleService))
		assert lifeService !== null
		lifeService.spawnAgent(1, context.ID, context, id, type, params)
	}

	/** Replies the state of the agent.
	 * 
	 * @param agent the agent for which the state should be retrieved.
	 * @return the agent's state.
	 */
	static def getAgentState(^agent : Agent) : AgentState {
		val life = AgentLife::getAgentLifeOrNull(^agent)
		if (life !== null) {
			return life.state
		}
		return null
	}

	/** Replies the SRE configuration.
	 *
	 * @param rc the execution context.
	 * @return the SRE configuration
	 */
	static def getSreConfig(rc : SreRunContext) : SreConfig {
		var kern = (rc.bootstrap as SreMain).getKernel
		return kern.configuration
	}

	/** Create an instance of factories. */
	static def newFactories : Factories {
		new Factories(
			[
				new DefaultConcurrentCollectionFactory
			],
			[
				val lock = typeof(ReadWriteLock).mock
				when(lock.writeLock).thenAnswer [typeof(Lock).mock]
				when(lock.readLock).thenAnswer [typeof(Lock).mock]
				return lock
			],
			[
				typeof(Lock).mock
			],
			[
				new SmartListenerCollection(new SequenceListenerNotifier).spy
			])
	}

	/** Create an instance of agent dynamic injector. */
	static def newConfigurableAgentInjector : ConfigurableAgentInjector {
		new NopConfigurableAgentInjector
	}

}
