/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.lifecycle

import com.google.common.collect.Collections2
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.lifecycle.BasicSkillUninstaller
import io.sarl.sre.janus.tests.services.lifecycle.mocks.InnerSkill
import io.sarl.sre.janus.tests.services.lifecycle.mocks.LifeSkill
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MyAgent2
import io.sarl.sre.janus.tests.services.lifecycle.mocks.MySkill0
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.ArrayList
import java.util.List
import java.util.concurrent.atomic.AtomicInteger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*

import static extension org.mockito.Mockito.spy

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: BasicSkillUninstaller test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@SuppressWarnings("use_reserved_sarl_annotation")
class BasicSkillUninstallerTest {

	@Nullable
	var installer : BasicSkillUninstaller

	@BeforeEach
	def setUp : void {
		this.installer = new BasicSkillUninstaller
	}

	private static def getOrder(a : Object, b : Object[]) : int {
		for (var i = 0; i < b.length; i++) {
			if (a === b.get(i)) {
				return i
			}
		}
		return -1
	}

	@PrivateAPI(isCallerOnly = true)
	private static def getStoredSkills(^agent : Agent) : List<Skill> {
		new ArrayList(Collections2.transform(SREutils::getSkillRepository(^agent).values, [it.get]))
	}

	@Test
	def uninstallSkillsBeforeDestroy {
		var order = new AtomicInteger
		var s1 = new LifeSkill(order)
		var s2 = new MySkill0(order)
		var s3 = new InnerSkill(order)
		var ^agent = new MyAgent2(s1, s2, s3).spy
		assertEquals(0, s1.installOrder)
		assertEquals(2, s2.installOrder)
		assertEquals(1, s3.installOrder)
		order.set(0)
		var od = ^agent.getStoredSkills.clone
		var skills = this.installer.uninstallSkillsBeforeDestroy(^agent)
		assertEquals(s1.getOrder(od), s1.uninstallOrderPre)
		assertEquals(s2.getOrder(od), s2.uninstallOrderPre)
		assertEquals(s3.getOrder(od), s3.uninstallOrderPre)
		assertNull(s1.uninstallOrderPost)
		assertNull(s2.uninstallOrderPost)
		assertNull(s3.uninstallOrderPost)
		var iterator = skills.iterator
		assertSame(od.get(0), iterator.next)
		assertSame(od.get(1), iterator.next)
		assertSame(od.get(2), iterator.next)
		assertFalse(iterator.hasNext)
	}

	@Test
	@PrivateAPI(isCallerOnly = true)
	def uninstallSkillsAfterDestroy {
		var order = new AtomicInteger
		var s1 = new LifeSkill(order)
		var s2 = new MySkill0(order)
		var s3 = new InnerSkill(order)
		var ^agent = new MyAgent2(s1, s2, s3).spy
		assertEquals(0, s1.installOrder)
		assertEquals(2, s2.installOrder)
		assertEquals(1, s3.installOrder)
		order.set(0)
		var od = ^agent.getStoredSkills
		this.installer.uninstallSkillsAfterDestroy(^agent, od)
		assertNull(s1.uninstallOrderPre)
		assertNull(s2.uninstallOrderPre)
		assertNull(s3.uninstallOrderPre)
		assertEquals(s1.getOrder(od), s1.uninstallOrderPost)
		assertEquals(s2.getOrder(od), s2.uninstallOrderPost)
		assertEquals(s3.getOrder(od), s3.uninstallOrderPost)
	}

}
