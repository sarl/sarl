/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.namespace

import io.sarl.api.core.Behaviors
import io.sarl.api.core.OpenEventSpace
import io.sarl.api.naming.name.BehaviorName
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AtomicSkillReference
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.capacities.InformedEventListener
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.namespace.BehaviorNamespaceFinder
import io.sarl.sre.janus.spaces.Participant
import io.sarl.sre.janus.spaces.SpaceWithParticipants
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.tools.TestReflections
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNull
import static extension org.junit.jupiter.api.Assertions.assertSame
import static extension org.mockito.Mockito.spy

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: BehaviorNamespaceFinder test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class BehaviorNamespaceFinderTest {

	@Nullable
	var contextService : ContextService

	@Nullable
	var finder : BehaviorNamespaceFinder

	@Nullable
	var aid0 : UUID

	@Nullable
	var ag0 : Agent

	@Nullable
	var beh0a : MyBehavior

	@Nullable
	var beh0b : MyBehavior

	@Nullable
	var aid1 : UUID

	@Nullable
	var ag1 : Agent

	@Nullable
	var beh1a : MyBehavior

	@Nullable
	var beh1b : MyBehavior

	@Nullable
	var cid1 : UUID

	@Nullable
	var sid1 : UUID
	
	@SuppressWarnings("use_reserved_sarl_annotation")
	@BeforeEach
	@PrivateAPI(isCallerOnly = true)
	def setUp : void {
		this.contextService = typeof(ContextService).mock
		this.finder = new BehaviorNamespaceFinder(this.contextService)

		// Default space creation
		this.aid0 = UUID::randomUUID
		var a0 = new MyAgent(this.aid0).spy
		this.beh0a = new MyBehavior(a0).spy
		this.beh0b = new MyBehavior(a0).spy
		a0.initBeh(this.beh0a, this.beh0b)
		this.ag0 = a0.spy
		var listener0 = typeof(InformedEventListener).mock
		when(listener0.ownerInstance).thenReturn(this.ag0)
		var participant0 = typeof(Participant).mock
		when(participant0.participant).thenReturn(listener0)
		var spc0 = typeof(MySpace).mock
		when(spc0.getListenerFromStrongParticipant(any)).thenAnswer [
			val id = it.getArgument(0, typeof(UUID))
			if (id == this.aid0) {
				return participant0.participant
			}
			return null
		]
		var ctx0 = typeof(Context).mock
		when(ctx0.defaultSpace).thenReturn(spc0)

		// Other space creation
		this.aid1 = UUID::randomUUID
		var a1 = new MyAgent(this.aid1).spy
		this.beh1a = new MyBehavior(a1).spy
		this.beh1b = new MyBehavior(a1).spy
		a1.initBeh(this.beh1a, this.beh1b)
		this.ag1 = a1.spy
		var listener1 = typeof(InformedEventListener).mock
		when(listener1.ownerInstance).thenReturn(this.ag1)
		var participant1 = typeof(Participant).mock
		when(participant1.participant).thenReturn(listener1)
		this.sid1 = UUID::randomUUID
		var spc1 = typeof(MySpace).mock
		when(spc1.getListenerFromStrongParticipant(any)).thenAnswer [
			val id = it.getArgument(0, typeof(UUID))
			if (id == this.aid1) {
				return participant1.participant
			}
			return null
		]
		this.cid1 = UUID::randomUUID
		var ctx1 = typeof(Context).mock
		when(ctx1.getSpace(any(typeof(UUID)))).thenAnswer [
			if (it.getArgument(0) == this.sid1) {
				return spc1
			} else {
				return null
			}
		]

		when(this.contextService.rootContext).thenReturn(ctx0)
		when(this.contextService.getContext(any(typeof(UUID)))).thenAnswer [
			if (it.getArgument(0) == this.cid1) {
				return ctx1
			} else {
				return null
			}
		]
	}

	@Test
	def getScheme : void {
		BehaviorName::SCHEME.assertEquals(this.finder.scheme)
	}

	@Test
	def find_BehaviorName_null : void {
		this.finder.find(null).assertNull
	}

	@Test
	def find_BehaviorName_nocid_nosid_validAgentId_00 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid0)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		this.beh0a.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_nocid_nosid_validAgentId_01 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid0)
		when(name.behaviorType).thenReturn(typeof(MyBehavior2))
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_nocid_nosid_validAgentId_02 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid0)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(0)
		this.beh0a.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_nocid_nosid_validAgentId_03 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid0)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(0)
		this.beh0a.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_nocid_nosid_validAgentId_04 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid0)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(1)
		this.beh0b.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_nocid_nosid_validAgentId_05 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid0)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(2)
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_nocid_nosid_invalidAgentId : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(UUID::randomUUID)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_cid_nosid : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.contextId).thenReturn(this.cid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_cid_sid_validAgentId_00 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.contextId).thenReturn(this.cid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		this.beh1a.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_cid_sid_validAgentId_01 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.contextId).thenReturn(this.cid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior2))
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_cid_sid_validAgentId_02 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.contextId).thenReturn(this.cid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(0)
		this.beh1a.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_cid_sid_validAgentId_03 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.contextId).thenReturn(this.cid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(1)
		this.beh1b.assertSame(this.finder.find(name))
	}

	@Test
	def find_BehaviorName_cid_sid_validAgentId_04 : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.contextId).thenReturn(this.cid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		when(name.behaviorIndex).thenReturn(2)
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_cid_sid_invalidAgentId : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(UUID::randomUUID)
		when(name.contextId).thenReturn(this.cid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		this.finder.find(name).assertNull
	}

	@Test
	def find_BehaviorName_nocid_sid : void {
		var name = typeof(BehaviorName).mock
		when(name.agentId).thenReturn(this.aid1)
		when(name.spaceId).thenReturn(this.sid1)
		when(name.behaviorType).thenReturn(typeof(MyBehavior))
		this.finder.find(name).assertNull
	}

	private static interface MySpace extends OpenEventSpace, SpaceWithParticipants {
		//
	}

	private static class MyBehavior extends Behavior {
		//
	}

	private static class MyBehavior2 extends Behavior {
		//
	}
	
	private static abstract class MyBehaviors extends Skill implements Behaviors {
		//
	}

	private static class MyAgent extends Agent {
		new (id : UUID) {
			super(UUID::randomUUID, id)
		}

		@SuppressWarnings("use_reserved_sarl_annotation")
		@PrivateAPI(isCallerOnly = true)
		def initBeh(beh0 : Behavior, beh1 : Behavior) {
			var set = SreTestUtilities::newFactories.concurrentCollectionFactory.newCollection
			set += beh0
			set += beh1
			var behs = typeof(MyBehaviors).mock
			TestReflections::set(behs, "referencesFromCapacityMap", new AtomicInteger)
			when(behs.registeredBehaviors).thenReturn(set)
			SREutils::getSkillRepository(this).put(typeof(Behaviors), new AtomicSkillReference(behs))
		}
		
	}

}
