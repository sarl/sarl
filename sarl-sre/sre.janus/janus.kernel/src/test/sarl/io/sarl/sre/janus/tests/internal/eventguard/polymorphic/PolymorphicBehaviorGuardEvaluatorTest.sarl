/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.internal.eventguard.polymorphic

import io.sarl.sre.janus.internal.eventguard.polymorphic.PolymorphicBehaviorGuardEvaluator
import io.sarl.sre.janus.tests.internal.eventguard.polymorphic.mocks.TestAgent1
import io.sarl.sre.janus.tests.internal.eventguard.polymorphic.mocks.TestEvent0
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/** 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 * @since 0.12
 */
@DisplayName("unit: PolymorphicBehaviorGuardEvaluator test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class PolymorphicBehaviorGuardEvaluatorTest {

	@Test
	@DisplayName("getTarget w/o filter")
	def getTarget : void {
		val target = typeof(TestAgent1).mock
		val evaluator = new PolymorphicBehaviorGuardEvaluator(target, typeof(TestEvent0), null)
		target.assertSame(evaluator.target)
	}

	@Test
	@DisplayName("evaluateGuard(Object, Collection<Runnable>) w/o filter")
	def evaluateGuard : void {
		val target = new TestAgent1(UUID::randomUUID, UUID::randomUUID).spy
		val evaluator = new PolymorphicBehaviorGuardEvaluator(target, typeof(TestEvent0), null)

		val ^event = typeof(TestEvent0).mock
		val runnables = newArrayList
		evaluator.evaluateGuard(^event, runnables)

		2.assertEquals(runnables.size)
	}

	@Test
	@DisplayName("hashCode w/o filter")
	def testHashCode : void {
		val target1 = typeof(TestAgent1).mock
		val evaluator1a = new PolymorphicBehaviorGuardEvaluator(target1, typeof(TestEvent0), null)
		val evaluator1b = new PolymorphicBehaviorGuardEvaluator(target1, typeof(TestEvent0), null)

		evaluator1a.hashCode.assertEquals(evaluator1a.hashCode)
		evaluator1a.hashCode.assertEquals(evaluator1b.hashCode)

		val target2 = typeof(TestAgent1).mock
		val evaluator2 = new PolymorphicBehaviorGuardEvaluator(target2, typeof(TestEvent0), null)

		evaluator1a.hashCode.assertNotEquals(evaluator2.hashCode)
	}

	@Test
	@DisplayName("equals(Object) w/o filter")
	def testEquals : void {
		val target1 = typeof(TestAgent1).mock
		val evaluator1a = new PolymorphicBehaviorGuardEvaluator(target1, typeof(TestEvent0), null)
		val evaluator1b = new PolymorphicBehaviorGuardEvaluator(target1, typeof(TestEvent0), null)

		evaluator1a.equals(null).assertFalse
		evaluator1a.equals(evaluator1a).assertTrue
		evaluator1a.equals(evaluator1b).assertTrue

		val target2 = typeof(TestAgent1).mock
		val evaluator2 = new PolymorphicBehaviorGuardEvaluator(target2, typeof(TestEvent0), null)

		evaluator1a.equals(evaluator2).assertFalse
	}

	@Test
	@DisplayName("compareTo(IBehaviorGuardEvaluator) w/o filter")
	def compareTo : void {
		val target1 = typeof(TestAgent1).mock
		val evaluator1a = new PolymorphicBehaviorGuardEvaluator(target1, typeof(TestEvent0), null)
		val evaluator1b = new PolymorphicBehaviorGuardEvaluator(target1, typeof(TestEvent0), null)

		evaluator1a.compareTo(null).assertStrictlyPositive
		evaluator1a.compareTo(evaluator1a).assertZero
		evaluator1a.compareTo(evaluator1b).assertZero

		val target2 = typeof(TestAgent1).mock
		val evaluator2 = new PolymorphicBehaviorGuardEvaluator(target2, typeof(TestEvent0), null)

		evaluator1a.compareTo(evaluator2).assertNotZero

		val id1 = System::identityHashCode(target1)
		val id2 = System::identityHashCode(target2)

		if (id1 <= id2) {
			evaluator1a.compareTo(evaluator2).assertStrictlyNegative
		} else {
			evaluator1a.compareTo(evaluator2).assertStrictlyPositive
		}
	}

}
