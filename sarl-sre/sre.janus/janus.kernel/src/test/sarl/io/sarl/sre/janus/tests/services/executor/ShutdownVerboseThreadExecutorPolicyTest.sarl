/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.executor

import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.executor.VerboseThreadExecutorPolicy
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.concurrent.CancellationException
import java.util.concurrent.ThreadPoolExecutor
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.junit.jupiter.api.Assertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@SuppressWarnings("discouraged_reference")
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: shutdown VeboseThreadExecutorPolicy test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class ShutdownVerboseThreadExecutorPolicyTest {
	
	@Nullable
	var logService : LoggingService

	@Nullable
	var logger : Logger

	@Nullable
	var executor : ThreadPoolExecutor

	@Nullable
	var handler : VerboseThreadExecutorPolicy

	@BeforeEach
	def setUp : void {
		this.logger = typeof(Logger).mock
		when(this.logger.isLoggable(typeof(Level).any)).thenReturn(true)
		this.logService = typeof(LoggingService).mock
		when(this.logService.getKernelModuleLogger(anyString)).thenReturn(this.logger)
		when(this.logService.getKernelLogger).thenReturn(this.logger)

		this.executor = typeof(ThreadPoolExecutor).mock
		when(this.executor.isShutdown).thenReturn(true)

		this.handler = new VerboseThreadExecutorPolicy(this.logger)
	}

	@Test
	def rejectedExecution {
		var runnable = typeof(Runnable).mock
		this.handler.rejectedExecution(runnable, this.executor)

		verify(runnable, never).run

		var argument0 = ArgumentCaptor::forClass(typeof(Runnable))
		this.executor.verify(never).submit(argument0.capture)
		
		var argument1 = ArgumentCaptor::forClass(typeof(LogRecord))
		this.logger.verify.log(argument1.capture)
		assertSame(Level::FINE, argument1.value.level)
	}

	@Test
	def uncaughtException_Exception {
		var e = new Exception
		e.fillInStackTrace
		this.handler.uncaughtException(Thread.currentThread, e)

		var argument = ArgumentCaptor::forClass(typeof(LogRecord))
		this.logger.verify.log(argument.capture)
		assertSame(Level::SEVERE, argument.value.level)
		assertSame(e, argument.value.thrown)
		assertEquals(this.class.name, argument.value.sourceClassName)
		assertEquals("uncaughtException_Exception", argument.value.sourceMethodName) //$NON-NLS-1$
	}

	@Test
	def uncaughtException_EarlyExit : void {
		try {
			ExecutorService.neverReturn(null)
			fail("Early exit exception is expected")
		} catch (e : Exception) {
			this.handler.uncaughtException(Thread.currentThread, e)
			verifyNoMoreInteractions(this.logService)
		}
	}

	@Test
	def uncaughtException_Cancellation {
		var e = new CancellationException
		e.fillInStackTrace
		this.handler.uncaughtException(Thread.currentThread, e)

		var argument = ArgumentCaptor::forClass(typeof(LogRecord))
		this.logger.verify.log(argument.capture)
		assertSame(Level::FINEST, argument.value.level)
		assertSame(e, argument.value.thrown)
		assertEquals(this.class.name, argument.value.sourceClassName)
		assertEquals("uncaughtException_Cancellation", argument.value.sourceMethodName) //$NON-NLS-1$
	}

	@Test
	def uncaughtException_Interrupt {
		var e = new InterruptedException
		e.fillInStackTrace
		this.handler.uncaughtException(Thread.currentThread, e)

		var argument = ArgumentCaptor::forClass(typeof(LogRecord))
		this.logger.verify.log(argument.capture)
		assertSame(Level::FINEST, argument.value.level)
		assertSame(e, argument.value.thrown)
		assertEquals(this.class.name, argument.value.sourceClassName)
		assertEquals("uncaughtException_Interrupt", argument.value.sourceMethodName) //$NON-NLS-1$
	}

}
