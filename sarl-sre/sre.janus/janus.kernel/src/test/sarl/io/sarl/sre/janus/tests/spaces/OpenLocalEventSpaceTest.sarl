/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.spaces

import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.capacities.InformedEventListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.OpenLocalEventSpace
import io.sarl.sre.janus.spaces.SpaceListener
import io.sarl.sre.janus.spaces.SpaceParticipantListener
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor
import org.mockito.Mock

import static org.junit.jupiter.api.Assertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.verify
import static extension org.mockito.MockitoAnnotations.openMocks

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: OpenLocalEventSpace test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class OpenLocalEventSpaceTest {

	@Nullable
	var agentId : UUID

	@Nullable
	var spaceId : SpaceID

	@Nullable
	var address : Address

	@Nullable
	var listener : InformedEventListener

	@Mock
	var executor : ExecutorService

	@Nullable
	var ^space : OpenLocalEventSpace

	@BeforeEach
	def setUp : void {
		this.agentId = UUID::randomUUID

		this.spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))

		this.address = new Address(this.spaceId, this.agentId)

		val loggingService = typeof(LoggingService).mock
		when(loggingService.getKernelModuleLogger(anyString)).thenReturn(typeof(Logger).mock)
		when(loggingService.getKernelLogger).thenReturn(typeof(Logger).mock)

		this.^space = new OpenLocalEventSpace(this.spaceId,
			typeof(SpaceParticipantListener).mock, loggingService)

		this.listener = typeof(InformedEventListener).mock
		when(this.listener.ID).thenReturn(this.agentId)

		openMocks

		doAnswer [
				var r = it.getArguments().get(0) as Runnable
				r.run
				return null
			].when(this.executor).executeAsap(typeof(Runnable).any)
	}

	private def doRegister(weak : boolean) : void {
		if (weak) {
			this.^space.registerWeakParticipant(this.listener)
		} else {
			this.^space.registerStrongParticipant(this.listener)
		}
	}

	private def doUnregister : void {
		this.^space.unregister(this.listener)
	}

	@Test
	def getAddressUUID_false {
		assertNull(this.^space.getAddress(this.listener.ID))
		doRegister(false)
		assertEquals(this.address, this.^space.getAddress(this.listener.ID))
		doUnregister
		assertNull(this.^space.getAddress(this.listener.ID))
	}

	@Test
	def getAddressUUID_true {
		assertNull(this.^space.getAddress(this.listener.ID))
		doRegister(true)
		assertEquals(this.address, this.^space.getAddress(this.listener.ID))
		doUnregister
		assertNull(this.^space.getAddress(this.listener.ID))
	}

	
	@Test
	def registerWeakParticipant {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyNoMoreInteractions(this.listener)

		doRegister(true)

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener.verify.receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def registerStrongParticipant {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyNoMoreInteractions(this.listener)

		doRegister(false)

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener.verify.receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}
	
	@Test
	def unregister_true {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyNoMoreInteractions(this.listener)

		doRegister(true)
		doUnregister

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))
		this.listener.verify(never).receiveEvent(argument.capture)

	}

	@Test
	def unregister_false {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyNoMoreInteractions(this.listener)

		doRegister(false)
		doUnregister

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))
		this.listener.verify(never).receiveEvent(argument.capture)

	}

	
	@Test
	def destoryableSpaceEvent_true {
		doRegister(true)
		var listener = typeof(SpaceListener).mock
		this.^space.spaceListenerIfNone = listener
		doUnregister
		var dspace = ArgumentCaptor::forClass(typeof(Space))
		listener.verify.destroyableSpace(dspace.capture)
		assertSame(this.^space, dspace.value)
	}

	@Test
	def destoryableSpaceEvent_false {
		doRegister(false)
		var listener = typeof(SpaceListener).mock
		this.^space.spaceListenerIfNone = listener
		doUnregister
		var dspace = ArgumentCaptor::forClass(typeof(Space))
		listener.verify.destroyableSpace(dspace.capture)
		assertSame(this.^space, dspace.value)
	}

}
