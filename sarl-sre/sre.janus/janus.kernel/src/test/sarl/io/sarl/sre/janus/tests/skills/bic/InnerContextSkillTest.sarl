/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.context.Context
import io.sarl.sre.janus.services.context.ContextService
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.skills.bic.InnerContextAccessSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent0
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestReflections.*
import static org.junit.jupiter.api.Assumptions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.verify

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: InnerContextSkill test")
@Tag("janus")
@Tag("unit")
@Tag("sre-unit")
class InnerContextSkillTest {

	@Nullable
	var service : ContextService
	
	@Nullable
	var parentID : UUID
	
	@Nullable
	var innerSpaceID : SpaceID

	@Nullable
	var context : Context

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : InnerContextAccessSkill

	@BeforeEach
	def setUp : void {
		this.parentID = UUID::randomUUID
		this.innerSpaceID = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		this.service = typeof(ContextService).mock
		this.context = typeof(Context).mock
		when(this.context.ID).thenReturn(UUID::randomUUID)
		this.^agent = spy(new MyAgent0(this.context.ID, this.parentID))
		var defaultSpaceID = new SpaceID(this.context.ID, this.parentID, typeof(OpenEventSpaceSpecification))
		var defaultAdr = typeof(Address).mock
		when(defaultAdr.spaceID).thenReturn(defaultSpaceID)
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).setDefaultContext(this.context, defaultAdr)
		this.^skill = new InnerContextAccessSkill(this.service, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	@Test
	@DisplayName("Creation and initialization of the inner context")
	def getInnerContext_init : void {
		var ctx = typeof(Context).mock
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		
		var context = this.^skill.innerContext
		
		ctx.assertSame(context)
		
		var listener = typeof(EventListener).forClass
		^space.verify.registerStrongParticipant(listener.capture)
		listener.value.assertNotNull

		this.service.verify(only).createContext(any, any, any(typeof(Agent)))
	}
	
	@Test
	@DisplayName("Two calls to getInnerContext")
	def getInnerContext_twoCalls : void {
		var ctx = typeof(Context).mock
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		
		var context1 = this.^skill.getInnerContext
		var context2 = this.^skill.getInnerContext
		
		ctx.assertSame(context1)
		ctx.assertSame(context2)
		
		var listener = typeof(EventListener).forClass
		^space.verify(only).registerStrongParticipant(listener.capture)
		listener.value.assertNotNull

		this.service.verify(only).createContext(any, any, any(typeof(Agent)))
	}

	@Test
	@DisplayName("Creation and initialization of the inner default space")
	def getInnerDefaultSpace_init : void {
		var ctx = typeof(Context).mock
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		
		var spc = this.^skill.innerDefaultSpace
		
		^space.assertSame(spc)
	}
	
	@Test
	@DisplayName("Two calls to getInnerDefaultSpace")
	def getInnerDefaultSpace_twoCalls : void {
		var ctx = typeof(Context).mock
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		
		var spc1 = this.^skill.getInnerDefaultSpace
		var spc2 = this.^skill.getInnerDefaultSpace
		
		^space.assertSame(spc1)
		^space.assertSame(spc2)
	}

	private def forceInnerContextCreation : Context {
		assumeTrue(this.context !== null)
		assumeTrue(this.innerSpaceID !== null)
		assumeTrue(this.parentID !== null)
		assumeTrue(this.service !== null)
		assumeTrue(this.^skill !== null)
		assumeTrue(this.^agent !== null)
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(this.innerSpaceID)
		var ctx = typeof(Context).mock
		when(ctx.ID).thenReturn(this.parentID)
		when(ctx.defaultSpace).thenReturn(^space)
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		return this.^skill.getInnerContext as Context
	}
	
	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(UUID) with random id")
	def isInnerDefaultSpaceUUID_noInnerContextInstance {
		this.^skill.isInnerDefaultSpace(UUID::randomUUID).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(UUID) with inner space instance")
	def isInnerDefaultSpaceUUID_withInnerContextInstance {
		var innerSpaceID = forceInnerContextCreation.defaultSpace.spaceID
		
		this.^skill.isInnerDefaultSpace(innerSpaceID.ID).assertTrue
		this.^skill.isInnerDefaultSpace(UUID::randomUUID).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(UUID) without inner space instance")
	def isInnerDefaultSpaceSpaceID_noInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		this.^skill.isInnerDefaultSpace(otherId).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(SpaceID) with inner space instance")
	def isInnerDefaultSpaceSpaceID_withInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		forceInnerContextCreation
		
		this.^skill.isInnerDefaultSpace(this.innerSpaceID).assertTrue
		this.^skill.isInnerDefaultSpace(otherId).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(SpaceID) without inner space instance")
	def isInnerDefaultSpaceSpace_noInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		this.^skill.isInnerDefaultSpace(otherId).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(Space) with inner space instance")
	def isInnerDefaultSpaceSpace_withInnerContextInstance {
		var innerContext = forceInnerContextCreation
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var otherSpace = typeof(Space).mock
		when(otherSpace.spaceID).thenReturn(otherId)
		
		this.^skill.isInnerDefaultSpace(innerContext.defaultSpace).assertTrue
		this.^skill.isInnerDefaultSpace(otherSpace).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInnerDefaultSpace(Space) without inner space instance")
	def isInInnerDefaultSpace_noInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var adr = typeof(Address).mock
		when(adr.spaceID).thenReturn(otherId)
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(adr)
		this.^skill.isInInnerDefaultSpace(^event).assertFalse
	}

	@RepeatedTest(5)
	@DisplayName("isInInnerDefaultSpace with inner space instance")
	def isInInnerDefaultSpace_withInnerContextInstance {
		var innerContext = forceInnerContextCreation
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		
		var adr1 = new Address(innerContext.defaultSpace.spaceID, UUID::randomUUID)
		var event1 = typeof(Event).mock
		when(event1.source).thenReturn(adr1)
		
		var adr2 = new Address(otherId, UUID::randomUUID)
		var event2 = typeof(Event).mock
		when(event2.source).thenReturn(adr2)
		
		this.^skill.isInInnerDefaultSpace(event1).assertTrue
		this.^skill.isInInnerDefaultSpace(event2).assertFalse
	}

	@Test
	@DisplayName("getMemberAgentCount without inner space instance")
	def getMemberAgentCount_noInnerContextInstance {
		0.assertEquals(this.^skill.memberAgentCount)
	}

	@Test
	@DisplayName("getMemberAgentCount with inner space instance and no agent")
	def getMemberAgentCount_withInnerContextInstance_noAgent {
		var innerContext = forceInnerContextCreation
		when(innerContext.defaultSpace.numberOfStrongParticipants).thenReturn(1)
		0.assertEquals(this.^skill.memberAgentCount)
	}

	@Test
	@DisplayName("getMemberAgentCount with inner space instance and 2 agents")
	def getMemberAgentCount_withInnerContextInstance_twoAgents {
		var innerContext = forceInnerContextCreation
		when(innerContext.defaultSpace.numberOfStrongParticipants).thenReturn(3)
		2.assertEquals(this.^skill.memberAgentCount)
	}

	@Test
	@DisplayName("getMemberAgents without inner space instance")
	def getMemberAgents_noInnerContextInstance {
		this.^skill.memberAgents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("getMemberAgents with inner space instance and no agent")
	def getMemberAgents_withInnerContextInstance_noAgent {
		var innerContext = forceInnerContextCreation
		var ^space = innerContext.defaultSpace
		doAnswer [
			(it.getArgument(0) as (UUID)=>void).apply(this.parentID)
			return null
		].when(^space).forEachStrongParticipant(any)

		this.^skill.memberAgents.iterator.hasNext.assertFalse
	}

	@Test
	@DisplayName("getMemberAgents with inner space instance and 2 agents")
	def getMemberAgents_withInnerContextInstance_twoAgents {
		var innerContext = forceInnerContextCreation
		var ^space = innerContext.defaultSpace
		var id1 = UUID::randomUUID
		var id2 = UUID::randomUUID
		doAnswer [
			val f = it.getArgument(0) as (UUID)=>void
			f.apply(this.parentID)
			f.apply(id1)
			f.apply(id2)
			return null
		].when(^space).forEachStrongParticipant(any)
		var actual = this.^skill.memberAgents
		actual.assertContains(id1, id2)
	}

	@Test
	@DisplayName("hasMemberAgent without inner space instance")
	def hasMemberAgent_noInnerContextInstance {
		this.^skill.hasMemberAgent.assertFalse
	}

	@Test
	@DisplayName("hasMemberAgent with inner space instance and no agent")
	def hasMemberAgent_withInnerContextInstance_noAgent {
		var innerContext = forceInnerContextCreation
		var ^space = innerContext.defaultSpace
		when(^space.isPseudoEmpty(any)).thenReturn(false)
		when(^space.isPseudoEmpty(this.parentID)).thenReturn(true)
		this.^skill.hasMemberAgent.assertFalse
	}

	@Test
	@DisplayName("hasMemberAgent with inner space instance and 2 agents")
	def hasMemberAgent_withInnerContextInstance_twoAgents {
		var innerContext = forceInnerContextCreation
		var ^space = innerContext.defaultSpace
		when(^space.isPseudoEmpty(any)).thenReturn(false)
		this.^skill.hasMemberAgent.assertTrue
	}

}
