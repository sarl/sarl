/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.framework.services.context

import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.boot.configs.SreConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ExecutorsConfig
import io.sarl.sre.janus.boot.configs.subconfigs.ServicesConfig
import io.sarl.sre.janus.services.context.SpaceRepository
import io.sarl.sre.janus.services.context.SpaceRepository.SpaceDescription
import io.sarl.sre.janus.services.context.SpaceRepositoryListener
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.SreSpaceSpecificationFactory
import io.sarl.sre.janus.tests.framework.services.context.mocks.SpaceMock
import io.sarl.sre.janus.tests.framework.services.context.mocks.SpaceMockSpecification
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.Map
import java.util.UUID
import java.util.logging.Logger
import org.arakhne.afc.util.IntegerList
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor
import org.mockito.Mock

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.MockitoAnnotations.openMocks

/**
 * @author $Author: sgalland$
 * @version janus.kernel 3.0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
abstract class AbstractSpaceRepositoryTest<T extends SpaceRepository,
			M extends Map<UUID, SpaceDescription>> {

	@Mock
	protected var executor : ExecutorService
	
	@Mock
	protected var logger : LoggingService

	@Nullable
	protected var configuration : SreConfig

	@Nullable
	protected var executorsConfig : ExecutorsConfig

	@Nullable
	protected var specificationFactory : SreSpaceSpecificationFactory

	@Nullable
	protected var internalStructure : M
	
	@Nullable
	protected var repository : T 

	@SuppressWarnings("raw_type")
	@BeforeEach
	def setUp : void {
		this.executorsConfig = typeof(ExecutorsConfig).mock
		var services = typeof(ServicesConfig).mock
		when(services.getExecutors).thenReturn(this.executorsConfig)		
		this.configuration = typeof(SreConfig).mock
		when(this.configuration.services).thenReturn(services)
		this.specificationFactory = typeof(SreSpaceSpecificationFactory).mock
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenAnswer[
			val type : Class<? extends SpaceSpecification<?>> = it.arguments.get(0) as Class
			val spec = type.mock
			/*when(spec.create(typeof(SpaceID).any, typeof(Object[]).any)).thenAnswer [
			]*/
			return spec
		]
		when(this.specificationFactory.createOpenEventSpaceSpecificationInInnerContext(typeof(Class).any, typeof(OpenEventSpace).any)).thenAnswer[
			val type : Class<? extends SpaceSpecification<?>> = it.arguments.get(0) as Class
			val spec = type.mock
			/*when(spec.create(typeof(SpaceID).any, typeof(Object[]).any)).thenAnswer [
			]*/
			return spec
		]
		this.openMocks
		val log = typeof(Logger).mock
		when(this.logger.getKernelModuleLogger(anyString)).thenReturn(log)
		when(this.logger.getKernelLogger).thenReturn(log)
		this.internalStructure = newInternalStructure
		this.repository = newSpaceRepository
	}

	protected abstract def newInternalStructure : M

	protected abstract def newSpaceRepository : T

	/** Fill the repository with three spaces for testing.
	 *
	 * @return the added descriptions.
	 */
	protected def fillRepository : SpaceDescription[] {
		var ^space : Space

		var contextId = UUID::randomUUID
		var id1 = UUID::randomUUID
		var sid = new SpaceID(contextId, id1, typeof(OpenEventSpaceSpecification))
		^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var desc1 = new SpaceDescription(sid, ^space)
		this.internalStructure.put(id1, desc1)

		var id2 = UUID::randomUUID
		sid = new SpaceID(contextId, id2, typeof(OpenEventSpaceSpecification))
		^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var desc2 = new SpaceDescription(sid, ^space)
		this.internalStructure.put(id2, desc2)
		
		var id3 = UUID::randomUUID
		sid = new SpaceID(contextId, id3, typeof(SpaceMockSpecification))
		^space = typeof(SpaceMock).mock
		when(^space.spaceID).thenReturn(sid)
		var desc3 = new SpaceDescription(sid, ^space)
		this.internalStructure.put(id3, desc3)
		
		this.repository.refreshInternalStructures

		if ((id1 <=> id2) <= 0 && (id1 <=> id3) <= 0) {
			if ((id2 <=> id3) <= 0) {
				return #{desc1, desc2, desc3}
			} else {
				return #{desc1, desc3, desc2}
			}
		} else if ((id2 <=> id1) <= 0 && (id2 <=> id3) <= 0) {
			if ((id1 <=> id3) <= 0) {
				return #{desc2, desc1, desc3}
			} else {
				return #{desc2, desc3, desc1}
			}
		} else {
			if ((id1 <=> id2) <= 0) {
				return #{desc3, desc1, desc2}
			} else {
				return #{desc3, desc2, desc1}
			}
		}
	}
	
	@Test
	def getSpaces_0 {
		var spaces = this.repository.spaces
		assertNotNull(spaces)
		assertFalse(spaces.iterator.hasNext)
	}

	@Test
	def getSpaces_1 {
		var expectedDescs = fillRepository
		var spaces = this.repository.spaces
		assertNotNull(spaces)
		
		var expectedIds = <SpaceID>newArrayList()
		for (elt : expectedDescs) {
			expectedIds += elt.spaceId
		}

		var actualIds = <SpaceID>newArrayList()
		for (elt : spaces) {
			actualIds += elt.spaceID
		}

		assertContainsCollection(actualIds, expectedIds)
	}

	@Test
	def getSpacesClass_0 {
		var spaces = this.repository.getSpaces(typeof(OpenEventSpaceSpecification))
		assertNotNull(spaces)
		assertFalse(spaces.iterator.hasNext)
	}

	@Test
	def getSpacesClass_1 {
		var expectedDescs = fillRepository
		var indexes = new IntegerList
		for (var i = 0; i < expectedDescs.length; i++) {
			var desc = expectedDescs.get(i)
			if (desc.^space instanceof OpenEventSpace) {
				indexes.add(i)
			}
		}
		var spaces = this.repository.getSpaces(typeof(OpenEventSpaceSpecification))
		assertNotNull(spaces)
		var iterator = spaces.iterator
		while (!indexes.empty && iterator.hasNext) {
			var ^space = iterator.next
			assertInstanceOf(typeof(OpenEventSpace), ^space)
			var idx = -1
			for (var i = 0; idx == -1 && i < expectedDescs.length; i++) {
				var desc = expectedDescs.get(i)
				if (desc.spaceId == ^space.spaceID) {
					idx = i
				}
			}
			assertTrue(indexes.contains(idx))
			val idxobj : Integer = idx
			indexes.remove(idxobj)
		}
		assertFalse(iterator.hasNext)
		assertTrue(indexes.empty)
	}

	@Test
	def getSpace_0 {
		var contextId = UUID::randomUUID
		var id1 = UUID::randomUUID
		var sid = new SpaceID(contextId, id1, typeof(OpenEventSpaceSpecification))
		assertNull(this.repository.getSpace(sid))
	}

	@Test
	def getSpace_1 {
		var expectedDescs = fillRepository()
		for (desc : expectedDescs) {
			var ^space = this.repository.getSpace(desc.spaceId)
			assertNotNull(^space)
			assertEquals(desc.spaceId, ^space.spaceID)
			assertSame(desc.^space, ^space)
		}
		var contextId = UUID::randomUUID
		var id1 = UUID::randomUUID
		var sid = new SpaceID(contextId, id1, typeof(OpenEventSpaceSpecification))
		assertNull(this.repository.getSpace(sid))
	}

	@Test
	def createSpace {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))

		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenReturn(specification)

		var createdSpace = this.repository.createSpace(sid, typeof(OpenEventSpaceSpecification))
		
		assertSame(^space, createdSpace)
		var space2 = this.repository.getSpace(sid)
		assertSame(^space, space2)
	}

	@Test
	def removeSpace_0 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(Space).mock
		when(^space.spaceID).thenReturn(sid)
		this.repository.removeSpace(^space)
		var space2 = this.repository.getSpace(sid)
		assertNull(space2)
	}

	@Test
	def removeSpace_1 {
		var expectedDescs = fillRepository
		for (desc : expectedDescs) {
			this.repository.removeSpace(desc.^space)
			var ^space = this.repository.getSpace(desc.spaceId)
			assertNull(^space)
		}
	}

	@Test
	def getOrCreateSpaceWithSpec_0 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))

		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenReturn(specification)

		var createdSpace = this.repository.getOrCreateSpaceWithSpec(sid, typeof(OpenEventSpaceSpecification))
		
		assertSame(^space, createdSpace)
		var space2 = this.repository.getSpace(sid)
		assertSame(^space, space2)
	}

	@SuppressWarnings("raw_type")
	@Test
	def getOrCreateSpaceWithSpec_1 {
		var expectedDescs = fillRepository
		for (desc : expectedDescs) {
			var spec : Class = desc.spaceId.spaceSpecification
			var createdSpace = this.repository.getOrCreateSpaceWithSpec(desc.spaceId, spec)
			assertNotNull(createdSpace)
			assertEquals(desc.spaceId.spaceSpecification, createdSpace.spaceID.spaceSpecification)
		}
	}

	@Test
	def getOrCreateSpaceWithID_0 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))

		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenReturn(specification)

		var createdSpace = this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		assertSame(^space, createdSpace)
		var space2 = this.repository.getSpace(sid)
		assertSame(^space, space2)
	}

	@SuppressWarnings("raw_type")
	@Test
	def getOrCreateSpaceWithID_1 {
		var expectedDescs = fillRepository
		for (desc : expectedDescs) {
			var spec : Class = desc.spaceId.spaceSpecification
			var createdSpace = this.repository.getOrCreateSpaceWithID(desc.spaceId, spec)
			assertSame(desc.^space, createdSpace)
		}
	}

	@Test
	def addSpaceRepositoryListener_0 {
		var listener = typeof(SpaceRepositoryListener).mock
		this.repository.addSpaceRepositoryListener(listener)
		
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenReturn(specification)

		var createdSpace = this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		var spaceArg = ArgumentCaptor::forClass(typeof(Space))
		var creationArg = ArgumentCaptor::forClass(typeof(boolean))
		verify(listener).spaceCreated(spaceArg.capture, creationArg.capture.booleanValue)
		assertSame(^space, createdSpace)
		assertSame(^space, spaceArg.value)
		assertTrue(creationArg.value)
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	def addSpaceRepositoryListener_1 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenReturn(specification)

		var fake = this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		var listener = typeof(SpaceRepositoryListener).mock
		this.repository.addSpaceRepositoryListener(listener)
		
		this.repository.removeSpace(^space)

		var spaceArg = ArgumentCaptor::forClass(typeof(Space))
		var destroyArg = ArgumentCaptor::forClass(typeof(boolean))
		verify(listener).spaceDestroyed(spaceArg.capture, destroyArg.capture.booleanValue)
		assertSame(^space, spaceArg.value)
		assertTrue(destroyArg.value)
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	def removeSpaceRepositoryListener {
		var listener = typeof(SpaceRepositoryListener).mock
		this.repository.addSpaceRepositoryListener(listener)
		
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		when(this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(typeof(Class).any)).thenReturn(specification)

		this.repository.removeSpaceRepositoryListener(listener)
		
		var fake = this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		verifyNoMoreInteractions(listener)
	}

	@Test
	@DisplayName("hasSpace(not registered)")
	def hasSpace_0 : void {
		this.repository.hasSpace(UUID::randomUUID).assertFalse
	}

	@Test
	@DisplayName("hasSpace(null)")
	def hasSpace_1 : void {
		this.repository.hasSpace(null).assertFalse
	}

	@Test
	@DisplayName("hasSpace(registered)")
	def hasSpace_2 : void {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(typeof(SpaceID).any, typeof(Object[]).any)).thenReturn(^space)
		this.internalStructure.put(id, new SpaceRepository.SpaceDescription(sid, ^space))
		
		this.repository.hasSpace(id).assertTrue
	}

	@Test
	@DisplayName("removeSpaceIfEmpty(UUID) null")
	def removeSpaceIfEmptyUUID_0 : void {
		var descs = fillRepository

		this.repository.removeSpaceIfEmpty(null as UUID)

		for (desc : descs) {
			this.internalStructure.containsKey(desc.spaceId.ID).assertTrue
		}
	}

	@Test
	@DisplayName("removeSpaceIfEmpty(UUID) empty")
	def removeSpaceIfEmptyUUID_1 : void {
		var descs = fillRepository
		val firstDesc = descs.iterator.next
		val firstId = firstDesc.spaceId.ID
		when(firstDesc.^space.numberOfStrongParticipants).thenReturn(0)
		
		this.repository.removeSpaceIfEmpty(firstId)

		for (desc : descs) {
			val b = this.internalStructure.containsKey(desc.spaceId.ID)
			if (firstId == desc.spaceId.ID) {
				b.assertFalse
			} else {
				b.assertTrue
			}
		}
	}

	@Test
	@DisplayName("removeSpaceIfEmpty(UUID) not empty")
	def removeSpaceIfEmptyUUID_2 : void {
		var descs = fillRepository
		val firstDesc = descs.iterator.next
		val firstId = firstDesc.spaceId.ID
		when(firstDesc.^space.numberOfStrongParticipants).thenReturn(1)
		
		this.repository.removeSpaceIfEmpty(firstId)

		for (desc : descs) {
			this.internalStructure.containsKey(desc.spaceId.ID).assertTrue
		}
	}

	@Test
	@DisplayName("removeSpaceIfEmpty(Space) null")
	def removeSpaceIfEmptySpace_0 : void {
		var descs = fillRepository

		this.repository.removeSpaceIfEmpty(null as Space)

		for (desc : descs) {
			this.internalStructure.containsKey(desc.spaceId.ID).assertTrue
		}
	}

	@Test
	@DisplayName("removeSpaceIfEmpty(Space) empty")
	def removeSpaceIfEmptySpace_1 : void {
		var descs = fillRepository
		val firstDesc = descs.iterator.next
		val firstId = firstDesc.spaceId.ID
		val sp = firstDesc.^space
		when(sp.numberOfStrongParticipants).thenReturn(0)
		
		this.repository.removeSpaceIfEmpty(sp)

		for (desc : descs) {
			val b = this.internalStructure.containsKey(desc.spaceId.ID)
			if (firstId == desc.spaceId.ID) {
				b.assertFalse
			} else {
				b.assertTrue
			}
		}
	}

	@Test
	@DisplayName("removeSpaceIfEmpty(Space) not empty")
	def removeSpaceIfEmptySpace_2 : void {
		var descs = fillRepository
		val firstDesc = descs.iterator.next
		val sp = firstDesc.^space
		when(sp.numberOfStrongParticipants).thenReturn(1)
		
		this.repository.removeSpaceIfEmpty(sp)

		for (desc : descs) {
			this.internalStructure.containsKey(desc.spaceId.ID).assertTrue
		}
	}

}
