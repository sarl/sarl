/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.services.probing.service

import io.sarl.api.naming.name.ArtifactName
import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.api.naming.parser.INameParser
import io.sarl.api.probing.Probe
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.probing.service.SynchronousProbeService
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import java.net.URI
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.mockito.ArgumentMatchers.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version janus.kernel 3.0.15.1 20250911-224826
 * @mavengroupid io.sarl.sre.janus
 * @mavenartifactid janus.kernel
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SynchronousProbeService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@SuppressWarnings("all")
class SynchronousProbeServiceTest {

	@Nullable
	var service : SynchronousProbeService

	@Nullable
	var xaccess : FieldAccess

	@Nullable
	var yaccess : FieldAccess

	var xprobed : int = 1

	var yprobed : int = 2

	@BeforeEach
	def setUp : void {

		var nameService = typeof(NamespaceService).mock
		when(nameService.findObject(any(typeof(SarlName)))).thenAnswer [
			val sname = it.getArgument(0) as SarlName
			val name = sname.toString
			if (name.startsWith("artifact:x")) {
				if (this.xaccess === null) {
					this.xaccess = new FieldAccess(sname,
						SynchronousProbeServiceTest.this.class.getDeclaredField("xprobed"),
						SynchronousProbeServiceTest.this,
						true)
				}
				return this.xaccess
			}
			if (name.startsWith("artifact:y")) {
				if (this.yaccess === null) {
					this.yaccess = new FieldAccess(sname,
						SynchronousProbeServiceTest.this.class.getDeclaredField("yprobed"),
						SynchronousProbeServiceTest.this,
						true)
				}
				return this.yaccess
			}
			return null
		]

		var nameParser = typeof(INameParser).mock
		when(nameParser.decode(anyString)).thenAnswer [
			return new URI("artifact:" + it.getArgument(0).toString() + "#field1");
		]
		when(nameParser.normalize(any(typeof(URI)))).thenAnswer [
			it.getArgument(0) as URI
		]
		when(nameParser.decode(any(typeof(URI)))).thenAnswer [
			return new ArtifactName(it.getArgument(0) as URI, UUID::randomUUID)
		]

		this.service = new SynchronousProbeService(
			nameService, nameParser, [SreTestUtilities::newFactories])
	}

	@Test
	@DisplayName("getProbes without probe")
	def getProbes_noProbe : void {
		val pbs = this.service.probes
		0.assertEquals(pbs.size)
	}
	
	@Test
	@DisplayName("getProbes with 1 probe")
	def getProbes_1probe : void {
		val p1 = this.service.probe("x", typeof(Integer))
		val pbs = this.service.probes
		1.assertEquals(pbs.size)
		pbs.assertContains(p1)
	}

	@Test
	@DisplayName("getProbes with 2 probes")
	def getProbes_2probes : void {
		val p1 = this.service.probe("x", typeof(Integer))
		val p2 = this.service.probe("y", typeof(Integer))
		val pbs = this.service.probes
		pbs.assertContains(p1, p2)
	}

	@Test
	@DisplayName("probe(String, Class<T>)")
	def probe_StringClass : void {
		val p1 = this.service.probe("x", typeof(Integer))
		p1.assertNotNull
		"artifact:x#field1".assertEquals(p1.name)
		typeof(Integer).assertEquals(p1.type)
		new URI("artifact:x#field1").assertEquals(p1.uri)
		1.assertEquals(p1.value)

		val p2 = this.service.probe("y", typeof(Integer))
		p2.assertNotNull
		"artifact:y#field1".assertEquals(p2.name)
		typeof(Integer).assertEquals(p2.type)
		new URI("artifact:y#field1").assertEquals(p2.uri)
		2.assertEquals(p2.value)
	}	

	@Test
	@DisplayName("probe(String, Class<T>, String)")
	def probe_StringClassString : void {
		val p1 = this.service.probe("x", typeof(Integer), "abc")
		p1.assertNotNull
		"abc".assertEquals(p1.name)
		typeof(Integer).assertEquals(p1.type)
		new URI("artifact:x#field1").assertEquals(p1.uri)
		1.assertEquals(p1.value)

		val p2 = this.service.probe("y", typeof(Integer), "def")
		p2.assertNotNull
		"def".assertEquals(p2.name)
		typeof(Integer).assertEquals(p2.type)
		new URI("artifact:y#field1").assertEquals(p2.uri)
		2.assertEquals(p2.value)
	}

	@Test
	@DisplayName("probe(URI, Class<T>)")
	def probe_URIClass : void {
		val p1 = this.service.probe(new URI("artifact:x#field1"), typeof(Integer))
		p1.assertNotNull
		"artifact:x#field1".assertEquals(p1.name)
		typeof(Integer).assertEquals(p1.type)
		new URI("artifact:x#field1").assertEquals(p1.uri)
		1.assertEquals(p1.value)

		val p2 = this.service.probe(new URI("artifact:y#field1"), typeof(Integer))
		p2.assertNotNull
		"artifact:y#field1".assertEquals(p2.name)
		typeof(Integer).assertEquals(p2.type)
		new URI("artifact:y#field1").assertEquals(p2.uri)
		2.assertEquals(p2.value)
	}

	@Test
	@DisplayName("probe(URI, Class<T>, String)")
	def probe_URIClassString : void {
		val p1 = this.service.probe(new URI("artifact:x#field1"), typeof(Integer), "abc")
		p1.assertNotNull
		"abc".assertEquals(p1.name)
		typeof(Integer).assertEquals(p1.type)
		new URI("artifact:x#field1").assertEquals(p1.uri)
		1.assertEquals(p1.value)

		val p2 = this.service.probe(new URI("artifact:y#field1"), typeof(Integer), "def")
		p2.assertNotNull
		"def".assertEquals(p2.name)
		typeof(Integer).assertEquals(p2.type)
		new URI("artifact:y#field1").assertEquals(p2.uri)
		2.assertEquals(p2.value)
	}

	@Test
	@DisplayName("releaseAllProbes without probe")
	def releaseAllProbes_noProbe : void {
		this.service.releaseAllProbes
		0.assertEquals(this.service.probes.size)
	}

	@Test
	@DisplayName("releaseAllProbes with probe")
	def releaseAllProbes_probe : void {
		val p1 = this.service.probe("x", typeof(Integer))
		val p2 = this.service.probe("y", typeof(Integer))
		p1.isActive.assertTrue
		p2.isActive.assertTrue
		this.service.releaseAllProbes
		0.assertEquals(this.service.probes.size)
		p1.isActive.assertFalse
		p2.isActive.assertFalse
	}

	@Test
	@DisplayName("onProbeReleasedProbe with known probe")
	def onProbeReleasedProbe_known : void {
		val p1 = this.service.probe("x", typeof(Integer))
		val p2 = this.service.probe("y", typeof(Integer))
		this.service.onProbeReleasedProbe(p2)
		1.assertEquals(this.service.probes.size)
		this.service.probes.assertContains(p1)
	}

	@Test
	@DisplayName("onProbeReleasedProbe with unknown probe")
	def onProbeReleasedProbe_unknown : void {
		val p1 = this.service.probe("x", typeof(Integer))
		val p2 = this.service.probe("y", typeof(Integer))
		val p3 = typeof(Probe).mock
		when(p3.uri).thenReturn(new URI("artifact:z#x"))
		this.service.onProbeReleasedProbe(p3)
		2.assertEquals(this.service.probes.size)
		this.service.probes.assertContains(p1, p2)
	}

	@Test
	@DisplayName("sync")
	def sync : void {
		val p1 = this.service.probe("x", typeof(Integer))
		val p2 = this.service.probe("y", typeof(Integer))
		p1.value = 3
		1.assertEquals(p1.value)
		2.assertEquals(p2.value)
		this.service.sync
		3.assertEquals(p1.value)
		2.assertEquals(p2.value)
	}

}
