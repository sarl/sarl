/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.janus.tests.skills.bic

import io.sarl.api.core.AgentTask
import io.sarl.lang.core.Agent
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.janus.services.executor.ExecutorService
import io.sarl.sre.janus.services.lifecycle.AgentLife
import io.sarl.sre.janus.services.lifecycle.AgentState
import io.sarl.sre.janus.skills.bic.FailureListenerFactory
import io.sarl.sre.janus.skills.bic.SchedulesSkill
import io.sarl.sre.janus.tests.framework.SreTestUtilities
import io.sarl.sre.janus.tests.skills.bic.mocks.MyAgent1
import io.sarl.sre.janus.tests.skills.bic.mocks.MyBehavior
import io.sarl.sre.janus.tests.skills.bic.mocks.MyLoggingSkill
import io.sarl.sre.janus.tests.skills.bic.mocks.MyTimeSkill
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.PropertyRestoreExtension
import java.util.UUID
import java.util.concurrent.Future
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit
import java.util.logging.Logger
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestReflections.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestAssertions.assertException
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SchedulesSkill test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@SuppressWarnings("use_reserved_sarl_annotation")
class SchedulesSkillTest {

	@Nullable
	var contextId : UUID
	
	@Nullable
	var agentId : UUID 

	@Nullable
	var executor : ExecutorService

	@Nullable
	var ^agent : Agent 

	@Nullable
	var ^skill : SchedulesSkill

	@Nullable
	var rawLogger : Logger

	@Nullable
	var logger : MyLoggingSkill

	@Nullable
	var time : MyTimeSkill

	@Nullable
	var taskName : String

	@Nullable
	var failureListenerFactory : FailureListenerFactory

	@BeforeEach	
	def setUp : void {
		this.taskName = UUID::randomUUID.toString
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.executor = typeof(ExecutorService).mock
		this.rawLogger = typeof(Logger).mock
		this.logger = new MyLoggingSkill(this.rawLogger).spy
		this.time = new MyTimeSkill().spy
		this.failureListenerFactory = typeof(FailureListenerFactory).mock
		this.^agent = new MyAgent1(contextId, this.^agentId, this.logger, this.time).spy
		this.^skill = new SchedulesSkill(this.executor, this.failureListenerFactory, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector])
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	private def forceAlive {
		// Force the agent being alive
		AgentLife::getAgentLife(this.^agent, [SreTestUtilities::newFactories], [SreTestUtilities::newConfigurableAgentInjector]).state = AgentState::ALIVE
	}

	@Test
	@DisplayName("task(null) when not alive")
	def task_nullName_notAlive {
		var task = this.^skill.task(null)
		assertNull(task)
	}

	@Test
	@DisplayName("task(null) when alive")
	def task_nullName_alive {
		forceAlive
		var task = this.^skill.task(null)
		task.assertNotNull
		this.^agent.assertSame(task.initiator)
		task.name.assertNotNull
		task.procedure.assertNull
	}

	@Test
	@DisplayName("task(String) when not alive")
	def task_withName_notAlive {
		var name = UUID::randomUUID.toString
		var task = this.^skill.task(name)
		task.assertNull
	}

	@Test
	@DisplayName("task(String) when alive")
	def task_withName_alive {
		forceAlive
		var name = UUID::randomUUID.toString
		var task = this.^skill.task(name)
		task.assertNotNull
		this.^agent.assertSame(task.initiator)
		name.assertEquals(task.name)
		task.procedure.assertNull
	}

	@Test
	@DisplayName("setName(null) when not alive")
	def setName_nullName_notAlive {
		var task = new AgentTask(this.taskName)
		this.^skill.setName(task, null)
		this.taskName.assertSame(task.name)
	}

	@Test
	@DisplayName("setName(null) when alive")
	def setName_nullName_alive {
		forceAlive
		var task = new AgentTask(this.taskName)
		this.^skill.setName(task, null)
		task.name.assertNotNullOrEmpty
	}

	@Test
	@DisplayName("setName(String) when not alive")
	def setName_withName_notAlive {
		var name = UUID::randomUUID.toString
		var task = new AgentTask(this.taskName)
		this.^skill.setName(task, name)
		this.taskName.assertSame(task.name)
	}

	@Test
	@DisplayName("setName(String) when alive")
	def setName_withName_alive {
		forceAlive()
		var name = UUID::randomUUID.toString
		var task = new AgentTask(this.taskName)
		this.^skill.setName(task, name)
		name.assertEquals(task.name)
	}

	private def testNoTask(alive : boolean, allowFunctionRunWhenNotAlive : boolean,
			call : (AgentTask, (Agent)=>void)=>AgentTask,
			executorConfig : (T)=>void,
			type : Class<T>,
			specialTest : (boolean)=>void)
			with T extends Future<?> {
		if (alive) {
			forceAlive
		}

		var future : T = type.mock
		executorConfig.apply(future)
		var procedure : (Agent)=>void = []

		var task = call.apply(null, procedure)

		if (alive || allowFunctionRunWhenNotAlive) {
			task.assertNotNull
			AgentTask.TRUE_GUARD.assertSame(task.guard)
			task.name.isNullOrEmpty.assertFalse
			this.^agent.assertSame(task.initiator)
			procedure.assertSame(task.procedure)
			1.assertEquals(this.^skill.activeTasks.size)
		} else {
			task.assertNull
			0.assertEquals(this.^skill.activeTasks.size)
		}
		
		specialTest.apply(alive)
	}

	@PrivateAPI(isCallerOnly=true)
	private def testNotStartedTask(alive : boolean, allowFunctionRunWhenNotAlive : boolean,
			call : (AgentTask, (Agent)=>void)=>AgentTask,
			executorConfig : (T)=>void,
			type : Class<T>,
			specialTest : (boolean)=>void)
			with T extends Future<?> {
		if (alive) {
			forceAlive
		}

		var future : T = type.mock
		executorConfig.apply(future)
		var procedure : (Agent)=>void = []

		var otask = new AgentTask(this.taskName, this)
		var taskName = UUID::randomUUID.toString
		otask.taskName = taskName
		otask = otask.spy
		
		var task = call.apply(otask, procedure)

		otask.assertSame(task)
		
		if (alive || allowFunctionRunWhenNotAlive) {
			var capturedProcedure = typeof(Procedure1).forClass
			task.verify.setProcedure(capturedProcedure.capture)
			procedure.assertSame(capturedProcedure.value)

			1.assertEquals(this.^skill.activeTasks.size)
			this.^skill.activeTasks.assertContains(taskName)
		} else {
			verifyNoMoreInteractions(task)

			0.assertEquals(this.^skill.activeTasks.size)
		}

		specialTest.apply(alive)
	}

	@PrivateAPI(isCallerOnly=true)
	private def testNotFinishedTask(alive : boolean,
			call : (AgentTask, (Agent)=>void)=>AgentTask,
			executorConfig : (T)=>void,
			type : Class<T>)
			with T extends Future<?> {
		if (alive) {
			forceAlive
		}

		var future : T = type.mock
		executorConfig.apply(future)
		var procedure : (Agent)=>void = []

		var otask = new AgentTask(this.taskName, this)
		var taskName = UUID::randomUUID.toString
		otask.setTaskName(taskName)
		otask = otask.spy
		
		var task = call.apply(otask, procedure)
		otask.assertSame(task)

		var task2 = call.apply(otask, procedure)
		otask.assertSame(task2)
	}

	@PrivateAPI(isCallerOnly = true)
	private def testFinishedTask(alive : boolean, allowFunctionRunWhenNotAlive : boolean,
			call : (AgentTask, (Agent)=>void)=>AgentTask,
			executorConfig : (T)=>void,
			type : Class<T>,
			specialTest : (boolean)=>void,
			proced : (Agent)=>void = null)
			with T extends Future<?> {
		if (alive) {
			forceAlive
		}
		
		var future : T = type.mock
		executorConfig.apply(future)
		var procedure : (Agent)=>void = proced
		if (procedure === null) {
			procedure = []
		}

		var otask = new AgentTask(this.taskName, this)
		var taskName = UUID::randomUUID.toString
		otask.setTaskName(taskName)
		otask = otask.spy

		this.^skill.execute(otask) []
		reset(otask, this.executor)
	
		when(future.done).thenReturn(true)

		var task = call.apply(otask, procedure)

		otask.assertSame(task)
		
		if (alive || allowFunctionRunWhenNotAlive) {
			var capturedProcedure = typeof(Procedure1).forClass
			task.verify.setProcedure(capturedProcedure.capture)
			procedure.assertSame(capturedProcedure.value)
		} else {
			verifyNoMoreInteractions(task)
		}
		
		1.assertEquals(this.^skill.activeTasks.size)
		this.^skill.activeTasks.assertContains(taskName)
		
		specialTest.apply(alive)
	}

	@PrivateAPI(isCallerOnly = true)
	private def testCancelledTask(alive : boolean, allowFunctionRunWhenNotAlive : boolean,
			call : (AgentTask, (Agent)=>void)=>AgentTask,
			executorConfig : (T)=>void,
			type : Class<T>,
			specialTest : (boolean)=>void)
			with T extends Future<?> {
		if (alive) {
			forceAlive
		}
		
		var future : T = type.mock
		executorConfig.apply(future)
		var procedure : (Agent)=>void =  []

		var otask = new AgentTask(this.taskName, this)
		var taskName = UUID::randomUUID.toString
		otask.setTaskName(taskName)
		otask = otask.spy

		this.^skill.execute(otask) []
		reset(otask, this.executor)
	
		when(future.isCancelled()).thenReturn(true)

		var task = call.apply(otask, procedure)

		otask.assertSame(task)
		
		if (alive || allowFunctionRunWhenNotAlive) {
			var capturedProcedure = typeof(Procedure1).forClass
			task.verify.setProcedure(capturedProcedure.capture)
			procedure.assertSame(capturedProcedure.value)
		} else {
			verifyNoMoreInteractions(task)
		}
		
		1.assertEquals(this.^skill.activeTasks.size)
		this.^skill.activeTasks.assertContains(taskName)
		
		specialTest.apply(alive)
	}
	
	private def getExecuteTester : (boolean)=>void {
		[alive |
			var capturedLogger = forClass(typeof(Logger))
			var capturedProcedure2 = typeof(Runnable).forClass
			this.executor.verify(only).executeAsap(capturedLogger.capture, capturedProcedure2.capture)
			this.rawLogger.assertSame(capturedLogger.value)
			capturedProcedure2.value.assertNotNull
		]
	}

	private def getExecuteExecutorConfig : (Future<?>)=>void {
		[future | when(this.executor.executeAsap(any, typeof(Runnable).any)).thenReturn(future) ]
	}

	@Test
	@DisplayName("execute(no task) when not alive")
	def execute_noTask_notAlive {
		testNoTask(
			false,
			true,
			[a, b | this.^skill.execute(b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(no task) when alive")
	def execute_noTask_alive {
		testNoTask(
			true,
			true,
			[a, b | this.^skill.execute(b) ],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(not started task) when not alive")
	def execute_task_notStarted_notAlive {
		testNotStartedTask(
			false,
			true,
			[a, b | this.^skill.execute(a, b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(not started task) when alive")
	def execute_task_notStarted_alive {
		testNotStartedTask(
			true,
			true,
			[a, b | this.^skill.execute(a, b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(running task) when not alive")
	def execute_task_notFinished_notAlive : void {
		typeof(IllegalStateException).assertException [
			testNotFinishedTask(false, [a, b|this.^skill.execute(a, b)], getExecuteExecutorConfig, typeof(Future))
		]
	}

	@Test
	@DisplayName("execute(running task) when alive")
	def execute_task_notFinished_alive : void {
		typeof(IllegalStateException).assertException [
			testNotFinishedTask(true, [a, b|this.^skill.execute(a, b)], getExecuteExecutorConfig, typeof(Future))
		]
	}

	@Test
	@DisplayName("execute(finished task) when not alive")
	def execute_task_finished_notAlive {
		testFinishedTask(
			false,
			true, [a, b | this.^skill.execute(a, b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(finished task) when alive")
	def execute_task_finished_alive {
		testFinishedTask(
			true,
			true,
			[a, b | this.^skill.execute(a, b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(cancelled task) when not alive")
	def execute_task_cancelled_notAlive {
		testCancelledTask(
			false,
			true,
			[a, b | this.^skill.execute(a, b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	@Test
	@DisplayName("execute(cancelled task) when alive")
	def execute_task_cancelled_alive {
		testCancelledTask(
			true,
			true,
			[a, b | this.^skill.execute(a, b)],
			getExecuteExecutorConfig,
			typeof(Future),
			getExecuteTester)
	}

	private def getInTester : (boolean)=>void {
		[alive |
			if (alive) {
				var capturedLogger = typeof(Logger).forClass
				var capturedDelay = typeof(long).forClass
				var capturedUnit = typeof(TimeUnit).forClass
				var capturedProcedure = typeof(Runnable).forClass
				this.executor.verify(only).schedule(capturedLogger.capture,
						capturedDelay.capture.longValue,
						capturedUnit.capture,
						capturedProcedure.capture)
				this.rawLogger.assertSame(capturedLogger.value)
				34.assertEquals(capturedDelay.value.intValue)
				TimeUnit::MILLISECONDS.assertEquals(capturedUnit.value)
				capturedProcedure.value.assertNotNull
			} else {
				verifyNoMoreInteractions(this.executor)
			}
		]
	}

	private def getInExecutorConfig : (ScheduledFuture<?>)=>void {
		[future |
			when(this.executor.schedule(any, any(typeof(Long)).longValue,
				any, typeof(Runnable).any)).thenReturn(future)
		]
	}

	@Test
	@DisplayName("in(no task) when not alive")
	def in_noTask_notAlive {
		testNoTask(
			false,
			false,
			[a, b | this.^skill.in(34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(no task) when alive")
	def in_noTask_alive {
		testNoTask(
			true,
			false,
			[a, b | this.^skill.in(34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(not started task) when not alive")
	def in_task_notStarted_notAlive {
		testNotStartedTask(
			false,
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(not started task) when alive")
	def in_task_notStarted_alive {
		testNotStartedTask(
			true,
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(running task) when not alive")
	def in_task_notFinished_notAlive {
		testNotFinishedTask(
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture))
	}

	@Test
	@DisplayName("in(running task) when alive")
	def in_task_notFinished_alive : void {
		typeof(IllegalStateException).assertException [
			testNotFinishedTask(true, [a, b|this.^skill.in(a, 34, b)], getInExecutorConfig, typeof(ScheduledFuture))
		]
	}

	@Test
	@DisplayName("in(finished task) when not alive")
	def in_task_finished_notAlive {
		testFinishedTask(
			false,
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(finished task) when alive")
	def in_task_finished_alive {
		testFinishedTask(
			true,
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(cancelled task) when not alive")
	def in_task_cancelled_notAlive {
		testCancelledTask(
			false,
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	@Test
	@DisplayName("in(cancelled task) when alive")
	def in_task_cancelled_alive {
		testCancelledTask(
			true,
			false,
			[a, b | this.^skill.in(a, 34, b)],
			getInExecutorConfig,
			typeof(ScheduledFuture),
			getInTester)
	}

	private def getEveryTester : (boolean)=>void {
		[alive |
			if (alive) {
				var capturedLogger = typeof(Logger).forClass
				var capturedDelay = typeof(long).forClass
				var capturedPeriod = typeof(long).forClass
				var capturedUnit = typeof(TimeUnit).forClass
				var capturedProcedure = typeof(Runnable).forClass
				this.executor.verify(only).scheduleAtFixedRate(capturedLogger.capture,
						capturedDelay.capture.longValue,
						capturedPeriod.capture.longValue,
						capturedUnit.capture,
						capturedProcedure.capture)
				this.rawLogger.assertSame(capturedLogger.value)
				0.assertEquals(capturedDelay.value.intValue)
				34.assertEquals(capturedPeriod.value.intValue)
				TimeUnit::MILLISECONDS.assertEquals(capturedUnit.value)
				capturedProcedure.value.assertNotNull
			} else {
				verifyNoMoreInteractions(this.executor)
			}
		]
	}

	private def getEveryExecutorConfig : (ScheduledFuture<?>)=>void {
		[future |
			when(this.executor.scheduleAtFixedRate(any, any(typeof(Long)).longValue,
					any(typeof(Long)).longValue, any, typeof(Runnable).any)).thenReturn(future)
		]
	}

	@Test
	@DisplayName("every(no task) when not alive")
	def every_noTask_notAlive {
		testNoTask(
			false,
			false,
			[a, b | this.^skill.every(34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester
		)
	}

	@Test
	@DisplayName("every(no task) when alive")
	def every_noTask_alive {
		testNoTask(
			true,
			false,
			[a, b | this.^skill.every(34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	@Test
	@DisplayName("every(not started task) when not alive")
	def every_task_notStarted_notAlive {
		testNotStartedTask(
			false,
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	@Test
	@DisplayName("every(not started task) when alive")
	def every_task_notStarted_alive {
		testNotStartedTask(
			true,
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	@Test
	@DisplayName("every(running task) when not alive")
	def every_task_notFinished_notAlive {
		testNotFinishedTask(
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture))
	}

	@Test
	@DisplayName("every(running task) when alive")
	def every_task_notFinished_alive : void {
		typeof(IllegalStateException).assertException [
			testNotFinishedTask(true, [a, b|this.^skill.every(a, 34, b)], getEveryExecutorConfig,
				typeof(ScheduledFuture))
		]
	}

	@Test
	@DisplayName("every(finished task) when not alive")
	def every_task_finished_notAlive {
		testFinishedTask(
			false,
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	@Test
	@DisplayName("every(finished task) when alive")
	def every_task_finished_alive {
		testFinishedTask(
			true,
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	@Test
	@DisplayName("every(cancelled task) when not alive")
	def every_task_cancelled_notAlive {
		testCancelledTask(
			false,
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	@Test
	@DisplayName("every(cancelled task) when alive")
	def every_task_cancelled_alive {
		testCancelledTask(
			true,
			false,
			[a, b | this.^skill.every(a, 34, b)],
			getEveryExecutorConfig,
			typeof(ScheduledFuture),
			getEveryTester)
	}

	private def getAtFixedDelayTester : (boolean)=>void {
		[alive |
			if (alive) {
				var capturedLogger = typeof(Logger).forClass
				var capturedDelay = typeof(long).forClass
				var capturedPeriod = typeof(long).forClass
				var capturedUnit = typeof(TimeUnit).forClass
				var capturedProcedure = typeof(Runnable).forClass
				this.executor.verify(only).scheduleWithFixedDelay(capturedLogger.capture,
						capturedDelay.capture.longValue,
						capturedPeriod.capture.longValue,
						capturedUnit.capture,
						capturedProcedure.capture)
				this.rawLogger.assertSame(capturedLogger.value)
				0.assertEquals(capturedDelay.value.intValue)
				34.assertEquals(capturedPeriod.value.intValue)
				TimeUnit::MILLISECONDS.assertEquals(capturedUnit.value)
				capturedProcedure.value.assertNotNull
			} else {
				verifyNoMoreInteractions(this.executor)
			}
		]
	}

	private def getAtFixedDelayExecutorConfig : (ScheduledFuture<?>)=>void {
		[future | when(this.executor.scheduleWithFixedDelay(any, any(typeof(Long)).longValue,
				any(typeof(Long)).longValue, any, typeof(Runnable).any)).thenReturn(future)]
	}

	@Test
	@DisplayName("atFixedDelay(no task) when not alive")
	def atFixedDelay_noTask_notAlive {
		testNoTask(
			false,
			false,
			[a, b | this.^skill.atFixedDelay(34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("atFixedDelay(no task) when alive")
	def atFixedDelay_noTask_alive {
		testNoTask(true, false, [a, b | this.^skill.atFixedDelay(34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("atFixedDelay(not started task) when not alive")
	def atFixedDelay_task_notStarted_notAlive {
		testNotStartedTask(false, false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}		

	@Test
	@DisplayName("atFixedDelay(not started task) when alive")
	def atFixedDelay_task_notStarted_alive {
		testNotStartedTask(true, false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("atFixedDelay(running task) when not alive")
	def atFixedDelay_task_notFinished_notAlive {
		testNotFinishedTask(false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig(),
			typeof(ScheduledFuture))
	}

	@Test
	@DisplayName("atFixedDelay(running task) when alive")
	def atFixedDelay_task_notFinished_alive : void {
		typeof(IllegalStateException).assertException [
			testNotFinishedTask(true, [a, b|this.^skill.atFixedDelay(a, 34, b)], getAtFixedDelayExecutorConfig(),
				typeof(ScheduledFuture))
		]
	}

	@Test
	@DisplayName("atFixedDelay(finished task) when not alive")
	def atFixedDelay_task_finished_notAlive {
		testFinishedTask(false, false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("atFixedDelay(finished task) when alive")
	def atFixedDelay_task_finished_alive {
		testFinishedTask(true, false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("atFixedDelay(cancelled task) when not alive")
	def atFixedDelay_task_cancelled_notAlive {
		testCancelledTask(false, false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("atFixedDelay(cancelled task) when alive")
	def atFixedDelay_task_cancelled_alive {
		testCancelledTask(true, false, [a, b | this.^skill.atFixedDelay(a, 34, b)],
			getAtFixedDelayExecutorConfig,
			typeof(ScheduledFuture),
			getAtFixedDelayTester)
	}

	@Test
	@DisplayName("isCanceled(null)")
	def isCanceled_nullTask {
		this.^skill.isCanceled(null).assertFalse
	}

	@Test
	@PrivateAPI(isCallerOnly = true)
	@DisplayName("isCanceled(not submitted)")
	def isCanceled_notSubmitted {
		var task = new AgentTask(this.taskName, this)
		var taskName = UUID::randomUUID.toString
		task.setTaskName(taskName)
		task = task.spy
		this.^skill.isCanceled(task).assertFalse
	}

	@Test
	@DisplayName("isCanceled(running)")
	def isCanceled_running {
		var future : Future<?> = typeof(Future).mock
		when(this.executor.executeAsap(any, typeof(Runnable).any)).thenReturn(future)
		var task = this.^skill.execute []
		this.^skill.isCanceled(task).assertFalse
	}

	@Test
	@DisplayName("isCanceled(finished)")
	def isCanceled_finished {
		var future : Future<?> = typeof(Future).mock
		when(this.executor.executeAsap(any, typeof(Runnable).any)).thenReturn(future)
		when(future.done).thenReturn(true)

		var task = this.^skill.execute []
		assertFalse(this.^skill.isCanceled(task))
	}

	@Test
	@DisplayName("isCanceled(cancelled)")
	def isCanceled_cancelled {
		var future : Future<?> = typeof(Future).mock
		when(this.executor.executeAsap(any, typeof(Runnable).any)).thenReturn(future)
		when(future.isCancelled()).thenReturn(true)

		var task = this.^skill.execute []
		this.^skill.isCanceled(task).assertTrue
	}

	@Test
	@PrivateAPI(isCallerOnly = true)
	@DisplayName("cancel(not submitted)")
	def cancel_notSubmitted : void {
		var future : Future<?> = typeof(Future).mock
		when(this.executor.executeAsap(any, typeof(Runnable).any)).thenReturn(future)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)

		var task = new AgentTask(this.taskName, this)
		var taskName = UUID::randomUUID.toString
		task.setTaskName(taskName)
		task = task.spy

		this.^skill.cancel(task).assertFalse
		this.^skill.activeTasks.isEmpty.assertTrue
		
		var capturedInterrupt = typeof(boolean).forClass
		verify(future, 0.times).cancel(capturedInterrupt.capture.booleanValue)
	}

	@Test
	@DisplayName("cancel(running) when not alive")
	def cancel_running_notAlive {
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
		
		var task = this.^skill.in(10000) []
		this.^skill.cancel(task).assertFalse
		this.^skill.activeTasks.isEmpty.assertTrue
		verifyNoMoreInteractions(future)
	}

	@Test
	@DisplayName("cancel(running) when alive")
	def cancel_running_alive {
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
		
		forceAlive()
		
		var task = this.^skill.in(10000) []
		this.^skill.cancel(task).assertTrue
		this.^skill.activeTasks.isEmpty.assertTrue
		
		var capturedInterrupt = typeof(boolean).forClass
		verify(future, atLeastOnce).cancel(capturedInterrupt.capture.booleanValue)
		assertTrue(capturedInterrupt.value)
	}

	@Test
	@DisplayName("cancel(finished) when not alive")
	def cancel_finished_notAlive {
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)
		when(future.done).thenReturn(true)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
		
		var task = this.^skill.in(10000) []
		this.^skill.cancel(task).assertFalse
		this.^skill.activeTasks.assertContains()
		
		verifyNoMoreInteractions(future)
	}

	@Test
	@DisplayName("cancel(finished) when alive")
	def cancel_finished_alive : void {
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)
		when(future.done).thenReturn(true)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
		
		forceAlive()
		
		var task = this.^skill.in(10000) []
		this.^skill.cancel(task).assertFalse
		// Caution, the task was artificially finished by forcing the value replied y isDone
		this.^skill.activeTasks.assertContains(task.name)
		
		var capturedInterrupt = forClass(typeof(boolean))
		verify(future, 0.times).cancel(capturedInterrupt.capture.booleanValue)
	}

	@Test
	@DisplayName("cancel(cancelled) when not alive")
	def cancel_cancelled_notAlive {
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)
		when(future.isCancelled()).thenReturn(true)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
		
		var task = this.^skill.in(10000) []
		this.^skill.cancel(task).assertFalse
		this.^skill.activeTasks.assertContains()
		verifyNoMoreInteractions(future)
	}

	@Test
	@DisplayName("cancel(cancelled) when alive")
	def cancel_cancelled_alive : void {
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)
		when(future.isCancelled()).thenReturn(true)
		when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
		
		forceAlive()
		
		var task = this.^skill.in(10000) []
		this.^skill.cancel(task).assertFalse
		// Caution, the task was artificially finished by forcing the value replied y isDone
		this.^skill.activeTasks.assertContains(task.name)
		
		var capturedInterrupt = forClass(typeof(boolean))
		verify(future, 0.times).cancel(capturedInterrupt.capture.booleanValue)
	}

	@Test
	@DisplayName("getActiveTasks w/o submission")
	def getActiveTasks_nothing {
		var tasks = this.^skill.activeTasks
		tasks.isEmpty.assertTrue
	}

	@Test
	@DisplayName("getActiveTasks w/ 1 submission")
	def getActiveTasks_oneTask {
		var task = this.^skill.execute []
		var tasks = this.^skill.activeTasks
		tasks.assertContains(task.name)
	}

	@Test
	@DisplayName("getActiveTasks w/ 2 submissions")
	def getActiveTasks_twoTasks {
		var task1 = this.^skill.execute []
		var task2 = this.^skill.execute []
		var tasks = this.^skill.activeTasks
		tasks.assertContains(task1.name, task2.name)
	}

	@Test
	@DisplayName("getActiveTasks w/ 2 submissions first cancelled")
	def getActiveTasks_twoTasks_firstCancelled {
		when(this.executor.executeAsap(any, typeof(Runnable).any)).thenAnswer [
			var future : Future<?> = typeof(Future).mock
			when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
			return future
		]

		var task1 = this.^skill.execute []
		var task2 = this.^skill.execute []
		this.^skill.cancel(task1).assertTrue
		var tasks = this.^skill.activeTasks
		tasks.assertContains(task2.name)
	}

	@Test
	@DisplayName("getActiveTasks w/ 2 submissions second cancelled")
	def getActiveTasks_twoTasks_secondCancelled {
		when(this.executor.executeAsap(any, typeof(Runnable).any)).thenAnswer [
			var future : Future<?> = typeof(Future).mock
			when(future.cancel(typeof(boolean).any.booleanValue)).thenReturn(true)
			return future
		]

		var task1 = this.^skill.execute []
		var task2 = this.^skill.execute []
		this.^skill.cancel(task2).assertTrue
		var tasks = this.^skill.activeTasks
		tasks.assertContains(task1.name)
	}

	@Test
	@PrivateAPI(isCallerOnly = true)
	@DisplayName("unregisterTasksForBehavior when not alive")
	def unregisterTasksForBehavior_notAlive {
		var beh = new MyBehavior(this.^agent)
		
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)

		var task1 = new AgentTask(this.taskName, beh)
		var taskName = UUID::randomUUID.toString
		task1.setTaskName(taskName)
		task1 = task1.spy
		this.^skill.in(task1, 10000) []

		var task2 = new AgentTask(this.taskName, this.^agent)
		taskName = UUID::randomUUID.toString
		task2.setTaskName(taskName)
		task2 = task2.spy
		this.^skill.in(task2, 10000) []

		var task3 = new AgentTask(this.taskName, beh)
		taskName = UUID::randomUUID.toString
		task3.setTaskName(taskName)
		task3 = task3.spy
		this.^skill.in(task3, 10000) []
		
		this.^skill.unregisterTasksForBehavior(beh)
		
		this.^skill.activeTasks.assertContains()
	}

	@Test
	@PrivateAPI(isCallerOnly = true)
	@DisplayName("unregisterTasksForBehavior when alive")
	def unregisterTasksForBehavior_alive {
		var beh = new MyBehavior(this.^agent)
		
		var future : ScheduledFuture<?> = typeof(ScheduledFuture).mock
		getInExecutorConfig.apply(future)

		var task1 = new AgentTask(this.taskName, beh)
		var taskName = UUID::randomUUID.toString
		task1.setTaskName(taskName)
		task1 = task1.spy
		
		forceAlive()
		
		this.^skill.in(task1, 10000) []

		var task2 = new AgentTask(this.taskName, this.^agent)
		taskName = UUID::randomUUID.toString
		task2.setTaskName(taskName)
		task2 = task2.spy
		this.^skill.in(task2, 10000) []

		var task3 = new AgentTask(this.taskName, beh)
		taskName = UUID::randomUUID.toString
		task3.setTaskName(taskName)
		task3 = task3.spy
		this.^skill.in(task3, 10000) []
		
		this.^skill.unregisterTasksForBehavior(beh)
		
		this.^skill.activeTasks.assertContains(task2.name)
	}

	private def getAtTester : (boolean)=>void {
		[ alive |
			if (alive) {
				var capturedLogger = typeof(Logger).forClass
				var capturedDelay = typeof(long).forClass
				var capturedUnit = typeof(TimeUnit).forClass
				var capturedProcedure = typeof(Runnable).forClass
				this.executor.verify(only).schedule(capturedLogger.capture, capturedDelay.capture.longValue,
					capturedUnit.capture, capturedProcedure.capture)
				this.rawLogger.assertSame(capturedLogger.value)
				34.assertEquals(capturedDelay.value.intValue)
				TimeUnit::MILLISECONDS.assertEquals(capturedUnit.value)
				capturedProcedure.value.assertNotNull
			} else {
				verifyNoMoreInteractions(this.executor)
			}
		]
	}

	private def getAtExecutorConfig : (ScheduledFuture<?>)=>void {
		[ future |
			when(this.executor.schedule(any, any(typeof(Long)).longValue, any, typeof(Runnable).any)).thenReturn(future)
		]
	}

	@Test
	@DisplayName("at(no task) when not alive")
	def at_noTask_notAlive {
		testNoTask(false, false, [a, b|this.^skill.at(34, b)], getAtExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

	@Test
	@DisplayName("at(no task) when alive")
	def at_noTask_alive {
		testNoTask(true, false, [a, b|this.^skill.at(34, b)], getAtExecutorConfig, typeof(ScheduledFuture), getAtTester)
	}

	@Test
	@DisplayName("at(not started task) when not alive")
	def at_task_notStarted_notAlive {
		testNotStartedTask(false, false, [a, b|this.^skill.at(a, 34, b)], getAtExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

	@Test
	@DisplayName("at(not started task) when alive")
	def at_task_notStarted_alive {
		testNotStartedTask(true, false, [a, b|this.^skill.at(a, 34, b)], getAtExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

	@Test
	@DisplayName("at(running task) when not alive")
	def at_task_notFinished_notAlive {
		testNotFinishedTask(false, [a, b|this.^skill.at(a, 34, b)], getAtExecutorConfig, typeof(ScheduledFuture))
	}

	@Test
	@DisplayName("at(running task) when alive")
	def at_task_notFinished_alive : void {
		typeof(IllegalStateException).assertException [
			testNotFinishedTask(true, [a, b|this.^skill.at(a, 34, b)], getAtExecutorConfig, typeof(ScheduledFuture))
		]
	}

	@Test
	@DisplayName("at(finished task) when not alive")
	def at_task_finished_notAlive {
		testFinishedTask(false, false, [a, b|this.^skill.at(a, 34, b)], getAtExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

	@Test
	@DisplayName("at(finished task) when alive")
	def at_task_finished_alive {
		testFinishedTask(true, false, [a, b|this.^skill.at(a, 34, b)], getAtExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

	@Test
	@DisplayName("at(cancelled task) when not alive")
	def at_task_cancelled_notAlive {
		testCancelledTask(false, false, [a, b|this.^skill.at(a, 34, b)], getInExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

	@Test
	@DisplayName("at(cancelled task) when alive")
	def at_task_cancelled_alive {
		testCancelledTask(true, false, [a, b|this.^skill.at(a, 34, b)], getInExecutorConfig, typeof(ScheduledFuture),
			getAtTester)
	}

}

