/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.context

import io.sarl.api.core.AgentKilled
import io.sarl.api.core.AgentSpawned
import io.sarl.api.core.SpaceDestroyed
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.apputils.bootiqueapp.config.Level
import io.sarl.apputils.bootiqueapp.config.LogConfig
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.SRE
import io.sarl.lang.core.SREBootstrap
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.test.framework.Constants
import io.sarl.sre.test.framework.exception.SreLogException
import io.sarl.sre.test.framework.exception.SreTimeoutException
import java.util.List
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.ConcurrentMap
import java.util.concurrent.ConcurrentSkipListSet
import java.util.concurrent.CopyOnWriteArrayList
import java.util.concurrent.TimeoutException
import java.util.concurrent.atomic.AtomicBoolean
import java.util.logging.Handler
import java.util.logging.LogRecord
import java.util.logging.Logger
import org.arakhne.afc.bootique.variables.VariableNames
import org.eclipse.xtend.lib.annotations.Accessors
import org.opentest4j.AssertionFailedError

import static io.sarl.sre.test.framework.Constants.*
import static org.junit.jupiter.api.Assertions.*

import static extension org.junit.jupiter.api.Assertions.assertEquals

/**
 * Context for running the SRE. This context is thread-safe.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version sre.tests.api 0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.11
 */
interface SreRunContext {

	/** 
	 * Reference to the instance of the root context.
	 */
	def getRootContext : AgentContext

	/** 
	 * Reference to the instance of the SRE bootstrap.
	 */
	def getBootstrap : SREBootstrap

	def getBootAgentId : UUID

	def getExecutableName : String

	def setExecutableName(newName : String)

	def getBootOrFirstAgentId : UUID
	
	/** 
	 * Replies result at the given index of the run of the agent.
	 * 
	 * @param agentId the identifier of the agent. If {@code null}, the value replied by {@link #getBootAgentId()}
	 * is used.
	 * @param type - the type of the result.
	 * @param index - the index of the result.
	 * @return the value; or {@code null} if no result.
	 */
	def getResult(agentId : UUID = null, type : Class<T>, index : int) : T with T
	
	/** 
	 * Replies first result of the given type of the run of the agent.
	 * 
	 * @param agentId the identifier of the agent. If {@code null}, the value replied by {@link #getBootAgentId()}
	 *    is used.
	 * @param type - the type of the result.
	 * @return the value; or {@code null} if no result.
	 * @since 0.11
	 */
	def getFirstResultOfType(agentId : UUID = null, type : Class<T>) : T with T

	/** Replies the number of results that are provided by the agent.
	 * 
	 * @param agentId the identifier of the agent. If {@code null}, the value replied by {@link #getBootAgentId()}
	 * is used.
	 * @return the number of results.
	 */
	def getNumberOfResults(agentId : UUID = null) : int

	/** 
	 * Test if the number of results provided by the SRE platform is equal to the given number.
	 * 
	 * @param agentId the identifier of the agent for which the results must be retrieved.
	 * @param expected - the expected number of results. If {@code null}, the value replied by {@link #getBootAgentId()}
	 * is used.
	 */
	def assertNumberOfResults(expected : int, agentId : UUID = null)

	/** 
	 * Replies result for the boot agent or the agent with the given identifier.
	 * 
	 * @param agentId the identifier of the agent for which the results must be retrieved.
	 * If {@code null}, the value replied by {@link #getBootAgentId()}
	 * is used.
	 * @return the results.
	 */
	def getResults(agentId : UUID = null) : List<Object>

	/** 
	 * Add a value to the list of results.
	 * 
	 * @param agentId the identifier of the agent for which the results must be retrieved.
	 * If {@code null}, the value replied by {@link #getBootAgentId()}
	 * is used.
	 * @param value the new value.
	 */
	def addResult(agentId : UUID = null, value : Object)

	/** 
	 * Replies all the results for all the agents.
	 * @return the results.
	 */
	def getAllResultsPerAgent : ConcurrentMap<UUID, CopyOnWriteArrayList<Object>>

	/** 
	 * Replies all the results for all the agents.
	 * @return the results.
	 */
	def getAllResults : List<Object>
	
	/** 
	 * Replies the initialization parameters for the agents.
	 * @return the parameters.
	 */
	def getAgentInitializationParameters : Object[]

	/** 
	 * Replies the initialization parameters for the agents.
	 *
	 * @param params the additional parameters
	 * @return the value replied by {@link #getAgentInitializationParameters} followed by the arguments.
	 */
	def buildAgentInitializationParameters(params : Object*) : Object[]
	
	/** 
	 * Replies the index of the first result of the given type starting at the given index.
	 * 
	 * @param agentId the identifier of the agent. If {@code null}, the value replied by {@link #getBootAgentId()}
	 * is used.
	 * @param type - the type of the result.
	 * @param fromIndex - the start index.
	 * @return the index; or {@code -1} if not found.
	 */
	def indexOfResult(agentId : UUID = null, type : Class<?>, fromIndex : int = 0) : int

	/** Change the command line arguments to be used by the SRE.
	 *
	 * @param arguments the values of the command line 	argument.
	 * @since 0.12
	 */
	def setCommandLineArguments(arguments : String*)

	/** Replies the command line arguments to be used by the SRE.
	 *
	 * @return the values of the command line 	argument.
	 * @since 0.12
	 */
	@Pure
	def getCommandLineArguments : String[]

	/** 
	 * Start the SRE platform.
	 * 
	 * @param type - the type of the agent to launch at start-up.
	 * @param loggingLevel indicates the level of logging.
	 * @param trackLogErrors indicates if the logged errors should be tracked.
	 * @param deleteLogHandlers indicates if the loggers' handler should be removed.
	 * @param timeout - the maximum waiting time in seconds, or {@code -1} to ignore the timeout.
	 * See {@link #STANDARD_TIMEOUT}, {@link #EXTRA_TIMEOUT} or {@link #NO_TIMEOUT}.
	 * @return the kernel.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def runSre(type : Class<? extends Agent>, loggingLevel : Level = null,
		trackMode : LogTrackingMode = null,
		timeout : int = Constants::STANDARD_TIMEOUT) : SREBootstrap
	
	/** Assert that the context has no error on its logs.
	 */
	def assertNoErrorLogInResults

	/** Assert that not exception is inside the results of the test run.
	 */
	def assertNoExceptionInResults

	/** Run the command line behavior of the SRE.
	 * This function disables possibility to invoke the other functions of this context.
	 *
	 * @param loggingLevel indicates the level of logging.
	 * @param trackMode is the mode of log tracking to be used.
	 * @since 0.12
	 */
	def runCommandLineBehavior(loggingLevel : Level, trackMode : LogTrackingMode)

	/** 
	 * Set-up the SRE platform.
	 * 
	 * @param type - the type of the agent to launch at start-up.
	 * @param loggingLevel - indicates the level of logging.
	 * @param trackMode is the mode of log tracking to be used.
	 * @return the kernel.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def setupTheSreKernel(type : Class<? extends Agent>, loggingLevel : Level,
		trackMode : LogTrackingMode) : SREBootstrap

	/** 
	 * Set-up the SRE platform.
	 * 
	 * @param loggingLevel indicates the level of logging.
	 * @param trackMode is the mode of log tracking to be used.
	 * @return the kernel.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def setupTheSreKernel(loggingLevel : Level, trackMode : LogTrackingMode) : SREBootstrap

	/** 
	 * Wait for the end of the SRE platform.
	 * 
	 * @param timeout - the maximum waiting time in seconds, or {@code -1} to ignore the timeout.
	 * See {@link #STANDARD_TIMEOUT}, {@link #EXTRA_TIMEOUT} or {@link #NO_TIMEOUT}.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def waitForTheKernel(timeout : int)

	/** 
	 * Wait for the end of the SRE platform.
	 * 
	 * @param timeout - the maximum waiting time in seconds, or {@code -1} to ignore the timeout.
	 * See {@link #STANDARD_TIMEOUT}, {@link #EXTRA_TIMEOUT} or {@link #NO_TIMEOUT}.
	 * @param predicate the predicate to use as stop condition.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def waitForTheKernel(timeout : int, predicate : (ConcurrentMap<UUID, CopyOnWriteArrayList<Object>>)=>boolean)

	/** 
	 * Forget any reference to a SRE kernel.
	 */
	def shutdown

	/** Register the given code for agent spawns.
	 * 
	 * @param type the type of the expected event.
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param code the code to run on agent spawned.
	 */
	def onEvent(type : Class<? extends Event>, ^space : OpenEventSpace = null, code : (Event)=>void)
	
	/** Register the given code for agent spawns.
	 * 
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param code the code to run on agent spawned.
	 */
	def onAgentSpawned(^space : OpenEventSpace = null, code : (AgentSpawned)=>void)

	/** Register the given code for agent kills.
	 * 
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param code the code to run on agent killing.
	 */
	def onAgentKilled(^space : OpenEventSpace = null, code : (AgentKilled)=>void)

	/** Register the given code for space destroyed.
	 * 
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param code the code to run on space destroyed.
	 */
	def onSpaceDestroyed(^space : OpenEventSpace = null, code : (SpaceDestroyed)=>void)

	/** Register a listener on agent spawned that is waiting for a specific agent.
	 * 
	 * <p>If the {@code code} is provided, this function executes the {@code code}
	 * and wait for the spawning of the agent with the given {@code id}.
	 * If the {@code code} is {@code null}, the returned object should enable to wait for
	 * the agent spawned event.
	 * 
	 * @param id the identifier of the agent to wait for.
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param timeout is the time to wait for the spawn event.
	 * @param code the code to run and wait for the agent spawned.
	 * @return the object that permits to wait for the spawn.
	 */
	def waitForAgentSpawned(id : UUID, ^space : OpenEventSpace = null, timeout : int = STANDARD_TIMEOUT, code : (UUID)=>void = null) : Wait

	/** Register a listener on agent spawned that is waiting for a specific agent.
	 * 
	 * <p>If the {@code code} is provided, this function executes the {@code code}
	 * and wait for the spawning of the agent with the given {@code id}.
	 * If the {@code code} is {@code null}, the returned object should enable to wait for
	 * the agent spawned event.
	 * 
	 * @param identifiers are the identifiers of the agents to wait for.
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param code the code to run and wait for the agent kill.
	 * @param code the code to run and wait for the agent spawned.
	 * @return the object that permits to wait for the spawn.
	 */
	def waitForAgentSpawned(identifiers : UUID[], ^space : OpenEventSpace = null, timeout : int = STANDARD_TIMEOUT,
		code : ()=>void = null) : Wait

	/** Register a listener on agent kills that is waiting for a specific agent.
	 * 
	 * <p>If the {@code code} is provided, this function executes the {@code code}
	 * and wait for the killing of the agent with the given {@code id}.
	 * If the {@code code} is {@code null}, the returned object should enable to wait for
	 * the agent kill event.
	 * 
	 * @param id the identifier of the agent to wait for.
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param timeout the waiting duration before a timeout.
	 * @param code the code to run and wait for the agent killing.
	 * @return the object that permits to wait for the kills.
	 */
	def waitForAgentKilled(id : UUID, ^space : OpenEventSpace = null, timeout : int = STANDARD_TIMEOUT, code : (UUID)=>void = null) : Wait

	/** Register a listener on agent kills that is waiting for a specific agent.
	 * 
	 * <p>If the {@code code} is provided, this function executes the {@code code}
	 * and wait for the killing of the agent with the given {@code id}.
	 * If the {@code code} is {@code null}, the returned object should enable to wait for
	 * the agent kill event.
	 * 
	 * @param identifiers are the identifiers of the agents to wait for.
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param timeout the waiting duration before a timeout.
	 * @param code the code to run and wait for the agent killing.
	 * @return the object that permits to wait for the kills.
	 */
	def waitForAgentKilled(identifiers : UUID[], ^space : OpenEventSpace = null, timeout : int = STANDARD_TIMEOUT, code : ()=>void = null) : Wait

	/** Register a listener on space destroyed event that is waiting for a specific space destruction.
	 * 
	 * <p>If the {@code code} is provided, this function executes the {@code code}
	 * and wait for the destruction event for the space with the given {@code id}.
	 * If the {@code code} is {@code null}, the returned object should enable to wait for
	 * the space destroyed event.
	 * 
	 * @param identifier are the identifier of the space to wait for.
	 * @param space the space to listen into. If {@code null}, the default space of the root context is used.
	 * @param timeout the max timeout to apply for waiting.
	 * @param code the code to run and wait for the space destruction event.
	 * @return the object that permits to wait for the destruction.
	 */
	def waitForSpaceDestroyed(identifier : UUID, ^space : OpenEventSpace = null, timeout : int = STANDARD_TIMEOUT, code : ()=>void = null) : Wait

	/** Assert that this context has no result that is an error.
	 */
	def assertNoError(failOnExistingContent : boolean)

}

/**
 * Context for running the SRE. This context is thread-safe.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version sre.tests.api 0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.11
 */
class SreRunContextImpl implements SreRunContext {

	/** 
	 * Reference to the instance of the root context.
	 */
	@Accessors(PUBLIC_GETTER)
	volatile var rootContext : AgentContext

	/** 
	 * Reference to the instance of the SRE bootstrap.
	 */
	@Accessors(PUBLIC_GETTER)
	volatile var bootstrap : SREBootstrap

	val globalResults = new ConcurrentHashMap<UUID, CopyOnWriteArrayList<Object>>

	val directFailureCause = new ConcurrentLinkedDeque<Throwable>

	@Accessors(PUBLIC_GETTER)
	volatile var bootAgentId : UUID

	@Accessors
	var executableName : String

	@Accessors
	var commandLineArguments : String[]

	override getBootOrFirstAgentId : UUID {
		var id = getBootAgentId
		if (id === null) {
			val ks = this.globalResults.keys
			if (ks.hasMoreElements) {
				id = ks.nextElement
			}
		}
		return id
	}

	private def key(agentId : UUID) : UUID {
		var id = agentId
		if (id === null) {
			id = getBootAgentId
		}
		if (id === null) {
			throw new IllegalArgumentException
		}
		return id
	}

	override getResult(agentId : UUID, type : Class<T>, index : int) : T with T {
		try {
			val res = this.globalResults.get(agentId.key)
			if (res !== null) {
				return type.cast(res.get(index))
			}
		} catch (exception : Throwable) {
			//
		}
		return null
	}

	override getFirstResultOfType(agentId : UUID, type : Class<T>) : T with T {
		try {
			val res = this.globalResults.get(agentId.key)
			if (res !== null) {
				for (value : res) {
					if (type.isInstance(value)) {
						return type.cast(value)
					}
				}
			}
		} catch (exception : Throwable) {
			//
		}
		return null
	}

	override getNumberOfResults(agentId : UUID) : int {
		val list = this.globalResults.get(agentId.key)
		if (list !== null) {
			return list.size
		}
		return 0
	}

	override assertNumberOfResults(expected : int, agentId : UUID) {
		expected.assertEquals(agentId.numberOfResults)["Invalid number of results provided by the platform."]
	}

	override getResults(agentId : UUID) : List<Object> {
		val res = this.globalResults.get(agentId.key)
		if (res !== null) {
			return res.unmodifiableView
		}
		return emptyList
	}

	override addResult(agentId : UUID, value : Object) : void {
		val id = agentId.key
		var res = this.globalResults.computeIfAbsent(id) [
			new CopyOnWriteArrayList
		]
		res.add(value)
	}

	override getAllResultsPerAgent : ConcurrentMap<UUID, CopyOnWriteArrayList<Object>> {
		return globalResults
	}

	override getAllResults : List<Object> {
		var all = newArrayList
		for (values : this.globalResults.values) {
			all.addAll(values)
		}
		return all
	}
	
	override getAgentInitializationParameters : Object[] {
		#[this]
	}

	override buildAgentInitializationParameters(params : Object*) : Object[] {
		val original = agentInitializationParameters
		val t = <Object>newArrayOfSize(params.length + original.length)
		System::arraycopy(original, 0, t, 0, original.length)
		System::arraycopy(params, 0, t, original.length, params.length)
		return t
	}

	override indexOfResult(agentId : UUID, type : Class<?>, fromIndex : int) : int {
		try {
			val res = this.globalResults.get(agentId.key)
			if (res !== null) {
				for (var i = fromIndex; i < res.size; i++) {
					var r = res.get(i)
					if (type.isInstance(r)) {
						return i
					}
				}
			}
		} catch (exception : Throwable) {
			//
		}
		return -1
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override runSre(type : Class<? extends Agent>, loggingLevel : Level, trackMode : LogTrackingMode, timeout : int) : SREBootstrap {
		val kern = setupTheSreKernel(type, loggingLevel, trackMode)
		try {
			waitForTheKernel(timeout)
		} catch (exception : SreTimeoutException | TimeoutException) {
			try {
				kern.shutdown(STANDARD_TIMEOUT.seconds as int)
			} catch (exception0 : Throwable) {
				//
			}
			throw exception
		}
		return kern
	}
	
	override assertNoErrorLogInResults {
		for (obj : allResults) {
			if (obj instanceof LogRecord) {
				throw new AssertionFailedError("Unexpected error log", "", obj.toString)
			}
		}
	}

	override assertNoExceptionInResults {
		var list = newArrayList
		for (obj : allResults) {
			if (obj instanceof Throwable) {
				list += obj
			}
		}
		if (!list.empty) {
			// Only the first is logged
			throw list.get(0)
		}
	}
	
	override runCommandLineBehavior(loggingLevel : Level, trackMode : LogTrackingMode) {
		setupTheSreKernel(loggingLevel, trackMode, true)
	}

	override setupTheSreKernel(type : Class<? extends Agent>, loggingLevel : Level,
		trackMode : LogTrackingMode) : SREBootstrap {
		var k = setupTheSreKernel(loggingLevel, trackMode)
		this.bootstrap.startAgent(type, getAgentInitializationParameters)
		return k
	}

	override setupTheSreKernel(loggingLevel : Level, trackMode : LogTrackingMode) : SREBootstrap {
		setupTheSreKernel(loggingLevel, trackMode, false)
	}
	
	/** Internal initialization of the SRE kernel.
	 *
	 * @param loggingLevel the expected logging level.
	 * @param trackMode the expected exception tracking mode.
	 * @param asCommandLine indicates if the kernel should be launch as from the command line.
	 * @return bootstrap instance.
	 */
	protected def setupTheSreKernel(loggingLevel : Level, trackMode : LogTrackingMode, asCommandLineApp : boolean) : SREBootstrap {
		assertNull(this.rootContext, "SRE already launched.")

		val tm = trackMode ?: LogTrackingMode::FAIL_ON_ERROR
		val lvl = loggingLevel ?: Constants::TEST_LOGGING_LEVEL
		System::setProperty(VariableNames::toPropertyName(LogConfig::LEVEL), lvl.name)

		this.globalResults.clear
		this.bootAgentId = null

		this.bootstrap = SRE::getBootstrap
		this.bootstrap.commandLineArguments = getCommandLineArguments
		if (asCommandLineApp) {
			this.bootstrap.startWithoutAgent(asCommandLineApp)
			return null
		}

		this.rootContext = this.bootstrap.startWithoutAgent

		var logger = this.bootstrap.kernelLogger
		val klogger = logger
		while (logger !== null) {
			if (logger.useParentHandlers) {
				logger.clearLogger
			} else {
				logger.level = lvl.toJul
				logger.resetLogger(tm)
			}
			logger = logger.parent
		}

		onAgentSpawned [
			if (this.bootAgentId === null) {
				this.bootAgentId = it.agentID
			}
		]

		if (klogger !== null) {
			klogger.level = lvl.toJul
			klogger.info("Starting SRE test: " + getExecutableName)
		}		

		return this.bootstrap
	}

	private def clearLogger(logger : Logger) {
		for (handler : logger.handlers) {
			logger.removeHandler(handler)
		}
	}

	private def resetLogger(logger : Logger, tm : LogTrackingMode) {
		switch (tm) {
			case SILENT: {
				logger.clearLogger
				logger.addHandler(IDDLE_LOG_HANDLER)
			}
			case STANDARD_LOGGER_BEHAVIOR: {
				// Do nothing special with the logger
			}
			case ADD_TO_AGENT_RESULTS: {
				logger.clearLogger
				logger.addHandler(LOG_IN_RESULTS_LOG_HANDLER)
			}
			case FAIL_ON_ERROR: {
				logger.clearLogger
				logger.addHandler(FAILURE_LOG_HANDLER)
			}
			case STANDARD_LOGGER_BEHAVIOR_AND_FAIL_ON_ERROR: {
				logger.addHandler(FAILURE_LOG_HANDLER)
			}
		}
	}

	static val IDDLE_LOG_HANDLER = new Handler {
		override publish(record : LogRecord) {
		}

		override flush {
		}

		override close {
		}
	}

	val LOG_IN_RESULTS_LOG_HANDLER = new Handler {

		override publish(record : LogRecord) {
			if (record.level === java.util.logging.Level::SEVERE || record.level === java.util.logging.Level::WARNING) {
				addResult(record)
			}
		}

		override flush {
		}

		override close {
		}

	}

	val FAILURE_LOG_HANDLER = new Handler {
		override publish(record : LogRecord) {
			if (record.level === java.util.logging.Level::SEVERE) {
				var exception = record.thrown
				if (exception === null) {
					exception = new SreLogException(record)
				}
				SreRunContextImpl.this.directFailureCause.add(exception)
			}
		}

		override flush {
		}

		override close {
		}
	}

	override waitForTheKernel(timeout : int) {
		waitForTheKernel(timeout, null)
	}

	@SuppressWarnings("discouraged_reference")
	override waitForTheKernel(timeout : int, predicate : (ConcurrentMap<UUID, CopyOnWriteArrayList<Object>>)=>boolean) {
		val th = Thread::currentThread
		val oldName = th.name
		try {
			th.name = "Wait-SRE-Test-Run"
			var endTime : long
			if (timeout >= 0) {
				endTime = System::currentTimeMillis() + timeout.seconds
			} else {
				endTime = -1
			}
			var isSreRunning = this.bootstrap.running
			while (this.directFailureCause.isEmpty && isSreRunning &&
				(endTime == -1 || System::currentTimeMillis() <= endTime)) {
				isSreRunning = this.bootstrap.isRunning() ||
					(predicate !== null && (!(predicate.apply(this.globalResults))))
				Thread.sleep(100)
			}
			if (!this.directFailureCause.isNullOrEmpty) {
				if (this.directFailureCause.size == 1) {
					throw this.directFailureCause.get(0)
				}
				var ex0 : RuntimeException
				for (directFailure : this.directFailureCause) {
					if (ex0 === null) {
						ex0 = new RuntimeException(directFailure)
					} else {
						ex0.addSuppressed(directFailure)
					}
				}
				throw ex0
			} else if (isSreRunning) {
				var cause : Throwable = null
				for (result : allResults) {
					if (result instanceof Throwable) {
						cause = result
						break
					}
				}
				if (cause !== null) {
					throw new SreTimeoutException(cause)
				}
				throw new SreTimeoutException
			}
		} finally {
			th.name = oldName
		}
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI
	override shutdown : void {
		var m = this.bootstrap
		this.bootstrap = null
		if (m !== null) {
			m.shutdown(true)
		}
		this.rootContext = null
		this.globalResults.clear
	}

	/** Register the test API as a weak participant into the space.
	 */
	private def registerEventHandler(type : Class<T>, ^space : OpenEventSpace, listenerId : UUID, code : (T)=>void) with T extends Event {
		assert type !== null
		assert listenerId !== null
		assert code !== null
		val spc = if (^space === null) this.rootContext.defaultSpace as OpenEventSpace else ^space;
		spc.registerWeakParticipant(new EventListener {
			def receiveEvent(^event : Event) {
				if (type.isInstance(^event)) {
					code.apply(type.cast(^event))
				}
			}
			def getID : UUID {
				listenerId
			}
		})
	}

	override onEvent(type : Class<? extends Event>, ^space : OpenEventSpace, code : (Event)=>void) {
		type.registerEventHandler(^space, UUID::randomUUID, code)
	}
	
	override onAgentSpawned(^space : OpenEventSpace, code : (AgentSpawned)=>void) {
		typeof(AgentSpawned).registerEventHandler(^space, UUID::randomUUID, code)
	}

	override onAgentKilled(^space : OpenEventSpace, code : (AgentKilled)=>void) {
		typeof(AgentKilled).registerEventHandler(^space, UUID::randomUUID, code)
	}

	override onSpaceDestroyed(^space : OpenEventSpace, code : (SpaceDestroyed)=>void) {
		typeof(SpaceDestroyed).registerEventHandler(^space, UUID::randomUUID, code)
	}

	override waitForAgentSpawned(id : UUID, ^space : OpenEventSpace, timeout : int , code : (UUID)=>void) : Wait {
		val lock = new AtomicBoolean
		onAgentSpawned(^space) [
			if (it.agentID == id) {
				lock.set(true)
			}
		]
		val w = new BooleanWait(lock, this.directFailureCause)
		if (code !== null) {
			code.apply(id)
			w.doWait(timeout)
		}
		return w
	}

	override waitForAgentSpawned(identifiers : UUID[], ^space : OpenEventSpace, timeout : int, code : ()=>void) : Wait {
		val lock = new ConcurrentSkipListSet(identifiers)
		onAgentSpawned(^space) [
			lock.remove(it.agentID)
		]
		val w = new CollectionWait(lock, this.directFailureCause)
		if (code !== null) {
			code.apply()
			w.doWait(timeout)
		}
		return w
	}

	override waitForAgentKilled(id : UUID, ^space : OpenEventSpace, timeout : int, code : (UUID)=>void) : Wait {
		val lock = new AtomicBoolean
		onAgentKilled(^space) [
			if (it.source.ID == id) {
				lock.set(true)
			}
		]
		val w = new BooleanWait(lock, this.directFailureCause)
		if (code !== null) {
			code.apply(id)
			w.doWait(timeout)
		}
		return w
	}

	override waitForAgentKilled(identifiers : UUID[], ^space : OpenEventSpace, timeout : int, code : ()=>void) : Wait {
		val lock = new ConcurrentSkipListSet(identifiers)
		onAgentKilled(^space) [
			lock.remove(it.source.ID)
		]
		val w = new CollectionWait(lock, this.directFailureCause)
		if (code !== null) {
			code.apply()
			w.doWait(timeout)
		}
		return w
	}

	override waitForSpaceDestroyed(identifier : UUID, ^space : OpenEventSpace, timeout : int, code : ()=>void) : Wait {
		val lock = new AtomicBoolean
		onSpaceDestroyed(^space) [
			if (it.spaceID.ID == identifier) {
				lock.set(true)
			}
		]
		val w = new BooleanWait(lock, this.directFailureCause)
		if (code !== null) {
			code.apply()
			w.doWait(timeout)
		}
		return w
	}

	override assertNoError(failOnExistingContent : boolean) {
		val results = getAllResults
		if (!results.empty) {
			for (r : results) {
				if (r !== null && "io.sarl.sre.janus.services.lifecycle.SpawnDisabledException" == r.class.name) {
					// Ignore this error because the boot agent may want to spawn an agent when the
					// testing framework stops the test.
				} else if (r instanceof Throwable) {
					fail("Error when running an agent behavior", r)
				} else if (r instanceof LogRecord) {
					if (r.level === java.util.logging.Level::SEVERE) {
						val th = r.thrown
						if (th !== null) {
							fail(r.toMessageString, th)
						} else {
							fail(r.toMessageString)
						}
					}
				} else if (failOnExistingContent) {
					fail("Unexpected result: " + r)
				}
			}
		}
	}

	private def toMessageString(r : LogRecord) : String {
		val msg = r.message
		if (msg.nullOrEmpty) {
			return "Error in method: " + r.sourceMethodName
		}
		return msg
	}

}
