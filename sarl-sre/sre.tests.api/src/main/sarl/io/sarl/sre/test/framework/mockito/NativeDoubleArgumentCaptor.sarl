/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.mockito

import java.util.List
import org.mockito.ArgumentMatchers
import org.mockito.internal.matchers.CapturingMatcher
import org.mockito.internal.util.Primitives

/** An argument captor dedicated to a primitive double argument.
 *
 * <p>This object enables to capture primitive double arguments that
 * cannot be capture with a {@code Double} argument captor.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version sre.tests.api 0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.10
 */
final class NativeDoubleArgumentCaptor {

	val capturingMatcher = new CapturingMatcher(typeof(Double))

	private new {
		//
	}

	/** Create an argument captor for primitive double values */
	static def forPrimitive : NativeDoubleArgumentCaptor {
		return new NativeDoubleArgumentCaptor
	} 

	/** Capture the parameter value. */
	def capture : double {
		ArgumentMatchers::doubleThat(this.capturingMatcher)
		return Primitives::defaultValue(typeof(double))
	}

	/** Replies the captured value. */
	def getValue : double {
		this.capturingMatcher.lastValue
	}

	/** Replies all the captured values.
	 */
	def getAllValues : List<Double> {
		this.capturingMatcher.allValues
	}

}
