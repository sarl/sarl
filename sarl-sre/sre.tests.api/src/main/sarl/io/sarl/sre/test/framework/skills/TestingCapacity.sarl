/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.skills

import io.sarl.sre.test.framework.Constants
import java.util.Collection
import java.util.List
import java.util.UUID

/**
 * A capacity that provides the agent with testing functions.
 * 
 * @author $Author: sgalland$
 * @version sre.tests.api 0.13.0 20230919-093058
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.11
 */
capacity TestingCapacity {

	/** 
	 * Replies the identifier of the agent that ha spawned this agent.
	 * 
	 * @return identifier.
	 */
	def getSpawner : UUID

	/** 
	 * Add a result associated to the current agent.
	 * 
	 * @param result - the result.
	 */
	def addResult(result : Object)
	
	/**
	 * Replies the number of results provided by the ran platform.
	 *
	 * @return the number of results.
	 */
	@Pure
	def getNumberOfResults : int

	/**
	 * Add a result.
	 * 
	 * @param result - the result.
	 */
	def addResults(results : Collection<?>)

	/**
	 * Replies a unmodifiable view on the results for the current agent.
	 * @return the results.
	 */
	@Pure
	def getUnmodifiableResults : List<Object>

	/** Replies the initialization parameters of the agents.
	 *
	 * @return the initialization parameters.
	 */
	@Pure
	def getAgentInitializationParameters : Object[]

	/** Replies the initialization parameter at the given index of the agents.
	 *
	 * @return the initialization parameters.
	 * @since 0.12
	 */
	@Pure
	def getParam(index : int) : T with T

	/** Replies the initialization parameter at the given index of the agents.
	 *
	 * @return the initialization parameters.
	 * @since 0.12
	 */
	@Pure
	def getParam(type : Class<T>, index : int) : T with T

	/** Replies the initialization parameters of the agents extended with the given values.
	 * 
	 * @param values the additional parameters
	 * @return the initialization parameters.
	 * @since 0.11
	 */
	@Pure
	def buildAgentInitializationParameters(values : Object*) : Object[]

	/** Wait until the condition is true or time out; and run the code.
	 *
	 * @param condition the condition to validate.
	 * @param timeout the time out duration.
	 * @param code the code to execute after waiting for evaluating the condition to true. 
	 */
	@SuppressWarnings("discouraged_reference")
	def waitAndDo(condition : () => boolean, timeout : int = Constants::STANDARD_TIMEOUT,
		code : ()=>void)

	/** Kill the agent after a short delay.
	 */
	def killMeSoon

}
