/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.context

import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.atomic.AtomicBoolean
import org.eclipse.xtend.lib.annotations.ToString

/**
 * OBject that enables to wait for a specific thing.
 *
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version sre.tests.api 0.14.0 20241106-161408
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.11
 */
@ToString
class BooleanWait extends Wait {
	
	val lock : AtomicBoolean

	new (lock : AtomicBoolean, errorContainer : ConcurrentLinkedDeque<Throwable>) {
		super(errorContainer)
		this.lock = lock
	}

	protected override isLocked : boolean {
		!this.lock.get
	}
	
}
