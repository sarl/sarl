/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.^extension

import io.sarl.lang.core.SRE
import io.sarl.lang.core.annotation.PrivateAPI
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.context.SreRunContextImpl
import java.lang.reflect.Method
import org.junit.jupiter.api.^extension.ExtensionContext
import org.junit.jupiter.api.^extension.InvocationInterceptor
import org.junit.jupiter.api.^extension.ParameterContext
import org.junit.jupiter.api.^extension.ParameterResolver
import org.junit.jupiter.api.^extension.ReflectiveInvocationContext

import static io.sarl.lang.core.SRE.*
import static extension java.lang.Boolean.*

/**
 * JUnit 5 extension that is running the SRE.
 *
 * @author $Author: sgalland$
 * @version sre.tests.api 0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.11
 */
class SreRunExtension implements ParameterResolver, InvocationInterceptor {

	protected val SKIP_PROPERTY = "srerun.test.skip"

	override supportsParameter(parameterContext : ParameterContext, extensionContext : ExtensionContext) : boolean {
		if (parameterContext.index === 0) {
			if (parameterContext.parameter.type === typeof(SreRunContext)) {
				val prop = SKIP_PROPERTY.getBoolean
				return !prop
			}
		}
		return false
	}

	override resolveParameter(parameterContext : ParameterContext, extensionContext : ExtensionContext) : Object {
		SRE::resetServiceLoader
		SRE::bootstrap = null
		var context = new SreRunContextImpl
		context.executableName = parameterContext.declaringExecutable.declaringClass.name + "#" + parameterContext.declaringExecutable.name
		return context
	}

	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	override interceptTestMethod(invocation : Invocation<Void>,
		invocationContext : ReflectiveInvocationContext<Method>,
		extensionContext : ExtensionContext) {
		try {
			invocation.proceed
		} finally {
			if (invocationContext.arguments.size === 1) {
				var arg = invocationContext.arguments.get(0)
				if (arg instanceof SreRunContext) {
					arg.shutdown
				}
			}
			SRE::resetServiceLoader
			SRE::bootstrap = null
		}
	}
	
}
