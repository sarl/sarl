/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.skills

import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Schedules
import io.sarl.sre.test.framework.Constants
import io.sarl.sre.test.framework.context.SreRunContext
import java.util.ArrayList
import java.util.Collection
import java.util.List
import java.util.UUID
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * A skill that provides the agent with testing functions.
 * 
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version sre.tests.api 0.15.0 20250909-115749
 * @mavengroupid io.sarl.sre
 * @mavenartifactid sre.tests.api
 * @since 0.11
 */
skill TestingSkill implements TestingCapacity {

	uses Schedules, Lifecycle

	val results = new ArrayList<Object>

	val context : SreRunContext

	val initializationParameters : Object[]

	@Accessors(PUBLIC_GETTER)
	val spawner : UUID

	new (^event : Initialize) {
		this.initializationParameters = ^event.parameters
		this.context = this.initializationParameters.get(0) as SreRunContext
		this.spawner = ^event.spawner
		assert this.context !== null
	}
	
	override uninstall {
		synchronized (this) {
			val ctx = this.context
			if (ctx !== null) {
				synchronized (ctx) {
					val id = owner.ID
					for (r : this.results) {
						ctx.addResult(id, r)
					}
				}
				this.results.clear
			}
		}
	}

	override addResult(result : Object) {
		synchronized (this) {
			getModifiableResults.add(result)
		}
	}

	@Pure
	override getNumberOfResults : int {
		synchronized (this) {
			return getModifiableResults.size
		}
	}

	override addResults(results : Collection<?>) {
		synchronized (this) {
			getModifiableResults.addAll(results)
		}
	}

	@Pure
	override getUnmodifiableResults : List<Object> {
		return getModifiableResults.unmodifiableView
	}

	@Pure
	def getModifiableResults : List<Object> {
		synchronized (this) {
			return this.results
		}
	}

	@Pure
	override getAgentInitializationParameters : Object[] {
		this.initializationParameters
	}

	@Pure
	override buildAgentInitializationParameters(values : Object*) : Object[] {
		synchronized (this) {
			if (values === null || values.length == 0) {
				return #[this.context]
			}
			var t : Object[] = newArrayOfSize(values.length + 1)
			t.set(0, this.context)
			System::arraycopy(values, 0, t, 1, values.length)
			return t
		}
	}

	@Pure
	override getParam(index : int) : T with T {
		this.initializationParameters.get(index + 1) as T
	}

	@Pure
	override getParam(type : Class<T>, index : int) : T with T {
		val obj = this.initializationParameters.get(index + 1)
		return type.cast(obj)
	}

	@SuppressWarnings("discouraged_reference")
	override waitAndDo(condition : ()=>boolean, timeout : int, code : ()=>void) {
		assert condition !== null
		assert code !== null
		var endTime : long
		if (timeout >= 0) {
			endTime = System::currentTimeMillis() + timeout * 1000
		} else {
			endTime = -1
		}
		while (!condition.apply && (endTime == -1 || System.currentTimeMillis() <= endTime)) {
			Thread.sleep(100)
		}
		if (endTime == -1 || System.currentTimeMillis() <= endTime) {
			code.apply
		}
	}

	override killMeSoon {
		in(Constants::DIFFERED_KILLING_DURATION) [killMe]
	}

}
