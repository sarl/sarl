/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.context

import io.sarl.sre.test.framework.exception.SreTimeoutException
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.function.BooleanSupplier

import static io.sarl.sre.test.framework.Constants.*

/**
 * Object that enables to wait for a specific thing.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
@SuppressWarnings("all")
abstract class Wait {
	
	val errorContainer : ConcurrentLinkedDeque<Throwable>

	package new (errorContainer : ConcurrentLinkedDeque<Throwable>) {
		if (errorContainer !== null) {
			this.errorContainer = errorContainer
		} else {
			this.errorContainer = new ConcurrentLinkedDeque
		}
	}

	protected abstract def isLocked : boolean

	/** Wait. */
	def doWait(timeout : int = STANDARD_TIMEOUT, stopCondition : BooleanSupplier = null) : void {
		val cond0 : BooleanSupplier = if (stopCondition === null) [false] else stopCondition 
		if (timeout > 0) {
			val endTime = System::currentTimeMillis + timeout.seconds
			while (isLocked && this.errorContainer.isEmpty && System::currentTimeMillis <= endTime && !cond0.getAsBoolean) {
				Thread::sleep(100)
			}
			if (!this.errorContainer.isEmpty) {
				var ex0 : Throwable
				for (directException : this.errorContainer) {
					if (ex0 === null) {
						ex0 = new RuntimeException(ex0)
					} else {
						ex0.addSuppressed(directException)
					}
				}
				throw ex0
			} else if (isLocked) {
				throw new SreTimeoutException
			}
		} else {
			while (isLocked && this.errorContainer.isEmpty && !cond0.getAsBoolean) {
				Thread::sleep(100)
			}
			if (!this.errorContainer.isEmpty) {
				var ex0 : Throwable
				for (directException : this.errorContainer) {
					if (ex0 === null) {
						ex0 = new RuntimeException(ex0)
					} else {
						ex0.addSuppressed(directException)
					}
				}
				throw ex0
			}
		}
	}

}
