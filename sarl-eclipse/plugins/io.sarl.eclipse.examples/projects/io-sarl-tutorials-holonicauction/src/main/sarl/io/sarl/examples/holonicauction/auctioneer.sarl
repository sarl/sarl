/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.examples.holonicauction

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.lang.core.Address

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
agent Auctioneer {
					
	uses Behaviors, InnerContextAccess, Lifecycle, Schedules, Logging
	
	var maxBid = 0f
	var winner : Address
	var hasBid = false 
	var isAuctionOpened = true

	on Initialize {
		info("Creating bidders")
		for(i : 1..3) {
			spawnInContext(typeof(Bidder), innerContext)
		}

		info("Propose initial price: 50")
		wake(new Price(50))
		
		in(10000) [
			val waitTask = task("wait-task")
			waitTask.every(10000) [
				synchronized(this) {
					if (!isAuctionOpened) {
						info("No more action: waiting for bidder death.")
						if (!hasMemberAgent) {
							waitTask.cancel
							killMe
						}
					} else {
						if (!hasBid) {
							info("NO MORE BID")
							isAuctionOpened = false
							if (winner === null) {
								info("No winner")
							} else {
								info("The winner is " + winner
									+ " with the bid of " + maxBid)
							}
							info("Killing the bidders")
							wake(new StopAuction)
						}
						else {
							var newPrice : float
							if (winner === null) {
								newPrice = 50
							} else {
								newPrice = maxBid
							}
							info("NEXT BIDDING TURN: " + newPrice)
							wake(new Price(newPrice))
						}
						hasBid = false
					}
				}
			]
		]
	}
		
	on Bid [ isAuctionOpened ] {
		info("Receiving bid: " + occurrence.value)
		synchronized(this) {
			hasBid = true
			if (occurrence.value > maxBid) {
				info("    better bid")
				maxBid = occurrence.value
				winner = occurrence.source
			}
		}
	}

}
