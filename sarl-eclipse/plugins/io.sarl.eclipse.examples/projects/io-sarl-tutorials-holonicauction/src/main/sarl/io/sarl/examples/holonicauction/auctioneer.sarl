/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.examples.holonicauction

import com.google.common.util.concurrent.AtomicDouble
import io.sarl.api.core.Behaviors
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.lang.core.Address
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference

/**
 * @author $Author: sgalland$
 */
agent Auctioneer {
					
	uses Behaviors, InnerContextAccess, Lifecycle, Schedules, Logging
	
	val maxBid = new AtomicDouble(0.0)
	val winner = new AtomicReference<Address>
	val hasBid = new AtomicBoolean(false) 
	val isAuctionOpened = new AtomicBoolean(true)

	on Initialize {
		loggingName = "Auctioneer"
		
		info("Creating bidders")
		for (i : 1 .. 3) {
			typeof(Bidder).spawnInContext(innerContext)
		}

		info("Propose initial price: 50")
		wake(new Price(50))

		info("Start auctions in 2 seconds")
		in(2.seconds) [
			val waitTask = task("wait-task")
			waitTask.every(1.seconds) [
				synchronized(this) {
					if (!this.isAuctionOpened.get) {
						info("No more action: waiting for bidder death.")
						if (!hasMemberAgent) {
							waitTask.cancel
							killMe
						}
					} else {
						if (!this.hasBid.get) {
							info("NO MORE BID")
							this.isAuctionOpened.set(false)
							if (this.winner.get === null) {
								info("No winner")
							} else {
								info("The winner is " + this.winner.get
									+ " with the bid of " + this.maxBid.get)
							}
							info("Killing the bidders")
							wake(new StopAuction)
						}
						else {
							var newPrice : double
							if (this.winner.get === null) {
								newPrice = 50
							} else {
								newPrice = maxBid.get
							}
							info("NEXT BIDDING TURN: " + newPrice)
							wake(new Price(newPrice))
						}
						this.hasBid.set(false)
					}
				}
			]
		]
	}
		
	on Bid [ this.isAuctionOpened.get ] {
		info("Receiving bid: " + occurrence.value)
		synchronized(this) {
			this.hasBid.set(true)
			if (occurrence.value > this.maxBid.get) {
				info("    better bid")
				this.maxBid.set(occurrence.value)
				this.winner.set(occurrence.source)
			}
		}
	}

}
