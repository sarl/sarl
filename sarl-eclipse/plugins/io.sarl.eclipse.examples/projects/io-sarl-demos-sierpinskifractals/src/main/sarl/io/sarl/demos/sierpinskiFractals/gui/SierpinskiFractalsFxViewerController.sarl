/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.sierpinskiFractals.gui;

import io.sarl.api.javafx.FxViewerController
import io.sarl.demos.sierpinskiFractals.agents.RootFractal
import io.sarl.demos.sierpinskiFractals.events.Multiply
import io.sarl.demos.sierpinskiFractals.events.Refresh
import io.sarl.demos.sierpinskiFractals.objects.Positions
import io.sarl.demos.sierpinskiFractals.objects.Square
import io.sarl.demos.sierpinskiFractals.objects.Vector2D
import java.util.concurrent.atomic.AtomicBoolean
import javafx.animation.PauseTransition
import javafx.fxml.FXML
import javafx.scene.canvas.Canvas
import javafx.scene.control.Button
import javafx.scene.paint.Color

import static extension javafx.util.Duration.*

/** JavaFX controller for Sierpinski fractals.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
class SierpinskiFractalsFxViewerController extends FxViewerController {

	var positions = new Positions
	
	val started = new AtomicBoolean

	@FXML
	var drawZone : Canvas
	
	@FXML
	var multiplyButton : Button
	
	def getPositions : Positions {
		this.positions
	}

	def getSquare : Square {
		new Square(new Vector2D(0, 0), this.drawZone.width)
	}

	@FXML
	def initialize {
		if (!started.getAndSet(true)) {
			startAgentApplication(typeof(RootFractal)) [
				//
			]
		}
	}

	/* 
	 * Emit a multiply signal
	 */
	@FXML
	def actionMultiply {
		new Multiply().emitToAgents
	}
	
	/**
	 * Draw fractals on the canvas.
	 */
	protected def draw {
		val gc = drawZone.graphicsContext2D
		var wait = new PauseTransition(30.millis)

		gc.stroke = Color::ORANGERED
		gc.lineWidth = 3

		wait.setOnFinished [
			gc.clearRect(0, 0, drawZone.width, drawZone.height)
			synchronized (positions) {
				for (t : positions.triangles) {
					gc.beginPath
					gc.moveTo(t.bottomLeft.x, t.bottomLeft.y)
					gc.lineTo(t.top.x, t.top.y)
					gc.lineTo(t.bottomRight.x, t.bottomRight.y)
					gc.closePath
					gc.stroke()
				}
			}
			wait.playFromStart
		]
		wait.play
	}

	/** Invoked when an event is fired within an agent and received by the JavaFX user interface.
	 * 
	 * @param event the occurrence fired by an agent.
	 */
	dispatch def receiveEvent(^event : Refresh) {
		draw
	}
	
}
