/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.sierpinskiFractals.agents

import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.demos.sierpinskiFractals.events.Multiply
import io.sarl.demos.sierpinskiFractals.events.Refresh
import io.sarl.demos.sierpinskiFractals.objects.Positions
import io.sarl.demos.sierpinskiFractals.objects.Square
import io.sarl.demos.sierpinskiFractals.objects.Triangle
import io.sarl.demos.sierpinskiFractals.objects.Vector2D

/**
 * Abstract implementation of a fractal agent
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
abstract agent AbstractFractal {

	uses InnerContextAccess, Lifecycle, ExternalContextAccess

	protected var triangle : Triangle
	protected var screenSurface : Square
	protected var screenWidth : double
	protected var positions : Positions

	abstract def doRefresh

	/** 
	 * Generate triangle points
	 */
	def generatePoints {
		this.triangle = new Triangle(
			screenSurface.bottomLeft,
			screenSurface.bottomRight,
			new Vector2D(screenSurface.bottomLeft.x + screenWidth / 2, screenSurface.topLeft.y)
		)
		synchronized (positions) {
			positions.addTriangle(triangle)
		}
	}
	/** 
	 * Multiply itself and create child Fractal
	 */
	def multiplication {
		val screen1 = new Square(this.triangle.bottomLeft, screenWidth / 2)
		spawnInContext(typeof(ChildFractal), innerContext, screen1, positions)
		
		val screen2 = new Square(
			new Vector2D(screenSurface.bottomLeft.x + screenWidth / 4, screenSurface.bottomLeft.y + screenWidth / 2),
			screenWidth / 2)
		spawnInContext(typeof(ChildFractal), innerContext, screen2, positions)
		
		val screen3 = new Square(new Vector2D(this.triangle.top.x, screenSurface.bottomLeft.y), screenWidth / 2)
		spawnInContext(typeof(ChildFractal), innerContext, screen3, positions)
	}
	/* 
	 * Create and emit Multiply signal
	 */
	def emitMultiply {
		var m = new Multiply
		innerContext.defaultSpace.emit(m)
	}

	on Refresh [!isFromMe] {
		doRefresh
	}

	/* 
	 * Multiply itself if signal comes from the GUIÂ and have no member agent
	 */
	on Multiply [!isFromMe] {
		if (hasMemberAgent) {
			emitMultiply
		} else {
			multiplication
		}
	}

}
