/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.examples.pingpongspace

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.spaces.OpenEventSpace
import io.sarl.api.core.spaces.OpenEventSpaceSpecification
import java.util.UUID

/** 
 * Agent waiting a ping event and replies with a pong event
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 */
agent PongAgent {

	uses DefaultContextInteractions, Behaviors, Logging, ExternalContextAccess, Lifecycle

	var comspace : OpenEventSpace

	var MAX_ITERATION : Integer

	@SuppressWarnings("potential_inefficient_value_conversion")
	on Initialize {
		comspace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
			occurrence.parameters.get(0) as UUID)
		comspace.registerStrongParticipant(asEventListener())
		MAX_ITERATION = occurrence.parameters.get(1) as Integer
	}

	on Ping [occurrence.index < MAX_ITERATION] {
		info("Receiving Ping #" + occurrence.index)
		info("Sending Pong #" + occurrence.index)
		comspace.emit(new Pong(occurrence.index)) [
			it == occurrence.source
		]
	}

	on Ping [occurrence.index == MAX_ITERATION] {
		info("FINAL: Receiving Ping #" + occurrence.index)
		info("FINAL: Sending a very last Pong #" + occurrence.index)
		comspace.emit(new Pong(occurrence.index)) [
			it == occurrence.source
		]
		info("PongAgent dying")
		killMe
	}

}
