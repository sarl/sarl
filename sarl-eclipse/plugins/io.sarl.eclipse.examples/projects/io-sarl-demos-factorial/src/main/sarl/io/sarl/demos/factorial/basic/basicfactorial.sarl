/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.factorial.basic

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Factorial {
	var number : Long
	var value : Long
} 

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent FactorialAgent {

	var upto : Long = 5l 
	uses Lifecycle, Behaviors, Logging 

	  
	on Initialize {
		if (occurrence.parameters.length > 0) { /* check the number of parameter specified in the launch configuration */
			this.upto  = (occurrence.parameters.get(0) as String) as long 
			info("Received Calculate for " + this.upto)   
			wake(new Factorial => [ number = 0l ; value = 1l ])
		} else {
			info("Bad parameter settings, you must specify an integer value to compute the corresponding factorial")
			killMe
		}
	} 

	on Factorial [ number < upto ] {
		wake(new Factorial => [ number = occurrence.number + 1 ; value = occurrence.value * (occurrence.number+1) ])
	}

	on Factorial [ occurrence.number == upto ] {  
		info("Factorial of " + upto + " is " + occurrence.value)
		killMe
	}
}

