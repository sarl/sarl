/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.factorial.distributed

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Factorial {
	var number : Long
	var value : Long
}

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Calculate {
	var number : Long
}

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event ComputationDone {
	var result : Long
}

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Hello

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Die

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent DistributedFactorialBootAgent {
	uses DefaultContextInteractions, Lifecycle

	on Initialize {
		spawn(FactorialAgent)
		spawn(FactorialQueryAgent,10l)
		killMe
	}
}

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent FactorialQueryAgent {
	uses Lifecycle, DefaultContextInteractions, Schedules, Logging

	var factValue : Long

	var started = false

	on Initialize {
		loggingName = "QueryAgent"
		if (occurrence.parameters.length > 0) {
			factValue = (occurrence.parameters.get(0) as String) as long

			info("Auto-detecting Factorial")
			task("discovery-task").every(1000) [
				emit(new Hello)
			]
		} else {
			info("Bad parameter settings, you must specify an integer value to compute the corresponding factorial")
			emit(new Die)
			killMe
		}

	}

	on Hello [!isFromMe && !started] {
		started = true
		task("discovery-task").cancel
		info("Found Factorial")
		info("Query sent with number " + factValue)
		emit(new Calculate => [number = factValue])
	}

	on ComputationDone {
		info(factValue + "! = " + occurrence.result)
		emit(new Die)
		info("Killing")
		killMe
	}
}

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent FactorialAgent {
	uses Lifecycle, Behaviors, Logging, DefaultContextInteractions

	var upto : Long

	on Initialize {
		loggingName = "FactorialAgent"
		info("Factorial initialized")
	}

	on Hello [!isFromMe] {
		emit(new Hello)
	}

	on Factorial [occurrence.number < upto] {
		wake(new Factorial => [number = occurrence.number + 1; value = occurrence.value * (occurrence.number + 1)])
	}

	on Factorial [occurrence.number == upto] {
		info(this.upto + "! = " + occurrence.value)
		emit(new ComputationDone => [result = occurrence.value])
	}

	on Calculate {
		this.upto = occurrence.number as long
		info("Query for " + this.upto + "!")
		wake(new Factorial => [number = 0l; value = 1l])
	}

	on Die {
		info("Killing")
		killMe
	}

}
