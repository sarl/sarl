/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.basic.behaviors

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging

/**
 * Declaration of a simple Factorial event with two internal variables.
 *
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
event Factorial {
	var number : Long
	var value : Long
} 

/**
 * Declaration of a simple BehaviorInitialize event without any data.
 *
 * @author Nicolas Gaud
 * @author Stephane Galland
 */
event BehaviorInitialize {}

/**
 * Declaration of a new behavior.
 *
 * @author Nicolas Gaud
 * @author Stephane Galland
 */
behavior FactorialBehavior {
	uses Lifecycle, Behaviors, Logging /* the list of capacities used by this behavior */
	
	var upto : long = 5l /* A behavior attribute */
	
	on BehaviorInitialize {
		this.upto  = 16l 
		info("Received Calculate for " + this.upto)   
		wake(new Factorial => [ number = 0l ; value = 1l ]) /* Wake function send a new factorial event within the internal context of an agent (could be listen by the agent itself, its collections of behaviors and its sub-members) */		
	}
	
	on Factorial [ occurrence.number < upto ] {
		wake(new Factorial => [ number = increment(occurrence.number) ; value = occurrence.value * (increment(occurrence.number)) ])
	}
	
	on Factorial [occurrence.number == upto] {
		info("Factorial of " + upto + " is " + occurrence.value)
		
		killMe
	}
	
	def increment(nb: long) : long {
		return nb+1
	}
}

/**
 * A simple agent executing/adopting a externally defined behavior.
 *
 * @author Nicolas Gaud
 * @author Stephane Galland
 */
agent BehaviorPlayer {
	
	uses Behaviors
	
	var myFactorialBehavior : FactorialBehavior

	  
	on Initialize {		
		myFactorialBehavior = new FactorialBehavior(this) /* instantiation of the previously declared behavior */
		registerBehavior(myFactorialBehavior); /* registration of this behavior as one of the agent's behaviors */
		wake(new BehaviorInitialize) /* send the BehaviorInitialize event in the agent internal context */
	}
	
	on Destroy {
		unregisterBehavior(myFactorialBehavior); /* WARNING: never forget to unregister a behavior before dying */
	} 	

}





