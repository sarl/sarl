/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.fireworks.environment

import java.util.HashMap
import java.util.UUID
import java.util.Vector
import java.util.function.Consumer
import java.util.function.Predicate
import javafx.scene.paint.Color

/**
 * Data structure used to represent a rocket position.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
class RocketsPos {

	var position = new Vector<Double>
	var color : Color
	var hidden = false

	def getPosition {
		position
	}

	def setPosition(position : Vector<Double>) {
		this.position = position
	}

	def getColor {
		color
	}

	def setColor(color : Color) {
		this.color = color
	}

	def setHidden(hidden : boolean) {
		this.hidden = hidden
	}

	def getHidden {
		this.hidden
	}

}

/*
 * Data structure used to represent a fire position.
 */
class FirePos {

	var positions : Vector<Pair<Double, Double>>

	var color : Color

	def getPositions {
		positions
	}

	def setPositions(positions : Vector<Pair<Double, Double>>) {
		this.positions = positions
	}

	def getColor {
		color
	}

	def setColor(color : Color) {
		this.color = color
	}
}

/*
 * Data structure referencing every position of every fire and rocket existing
 * This object is read by the GUI for display.
 */
class Positions {
	
	val rockets = new HashMap<UUID, RocketsPos>
	
	val fire = new HashMap<UUID, FirePos>

	def setRocketPosition(id : UUID, position : Vector<Double>) {
		var pos = new RocketsPos
		pos.position = position
		synchronized (rockets) {
	 		if (rockets.containsKey(id)) {
				pos.color = rockets.get(id).color
				rockets.replace(id, pos)
			} else {
				pos.color = Color::color(Math::random, Math::random, Math::random)
				rockets.put(id, pos)
			}
		}
	}

	def removeRocketPosition(id : UUID) {
		synchronized (rockets) {
			rockets.remove(id)
		}
	}

	def hideHocketPosition(id : UUID) {
		synchronized (rockets) {
			rockets.get(id).hidden = true
		}
	}

	def setFirePosition(id : UUID, rocketID : UUID, positions : Vector<Pair<Double, Double>>) {
		var pos = new FirePos
		pos.positions = positions
		synchronized (fire) {
			if (fire.containsKey(id)) {
				pos.color = fire.get(id).color
				fire.replace(id, pos)
			} else {
				pos.color =  if (this.rockets.containsKey(rocketID))
					this.rockets.get(rocketID).color
				else
					Color::color(Math.random, Math.random, Math.random)
				fire.put(id, pos)
			}
		}
	}

	def removeFirePosition(id : UUID) {
		synchronized (fire) {
			fire.remove(id)
		}
	}

	def rockets(filter : Predicate<? super RocketsPos>,
		procedure : Consumer<? super RocketsPos>) {
		synchronized (rockets) {
			rockets.values.stream.filter(filter).forEach(procedure)
		}
	}

	def ^fires(procedure : Consumer<? super FirePos>) {
		synchronized (fire) {
			fire.values.stream.forEach(procedure)
		}
	}

}
