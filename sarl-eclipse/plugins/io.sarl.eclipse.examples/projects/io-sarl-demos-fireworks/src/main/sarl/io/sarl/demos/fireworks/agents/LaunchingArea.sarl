/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.fireworks.agents

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.MemberJoined
import io.sarl.api.javafx.AppExit
import io.sarl.demos.fireworks.environment.Positions
import io.sarl.demos.fireworks.events.CreateArea
import io.sarl.demos.fireworks.events.Freeze
import io.sarl.demos.fireworks.events.Launch
import io.sarl.demos.fireworks.events.SetupSettings
import io.sarl.demos.fireworks.gui.FireworksFxViewerController
import io.sarl.lang.core.Address
import java.util.Random

/**
 * The main agent able to communicate with the GUI.
 *
 * @author $Author: abartuccio$
 * @author $Author: ngaud$
 */
agent LaunchingArea {
	uses Lifecycle, Behaviors, Logging, InnerContextAccess

	val grid = new Positions

	var rocketsQuantity : int
	var fireQuantity : int
	var gravity : double
	var maxWidth = 10.0
	var exited = false

	/** Configure according to GUI settings.
	 */
	on SetupSettings {
		this.rocketsQuantity = occurrence.rocketsQuantity
		this.fireQuantity = occurrence.fireQuatity
		this.gravity = occurrence.gravity
		this.maxWidth = occurrence.maxWidth
		info("Rockets = " + this.rocketsQuantity)
		info("Fires = " + this.fireQuantity)
		info("Gravity = " + this.gravity)
	}

	/** Kill itself on Exit signal after all inner agent are killed.
	 */
	on AppExit [!hasMemberAgent] {
		killMe
	}

	/** Transmit Exit signal to all inner agent.
	 */
	on AppExit [hasMemberAgent && !exited] {
		exited = true
		innerContext.defaultSpace.emit(this.ID, new AppExit)
	}

	/** Initialization step without GUI.
	 */
	on Initialize [occurrence.parameters.empty] {
		loggingName = "LaunchingArea-" + this.ID
		info("Finishing initialization of Launching Area")
	}

	/** Initialization step with GUI.
	 */
	on Initialize [!occurrence.parameters.empty] {
		loggingName = "LaunchingArea-" + this.ID
		var ctrl = occurrence.parameters.get(0) as FireworksFxViewerController
		ctrl.UISpace.registerStrongParticipant(asEventListener)
		ctrl.listenAndDraw(grid)
		info("Finishing initialization of Launching Area")
	}

	/** Create and configure every RocketLauncher.
	 */
	on CreateArea {
		var x : Double
		var rnd = new Random
		for (i : 0..<rocketsQuantity) {
			x = rnd.nextDouble * maxWidth
			spawnInContext(typeof(RocketLauncher), innerContext, x, 0.0,
				fireQuantity, gravity, grid
			)
		}
	}

	/** Transmit Freeze signal.
	 */
	on Freeze [!occurrence.isFromMe] {
		innerContext.defaultSpace.emit(this.ID, occurrence)
	}

	/*
	 * Start all RocketLauncher when everything is ready
	 */
	on MemberJoined [occurrence.inInnerDefaultSpace && memberAgentCount == rocketsQuantity] {
		info("Area is Ready: All rockets are here")
		var evt = new Launch
		evt.source = new Address(innerContext.defaultSpace.spaceID, this.ID);
		innerContext.defaultSpace.emit(this.ID, evt)
	}

}
