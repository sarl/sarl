/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.fireworks.gui;

import io.sarl.demos.fireworks.agents.LaunchingArea
import io.sarl.demos.fireworks.environment.Positions
import io.sarl.demos.fireworks.events.CreateArea
import io.sarl.demos.fireworks.events.Freeze
import io.sarl.demos.fireworks.events.SetupSettings
import io.sarl.api.javafx.FxViewerController
import java.util.UUID
import javafx.animation.PauseTransition
import javafx.fxml.FXML
import javafx.scene.canvas.Canvas
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.ScrollBar

import static extension javafx.util.Duration.*

/** JavaFX controller for fireworks.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
class FireworksFxViewerController extends FxViewerController {

	var launched = false
	var areaCreated = false

	var launchedAgent : UUID

	@FXML var draw_zone : Canvas
	@FXML var gravity_display : Label
	@FXML var rocket_quantity_display : Label
	@FXML var fire_quantity_display : Label
	@FXML var gravity_input : ScrollBar
	@FXML var rocket_quantity_input : ScrollBar
	@FXML var fire_quantity_input : ScrollBar
	@FXML var setup_button : Button
	@FXML var launch_button : Button
	@FXML var stop_button : Button

	/** Get gravity.
	 */
	def getGravity : double {
		this.gravity_input.value
	}

	/**  Get rocket quantity.
	 */
	def getRocketQuantity : int {
		this.rocket_quantity_input.value as int
	}

	/** Get fire quantity.
	 */
	def getFireQuantity : int {
		this.fire_quantity_input.value as int
	}

	/** Draw every positions on the main canvas.
	 */
	def listenAndDraw(grid : Positions) {
		var gc = this.draw_zone.graphicsContext2D
		var wait = new PauseTransition(0.03.seconds)

		wait.onFinished = [
			gc.clearRect(0, 0, this.draw_zone.width, this.draw_zone.height)
			grid.rockets([rocket|!rocket.hidden]) [rocket |
				gc.fill = rocket.color
				gc.fillOval(rocket.position.get(0), rocket.position.get(1), 10, 10)
			]

			grid.^fires [fire |
				gc.fill = fire.color
				fire.positions.forEach(pos |
					{
					gc.fillOval(pos.key, pos.value, 3, 3)
					})
			]
			wait.playFromStart
		]
		wait.play
	}

	/** Create main SARL agent and do setup.
	 */
	@FXML protected def actionSetup {
		var ^event = new SetupSettings(this.rocketQuantity, this.fireQuantity,
			this.gravity, this.draw_zone.width)
		if (!this.launched) {
			this.launchedAgent = UUID::randomUUID
			startAgentApplication(typeof(LaunchingArea), this.launchedAgent) [
				^event.emitToAgents
			]
			this.launch_button.disable = false
			this.launched = true
			this.areaCreated = false
			this.gravity_input.disable = true
			this.fire_quantity_input.disable = true
			this.rocket_quantity_input.disable = true
			this.setup_button.disable = true
		} else {
			^event.emitToAgents
		}
	}

	/** Launch fireworks.
	 */
	@FXML protected def actionLaunch {
		this.launch_button.disable = true
		this.stop_button.disable = false
		this.setup_button.disable = true
		if (!this.areaCreated) {
			new CreateArea().emitToAgents
			this.areaCreated = true
		} else {
			new Freeze(false).emitToAgents
		}
	}

	/** Stop fireworks.
	 */
	@FXML protected def actionStop {
		this.stop_button.disable = true
		this.launch_button.disable = false
		new Freeze(true).emitToAgents
	}

	/** Add a listener on gravity.
	 */
	@FXML protected def actionGravityDisplay {
		this.gravity_input.valueProperty.addListener [
			this.gravity_display.text = String::format("%.1f", this.gravity_input.value)
		]
	}

	/* Add a listener on rocket quantity.
	 */
	@FXML protected def actionRocketQuantityDisplay {
		this.rocket_quantity_input.valueProperty().addListener [
			this.rocket_quantity_display.setText(String.format("%.0f", this.rocket_quantity_input.getValue()));
		];
	}

	/* Add a listener on fire quantity.
	 */
	@FXML protected def actionFireQuantityDisplay() {
		this.fire_quantity_input.valueProperty.addListener [
			this.fire_quantity_display.text = String::format("%.0f", this.fire_quantity_input.value)
		]
	}

}
