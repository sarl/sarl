/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.demos.fireworks.agents

import io.sarl.api.core.AgentTask
import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.api.javafx.AppExit
import io.sarl.demos.fireworks.Configuration
import io.sarl.demos.fireworks.environment.Positions
import io.sarl.demos.fireworks.events.FireReady
import io.sarl.demos.fireworks.events.Freeze
import io.sarl.demos.fireworks.events.UpdateFirePosition
import java.util.UUID
import java.util.Vector
import java.util.concurrent.CopyOnWriteArrayList

/** Fire agent moving with a nice trajectory.
 * 
 * @author $Author: abartuccio$
 * @author $Author: ngaud$
 */
agent Fire {

	uses Lifecycle, Logging, Behaviors, DefaultContextInteractions, Schedules

	val id = UUID::randomUUID

	var xy : CopyOnWriteArrayList<Pair<Double, Double>>
	var lifetime = 300
	var frozen = false
	var destroyed = false
	var exited = false
	var grid : Positions
	var xf : double
	var yf : double
	var vx : double
	var vy : double
	var parentID : UUID
	var move : AgentTask
	var parentAgent : UUID
	var gravity : double

	/** Freeze itself.
	 */
	on Freeze {
		this.frozen = occurrence.value
		if (frozen)
			move.cancel
		else
			wake(new UpdateFirePosition)
	}

	/** Initialization step.
	 */
	@SuppressWarnings("potential_inefficient_value_conversion")
	on Initialize {
		loggingName = "Fire-" + this.ID
		xy = new CopyOnWriteArrayList

		if (occurrence.parameters.size == 5) {

			var x : Double = occurrence.parameters.get(0) as Double
			var y : Double = occurrence.parameters.get(1) as Double
			var p = new Pair<Double, Double>(x, y)
			xy += p

			grid = occurrence.parameters.get(2) as Positions
			parentID = occurrence.parameters.get(3) as UUID
			gravity = occurrence.parameters.get(4) as Double
		} else {
			info("Error in fire Initialize : bad parameter number")
		}
		parentAgent = occurrence.spawner

		xf = Math::random * 10 - Math::random * 5
		yf = Math::random * 10 + 1

		vx = xf * 20
		vy = yf * 30

	}

	/** Trigger fixed delay for waking UpdateFirePosition.
	 */
	on FireReady {
		move = atFixedDelay(Configuration::FIRE_LIFECYCLE_SCHEDULING_RATE) [
			wake(new UpdateFirePosition)
		]
	}

	/** Update position every time it's triggered by itself.
	 */
	on UpdateFirePosition [occurrence.isFromMe && !frozen && !destroyed] {
		var newx : double
		var newy : double
		val rate = Configuration::FIRE_LIFECYCLE_SCHEDULING_RATE

		vy = vy - gravity * rate / 10.0

		var lastP = xy.last
		newx = lastP.key + vx * rate / 1000.0
		newy = lastP.value + vy * rate / 1000.0

		xy += new Pair<Double,Double>(newx,newy)
		

		if (grid !== null) {
			var list = new Vector<Pair<Double,Double>>(xy)

			/*x.forEach [ pos |
				{
					var nvect = new Vector<Double>(2)
					nvect += pos
					list += nvect
				}
			]

			y.forEach [ pos, i |
				{
					var nvect = list.get(i)
					nvect += pos
					list.set(i, nvect)
				}
			]*/

			grid.setFirePosition(id, parentID, list)
		}

		lifetime = lifetime - 10

		if (lifetime <= 0) {
			grid.removeFirePosition(id)
			cleanBeforeExit
			in(1.seconds)[killMe]
		}
	}

	/** Clean every task.
	 */
	def cleanBeforeExit() {
		move.cancel
		exited = true
		destroyed = true
	}

	/** Kill itself when Exit signal invoked from parent.
	 */
	on AppExit [!exited && isFrom(this.parentID)] {
		frozen = true
		cleanBeforeExit
		emit(new AppExit)[it.ID == this.parentAgent]
		killMe
	}

}
