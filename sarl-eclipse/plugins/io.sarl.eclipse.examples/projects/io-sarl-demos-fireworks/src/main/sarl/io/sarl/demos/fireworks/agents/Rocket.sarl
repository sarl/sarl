/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.fireworks.agents

import io.sarl.api.core.AgentTask
import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.MemberJoined
import io.sarl.api.core.MemberLeft
import io.sarl.api.core.Schedules
import io.sarl.api.javafx.AppExit
import io.sarl.demos.fireworks.Configuration
import io.sarl.demos.fireworks.environment.Positions
import io.sarl.demos.fireworks.events.Explode
import io.sarl.demos.fireworks.events.FireReady
import io.sarl.demos.fireworks.events.Freeze
import io.sarl.demos.fireworks.events.UpdateRocketPosition
import java.util.Random
import java.util.UUID
import java.util.Vector

/**
 * A Rocket that contains fire particles.
 *
 * @author $Author: abartuccio$
 * @author $Author: ngaud$
 */
agent Rocket {

	uses Lifecycle, Logging, Schedules, Behaviors, DefaultContextInteractions, InnerContextAccess

	var x : double
	var y : double
	var gravity : double
	var speedx : double
	var speedy : double
	var fireQuantity : int
	var lifetime : int
	var frozen = false
	var exploded = false
	var exited = false
	var grid : Positions
	var id : UUID
	var move : AgentTask

	/** Kill itself after an Exit signal.
	 */
	on AppExit [!hasMemberAgent] {
		emit(new AppExit)
		killMe
	}

	/** Transmit an Exit signal to inner context.
	 */
	on AppExit [hasMemberAgent && !exited] {
		exploded = true
		frozen = true
		exited = true
		move.cancel
		innerContext.defaultSpace.emit(this.ID, new AppExit)
	}

	/* Freeze itself.
	 */
	on Freeze {
		this.frozen = occurrence.value
		if (frozen)
			move.cancel
		else
			wake(new UpdateRocketPosition)
	}

	/* Initialization step.
	 */
	@SuppressWarnings("potential_inefficient_value_conversion")
	on Initialize {
		loggingName = "Rocket-" + this.ID
		info("New rocket launched")
		var rnd = new Random
		if (occurrence.parameters.size == 7) {
			x = occurrence.parameters.get(0) as Double
			y = occurrence.parameters.get(1) as Double
			speedx = occurrence.parameters.get(2) as Double
			speedy = occurrence.parameters.get(3) as Double
			gravity = occurrence.parameters.get(4) as Double
			fireQuantity = occurrence.parameters.get(5) as Integer
			grid = occurrence.parameters.get(6) as Positions
		} else {
			info("Error in Fireworks Initialize : bad parameters number")
		}
		lifetime = rnd.nextInt(5) * 300 + 300
		id = UUID::randomUUID

		// Create a background task to update its own position
		move = atFixedDelay(Configuration::ROCKET_LIFECYCLE_SCHEDULING_RATE) [
			wake(new UpdateRocketPosition)
		]
	}

	/* Update its position at every UpdateRocketPosition event from itself.
	 */
	on UpdateRocketPosition [occurrence.isFromMe && !frozen && !exploded] {
		var vect = new Vector(2)
		x = x + speedx
		y = y + speedy
		vect.clear
		vect += x
		vect += y
		lifetime = lifetime - 10
		if (grid !== null)
			grid.setRocketPosition(id, vect)
		if (lifetime <= 0) {
			exploded = true
			move.cancel
			grid.hideHocketPosition(id)
			wake(new Explode)
		}
	}

	/** Explode and generate fire.
	 */
	on Explode {
		for (i : 0..<fireQuantity) {
			spawnInContext(typeof(Fire), innerContext, x, y, grid, id, gravity)
		}
	}

	/** Kill itself when all its inner agents are killed.
	 */
	on MemberLeft [!occurrence.agentID.isMe && !frozen && !hasMemberAgent] {
		exited = true
		grid.removeRocketPosition(id)
		killMe
	}

	/** Emit a FireReady signal when all fire are created.
	 */
	on MemberJoined [!occurrence.agentID.isMe && hasMemberAgent && memberAgentCount == fireQuantity] {
		innerContext.defaultSpace.emit(this.ID, new FireReady)
	}

}
