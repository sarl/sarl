/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.fireworks.events

/** Trigger the launching area for starting the demo.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Launch

/** Setup the Area.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event CreateArea

/** Make a rocket explode.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Explode

/** Ask a rocket to kill itself.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event KillRocket

/** Ask a fire to kill itself.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event KillFire

/** Say that a rocket is ready.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event RocketReady

/** Trigger a rocket to update it's position.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event UpdateRocketPosition

/** Trigger a fire to update it's position.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event UpdateFirePosition

/** Say that a fire is ready.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event FireReady

/** Makes a fire spray everywhere.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event SprayFire

/** Carry all setup informations, send by the GUI.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event SetupSettings {
	val rocketsQuantity : int
	val fireQuatity : int
	val gravity : double
	val maxWidth : double

	new(rq : int, fq : int, grav : double, max : double) {
		rocketsQuantity = rq
		fireQuatity = fq
		gravity = grav
		maxWidth = max
	}

}

/** Freeze signal send by the GUI.
 *
 * @author <a href="https://github.com/klmp200">Antoine Bartuccio</a>
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event Freeze {
	val value : boolean

	new (value : boolean) {
		this.value = value
	}

}
