/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife.game

import io.sarl.demos.gameoflife.game.events.PauseEvent
import io.sarl.demos.gameoflife.game.events.PeriodUpdatedEvent
import io.sarl.demos.gameoflife.game.events.PlayEvent
import io.sarl.demos.gameoflife.game.events.SetupEvent
import io.sarl.demos.gameoflife.game.events.StopEvent
import io.sarl.demos.gameoflife.gui.ControllerListener
import io.sarl.demos.gameoflife.gui.GUIListener
import io.sarl.lang.core.EventSpace
import java.util.UUID

/**
 * @author <a href="https://github.com/Lomadriel">J&eacute;r&ocirc;me Boulmier</a>
 * @author <a href="https://github.com/pinam45">Maxime Pinard</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
class Controller implements GUIListener {

	val listeners = <ControllerListener>newArrayList

	val eventSpace : EventSpace;

	val controllerUUID : UUID;

	
	new(eventSpace : EventSpace, controllerUUID : UUID) {
		this.eventSpace = eventSpace
		this.controllerUUID = controllerUUID
	}

	override play : void {
		val evt : PlayEvent = new PlayEvent();
		this.eventSpace.emit(this.controllerUUID, evt)[it.ID == this.controllerUUID]
	}

	override pause : void {
		val evt : PauseEvent = new PauseEvent();
		this.eventSpace.emit(this.controllerUUID, evt)[it.ID == this.controllerUUID]
	}

	override stop : void {
		val evt : StopEvent = new StopEvent();
		this.eventSpace.emit(this.controllerUUID, evt)[it.ID == this.controllerUUID]
	}

	override setup(width : int, height : int) {
		val evt : SetupEvent = new SetupEvent(width, height);
		this.eventSpace.emit(this.controllerUUID, evt)[it.ID == this.controllerUUID]
	}

	override periodUpdated(period : int) {
		val evt : PeriodUpdatedEvent = new PeriodUpdatedEvent(period);
		this.eventSpace.emit(this.controllerUUID, evt)[it.ID == this.controllerUUID]
	}

	def addControllerListener(listener : ControllerListener){
		listeners.add(listener);
	}

	def setReadyToSetup(state : boolean){
		for (listener : listeners){
			listener.setReadyToSetup(state);
		}
	}

	def setReadyToPlay(state : boolean) {
		for (listener : listeners) {
			listener.setReadyToPlay(state);
		}
	}

	def setReadyToPause(state : boolean) {
		for (listener : listeners) {
			listener.setReadyToPause(state)
		}
	}

}

