/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife.gui

import javafx.beans.property.SimpleDoubleProperty
import javafx.scene.Parent

/**
 * The type DraggableZoomableParent.
 *
 * @author <a href="https://github.com/pinam45">Maxime Pinard</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
abstract class DraggableZoomableParent extends Parent {

	static val MAX_SCALE = 10.0d
	static val MIN_SCALE = 0.1d
	static val DELTA = 1.1d
	
	val scale = new SimpleDoubleProperty(1.0)

	var leftMouseAnchorX : double
	var leftMouseAnchorY : double
	var translateAnchorX : double
	var translateAnchorY : double

	/**
	 * Instantiates a new DraggableZoomableParent.
	 */
	new {

		scaleXProperty.bind(this.scale)
		scaleYProperty.bind(this.scale)

		setOnMousePressed [^event |
				// left mouse button
				if(^event.isPrimaryButtonDown) {

					DraggableZoomableParent.this.leftMouseAnchorX = ^event.sceneX
					DraggableZoomableParent.this.leftMouseAnchorY = ^event.sceneY

					DraggableZoomableParent.this.translateAnchorX = translateX
					DraggableZoomableParent.this.translateAnchorY = translateY

					^event.consume
				}
			]

		setOnMouseDragged [^event |
				// right mouse button
				if(^event.isPrimaryButtonDown()) {

					DraggableZoomableParent.this.translateX = DraggableZoomableParent.this.translateAnchorX + ^event.sceneX - DraggableZoomableParent.this.leftMouseAnchorX
					DraggableZoomableParent.this.translateY = DraggableZoomableParent.this.translateAnchorY + ^event.sceneY - DraggableZoomableParent.this.leftMouseAnchorY

					^event.consume
				}
			]

		setOnScroll [^event |

				var scale = DraggableZoomableParent.this.scale.get
				var oldScale = scale

				if (^event.deltaY < 0.0) {
					scale /= DELTA
				} else {
					scale *= DELTA
				}

				scale = clamp(scale, MIN_SCALE, MAX_SCALE);

				var f = (scale / oldScale) - 1.0;

				var dx = (^event.sceneX - (DraggableZoomableParent.this.boundsInParent.width / 2 + boundsInLocal.localToScene.minX))
				var dy = (^event.sceneY - (DraggableZoomableParent.this.boundsInParent.height / 2 + boundsInLocal.localToScene.minY))

				DraggableZoomableParent.this.scale.set(scale)

				// note: pivot value must be untransformed, i. e. without scaling
				DraggableZoomableParent.this.setPivot(f * dx, f * dy)

				^event.consume
			]
	}

	private def setPivot(x : double, y : double) {
		setTranslateX(getTranslateX() - x)
		setTranslateY(getTranslateY() - y)
	}

	private static def clamp(value : double, min : double, max : double) : double {
		if (Double.compare(value, min) < 0.0) {
			return min
		}

		if (Double.compare(value, max) > 0.0) {
			return max
		}

		return value
	}

}

