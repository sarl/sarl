/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife.gui

/**
 * The type SquareGridDisplayer.
 *
 * @author <a href="https://github.com/pinam45">Maxime Pinard</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
class SquareGridDisplayer extends DraggableZoomableParent {

	var gridWidth : int 
	var gridHeight : int
	var gridSquares : GridSquare[][]

	/**
	 * Instantiates a new SquareGridDisplayer.
	 *
	 * @param gridWidth  the grid width
	 * @param gridheight the grid height
	 */
	new (gridWidth : int, gridheight : int) {

		if(gridWidth <= 0 || gridheight <= 0) {
			throw new IllegalArgumentException("gridWidth or gridHeight is negative or equal to 0")
		}

		this.gridWidth = gridWidth
		this.gridHeight = gridheight

		this.gridSquares = newArrayOfSize(this.gridWidth, this.gridHeight)
		for (i : 0 ..< this.gridSquares.length) {
			for (j : 0 ..< this.gridSquares.get(i).length) {
				this.gridSquares.set(i, j, new GridSquare(i, j, false))
				children.add(this.gridSquares.get(i, j))
			}
		}
	}

	/**
	 * Sets the grid.
	 *
	 * @param grid the grid
	 */
	package def setGrid(grid : boolean[][]) {
		if (grid.length == this.gridSquares.length && grid.get(0).length == this.gridSquares.get(0).length) {
			for (i : 0 ..< this.gridSquares.length) {
				for (j : 0 ..< this.gridSquares.get(i).length) {
					this.gridSquares.get(i, j).activated = grid.get(i, j)
				}
			}
		}
	}

}
