/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife.game

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.demos.gameoflife.game.events.AgentReadyForGame
import io.sarl.demos.gameoflife.game.events.CellAgentUpdated
import io.sarl.demos.gameoflife.game.events.GameIsDead
import io.sarl.demos.gameoflife.game.events.RegisterEnvironmentListener
import io.sarl.demos.gameoflife.game.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.game.events.RunEndOfStep
import io.sarl.demos.gameoflife.game.events.StepFinished
import io.sarl.lang.core.Address
import java.util.Collections
import java.util.concurrent.locks.ReentrantLock
import org.arakhne.afc.vmutil.locale.Locale
import java.util.UUID

/**
 * @author $Author: jboulmier$
 * @author $Author: mpinard$
 * @author $Author: sgalland$
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Environment {

	uses DefaultContextInteractions, Lifecycle, GridManager, Logging;

	val listeners = <EnvironmentListener>newArrayList
	val actions = Collections.synchronizedList(<Action>newArrayList)
	var controller : UUID

	var numberOfAgent : int
	var agentCounter : int

	val lock = new ReentrantLock

	@SuppressWarnings("potential_inefficient_value_conversion")
	on Initialize {
		var width = occurrence.parameters.get(0) as Integer
		var height = occurrence.parameters.get(1) as Integer
		var listener = occurrence.parameters.get(2) as EnvironmentListener
		this.listeners.add(listener)
		this.controller = occurrence.parameters.get(3) as UUID

		this.numberOfAgent = width * height

		new DefaultGridManagerSkill(width, height, listener).setSkill

		emit(new AgentReadyForGame)
	}

	on CellAgentUpdated {
		var tmp : int

		this.lock.lock
		try {
			if (occurrence.type !== null) {
				actions.add(new Action(occurrence.source.ID, occurrence.position, occurrence.type))
			}
			this.agentCounter++
			tmp = this.agentCounter
		} finally {
			lock.unlock
		}

		if (tmp == this.numberOfAgent) {
			emit(new RunEndOfStep)
		}
	}

	on RunBeginingOfStep {
		lock.lock
		try {
			this.actions.clear
			this.agentCounter = 0
		} finally {
			lock.unlock
		}

		// Send perceptions
		for (p : getPerceptions) {
			val adr = new Address(defaultSpace.spaceID, p.key)
			emit(new Perception(p.value, isAlive(p.key), getPosition(p.key))) [ it == adr ]
		}
	}

	on RunEndOfStep {
		if (actions.size == 0) {
			info(Locale.getString("GAME_END"))
			emit(new GameIsDead)
		} else {
			applyActions(actions)
			fireGridUpdate
			emit(new StepFinished) [ this.controller == it.ID ]
		}
	}

	def fireGridUpdate {
		for (listener : listeners) {
			listener.handleGridUpdate(grid)
		}
	}

	on RegisterEnvironmentListener {
		listeners.add(occurrence.environmentListener)
	}

	on GameIsDead {
		killMe
	}

}

