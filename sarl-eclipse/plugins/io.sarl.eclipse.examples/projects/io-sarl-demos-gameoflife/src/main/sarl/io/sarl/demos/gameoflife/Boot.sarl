/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.demos.gameoflife.game.Controller
import io.sarl.demos.gameoflife.game.Environment
import io.sarl.demos.gameoflife.game.events.AgentReadyForGame
import io.sarl.demos.gameoflife.game.events.GameIsDead
import io.sarl.demos.gameoflife.game.events.PauseEvent
import io.sarl.demos.gameoflife.game.events.PeriodUpdatedEvent
import io.sarl.demos.gameoflife.game.events.PlayEvent
import io.sarl.demos.gameoflife.game.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.game.events.SetupEvent
import io.sarl.demos.gameoflife.game.events.StepFinished
import io.sarl.demos.gameoflife.game.events.StopEvent
import io.sarl.demos.gameoflife.gui.GUI
import java.util.UUID
import java.util.concurrent.locks.ReentrantLock
import javafx.application.Platform
import org.arakhne.afc.vmutil.locale.Locale

/**
 * @author <a href="https://github.com/Lomadriel">J&eacute;r&ocirc;me Boulmier</a>
 * @author <a href="https://github.com/pinam45">Maxime Pinard</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Boot {

	uses DefaultContextInteractions, Lifecycle, Logging;

	var controller : Controller
	var agentCounter : int
	var numberOfAgent : int
	var gui : GUI
	var width = 10
	var height = 10
	var period = 500

	var environmentReady = false
	var paused = false
	var gameRunning = false

	val lock = new ReentrantLock
	val environmentUUID = UUID::randomUUID

	on Initialize {
		gui = GUI.GUI
		controller = new Controller(defaultSpace, this.ID)
		gui.addGUIListener(controller)
		controller.addControllerListener(gui)

		Platform.runLater [
			gui.launchGUI
			controller.readyToSetup = true
		]
	}

	on AgentReadyForGame {
		var tmp : int

		lock.lock
		try {
			agentCounter++
			tmp = agentCounter
		} finally {
			lock.unlock
		}

		if (tmp == numberOfAgent) {
			info(Locale.getString("RUNNING"))
			Platform.runLater [
				gui.setupGUI(width, height)
				environmentReady = true
				controller.readyToPlay = true
			]
		}
	}

	on PlayEvent {
		lock.lock
		try {
			if (environmentReady) {
				controller.readyToPause = true
				controller.readyToSetup = false
				controller.readyToPlay = false
				info(Locale.getString("START_GAME"))
				paused = false
				gameRunning = true
				emit(new RunBeginingOfStep) [it.ID == environmentUUID]
			}
		} finally {
			lock.unlock
		}
	}

	on PauseEvent {
		info(Locale.getString("PAUSE"))

		lock.lock
		try {
			controller.readyToPlay = true
			controller.readyToPause = false
			controller.readyToSetup = true
			paused = true
		} finally {
			lock.unlock
		}
	}

	on StopEvent {
		info(Locale.getString("STOP"))

		lock.lock
		try {
			if (!gameRunning || paused) {
				emit(new GameIsDead)
				killMe
			} else {
				gameRunning = false
			}
		} finally {
			lock.unlock
		}
	}

	on StepFinished {
		lock.lock
		try {
			if (gameRunning && !paused) {
				Thread.sleep(period)
				emit(new RunBeginingOfStep) [it.ID == environmentUUID]
			} else if (!gameRunning) {
				emit(new GameIsDead)
				killMe
			}
		} finally {
			lock.unlock
		}
	}

	on SetupEvent {
		lock.lock
		try {
			if (gameRunning && !paused) {
				error(Locale.getString("INVALID_SETUP"))
			}

			width = occurrence.width
			height = occurrence.height
			numberOfAgent = occurrence.width * occurrence.height + 1
			emit(new GameIsDead)
			info(Locale.getString("AGENTS", numberOfAgent))
			spawnInContextWithID(Environment, environmentUUID, defaultContext, width, height, gui, this.ID)
		} finally {
			lock.unlock
		}
	}

	on PeriodUpdatedEvent {
		lock.lock
		try {
			info(Locale.getString("END_PERIOD"))
			period = occurrence.period
		} finally {
			lock.unlock
		}
	}

	on GameIsDead {
		controller.readyToPlay = false
		controller.readyToPause = false
		controller.readyToSetup = true
		paused = true
	}

}
