/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife.game

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import java.util.List
import java.util.Map
import java.util.Random
import java.util.Set
import java.util.UUID
import javafx.application.Platform
import org.arakhne.afc.math.geometry.d2.i.Point2i
import org.arakhne.afc.vmutil.locale.Locale

/**
 * @author <a href="https://github.com/Lomadriel">J&eacute;r&ocirc;me Boulmier</a>
 * @author <a href="https://github.com/pinam45">Maxime Pinard</a>
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 */
skill DefaultGridManagerSkill implements GridManager {

	uses Lifecycle, Logging, DefaultContextInteractions

	val listeners = <EnvironmentListener>newArrayList

	val random = new Random
	val width : int
	val height : int

	var worldDataStructure : Pair<UUID, Boolean>[][]

	val bodies : Map<UUID, AgentBody> = newTreeMap(null)

	new(width : int, height : int, environmentListener : EnvironmentListener) {
		this.width = width
		this.height = height
		this.listeners.add(environmentListener)
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	override install {
		super.install

		info(Locale.getString("CREATE_AGENTS"))

		var counter = 0;
		val numberOfAgents = width * height;

		worldDataStructure = newArrayOfSize(width, height)

		try {
			for (i : 0 ..< width) {
				for (j : 0 ..< height) {
					// FIXME: agents created 2 times ?
					// FIXME: double agent spawning apparently come from: https://github.com/sarl/sarl/issues/525
					val uuid = UUID::randomUUID
					CellAgent.spawnInContextWithID(uuid, defaultContext)

					grid.set(i, j, Pair.of(uuid, false))

					val agentBody = new AgentBody(new Point2i(i, j), false)
					bodies.put(uuid, agentBody)

					counter++
					val tmp = (counter as double) / numberOfAgents
					fireSetupProgressUpdate(tmp)
				}
			}
		} catch (exception : Throwable) {
			exception.printStackTrace
		}

		info(Locale.getString("AGENT_CREATED", counter))

		setup
	}

	def fireSetupProgressUpdate(progress : double) {
		for (listener : listeners) {
			Platform.runLater [listener.setupProgress(progress)]
		}
	}

	override setup {
		info(Locale.getString("START_SETUP"))
		for (i : 0 ..< width) {
			for (j : 0 ..< height) {
				val uuid = grid.get(i, j).key
				val rand = (random.nextInt(4) == 0)
				grid.set(i, j, Pair.of(uuid, rand))
				bodies.get(uuid).alive = rand
			}
		}
		info(Locale.getString("END_SETUP"))
	}

	override getPerceptions : List<Pair<UUID, Set<Point2i>>> {
		val sb = new StringBuilder('\n')
		for (i : 0 ..< width) {
			for (j : 0 ..< height){
				sb.append(if (grid.get(i, j).value) "1" else "0")
			}

			sb.append('\n')
		}

		val perceptions = <Pair<UUID, Set<Point2i>>>newArrayList

		for (i : 0 ..< width) {
			for (j : 0 ..< height) {
				val set = <Point2i>newHashSet
				for (k : Math.max(i - 1, 0) .. Math.min(i + 1, width - 1)) {
					for (l : Math.max(j - 1, 0) .. Math.min(j + 1, height - 1)) {
						if (k != i || l != j) {
							if (grid.get(k, l).value) {
								set.add(new Point2i(k - i, l - j))
							}
						}
					}
				}
				perceptions.add(Pair.of(grid.get(i, j).key, set))
			}
		}

		return perceptions
	}

	override getWidth : int {
		width
	}

	override getHeight : int {
		height
	}

	override applyActions(actions : List<Action>) {
		for (action : actions) {
			assert action.type !== null
			grid.set(
				action.position.ix,
				action.position.iy,
				Pair.of(
					grid.get(action.position.ix, action.position.iy).key,
					action.getType() === Action.Type::CREATE))

			bodies.get(action.emitter).alive = (action.type === Action.Type.CREATE)
		}
	}

	override isAlive(uuid : UUID) : boolean {
		bodies.get(uuid).alive
	}

	override getPosition(uuid : UUID) : Point2i {
		bodies.get(uuid).position
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	override getGrid : Pair<UUID, Boolean>[][] {
		this.worldDataStructure
	}

}

