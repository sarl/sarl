/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2026 SARL.io, the original authors and main authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.gameoflife.gui

import io.sarl.demos.gameoflife.game.EnvironmentListener
import java.io.IOException
import java.util.UUID
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean
import javafx.application.Application
import javafx.application.Platform
import javafx.beans.binding.Bindings
import javafx.beans.property.SimpleBooleanProperty
import javafx.beans.property.SimpleIntegerProperty
import javafx.fxml.FXMLLoader
import javafx.scene.Scene
import javafx.scene.layout.HBox
import javafx.stage.Stage
import org.arakhne.afc.vmutil.locale.Locale
import java.util.ResourceBundle
import java.util.regex.Pattern

/**
 * The type GUI.
 *
 * @author $Author: mpinard$
 * @author $Author: sgalland$
 */
class GUI extends Application implements EnvironmentListener, ControllerListener {

	static var gui : GUI
	
	val listeners = <GUIListener>newArrayList
	
	var primaryStage : Stage
	var controller : SimulationViewController
	var squareGridDisplayer : SquareGridDisplayer
	val inited = new AtomicBoolean(false)
	val launched = new AtomicBoolean(false)
	var gridWidth : int
	var gridHeight : int

	var timeInterval = new SimpleIntegerProperty
	var readyToPlay = new SimpleBooleanProperty(false)
	var readyToPause = new SimpleBooleanProperty(false)
	var readyToSetup = new SimpleBooleanProperty(false)

	/**
	 * Gets gui.
	 *
	 * @return the gui
	 */
	@SuppressWarnings("discouraged_reference")
	static def getGUI : GUI{
		if(gui === null) {
			var executorService = Executors.newSingleThreadExecutor
			executorService.submit [Application::launch()]

			while(gui === null) {
				Thread.yield
			}
		}

		return gui
	}

	/**
	 * Launch the gui.
	 */
	def launchGUI {
		if (!launched.getAndSet(true)) {
			Platform.runLater[initGUI()]
		}
	}

	private static def loadResources : ResourceBundle {
		var name = typeof(GUI).name.replaceAll(Pattern::quote("."), "/")
		ResourceBundle::getBundle(name)
	}

	private def initGUI {
		var loader = new FXMLLoader
		loader.resources = loadResources
		var mainHBox = new HBox
		var fxmlStream = typeof(GUI).getResource("SimulationView.fxml").openStream
		try {
			mainHBox = loader.load(fxmlStream) as HBox
		} catch(e : IOException) {
			e.printStackTrace
		} finally {
			fxmlStream.close
		}
		this.controller = loader.getController

		this.controller.widthTextField.text = "10"
		this.controller.heightTextField.text = "10"

		this.controller.setupButton.disableProperty.bind(Bindings.not(this.readyToSetup))
		this.controller.setupButton.setOnAction [
			this.gridWidth = this.controller.widthTextField.text.toInt
			this.gridHeight = this.controller.heightTextField.text.toInt
			for (listener : this.listeners) {
				listener.setup(this.gridWidth, this.gridHeight)
			}
			this.controller.setupProgressBar.progress = 0
			this.controller.setupProgressBar.visible = true
		]

		this.timeInterval.bind(this.controller.timeIntervalSlider.valueProperty)
		this.controller.timeIntervalLabel.textProperty.bind(this.timeInterval.asString)

		this.controller.timeIntervalSlider.min = 0
		this.controller.timeIntervalSlider.max = 1000
		this.controller.timeIntervalSlider.blockIncrement = 1
		this.controller.timeIntervalSlider.value = 500

		this.controller.timeIntervalButton.setOnAction [
			for (listener : this.listeners) {
				listener.periodUpdated(this.timeInterval.value)
			}
		]

		this.controller.playButton.disableProperty.bind(Bindings.not(this.readyToPlay))
		this.controller.playButton.setOnAction [
			this.listeners.forEach [play]
		]

		this.controller.pauseButton.disableProperty.bind(Bindings.not(this.readyToPause))
		this.controller.pauseButton.setOnAction [
			this.listeners.forEach [pause]
		]

		this.controller.exitButton.setOnAction [
			this.listeners.forEach[stop]
			this.primaryStage.close
		]

		this.primaryStage.setOnCloseRequest [
			this.listeners.forEach [stop]
		]

		var scene = new Scene(mainHBox)
		this.primaryStage.title = Locale.getString("TITLE")
		this.primaryStage.scene = scene
		this.primaryStage.show
		this.inited.set(true)
	}

	/**
	 * Setup the gui.
	 *
	 * @param width  the grid width
	 * @param height the grid height
	 */
	def setupGUI(width : int, height : int) {
		if (this.inited.get) {
			this.gridWidth = width
			this.gridHeight = height
			this.squareGridDisplayer = new SquareGridDisplayer(this.gridWidth, this.gridHeight)
			Platform.runLater [
				this.controller.simulationPane.children.clear
				this.controller.simulationPane.children.add(this.squareGridDisplayer)
				this.controller.setupProgressBar.visible = false
			]
		}
	}

	override start(primaryStage : Stage) {
		gui = this
		this.primaryStage = primaryStage
	}

	/**
	 * Add a gui listener.
	 *
	 * @param listener the listener
	 */
	def addGUIListener(listener : GUIListener) {
		this.listeners += listener
	}

	override handleGridUpdate(grid : Pair<UUID, Boolean>[][]) {
		if (!this.inited.get) {
			launchGUI
		}

		if (grid.length == 0 || grid.get(0).length == 0) {
			throw new IllegalArgumentException("grid width or grid height is equal to 0")
		}

		if (this.squareGridDisplayer === null || grid.length != this.gridWidth || grid.get(0).length != this.gridHeight) {
			setupGUI(grid.size, grid.get(0).length)
		}
		var booleanGrid = newBooleanArrayOfSize(grid.size, grid.get(0).length)
		for (i : 0 ..< grid.size) {
			for (j : 0 ..< grid.get(i).length) {
				booleanGrid.set(i, j, grid.get(i, j).value)
			}
		}

		Platform.runLater [this.squareGridDisplayer.grid = booleanGrid]
	}

	override setReadyToSetup(state : boolean) {
		this.readyToSetup.set(state)
	}

	override setReadyToPlay(state : boolean) {
		this.readyToPlay.set(state)
	}

	override setReadyToPause(state : boolean) {
		this.readyToPause.set(state)
	}

	private def toInt(string : String) : int {
		return if (string.isNullOrEmpty) 1 else Integer.parseInt(string)
	}

	def setupProgress(progress : double) {
		this.controller.setupProgressBar.progress = progress
	}

}
