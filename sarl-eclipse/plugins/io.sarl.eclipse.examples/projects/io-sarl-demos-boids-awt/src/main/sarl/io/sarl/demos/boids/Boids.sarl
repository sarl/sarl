/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.demos.boids

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import java.util.Collection
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * A boid agent evolving according C. Reynolds basic behavioral rules
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Boid {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	// ID of the environmental agent
	var environment : UUID

	var position : Vector2d

	var speed : Vector2d

	var group : Population

	@SuppressWarnings("constant_condition")
	on Initialize {
		// 5 Boids init parameters : UUID envt, Population p, Vector2d initialPosition, Vector2d initialVitesse, String boidName
		if (occurrence.parameters.size > 4) {
			val param0 = occurrence.parameters.get(0)
			if (param0 instanceof UUID) {
				environment = param0
			}

			val param1 = occurrence.parameters.get(1)
			if (param1 instanceof Population) {
				group = param1
			}

			val param2 = occurrence.parameters.get(2)
			if (param2 instanceof Vector2d) {
				position = param2
			}

			val param3 = occurrence.parameters.get(3)
			if (param3 instanceof Vector2d) {
				speed = param3
				speed.length = 0.25
				speed += new Vector2d(0, 0.75)
				speed.scale(group.maxSpeed)
			}

			val param4 = occurrence.parameters.get(4)
			if (param4 instanceof String) {
				loggingName = param4
			}

		}
		if (Settings::isLogActivated) {
			"Boids activated".info
		}
	}

	@SuppressWarnings("constant_condition")
	on Perception {
		var boids = occurrence.perceivedAgentBody
		var myBody = boids.get(ID)
		if ((myBody !== null) && (myBody.owner == this.ID)) {
			// Update boids' speed and position according to the new environmental data
			this.position = myBody.position
			this.speed = myBody.vitesse
		}
		in(Settings::pause) [
			emit(new Action => [influence = think(boids.values)])[it.ID == this.environment]

			if (Settings::isLogActivated) {
				info("Sending Influences.")
			}
		]
	}

	on Die {
		killMe
	}

	/************** Boids' behavioral Methods ****************************
	 */
	 
	 /**
	  * The core boids behavior : aggregating all forces into a influence 
	  */
	def think(perception : Collection<PerceivedBoidBody>) : Vector2d {
		if (perception !== null) {
			var force : Vector2d
			var influence = new Vector2d

			influence.set(0, 0)

			if (group.separationOn) {
				force = perception.separation
				force.scale(group.separationForce)
				influence += force
			}

			if (group.cohesionOn) {
				force = perception.cohesion
				force.scale(group.cohesionForce)
				influence += force
			}

			if (group.alignmentOn) {
				force = perception.alignment
				force.scale(group.alignmentForce)
				influence += force
			}

			if (group.repulsionOn) {
				force = perception.repulsion
				force.scale(group.repulsionForce)
				influence += force
			}

			if (influence.length > group.maxForce) {
				influence.length = group.maxForce
			}

			influence.scale(1 / group.mass)

			return influence
		}
	}

	/** 
	 * Determine whether a body is visible or not according to the perception range
	 */
	def isVisible(otherBoid : PerceivedBoidBody, distance : double) : boolean {
		var tmp = otherBoid.position - position

		if (tmp.length > distance)
			return false

		var tmp2 = speed.clone
		tmp2.normalize

		if (tmp2 * tmp < group.visibleAngleCos)
			return false

		return true
	}

	/** Compute the separation force.
	 */
	def separation(otherBoids : Collection<PerceivedBoidBody>) : Vector2d {
		var force = new Vector2d
		var len = 0.0

		for (otherBoid : otherBoids) {
			if ((otherBoid !== null) && (otherBoid.owner != this.ID) && (otherBoid.group == group) &&
				(isVisible(otherBoid, group.distSeparation))) {
				var tmp = position - otherBoid.position
				len = tmp.length
				// force : 1/r
				tmp.scale(1.0 / (len ** 2))
				force += tmp
			}
		}
		return force
	}

	/** Compute the cohesion force.
	 */
	def cohesion(otherBoids : Collection<PerceivedBoidBody>) : Vector2d {
		var nbTot = 0
		var force = new Vector2d

		for (otherBoid : otherBoids) {
			if ((otherBoid !== null) && (otherBoid.owner != this.ID) && (otherBoid.group == group) &&
				(isVisible(otherBoid, group.distCohesion))) {
				nbTot++
				force += otherBoid.position
			}
		}

		// computation of the barycenter.
		if (nbTot > 0) {
			force.scale(1.0 / nbTot)
			force -= position
		}
		return force
	}

	/** Compute the alignment force.
	 */
	def alignment(otherBoids : Collection<PerceivedBoidBody>) : Vector2d {
		var nbTot = 0
		var tmp = new Vector2d
		var force = new Vector2d

		for (otherBoid : otherBoids) {
			if ((otherBoid !== null) && (otherBoid.owner != this.ID) && (otherBoid.group == group) &&
				(isVisible(otherBoid, group.distAlignment))) {
				nbTot++
				tmp.set(otherBoid.vitesse)
				tmp.scale(1.0 / tmp.length)
				force += tmp
			}
		}

		if (nbTot > 0) {
			force.scale(1.0 / nbTot)
		}
		return force
	}

	/** 
	 * Compute the repulsion force.
	 */
	def repulsion(otherBoids : Collection<PerceivedBoidBody>) : Vector2d {
		var force = new Vector2d
		var len = 0.0

		for (otherBoid : otherBoids) {
			if ((otherBoid !== null) && (otherBoid.owner != this.ID) && (otherBoid.group != group) &&
				isVisible(otherBoid, group.distRepulsion)) {
				var tmp = position - otherBoid.position
				len = tmp.length
				tmp.scale(1 / (len ** 2))
				force += tmp
			}
		}
		return force
	}


}
