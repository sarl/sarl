/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.demos.boids.gui

import io.sarl.api.core.OpenEventSpace
import io.sarl.demos.boids.Die
import io.sarl.demos.boids.PerceivedBoidBody
import java.awt.Color
import java.awt.Frame
import java.awt.Graphics
import java.awt.Image
import java.awt.Panel
import java.awt.^event.WindowAdapter
import java.awt.^event.WindowEvent
import java.util.Map
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d

import static extension java.lang.Math.*

/** 
 * Graphical user interface for boids.
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
class EnvironmentGui extends Frame {

	var handler : Closer

	var panel : EnvironmentGuiPanel

	new (comspace : OpenEventSpace, iheight : int, iwidth : int, iboids : Map<UUID, PerceivedBoidBody>) {
		super()
		handler = new Closer(this, comspace)
		panel = new EnvironmentGuiPanel(iheight, iwidth, iboids)

		this.title = "Boids Simulation"
		this.setSize(iwidth, iheight)
		addWindowListener(handler)

		add("Center", panel)
		this.visible = true
	}

	def setBoids(boids : Map<UUID, PerceivedBoidBody>) {
		this.panel.boids = boids
	}

	override paint(g : Graphics) {
		super.paint(g)
		this.panel.paint(g)
	}

}

package class Closer extends WindowAdapter {
	var ^space : OpenEventSpace
	var iframe : Frame

	new(parent : Frame, comspace : OpenEventSpace) {
		^space = comspace
		iframe = parent
	}

	/**
	 * Clean the simulation asking the agents to die before disposing the window
	 */
	override windowClosing(^event : WindowEvent) {
		^space.emit(UUID.randomUUID, new Die)
		iframe.dispose();		
	}

}

/** 
 * The GUI of the Simulation
 * 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
package class EnvironmentGuiPanel extends Panel {

		/** 
		 * Double buffering management.
		 */
	var myGraphics : Graphics

	/** 
	 * Double buffering management.
	 */
	var myCanvas : Graphics

	/** 
	 * Double buffering management.
	 */
	var myImage : Image

	var width : int

	var height : int

	var boids : Map<UUID, PerceivedBoidBody>

	def setBoids(boids : Map<UUID, PerceivedBoidBody>) {
		this.boids = boids
	}

	new (iheight : int, iwidth : int, iboids : Map<UUID, PerceivedBoidBody>) {
		super()
		width = iwidth
		height = iheight
		boids = iboids
	}

	override paint(g : Graphics) {
		if ((myCanvas !== null) && (myGraphics !== null)) {
			val bgColor = new Color(0.6F, 0.6F, 0.6F)
			myCanvas.color = bgColor
			myCanvas.fillRect(0, 0, width * 2 - 1, height * 2 - 1)
			myCanvas.setColor(Color::BLACK)
			myCanvas.drawRect(0, 0, width * 2 - 1, height * 2 - 1)

			for (boid : boids.values) {
				paintBoid(myCanvas, boid)
			}

			myGraphics.drawImage(myImage, 0, 0, this)
		}
	}

	def update(g : Graphics) {
		g.paint
	}

	override doLayout {
		super.doLayout

		width = (this.size.width / 2)
		height = this.size.height / 2

		myImage = createImage(width * 2, height * 2)
		myCanvas = myImage.graphics
		myGraphics = this.graphics
	}

	def paintBoid(g : Graphics, boid : PerceivedBoidBody) {
		var posX = width + boid.position.x as int
		var posY = height + boid.position.y as int
		var direction = boid.vitesse.angle
		var cos = direction.cos
		var sin = direction.sin

		g.color = boid.group.color

		g.drawLine(posX + ( 5 * cos ) as int, posY + ( 5 * sin ) as int, posX - ( 2 * cos + 2 * sin ) as int,
			posY - ( 2 * sin - 2 * cos ) as int)
		g.drawLine(posX + ( 5 * cos ) as int, posY + ( 5 * sin ) as int, posX - ( 2 * cos - 2 * sin ) as int,
			posY - ( 2 * sin + 2 * cos ) as int)
		g.drawLine(posX - ( 2 * cos + 2 * sin ) as int, posY - ( 2 * sin - 2 * cos ) as int,
			posX - ( 2 * cos - 2 * sin ) as int, posY - ( 2 * sin + 2 * cos ) as int)
	}

	private static def getAngle(v : Vector2d) : double {
		var zero = 1E-9
		if ((v.x * v.x) < zero) {
			if(v.y >= 0) return (PI / 2)
			return (-1 * PI / 2)
		}
		if(v.x >= 0) return (v.y / v.x).atan
		if(v.y >= 0) return ( PI + (v.y / v.x).atan )
		return ( (v.y / v.x).atan - PI )
	}

}
