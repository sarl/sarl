/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.counter

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import java.util.concurrent.atomic.AtomicInteger

event Hello

event Count

event Die

/** A simple agent launching the two application agents.
 *
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent CounterBootAgent {

	uses DefaultContextInteractions, Lifecycle

	on Initialize {
		spawn(CounterAgent)
		spawn(SecondAgent)
		killMe
	}

}


/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent CounterAgent {

	uses Lifecycle, Schedules, DefaultContextInteractions, Behaviors, Logging

	val count = new AtomicInteger

	var started = false
 
	on Initialize {
		loggingName = "COUNTER"
		info("Starting")
		task("discovery").every(1000) [ 
			emit(new Hello)
		]
	}

	on Hello [ !isFromMe && !started ] {
		info("Found another agent => " + occurrence.source)
		info("I'm " + defaultAddress)
		started = true
		task("discovery").cancel /* cancel the task launch in the Initialize */
		info("Starting to count")
		wake(new Count) /* send itself the first Count event */
	}

	on Count {
		info("count => " + count.get) 
		if(count.get == 3) {
			info("orders Partner to die") 
			emit(new Die) 
			killMe
		} else {
			in(1000) [ 
				count.incrementAndGet 
				wake(new Count) 
			]
		}
	}

}

/**
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent SecondAgent {

	uses Lifecycle, DefaultContextInteractions, Logging
	
	on Initialize {
		loggingName = "PARTNER"
		info("Starting")
	}

	on Hello [ !isFromMe ] {/* test the emitter address to be sure it is not a self message */
		info("Say hello!")
		emit(new Hello) 
	}

	on Die {
		info("is dying")
		killMe
	}

}
