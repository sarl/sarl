/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.demos.basic.holarchy

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.MemberLeft
import io.sarl.api.core.Schedules
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * Event sent by the root holon to the holarchymanager when the whole holarchy has been destroyed
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
event HolarchyDestroyed

/** 
 * Simple agent creating the root holon
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent HolarchyManager {

	uses Lifecycle, Schedules, Logging

	on Initialize {
			/* Spawn a first holon that will in turn spawn a whole hierarchy of holons
			 */
		spawn(Holon)
		loggingName = "Holarchy Manager"
	}

	/* Wait the HolarchyDestroyed event to die
	 */
	on HolarchyDestroyed {
		info("Holarchy destroyed. Waiting awhile to ensure that all pending context destruction is processed.")
		in(3000) [
			killMe
		]
	}

}

/** 
 * Holon architecture used to create a whole self-similar hierarchy of agent
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent Holon {

	uses Lifecycle, InnerContextAccess, Schedules, DefaultContextInteractions, Logging

	val depthInitial = 2
	val childCount = 2
	var childUIDs = new ConcurrentLinkedQueue<UUID>

	var isRoot : boolean

	on Initialize {
		var depth : Integer

		if (occurrence.parameters.isEmpty) {
			depth = depthInitial
			isRoot = true
			loggingName = "ROOT AGENT"
		} else {
			isRoot = false
			depth = occurrence.parameters.get(0) as Integer
			if(depth === null) depth = 0

				// loggingName = "Holon_Depth:" + depth + "_Num:" + occurrence.parameters.get(1) as Integer
		}

		if (isRoot || depth > 0) {
			depth = depth - 1
			for (i : 1 .. childCount) {
				val aid = UUID::randomUUID
				info("Create the child #" + i + " at depth " + depth + " with ID : " + aid)

				/* spawn a new sub-holon (a holon inside his own internal context)
				 */
				childUIDs.add(aid) // import to add before spawning, because spawning is done in a subthread
				spawnInContextWithID(Holon, aid, innerContext, depth, i)

			}
			
			/* check every seconds if he's himself the last remaining holon as member of its internal context event space 
			 * in this case, its means that all of its members are dead, he can thus die peacefully
		     * TEMPORAL APPROACH TO DESTROY THE HOLARCHY not the best one, it is better to rely on event to manage the holarchy destruction see the ParticipantLeft on clause
			 * */
				// task("toto").every(1000) [
				// if (innerContext.defaultSpace.participants.size == 1) {
				// info("No more child: I'm killing myself.")
			// task("toto").cancel /* Cancel the task */
			// killMe /* Dying */
			// }
			//			]
		} else {
			info("As leaf: Waiting awhile before committing a suicide.")
			/* Wait 10 sec before dying
			 */
			in(1000) [
				info("As leaf: I'm killing myself.")
				killMe
			]
		}
	}

	on MemberLeft {
		// Could also worked with
		// on ParticipantLeft [occurrence.spaceID.contextID == innerContext.ID] { // Being sure the corresponding event comes from my internal context
		// Event-based holarchy destruction
		var childID = occurrence.agentID // use the source of the event if you switch to Participantleft
		if (childUIDs.contains(childID)) {
			childUIDs.remove(childID)
			if (childUIDs.size <= 0) {
				info("No more child: I'm killing myself.")
				killMe
			}
		}
	}

	on Destroy {
		if (isRoot) {

				/* the top super-holon die, it sends an HolarchyDestroyed to the holarchy manager
				 */
			emit(new HolarchyDestroyed)
		}
	}
		
}
