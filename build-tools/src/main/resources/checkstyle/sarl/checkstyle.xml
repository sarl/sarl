<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- Checkstyle configuration that checks the SARL coding conventions. -->

<module name="Checker">

	<!-- Default charset (Google). -->
	<property name="charset" value="UTF-8" />

	<!-- Default severity is error. -->
	<property name="severity" value="error" />

	<!-- Specification of the filename extensions for the files to check. -->
	<property name="fileExtensions" value="java" />

	<!-- Checks for Headers. -->
	<module name="Header">
		<property name="headerFile"
			value="${config_loc}sarl_class_header.txt" />
		<property name="fileExtensions" value="java,sarl,suite,spec" />
	</module>

	<!-- Checks whether files end with a new line. -->
	<module name="NewlineAtEndOfFile">
		<property name="lineSeparator" value="lf_cr_crlf" />
	</module>

	<!-- Checks that property files contain the same keys. -->
	<module name="Translation" />

	<!-- Files shold not be too large. -->
	<module name="FileLength">
		<property name="max" value="4000" />
	</module>

	<!-- No trailing white spaces for minimizing the size of the files. -->
	<module name="RegexpSingleline">
		<property name="format" value="\s+$" />
		<property name="minimum" value="0" />
		<property name="maximum" value="0" />
		<property name="message" value="Line has trailing spaces." />
	</module>

	<!-- Avoid tab characters in the code (Google). -->
	<!-- <module name="FileTabCharacter"> <property name="eachLine" value="true"/>
		</module> -->

	<!-- Activate the suppressions of the warnings with the holder for @SuppressWarnings -->
	<module name="SuppressWarningsFilter" />

	<!-- Ignore generated sources -->
	<module name="SuppressionFilter">
		<property name="file" value="${config_loc}/suppressions.xml" />
	</module>

	<module name="TreeWalker">

		<!-- Size of the tab characters. -->
		<property name="tabWidth" value="4" />

		<!-- *************** *** JAVADOC *** *************** -->

		<!-- Check if the value of the tag @mavengroupid is "$GroupId$" -->
		<module name="WriteTag">
			<property name="tag" value="@mavengroupid" />
			<property name="tagFormat" value="\$GroupId\$" />
			<property name="severity" value="error" />
			<property name="tagSeverity" value="ignore" />
		</module>

		<!-- Check if the value of the tag @mavenartifactid is "$ArtifactId$" -->
		<module name="WriteTag">
			<property name="tag" value="@mavenartifactid" />
			<property name="tagFormat" value="\$ArtifactId\$" />
			<property name="severity" value="error" />
			<property name="tagSeverity" value="ignore" />
		</module>

		<!-- Javadoc must be present for public/package/protected classes/methods/fields. -->
		<module name="JavadocStyle">
			<property name="scope" value="package" />
		</module>

		<!-- Enforce the format of the tags @author and @version. -->
		<!-- All parameters must have a non-empty javadoc tag -->
		<!-- Allow unknown tags (such as @mavengroupid). -->
		<module name="JavadocType">
			<property name="scope" value="package" />
			<property name="authorFormat" value="\$Author:\s*[a-zA-Z0-9_]+\$" />
			<property name="versionFormat" value="\$FullVersion\$" />
			<property name="allowMissingParamTags" value="false" />
			<property name="allowUnknownTags" value="true" />
		</module>

		<!-- Specify the minimum number of lines for a method documentation. -->
		<!-- Validate the throws. -->
		<!-- Allow documentation of RuntimeException exceptions that are not declared
			in throws. -->
		<module name="JavadocMethod">
			<property name="scope" value="package" />
			<property name="minLineCount" value="1" />
			<property name="validateThrows" value="true" />
			<property name="allowUndeclaredRTE" value="true" />
		</module>

		<!-- Every public/protected/package fields must have a documentation. -->
		<module name="JavadocVariable">
			<property name="scope" value="package" />
		</module>

		<!-- All the @ clauses must be followed by a description. -->
		<module name="NonEmptyAtclauseDescription" />

		<!-- Indentation of 4 spaces for tag continuation. -->
		<module name="JavadocTagContinuationIndentation" />

		<!-- Enforce the first sentence of the javadoc. -->
		<module name="SummaryJavadocCheck">
			<property name="forbiddenSummaryFragments"
				value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
		</module>

		<!-- Ensure every paragraphs is followed by a blank line. -->
		<module name="JavadocParagraph" />

		<!-- Check the order of the @ clauses -->
		<module name="AtclauseOrder">
			<property name="tagOrder"
				value="@param, @return, @throws, @author, @version, @since, @serial, @serialField, @serialData, @see, @deprecated" />
			<property name="target"
				value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
		</module>

		<!-- Check that any documentation with @ clause must have more than one
			line. -->
		<module name="SingleLineJavadoc" />

		<!-- Ensure comments are at the same level as the commented code. -->
		<module name="CommentsIndentation" />

		<!-- The only one comment that is allowed after source code is the NLS
			comment. -->
		<module name="TrailingComment">
			<property name="legalComment"
				value="\$NON-NLS-[0-9]+\$(\s*//\s*\$NON-NLS-[0-9]+\$)*" />
		</module>


		<!-- ************************** *** NAMING CONVENTIONS *** ************************** -->

		<!-- Check that the outer type is defined in a file with the same name. -->
		<module name="OuterTypeFilename" />

		<!-- Check package names. -->
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
			<message key="name.invalidPattern"
				value="Package name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check types names. -->
		<module name="TypeName">
			<message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check member names. -->
		<module name="MemberName">
			<property name="format" value="^([a-z][a-z0-9][a-zA-Z0-9]*)|[tuvwxyz]$" />
			<message key="name.invalidPattern"
				value="Member name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check constant names. -->
		<module name="ConstantName" />

		<!-- Constants must be defined with upper 'L' (from Java specifications) -->
		<module name="UpperEll" />

		<!-- Check static variables (not final) names. -->
		<module name="StaticVariableName" />

		<!-- Check final variable names. -->
		<module name="LocalFinalVariableName" />

		<!-- Check parameter names. -->
		<module name="LocalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
		</module>

		<!-- Check variable names. -->
		<module name="LocalVariableName">
			<property name="tokens" value="VARIABLE_DEF" />
			<property name="format" value="^([a-z][a-z0-9][a-zA-Z0-9]*)|[abcijktuvwxyz]$" />
			<property name="allowOneCharVarInForLoop" value="true" />
			<message key="name.invalidPattern"
				value="Local variable name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check method names. -->
		<module name="MethodName">
			<property name="format" value="^((operator_)|([$_]))?([a-z][a-zA-Z0-9$]*)$" />
			<message key="name.invalidPattern"
				value="Method name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check parameter names. -->
		<module name="ParameterName">
			<property name="format" value="^([xyzuvwt])|([a-z][a-z0-9][a-zA-Z0-9]*)$" />
			<message key="name.invalidPattern"
				value="Parameter name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check the names of the class type parameters. -->
		<module name="ClassTypeParameterName">
			<property name="format" value="^[A-Z]+[0-9]?$" />
			<message key="name.invalidPattern"
				value="Class type name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- Check the names of the method type parameters. -->
		<module name="MethodTypeParameterName">
			<property name="format" value="(^[A-Z]+[0-9]*$)" />
			<message key="name.invalidPattern"
				value="Method type name ''{0}'' must match pattern ''{1}''." />
		</module>

		<!-- *************** *** IMPORTS *** *************** -->

		<!-- No line wrapping for package and import declarations. -->
		<module name="NoLineWrap" />

		<!-- Checks for imports -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<!-- Avoid star in imports -->
		<module name="AvoidStarImport" />

		<!-- Avoid illegal imports, such as sun.* -->
		<module name="IllegalImport" />

		<!-- Check for redundant imports. -->
		<module name="RedundantImport" />

		<!-- Check for unused imports in the code AND in the Javadoc. -->
		<module name="UnusedImports">
			<property name="processJavadoc" value="true" />
		</module>

		<!-- Specify a custom order for SARL imports. -->
		<module name="CustomImportOrder">
			<property name="customImportOrderRules"
				value="STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE###SPECIAL_IMPORTS" />
			<property name="specialImportsRegExp" value="^io\.((janusproject)|(sarl))\." />
			<property name="sortImportsInGroupAlphabetically" value="true" />
		</module>

		<!-- ************* *** SIZES *** ************* -->

		<!-- Line length is 150 (100 in Google standards). -->
		<module name="LineLength">
			<property name="max" value="150" />
			<property name="ignorePattern"
				value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
		</module>

		<!-- Maximum number of methods per type. -->
		<module name="MethodCount">
			<property name="maxTotal" value="70" />
		</module>

		<!-- Number of lines of code (not empty nor comments) in a method. -->
		<module name="MethodLength">
			<property name="tokens" value="METHOD_DEF" />
			<property name="max" value="200" />
			<property name="countEmpty" value="false" />
		</module>

		<!-- Number of lines of code (not empty nor comments) in a constructor. -->
		<module name="MethodLength">
			<property name="tokens" value="CTOR_DEF" />
			<property name="max" value="60" />
			<property name="countEmpty" value="false" />
		</module>

		<!-- Max number of parameters for a method. -->
		<module name="ParameterNumber">
			<property name="max" value="8" />
			<property name="tokens" value="METHOD_DEF" />
		</module>

		<!-- Max number of parameters for a constructor. -->
		<module name="ParameterNumber">
			<property name="max" value="10" />
			<property name="tokens" value="CTOR_DEF" />
		</module>

		<!-- Number of lines for an anonymous inner type. -->
		<module name="AnonInnerLength">
			<property name="max" value="100" />
		</module>

		<!-- Max number of statements in constructors, instance initializers, and
			static initializers. -->
		<module name="ExecutableStatementCount">
			<property name="max" value="40" />
			<property name="tokens" value="CTOR_DEF, INSTANCE_INIT, STATIC_INIT" />
		</module>

		<!-- **************************** *** White spaces in code *** **************************** -->

		<!-- No space in an empty for with iterator. -->
		<module name="EmptyForIteratorPad" />

		<!-- Check white spaces in generics declarations. -->
		<module name="GenericWhitespace" />

		<!-- No space between the name of the method/constructor and the parameter
			list. -->
		<module name="MethodParamPad" />

		<!-- No space after typical tokens (arrays, unary minus, etc.) -->
		<module name="NoWhitespaceAfter" />

		<!-- No space after typical tokens (arrays, unary minus, etc.) -->
		<module name="NoWhitespaceBefore" />

		<!-- In multiline operations (e.g. string concatenation), the operators
			are always at the begining of the lines. -->
		<module name="OperatorWrap" />

		<!-- No space after a left parenthesis and before a right parenthesis. -->
		<module name="ParenPad" />

		<!-- In type casts, no space after a left parenthesis and before a right
			parenthesis. -->
		<module name="TypecastParenPad" />

		<!-- Space after typical tokens (comma, semicolumn, typecast). -->
		<module name="WhitespaceAfter" />

		<!-- Space around typical tokens (assignments, etc.) -->
		<module name="WhitespaceAround" />

		<!-- Check indentation. -->
		<module name="Indentation">
			<property name="basicOffset" value="4" />
			<property name="caseIndent" value="0" />
			<property name="throwsIndent" value="4" />
			<property name="arrayInitIndent" value="4" />
			<property name="lineWrappingIndentation" value="2" />
		</module>

		<!-- Ensure empty lines between the major declarations. -->
		<module name="EmptyLineSeparator">
			<property name="allowMultipleEmptyLines" value="false" />
		</module>

		<!-- Dot separator must start the next line in the context of a line wrapping. -->
		<module name="SeparatorWrap">
			<property name="tokens" value="DOT" />
			<property name="option" value="nl" />
		</module>

		<!-- Comma separator must end the current line in the context of a line
			wrapping. -->
		<module name="SeparatorWrap">
			<property name="tokens" value="COMMA" />
			<property name="option" value="EOL" />
		</module>

		<!-- ***************** *** Modifiers *** ***************** -->

		<!-- Check for the standard order of the modifiers. -->
		<module name="ModifierOrder" />

		<!-- Avoid redundant modifiers. -->
		<module name="RedundantModifier" />

		<!-- Visibility of class members is constrained. -->
		<module name="VisibilityModifier">
			<property name="packageAllowed" value="true" />
			<property name="protectedAllowed" value="true" />
		</module>

		<!-- ******************* *** Code Blocks *** ******************* -->

		<!-- Nested blocks are avoided. -->
		<module name="AvoidNestedBlocks" />

		<!-- Empty blocks are not allowed, except for the catch statement in which
			a line comment must be written. -->
		<module name="EmptyBlock">
			<property name="option" value="text" />
			<property name="tokens" value="LITERAL_CATCH" />
		</module>

		<!-- Empty catch blocks are allowed if the variable name is "_" -->
		<module name="EmptyCatchBlock">
			<property name="exceptionVariableName" value="_" />
		</module>

		<!-- Check for the placement of the left curly braces at the ends of the
			lines. -->
		<module name="LeftCurly" />

		<!-- Check for the placement of the right curly braces on the same line
			as the following statement. -->
		<module name="RightCurly" />

		<!-- Braces are mandtory for literals (if-then, do, for, etc.) -->
		<module name="NeedBraces" />

		<!-- *********************** *** Type Definition *** *********************** -->

		<!-- Class with only private constructors must be final. -->
		<module name="FinalClass" />

		<!-- An interface must contains at least one method. Interface with only
			constants is forbidden. -->
		<module name="InterfaceIsType" />

		<!-- Maximum number of types that are declared at root level in file. -->
		<module name="OuterTypeNumber">
			<property name="max" value="1" />
		</module>

		<!-- Ensure top level class is defined in their own files. -->
		<module name="OneTopLevelClass"></module>

		<!-- ************************* *** Member Definition *** ************************* -->

		<!-- finalize() function is forbidden. -->
		<module name="NoFinalizer" />

		<!-- Members must be declared in the order: class variables (public, protected,
			package, private), instance variables (public, protected, package, private),
			constructors, methods. -->
		<module name="DeclarationOrder" />

		<!-- If a function "equals(Something)" is defined, the function "equals(Object)
			must be overriden. -->
		<module name="CovariantEquals" />

		<!-- If the equals() function is implemented; the hashCode() function must
			also be implemented. -->
		<module name="EqualsHashCode" />

		<!-- Check for @Deprecated annotation. -->
		<module name="MissingDeprecated" />

		<!-- Check for @Override annotation. -->
		<module name="MissingOverride" />

		<!-- Utility classes must not have public constructor. -->
		<module name="HideUtilityClassConstructor" />

		<!-- ******************** *** Coding Style *** ******************** -->

		<!-- Requires "this". -->
		<module name="RequireThis">
			<property name="checkMethods" value="false" />
		</module>

		<!-- Check for unnecessary parentheses. -->
		<module name="UnnecessaryParentheses" />

		<!-- Ensure that string variables are right operand of equals when compared to constants. -->
		<module name="EqualsAvoidNull" />

		<!-- Only one statement per line. -->
		<module name="OneStatementPerLine" />

		<!-- Array definitions must have trailing comas. -->
		<module name="ArrayTrailingComma" />

		<!-- Assignment of the parameters is forbidden. -->
		<module name="ParameterAssignment" />

		<!-- Change of loop index is forbidden inside the for block. -->
		<module name="ModifiedControlVariable" />

		<!-- Check if variables that are never changed are declared as final -->
		<module name="FinalLocalVariable">
			<property name="validateEnhancedForLoopVariable" value="true" />
		</module>

		<!-- Avoid redundant initialization of the fields to their default values. -->
		<module name="ExplicitInitialization" />

		<!-- In the switch statements, the default clause must be after all the
			other clauses. -->
		<module name="DefaultComesLast" />

		<!-- Avoid fall-through in switch statements, except if a comment with
			"fall through" is specified. -->
		<module name="FallThrough" />

		<!-- Default clause is switch statements is mandatory. -->
		<module name="MissingSwitchDefault" />

		<!-- Only one variable declaration per line (Java standards). -->
		<module name="MultipleVariableDeclarations" />

		<!-- Avoid empty statements (standalone ";"). -->
		<module name="EmptyStatement" />

		<!-- Avoid direct calls to the constructors when factory methods are preferred,
			e.g. Boolean. -->
		<module name="IllegalInstantiation" />

		<!-- Avoid octal notation for the numbers. -->
		<module name="IllegalTokenText">
			<property name="tokens" value="NUM_INT,NUM_LONG" />
			<property name="format" value="^0[^lx]" />
			<property name="ignoreCase" value="true" />
		</module>

		<!-- Avoid octal and unicode escapes. -->
		<module name="IllegalTokenText">
			<property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
			<property name="format"
				value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
			<property name="message"
				value="Avoid using corresponding octal or Unicode escape." />
		</module>

		<!-- Avoid unicode escapes. -->
		<module name="AvoidEscapedUnicodeCharacters">
			<property name="allowEscapesForControlCharacters" value="true" />
			<property name="allowByTailComment" value="true" />
			<property name="allowNonPrintableEscapes" value="true" />
		</module>

		<!-- Avoid the use of specific types in parameter and method declarations
			(HashSet, etc.) -->
		<module name="IllegalType">
			<!-- <property name="ignoredMethodNames" value="getInstance"/> -->
			<property name="tokens" value="PARAMETER_DEF,METHOD_DEF" />
		</module>

		<!-- Discourage the use of specific types in variable declarations (HashSet,
			etc.) -->
		<module name="IllegalType">
			<property name="tokens" value="VARIABLE_DEF" />
			<property name="severity" value="warning" />
		</module>

		<!-- Avoid assignment expressions. -->
		<module name="InnerAssignment" />

		<!-- Limit the maximal number of returns in a method. -->
		<module name="ReturnCount">
			<property name="max" value="10" />
			<property name="maxForVoid" value="10" />
		</module>

		<!-- Limit the maximal number of nested if statements in a method. -->
		<module name="NestedIfDepth">
			<property name="max" value="3" />
		</module>

		<!-- Limit the maximal number of nested try statements in a method. -->
		<module name="NestedTryDepth">
			<property name="max" value="3" />
		</module>

		<!-- Ensure a package is declared for every type. -->
		<module name="PackageDeclaration" />

		<!-- Avoid unnecessray too complex boolean expressions. -->
		<module name="SimplifyBooleanExpression" />

		<!-- Avoid unnecessray too complex boolean expressions in return statements. -->
		<module name="SimplifyBooleanReturn" />

		<!-- Avoid the use of "==" and "!=" with String values. -->
		<module name="StringLiteralEquality" />

		<!-- Every implementation of clone() must call the inherited method. -->
		<module name="SuperClone" />

		<!-- Every implementation of finalize() must call the inherited method. -->
		<module name="SuperFinalize" />

		<!-- Avoid magic numbers in code, except integers in [-1; 3]. -->
		<module name="MagicNumber">
			<property name="ignoreHashCodeMethod" value="true" />
			<property name="ignoreAnnotation" value="true" />
			<property name="ignoreNumbers" value="-1 , 0 , 1 , 2, 3" />
		</module>

		<!-- Avoid System.out. -->
		<module name="Regexp">
			<property name="format" value="System\.out\." />
			<property name="illegalPattern" value="true" />
			<property name="message" value="Avoid System.out, use the logging system." />
			<property name="ignoreComments" value="true" />
		</module>

		<!-- Avoid System.err. -->
		<module name="Regexp">
			<property name="format" value="System\.err\." />
			<property name="illegalPattern" value="true" />
			<property name="message" value="Avoid System.err, use the logging system." />
			<property name="ignoreComments" value="true" />
		</module>

		<!-- Avoid System.in. -->
		<module name="Regexp">
			<property name="format" value="System\.in\." />
			<property name="illegalPattern" value="true" />
			<property name="message" value="Avoid System.in, use the stream API." />
			<property name="ignoreComments" value="true" />
		</module>

		<!-- Avoid printStackTrace on exceptions. -->
		<module name="Regexp">
			<property name="format" value="\.printStackTrace" />
			<property name="illegalPattern" value="true" />
			<property name="message"
				value="Avoid to print stack trace, use the logging system." />
			<property name="ignoreComments" value="true" />
		</module>

		<!-- Avoid com.google.common.base.Preconditions -->
		<module name="Regexp">
			<property name="format" value="(com\.google\.common\.base\.)?Preconditions" />
			<property name="illegalPattern" value="true" />
			<property name="message" value="Avoid run-time preconditions, use assertions." />
			<property name="ignoreComments" value="true" />
		</module>

		<!-- Avoid too complex boolean expressions: 6 boolean operators are allowed -->
		<module name="BooleanExpressionComplexity">
			<property name="max" value="6" />
		</module>

		<!-- Restrict the number of instanciation of other classes in a given type. -->
		<module name="ClassDataAbstractionCoupling">
			<property name="max" value="15" />
		</module>

		<!-- Restrict the number of types that is used in a given type. -->
		<module name="ClassFanOutComplexity">
			<property name="max" value="40" />
		</module>

		<!-- Restrict the number of decision points in the code. Less decision
			points means easier to test. -->
		<module name="CyclomaticComplexity">
			<property name="max" value="20" />
		</module>

		<!-- Number of paths in a code. 200 is a standard from AT&T. -->
		<module name="NPathComplexity">
			<property name="max" value="200" />
		</module>

		<!-- Array notation must follow the Java style (not the C style). -->
		<module name="ArrayTypeStyle" />

		<!-- The functions must be grouped by their names. -->
		<module name="OverloadMethodsDeclarationOrder" />

		<!-- Avoid to declare variables too early in the code, before the first
			use. -->
		<module name="VariableDeclarationUsageDistance" />

		<!-- Annotations must be after the documentation block and before the annotated
			element. Each annotation is on a separate line. -->
		<module name="AnnotationLocation" />

		<!-- Enable to suppress checkstyle warnings via @SuppressWarnings annotation.
			Syntax is: @SuppressWarnings("checkstyle:<id>") -->
		<module name="SuppressWarningsHolder" />

	</module>

</module>
