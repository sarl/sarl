/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.lang.tests.general.compilation.aop;

import static io.sarl.tests.api.tools.TestEObjects.file;
import static io.sarl.tests.api.tools.TestUtils.multilineString;
import static io.sarl.tests.api.tools.TestValidator.validate;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

import io.sarl.lang.core.SARLVersion;
import io.sarl.lang.core.Event.Bound;
import io.sarl.lang.sarl.SarlPackage;
import io.sarl.lang.sarl.SarlScript;
import io.sarl.lang.tests.api.AbstractSarlTest;

/**
 * @author <a href="http://www.ciad-lab.fr/stephane_galland">St&eacute;phane Galland</a>
 * @version compiler.tests 0.15.1 20250911-224823
 * @mavengroupid io.sarl.lang
 * @mavenartifactid compiler.tests
 * @since 0.14
 */
@DisplayName("Compilation: generic Event")
@Tag("core")
@Tag("sarlValidation")
@SuppressWarnings("all")
public class GenericEventCompilerTest {

	@DisplayName("Direct Event inheritance")
	@Nested
	public class DirectEventInheritance extends AbstractSarlTest {

		@Test
		@DisplayName("Empty event with block")
		public void basicCompile_withBlock() throws Exception {
			String source = "event E1<T1, T2 extends Number, T3 extends Double> { }";
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}
	
		@Test
		@DisplayName("Empty event without block")
		public void basicCompile_withoutBlock() throws Exception {
			String source = "event E1<T1, T2 extends Number, T3 extends Double>";
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}
	
		@Test
		@DisplayName("With string field")
		public void withVarAttributesCompile() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var name : String",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import java.util.Objects;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public String name;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final String name) {",
					"    super();",
					"    this.name = name;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E1 other = (E1) obj;",
					"    if (!Objects.equals(this.name, other.name))",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Objects.hashCode(this.name);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"name\", this.name);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 1787001662L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("With constructor")
		public void noStaticField() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	val titi : int = 4",
					"	val toto : int",
					"	new(a : int) {",
					"		this.toto = a",
					"	}",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public final int titi = 4;",
					"  ",
					"  public final int toto;",
					"  ",
					"  public E1(final int a) {",
					"    this.toto = a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E1 other = (E1) obj;",
					"    if (other.titi != this.titi)",
					"      return false;",
					"    if (other.toto != this.toto)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.titi);",
					"    result = prime * result + Integer.hashCode(this.toto);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"titi\", this.titi);", 
					"    builder.add(\"toto\", this.toto);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 598944340L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Without modifier")
		public void eventmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public modifier")
		public void eventmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"public event E1<T1, T2 extends Number, T3 extends Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With abstract modifier")
		public void eventmodifier_abstract() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"abstract event E1<T1, T2 extends Number, T3 extends Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public abstract class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package modifier")
		public void eventmodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"package event E1<T1, T2 extends Number, T3 extends Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With final modifier")
		public void eventmodifier_final() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"final event E1<T1, T2 extends Number, T3 extends Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public final class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E1(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588368462L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("Without field modifier")
		public void fieldmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E1 other = (E1) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 685900599L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With public field modifier")
		public void fieldmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	public var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E1 other = (E1) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 685900599L;",
					"}",
					""));
		}

		@Test
		@DisplayName("Without constructor modifier")
		public void constructormodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public E1() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588370691L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public constructor modifier")
		public void constructormodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	public new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public E1() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588370691L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With private constructor modifier")
		public void constructormodifier_private() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	private new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  private E1() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588370691L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package constructor modifier")
		public void constructormodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	package new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  E1() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588370691L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With protected constructor modifier")
		public void constructormodifier_protected() throws Exception {
			getCompileHelper().assertCompilesTo(
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"	protected new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  protected E1() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 588370691L;",
					"}",
					""));
		}

	}

	@DisplayName("Same super generic prototype")
	@Nested
	public class SameGenericEventInheritance extends AbstractSarlTest {

		@Test
		@DisplayName("Empty event with block")
		public void basicCompile_withBlock() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> { }");
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("Empty event without block")
		public void basicCompile_withoutBlock() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>");
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("With string field")
		public void withVarAttributesCompile() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  var name : String",
					"}");
			String expected = multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import java.util.Objects;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  public String name;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final String name) {",
					"    super();",
					"    this.name = name;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (!Objects.equals(this.name, other.name))",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Objects.hashCode(this.name);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"name\", this.name);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 1699455037L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("With constructor")
		public void noStaticField() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"	val titi : int = 4",
					"	val toto : int",
					"	new(a : int) {",
					"		this.toto = a",
					"	}",
					"}");
			String expected = multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  public final int titi = 4;",
					"  ",
					"  public final int toto;",
					"  ",
					"  public E2(final int a) {",
					"    this.toto = a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.titi != this.titi)",
					"      return false;",
					"    if (other.toto != this.toto)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.titi);",
					"    result = prime * result + Integer.hashCode(this.toto);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"titi\", this.titi);", 
					"    builder.add(\"toto\", this.toto);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 511397715L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}

		@Test
		@DisplayName("Without modifier")
		public void eventmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
						"event E1<T1, T2 extends Number, T3 extends Double> { }",
						"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>"),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public modifier")
		public void eventmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"public event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With abstract modifier")
		public void eventmodifier_abstract() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"abstract event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public abstract class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package modifier")
		public void eventmodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"package event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With final modifier")
		public void eventmodifier_final() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"final event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public final class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500821837L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("Without field modifier")
		public void fieldmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 598353974L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With public field modifier")
		public void fieldmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	public var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 598353974L;",
					"}",
					""));
		}

		@Test
		@DisplayName("Without constructor modifier")
		public void constructormodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  public E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500824066L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public constructor modifier")
		public void constructormodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	public new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  public E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500824066L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With private constructor modifier")
		public void constructormodifier_private() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	private new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  private E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500824066L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package constructor modifier")
		public void constructormodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	package new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500824066L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With protected constructor modifier")
		public void constructormodifier_protected() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T1, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3>{",
					"	protected new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T1 extends Object, T2 extends Number, T3 extends Double> extends E1<T1, T2, T3> {",
					"  protected E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 500824066L;",
					"}",
					""));
		}

	}

	@DisplayName("Fixed super generic prototype")
	@Nested
	public class FixedGenericEventInheritance extends AbstractSarlTest {

		@Test
		@DisplayName("Empty event with block")
		public void basicCompile_withBlock() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> { }");
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("Empty event without block")
		public void basicCompile_withoutBlock() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double>");
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("With string field")
		public void withVarAttributesCompile() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"  var name : String",
					"}");
			String expected = multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import java.util.Objects;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  public String name;",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final String name) {",
					"    super();",
					"    this.name = name;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (!Objects.equals(this.name, other.name))",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Objects.hashCode(this.name);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"name\", this.name);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -851384393L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("With constructor")
		public void noStaticField() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	val titi : int = 4",
					"	val toto : int",
					"	new(a : int) {",
					"		this.toto = a",
					"	}",
					"}");
			String expected = multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  public final int titi = 4;",
					"  ",
					"  public final int toto;",
					"  ",
					"  public E2(final int a) {",
					"    this.toto = a;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.titi != this.titi)",
					"      return false;",
					"    if (other.toto != this.toto)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.titi);",
					"    result = prime * result + Integer.hashCode(this.toto);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"titi\", this.titi);", 
					"    builder.add(\"toto\", this.toto);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2039441715L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}

		@Test
		@DisplayName("Without modifier")
		public void eventmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
						"event E1<T1, T2 extends Number, T3 extends Double> { }",
						"event E2 extends E1<String, Float, Double>"),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public modifier")
		public void eventmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"public event E2 extends E1<String, Float, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With abstract modifier")
		public void eventmodifier_abstract() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"abstract event E2 extends E1<String, Float, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public abstract class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package modifier")
		public void eventmodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"package event E2 extends E1<String, Float, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With final modifier")
		public void eventmodifier_final() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"final event E2 extends E1<String, Float, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public final class E2 extends E1<String, Float, Double> {",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050017593L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("Without field modifier")
		public void fieldmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1952485456L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With public field modifier")
		public void fieldmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	public var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1952485456L;",
					"}",
					""));
		}

		@Test
		@DisplayName("Without constructor modifier")
		public void constructormodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  public E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050015364L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public constructor modifier")
		public void constructormodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	public new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  public E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050015364L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With private constructor modifier")
		public void constructormodifier_private() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	private new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  private E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050015364L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package constructor modifier")
		public void constructormodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	package new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050015364L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With protected constructor modifier")
		public void constructormodifier_protected() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2 extends E1<String, Float, Double> {",
					"	protected new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2 extends E1<String, Float, Double> {",
					"  protected E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2050015364L;",
					"}",
					""));
		}

	}

	@DisplayName("Limited super generic prototype")
	@Nested
	public class LimitedGenericEventInheritance extends AbstractSarlTest {

		@Test
		@DisplayName("Empty event with block")
		public void basicCompile_withBlock() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> { }");
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("Empty event without block")
		public void basicCompile_withoutBlock() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double>");
			String expected = multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("With string field")
		public void withVarAttributesCompile() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  var name : String",
					"}");
			String expected = multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import java.util.Objects;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  public String name;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final String name) {",
					"    super();",
					"    this.name = name;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (!Objects.equals(this.name, other.name))",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Objects.hashCode(this.name);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"name\", this.name);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = 711013743L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}
	
		@Test
		@DisplayName("With constructor")
		public void noStaticField() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	val titi : int = 4",
					"	val toto : int",
					"	new(a : int) {",
					"		this.toto = a",
					"	}",
					"}");
			String expected = multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  public final int titi = 4;",
					"  ",
					"  public final int toto;",
					"  ",
					"  public E2(final int a) {",
					"    this.toto = a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.titi != this.titi)",
					"      return false;",
					"    if (other.toto != this.toto)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.titi);",
					"    result = prime * result + Integer.hashCode(this.toto);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"titi\", this.titi);", 
					"    builder.add(\"toto\", this.toto);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -477043579L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("E2", source, expected);
		}

		@Test
		@DisplayName("Without modifier")
		public void eventmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
						"event E1<T1, T2 extends Number, T3 extends Double> { }",
						"event E2<T2 extends Number> extends E1<String, T2, Double>"),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public modifier")
		public void eventmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"public event E2<T2 extends Number> extends E1<String, T2, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With abstract modifier")
		public void eventmodifier_abstract() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"abstract event E2<T2 extends Number> extends E1<String, T2, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public abstract class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package modifier")
		public void eventmodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"package event E2<T2 extends Number> extends E1<String, T2, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With final modifier")
		public void eventmodifier_final() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"final event E2<T2 extends Number> extends E1<String, T2, Double>"
				),
				multilineString(
					"import io.sarl.lang.core.Address;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public final class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  public E2(final Address arg0) {",
					"    super(arg0);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487619457L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("Without field modifier")
		public void fieldmodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -390087320L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With public field modifier")
		public void fieldmodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	public var field : int",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  public int field;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E2(final int field) {",
					"    super();",
					"    this.field = field;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    if (this == obj)",
					"      return true;",
					"    if (obj == null)",
					"      return false;",
					"    if (getClass() != obj.getClass())",
					"      return false;",
					"    E2 other = (E2) obj;",
					"    if (other.field != this.field)",
					"      return false;",
					"    return super.equals(obj);",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    final int prime = 31;",
					"    result = prime * result + Integer.hashCode(this.field);",
					"    return result;",
					"  }",
					"  ",
					"  /**",
					"   * Returns a String representation of the E2 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field\", this.field);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -390087320L;",
					"}",
					""));
		}

		@Test
		@DisplayName("Without constructor modifier")
		public void constructormodifier_none() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  public E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487617228L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With public constructor modifier")
		public void constructormodifier_public() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	public new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  public E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487617228L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With private constructor modifier")
		public void constructormodifier_private() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	private new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  private E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487617228L;",
					"}",
					""));
		}
	
		@Test
		@DisplayName("With package constructor modifier")
		public void constructormodifier_package() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	package new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487617228L;",
					"}",
					""));
		}

		@Test
		@DisplayName("With protected constructor modifier")
		public void constructormodifier_protected() throws Exception {
			getCompileHelper().assertCompilesTo("E2", 
				multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> { }",
					"event E2<T2 extends Number> extends E1<String, T2, Double> {",
					"	protected new { super(null) }",
					"}"
				),
				multilineString(
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E2<T2 extends Number> extends E1<String, T2, Double> {",
					"  protected E2() {",
					"    super(null);",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E2<?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 1) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -487617228L;",
					"}",
					""));
		}

	}

	@DisplayName("Event with generic-type fields")
	@Nested
	public class GenericTypeFieldEvent extends AbstractSarlTest {

		@Test
		@DisplayName("Field T1")
		public void singleField1() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field1 : T1",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T1 field1;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field1 != null && !bounds[0].isInstance(it.field1))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1) {",
					"    super();",
					"    this.field1 = field1;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field1\", this.field1);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -686337246L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Field T2")
		public void singleField2() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field2 : T2",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T2 field2;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field2 != null && !bounds[1].isInstance(it.field2))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2) {",
					"    super();",
					"    this.field2 = field2;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field2\", this.field2);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -686337244L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Field T3")
		public void singleField3() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field3 : T3",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T3 field3;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field3 != null && !bounds[2].isInstance(it.field3))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T3 field3) {",
					"    super();",
					"    this.field3 = field3;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field3\", this.field3);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -686337242L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T1 T2")
		public void twoField1() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field1 : T1",
					"  var field2 : T2",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T1 field1;",
					"  ",
					"  public T2 field2;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field1 != null && !bounds[0].isInstance(it.field1))) {",
					"        return false;",
					"      }",
					"      if ((it.field2 != null && !bounds[1].isInstance(it.field2))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2) {",
					"    super();",
					"    this.field2 = field2;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1) {",
					"    super();",
					"    this.field1 = field1;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1, final T2 field2) {",
					"    super();",
					"    this.field1 = field1;",
					"    this.field2 = field2;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field1\", this.field1);",
					"    builder.add(\"field2\", this.field2);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1961042952L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T1 T3")
		public void twoField2() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field1 : T1",
					"  var field3 : T3",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T1 field1;",
					"  ",
					"  public T3 field3;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field1 != null && !bounds[0].isInstance(it.field1))) {",
					"        return false;",
					"      }",
					"      if ((it.field3 != null && !bounds[2].isInstance(it.field3))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T3 field3) {",
					"    super();",
					"    this.field3 = field3;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1) {",
					"    super();",
					"    this.field1 = field1;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1, final T3 field3) {",
					"    super();",
					"    this.field1 = field1;",
					"    this.field3 = field3;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field1\", this.field1);",
					"    builder.add(\"field3\", this.field3);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1961042950L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T2 T3")
		public void twoField3() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field2 : T2",
					"  var field3 : T3",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T2 field2;",
					"  ",
					"  public T3 field3;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field2 != null && !bounds[1].isInstance(it.field2))) {",
					"        return false;",
					"      }",
					"      if ((it.field3 != null && !bounds[2].isInstance(it.field3))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T3 field3) {",
					"    super();",
					"    this.field3 = field3;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2) {",
					"    super();",
					"    this.field2 = field2;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2, final T3 field3) {",
					"    super();",
					"    this.field2 = field2;",
					"    this.field3 = field3;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field2\", this.field2);",
					"    builder.add(\"field3\", this.field3);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1961042948L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T1 T2 T3")
		public void threeField() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field1 : T1",
					"  var field2 : T2",
					"  var field3 : T3",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T1 field1;",
					"  ",
					"  public T2 field2;",
					"  ",
					"  public T3 field3;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field1 != null && !bounds[0].isInstance(it.field1))) {",
					"        return false;",
					"      }",
					"      if ((it.field2 != null && !bounds[1].isInstance(it.field2))) {",
					"        return false;",
					"      }",
					"      if ((it.field3 != null && !bounds[2].isInstance(it.field3))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T3 field3) {",
					"    super();",
					"    this.field3 = field3;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2) {",
					"    super();",
					"    this.field2 = field2;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1) {",
					"    super();",
					"    this.field1 = field1;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2, final T3 field3) {",
					"    super();",
					"    this.field2 = field2;",
					"    this.field3 = field3;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1, final T3 field3) {",
					"    super();",
					"    this.field1 = field1;",
					"    this.field3 = field3;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1, final T2 field2) {",
					"    super();",
					"    this.field1 = field1;",
					"    this.field2 = field2;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1, final T2 field2, final T3 field3) {",
					"    super();",
					"    this.field1 = field1;",
					"    this.field2 = field2;",
					"    this.field3 = field3;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field1\", this.field1);",
					"    builder.add(\"field2\", this.field2);",
					"    builder.add(\"field3\", this.field3);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -3235748656L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T1 T1")
		public void twoSingleTypeFields1() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field1a : T1",
					"  var field1b : T1",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T1 field1a;",
					"  ",
					"  public T1 field1b;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field1a != null && !bounds[0].isInstance(it.field1a)) || (it.field1b != null && !bounds[0].isInstance(it.field1b))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1a) {",
					"    super();",
					"    this.field1a = field1a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1a, final T1 field1b) {",
					"    super();",
					"    this.field1a = field1a;",
					"    this.field1b = field1b;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field1a\", this.field1a);",
					"    builder.add(\"field1b\", this.field1b);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1134133091L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T2 T2")
		public void twoSingleTypeFields2() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field2a : T2",
					"  var field2b : T2",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T2 field2a;",
					"  ",
					"  public T2 field2b;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field2a != null && !bounds[1].isInstance(it.field2a)) || (it.field2b != null && !bounds[1].isInstance(it.field2b))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2a) {",
					"    super();",
					"    this.field2a = field2a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2a, final T2 field2b) {",
					"    super();",
					"    this.field2a = field2a;",
					"    this.field2b = field2b;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field2a\", this.field2a);",
					"    builder.add(\"field2b\", this.field2b);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1134133027L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T3 T3")
		public void twoSingleTypeFields3() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field3a : T3",
					"  var field3b : T3",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T3 field3a;",
					"  ",
					"  public T3 field3b;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field3a != null && !bounds[2].isInstance(it.field3a)) || (it.field3b != null && !bounds[2].isInstance(it.field3b))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T3 field3a) {",
					"    super();",
					"    this.field3a = field3a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T3 field3a, final T3 field3b) {",
					"    super();",
					"    this.field3a = field3a;",
					"    this.field3b = field3b;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field3a\", this.field3a);",
					"    builder.add(\"field3b\", this.field3b);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -1134132963L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

		@Test
		@DisplayName("Fields T1 T1 T2")
		public void twoSingleTypeFieldsOneField1() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number, T3 extends Double> {",
					"  var field1a : T1",
					"  var field1b : T1",
					"  var field2 : T2",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticEventConstructor;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import org.eclipse.xtext.xbase.lib.Pure;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_EVENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class E1<T1 extends Object, T2 extends Number, T3 extends Double> extends Event {",
					"  public T1 field1a;",
					"  ",
					"  public T1 field1b;",
					"  ",
					"  public T2 field2;",
					"  ",
					"  @SyntheticMember",
					"  @Pure",
					"  public static boolean $matchesTypeBounds(final E1<?, ?, ?> it, final Class<?>... bounds) {",
					"    if (bounds != null && bounds.length == 3) {",
					"      if ((it.field1a != null && !bounds[0].isInstance(it.field1a)) || (it.field1b != null && !bounds[0].isInstance(it.field1b))) {",
					"        return false;",
					"      }",
					"      if ((it.field2 != null && !bounds[1].isInstance(it.field2))) {",
					"        return false;",
					"      }",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1() {",
					"    super();",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T2 field2) {",
					"    super();",
					"    this.field2 = field2;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1a) {",
					"    super();",
					"    this.field1a = field1a;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1a, final T2 field2) {",
					"    super();",
					"    this.field1a = field1a;",
					"    this.field2 = field2;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1a, final T1 field1b) {",
					"    super();",
					"    this.field1a = field1a;",
					"    this.field1b = field1b;",
					"  }",
					"  ",
					"  @SyntheticMember",
					"  @SyntheticEventConstructor",
					"  public E1(final T1 field1a, final T1 field1b, final T2 field2) {",
					"    super();",
					"    this.field1a = field1a;",
					"    this.field1b = field1b;",
					"    this.field2 = field2;",
					"  }",
					"  ",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public boolean equals(final Object obj) {",
					"    return super.equals(obj);",
					"  }",
					"",
					"  @Override",
					"  @Pure",
					"  @SyntheticMember",
					"  public int hashCode() {",
					"    int result = super.hashCode();",
					"    return result;",
					"  }",
					"",
					"  /**",
					"   * Returns a String representation of the E1 event's attributes only.",
					"   */",
					"  @SyntheticMember",
					"  @Pure",
					"  protected void toString(final ToStringBuilder builder) {",
					"    super.toString(builder);",
					"    builder.add(\"field1a\", this.field1a);",
					"    builder.add(\"field1b\", this.field1b);",
					"    builder.add(\"field2\", this.field2);",
					"  }",
					"",
					"  @SyntheticMember",
					"  private static final long serialVersionUID = -2408838797L;",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo(source, expected);
		}

	}

	@DisplayName("Multiple behavior units")
	@Nested
	public class MultipleBehaviorUnits extends AbstractSarlTest {

		@Test
		@DisplayName("Different erasures")
		public void differentErasures1() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number> {",
					"  var field1 : T1",
					"  var field2 : T2",
					"}",
					"agent X {",
					"  on E1<?, ?> { System.^out.println(\"2\") }",
					"  on E1<String, ?> { System.^out.println(\"3\") }",
					"  on E1<Double, ?> { System.^out.println(\"4a\") }",
					"  on E1<Double, ?> { System.^out.println(\"4b\") }",
					"  on E1<?, Double> { System.^out.println(\"5\") }",
					"  on E1<String, Double> { System.^out.println(\"6\") }",
					"  on E1 { System.^out.println(\"1\") }",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Agent;",
					"import io.sarl.lang.core.DynamicSkillProvider;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.PerceptGuardEvaluator;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import jakarta.inject.Inject;",
					"import java.util.Collection;",
					"import java.util.Set;",
					"import java.util.UUID;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_AGENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class X extends Agent {",
					"  private void $behaviorUnit$E1$$Object$$Number$0(final E1<?, ?> occurrence) {",
					"    System.out.println(\"2\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$String$$Number$1(final E1<String, ?> occurrence) {",
					"    System.out.println(\"3\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Double$$Number$2(final E1<Double, ?> occurrence) {",
					"    System.out.println(\"4a\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Double$$Number$3(final E1<Double, ?> occurrence) {",
					"    System.out.println(\"4b\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Object$$Double$4(final E1<?, Double> occurrence) {",
					"    System.out.println(\"5\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$String$$Double$5(final E1<String, Double> occurrence) {",
					"    System.out.println(\"6\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Object$$Number$6(final E1 occurrence) {",
					"    System.out.println(\"1\");",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { Double.class, Number.class })",
					"  private void $guardEvaluator$E1$$Double$$Number(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Double$$Number$2(occurrence));",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Double$$Number$3(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { Object.class, Double.class })",
					"  private void $guardEvaluator$E1$$Object$$Double(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Object$$Double$4(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { Object.class, Number.class })",
					"  private void $guardEvaluator$E1$$Object$$Number(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Object$$Number$0(occurrence));",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Object$$Number$6(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { String.class, Double.class })",
					"  private void $guardEvaluator$E1$$String$$Double(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$String$$Double$5(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { String.class, Number.class })",
					"  private void $guardEvaluator$E1$$String$$Number(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$String$$Number$1(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Override",
					"  public void $getSupportedEvents(final Set<Class<? extends Event>> toBeFilled) {",
					"    super.$getSupportedEvents(toBeFilled);",
					"    toBeFilled.add(E1.class);",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Override",
					"  public boolean $isSupportedEvent(final Class<? extends Event> event) {",
					"    if (E1.class.isAssignableFrom(event)) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Override",
					"  public void $evaluateBehaviorGuards(final Class<?> eventType, final Object event, final Collection<Runnable> callbacks) {",
					"    assert eventType != null;",
					"    assert event != null;",
					"    super.$evaluateBehaviorGuards(eventType, event, callbacks);",
					"    if (E1.class.equals(eventType)) {",
					"      final var occurrence = (E1) event;",
					"      if (E1.$matchesTypeBounds(occurrence, Double.class, Number.class)) {",
					"        $guardEvaluator$E1$$Double$$Number(occurrence, callbacks);",
					"      }",
					"      if (E1.$matchesTypeBounds(occurrence, Object.class, Double.class)) {",
					"        $guardEvaluator$E1$$Object$$Double(occurrence, callbacks);",
					"      }",
					"      $guardEvaluator$E1$$Object$$Number(occurrence, callbacks);",
					"      if (E1.$matchesTypeBounds(occurrence, String.class, Double.class)) {",
					"        $guardEvaluator$E1$$String$$Double(occurrence, callbacks);",
					"      }",
					"      if (E1.$matchesTypeBounds(occurrence, String.class, Number.class)) {",
					"        $guardEvaluator$E1$$String$$Number(occurrence, callbacks);",
					"      }",
					"    }",
					"  }",
					"",
					"  @SyntheticMember",
					"  public X(final UUID arg0, final UUID arg1) {",
					"    super(arg0, arg1);",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Inject",
					"  public X(final UUID arg0, final UUID arg1, final DynamicSkillProvider arg2) {",
					"    super(arg0, arg1, arg2);",
					"  }",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("X", source, expected);
		}

		@Test
		@DisplayName("Different erasures with multiple events")
		public void differentErasures2() throws Exception {
			String source = multilineString(
					"event E1<T1, T2 extends Number> {",
					"  var field1 : T1",
					"  var field2 : T2",
					"}",
					"event E2<T3> {",
					"  var field3 : T3",
					"}",
					"event E3",
					"agent X {",
					"  on E1<?, ?> { System.^out.println(\"2\") }",
					"  on E2<?> { System.^out.println(\"7\") }",
					"  on E1<String, ?> { System.^out.println(\"3\") }",
					"  on E1<Double, ?> { System.^out.println(\"4a\") }",
					"  on E2<String> { System.^out.println(\"8\") }",
					"  on E1<Double, ?> { System.^out.println(\"4b\") }",
					"  on E1<?, Double> { System.^out.println(\"5\") }",
					"  on E3 { System.^out.println(\"9\") }",
					"  on E1<String, Double> { System.^out.println(\"6\") }",
					"  on E1 { System.^out.println(\"1\") }",
					"}"
					);
			String expected = multilineString(
					"import io.sarl.lang.core.Agent;",
					"import io.sarl.lang.core.DynamicSkillProvider;",
					"import io.sarl.lang.core.Event;",
					"import io.sarl.lang.core.annotation.PerceptGuardEvaluator;",
					"import io.sarl.lang.core.annotation.SarlElementType;",
					"import io.sarl.lang.core.annotation.SarlSpecification;",
					"import io.sarl.lang.core.annotation.SyntheticMember;",
					"import jakarta.inject.Inject;",
					"import java.util.Collection;",
					"import java.util.Set;",
					"import java.util.UUID;",
					"import org.eclipse.xtext.xbase.lib.XbaseGenerated;",
					"",
					"@SarlSpecification(\"" + SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING + "\")",
					"@SarlElementType(" + SarlPackage.SARL_AGENT + ")",
					"@XbaseGenerated",
					"@SuppressWarnings(\"all\")",
					"public class X extends Agent {",
					"  private void $behaviorUnit$E1$$Object$$Number$0(final E1<?, ?> occurrence) {",
					"    System.out.println(\"2\");",
					"  }",
					"",
					"  private void $behaviorUnit$E2$$Object$1(final E2<?> occurrence) {",
					"    System.out.println(\"7\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$String$$Number$2(final E1<String, ?> occurrence) {",
					"    System.out.println(\"3\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Double$$Number$3(final E1<Double, ?> occurrence) {",
					"    System.out.println(\"4a\");",
					"  }",
					"",
					"  private void $behaviorUnit$E2$$String$4(final E2<String> occurrence) {",
					"    System.out.println(\"8\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Double$$Number$5(final E1<Double, ?> occurrence) {",
					"    System.out.println(\"4b\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Object$$Double$6(final E1<?, Double> occurrence) {",
					"    System.out.println(\"5\");",
					"  }",
					"",
					"  private void $behaviorUnit$E3$7(final E3 occurrence) {",
					"    System.out.println(\"9\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$String$$Double$8(final E1<String, Double> occurrence) {",
					"    System.out.println(\"6\");",
					"  }",
					"",
					"  private void $behaviorUnit$E1$$Object$$Number$9(final E1 occurrence) {",
					"    System.out.println(\"1\");",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { Double.class, Number.class })",
					"  private void $guardEvaluator$E1$$Double$$Number(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Double$$Number$3(occurrence));",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Double$$Number$5(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { Object.class, Double.class })",
					"  private void $guardEvaluator$E1$$Object$$Double(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Object$$Double$6(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { Object.class, Number.class })",
					"  private void $guardEvaluator$E1$$Object$$Number(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Object$$Number$0(occurrence));",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$Object$$Number$9(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { String.class, Double.class })",
					"  private void $guardEvaluator$E1$$String$$Double(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$String$$Double$8(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = { String.class, Number.class })",
					"  private void $guardEvaluator$E1$$String$$Number(final E1 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E1$$String$$Number$2(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = Object.class)",
					"  private void $guardEvaluator$E2$$Object(final E2 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E2$$Object$1(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator(typeParameters = String.class)",
					"  private void $guardEvaluator$E2$$String(final E2 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E2$$String$4(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @PerceptGuardEvaluator",
					"  private void $guardEvaluator$E3(final E3 occurrence, final Collection<Runnable> ___SARLlocal_runnableCollection) {",
					"    assert occurrence != null;",
					"    assert ___SARLlocal_runnableCollection != null;",
					"    ___SARLlocal_runnableCollection.add(() -> $behaviorUnit$E3$7(occurrence));",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Override",
					"  public void $getSupportedEvents(final Set<Class<? extends Event>> toBeFilled) {",
					"    super.$getSupportedEvents(toBeFilled);",
					"    toBeFilled.add(E1.class);",
					"    toBeFilled.add(E2.class);",
					"    toBeFilled.add(E3.class);",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Override",
					"  public boolean $isSupportedEvent(final Class<? extends Event> event) {",
					"    if (E1.class.isAssignableFrom(event)) {",
					"      return true;",
					"    }",
					"    if (E2.class.isAssignableFrom(event)) {",
					"      return true;",
					"    }",
					"    if (E3.class.isAssignableFrom(event)) {",
					"      return true;",
					"    }",
					"    return false;",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Override",
					"  public void $evaluateBehaviorGuards(final Class<?> eventType, final Object event, final Collection<Runnable> callbacks) {",
					"    assert eventType != null;",
					"    assert event != null;",
					"    super.$evaluateBehaviorGuards(eventType, event, callbacks);",
					"    if (E1.class.equals(eventType)) {",
					"      final var occurrence = (E1) event;",
					"      if (E1.$matchesTypeBounds(occurrence, Double.class, Number.class)) {",
					"        $guardEvaluator$E1$$Double$$Number(occurrence, callbacks);",
					"      }",
					"      if (E1.$matchesTypeBounds(occurrence, Object.class, Double.class)) {",
					"        $guardEvaluator$E1$$Object$$Double(occurrence, callbacks);",
					"      }",
					"      $guardEvaluator$E1$$Object$$Number(occurrence, callbacks);",
					"      if (E1.$matchesTypeBounds(occurrence, String.class, Double.class)) {",
					"        $guardEvaluator$E1$$String$$Double(occurrence, callbacks);",
					"      }",
					"      if (E1.$matchesTypeBounds(occurrence, String.class, Number.class)) {",
					"        $guardEvaluator$E1$$String$$Number(occurrence, callbacks);",
					"      }",
					"    }",
					"    if (E2.class.equals(eventType)) {",
					"      final var occurrence = (E2) event;",
					"      $guardEvaluator$E2$$Object(occurrence, callbacks);",
					"      if (E2.$matchesTypeBounds(occurrence, String.class)) {",
					"        $guardEvaluator$E2$$String(occurrence, callbacks);",
					"      }",
					"    }",
					"    if (E3.class.equals(eventType)) {",
					"      final var occurrence = (E3) event;",
					"      $guardEvaluator$E3(occurrence, callbacks);",
					"    }",
					"  }",
					"",
					"  @SyntheticMember",
					"  public X(final UUID arg0, final UUID arg1) {",
					"    super(arg0, arg1);",
					"  }",
					"",
					"  @SyntheticMember",
					"  @Inject",
					"  public X(final UUID arg0, final UUID arg1, final DynamicSkillProvider arg2) {",
					"    super(arg0, arg1, arg2);",
					"  }",
					"}",
					""
					);
			getCompileHelper().assertCompilesTo("X", source, expected);
		}

	}

}
