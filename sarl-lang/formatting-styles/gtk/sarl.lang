<?xml version="1.0" encoding="UTF-8"?>
<!--

	  $Id$

	  File is automatically generated by the Xtext language generator.
	  Do not change it.

	  SARL is an general-purpose agent programming language.
	  More details on http://www.sarl.io

	  Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.

	  Licensed under the Apache License, Version 2.0 (the "License");
	  you may not use this file except in compliance with the License.
	  You may obtain a copy of the License at

	       http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	  distributed under the License is distributed on an "AS IS" BASIS,
	  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	  See the License for the specific language governing permissions and
	  limitations under the License.

-->
<!-- Style for SARL 0.15 -->

<language id="sarl" _name="SARL" version="2.0" _section="Source">
 <metadata>
  <property name="mimetypes">text/x-sarl</property>
  <property name="globs">*.sarl;*.SARL;*.Sarl</property>
  <property name="line-comment-start">//</property>
  <property name="block-comment-start">/*</property>
  <property name="block-comment-end">*/</property>
 </metadata>
 <styles>
  <style id="comment" _name="Comment" map-to="def:comment" />
  <style id="error" _name="Error" map-to="def:error" />
  <style id="escaped-character" _name="Escaped Character" map-to="def:special-char" />
  <style id="string" _name="String" map-to="def:string" />
  <style id="keyword" _name="Keyword" map-to="def:keyword" />
  <style id="literal" _name="Literal" map-to="def:special-constant" />
  <style id="number" _name="Number" map-to="def:number" />
  <style id="operator" _name="Operator" map-to="def:operator" />
  <style id="identifier" _name="Identifier" map-to="def:text" />
  <style id="annotation" _name="Annotation" map-to="def:preprocessor" />
 </styles>
 <definitions>
  <define-regex id="escaped-character" extended="true">	
   	\\(               # leading backslash
   	[\\\"\'nrbtf] |   # escaped character
   	[0-9]{1,3}    |   # latin encoded char
   	u[0-9]{1,4}       # unicode char
   	)
  </define-regex>
  <define-regex id="hex-number">0[xX][0-9a-fA-F_]+(#(([bB][iI])|([lL])))?</define-regex>
  <define-regex id="int-number">[0-9][0-9_]*</define-regex>
  <define-regex id="decimal-number">\%{int-number}([eE][+\-]?\%{int-number})?(([bB][iIdD])|([lLdDfF]))?</define-regex>
  <define-regex id="sarl-number">(\%{hex-number})|(\%{decimal-number}(\.\%{decimal-number})?)</define-regex>
  <define-regex id="sarl-identifier">\^?[a-zA-Z_$][a-zA-Z_$0-9]*</define-regex>
  <context id="qq-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
   <start>"</start>
   <end>"</end>
   <include>
    <context id="qq-string-escaped-character" style-ref="escaped-character">
     <match>\%{escaped-character}</match>
    </context>
    
   </include>
   
  </context>
  <context id="q-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
   <start>'</start>
   <end>'</end>
   <include>
    <context id="q-string-escaped-character" style-ref="escaped-character">
     <match>\%{escaped-character}</match>
    </context>
    
   </include>
   
  </context>
  <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
   <start>//</start>
   <include>
    <context ref="def:in-line-comment" />
   </include>
   
  </context>
  <context id="block-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
   <start>/\*</start>
   <end>\*/</end>
   <include>
    <context ref="def:in-comment" />
   </include>
   
  </context>
  <context id="close-comment-outside-comment" style-ref="error">
   <match>\*/(?!\*)</match>
  </context>
  <context id="sarl-keywords" style-ref="keyword">
   <keyword>abstract</keyword>
   <keyword>agent</keyword>
   <keyword>annotation</keyword>
   <keyword>artifact</keyword>
   <keyword>as</keyword>
   <keyword>assert</keyword>
   <keyword>assume</keyword>
   <keyword>behavior</keyword>
   <keyword>boolean</keyword>
   <keyword>break</keyword>
   <keyword>byte</keyword>
   <keyword>capacity</keyword>
   <keyword>case</keyword>
   <keyword>catch</keyword>
   <keyword>char</keyword>
   <keyword>class</keyword>
   <keyword>continue</keyword>
   <keyword>def</keyword>
   <keyword>default</keyword>
   <keyword>dispatch</keyword>
   <keyword>do</keyword>
   <keyword>double</keyword>
   <keyword>else</keyword>
   <keyword>enum</keyword>
   <keyword>event</keyword>
   <keyword>extends</keyword>
   <keyword>extension</keyword>
   <keyword>final</keyword>
   <keyword>finally</keyword>
   <keyword>fires</keyword>
   <keyword>float</keyword>
   <keyword>for</keyword>
   <keyword>if</keyword>
   <keyword>implements</keyword>
   <keyword>import</keyword>
   <keyword>instanceof</keyword>
   <keyword>int</keyword>
   <keyword>interface</keyword>
   <keyword>long</keyword>
   <keyword>native</keyword>
   <keyword>new</keyword>
   <keyword>on</keyword>
   <keyword>override</keyword>
   <keyword>package</keyword>
   <keyword>private</keyword>
   <keyword>protected</keyword>
   <keyword>public</keyword>
   <keyword>requires</keyword>
   <keyword>return</keyword>
   <keyword>short</keyword>
   <keyword>skill</keyword>
   <keyword>space</keyword>
   <keyword>static</keyword>
   <keyword>strictfp</keyword>
   <keyword>super</keyword>
   <keyword>switch</keyword>
   <keyword>synchronized</keyword>
   <keyword>throw</keyword>
   <keyword>throws</keyword>
   <keyword>transient</keyword>
   <keyword>try</keyword>
   <keyword>typeof</keyword>
   <keyword>uses</keyword>
   <keyword>val</keyword>
   <keyword>var</keyword>
   <keyword>void</keyword>
   <keyword>volatile</keyword>
   <keyword>while</keyword>
   <keyword>with</keyword>
  </context>
  <context id="sarl-literals" style-ref="literal">
   <keyword>false</keyword>
   <keyword>it</keyword>
   <keyword>null</keyword>
   <keyword>occurrence</keyword>
   <keyword>this</keyword>
   <keyword>true</keyword>
   <keyword>void</keyword>
  </context>
  <context id="annotations" style-ref="annotation">
   <match>\@\%{sarl-identifier}(\.\%{sarl-identifier})*</match>
  </context>
  <context id="identifiers" style-ref="identifier">
   <match>\%{sarl-identifier}</match>
  </context>
  <context id="numeric" style-ref="number">
   <match>\%{sarl-number}</match>
  </context>
  <context id="operators" style-ref="operator" extend-parent="false">
   <match>(!)|(!=)|(!==)|(#)|(%)|(%=)|(&amp;)|(&amp;&amp;)|(\\()|(\\))|(\\*)|(\\*\\*)|(\\*/)|(\\*=)|(\\+)|(\\+\\+)|(\\+=)|(,)|(-)|(--)|(-=)|(-&gt;)|(\\.)|(\\.\\.)|(\\.\\.\\.)|(\\.\\.&lt;)|(/)|(/\\*)|(//)|(/=)|(:)|(::)|(;)|(&lt;)|(&lt;&gt;)|(=)|(==)|(===)|(=&gt;)|(&gt;)|(&gt;=)|(\\?)|(\\?\\.)|(\\?:)|(@)|(\\[)|(\\\)|(\\])|(\\^)|(\\{)|(\\|)|(\\|\\|)|(\\})</match>
  </context>
  <context id="invalid-operators" style-ref="error">
   <match>[!#%&amp;\\(\\)\\*\\+,-\\./:;&lt;=&gt;\\?@\\[\\\\\]\\^\\{\\|\\}]+</match>
  </context>
  <context id="sarl" class="no-spell-check">
   <include>
    <context ref="qq-string" />
    <context ref="q-string" />
    <context ref="line-comment" />
    <context ref="block-comment" />
    <context ref="close-comment-outside-comment" />
    <context ref="sarl-keywords" />
    <context ref="sarl-literals" />
    <context ref="annotations" />
    <context ref="identifiers" />
    <context ref="numeric" />
    <context ref="operators" />
   </include>
   
  </context>
  
 </definitions>
 
</language>
