# -*- coding: utf-8 -*-
#
# $Id$
#
# File is automatically generated by the Xtext language generator.
# Do not change it.
#
# SARL is an general-purpose agent programming language.
# More details on http://www.sarl.io
#
# Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Style for SARL 0.15


import re

from pygments.lexer import Lexer, RegexLexer, include, bygroups, using, this
from pygments.token import Text, Comment, Operator, Keyword, Name, String, Number, Punctuation

class SarlLexer(RegexLexer):
	"""
	For `SARL <http://www.sarl.io>`_ source code.
	
	.. versionadded:: 0.15
	"""
	
	name = 'SARL'
	aliases = ['sarl']
	filenames = ['*.sarl','*.SARL','*.Sarl']
	mimetypes = ['text/x-sarl']
	
	flags = re.MULTILINE | re.DOTALL
	
	tokens = {
		'root': [
			# method names
			(r'^(\s*(?:[a-zA-Z_][\w.\[\]]*\s+)+?)'  # return arguments
			 r'([a-zA-Z_$][\w$]*)'                      # method name
			 r'(\s*)(\()',                             # signature start
			 bygroups(using(this), Name.Function, Text, Operator)),
			(r'[^\S\n]+', Text),
			(r'//.*?\n', Comment.Single),
			(r'/\*.*?\*/', Comment.Multiline),
			(r'@[a-zA-Z_][\w.]*', Name.Decorator),
			(r'(as|assert|assume|break|case|catch|continue|default|do|else|extends|finally|fires|for|if|implements|instanceof|new|on|requires|return|super|switch|throw|throws|try|typeof|uses|while|with)\b',
			 Keyword),
			(r'(abstract|def|dispatch|extension|final|native|override|private|protected|public|static|strictfp|synchronized|transient|val|var|volatile)\b', Keyword.Declaration),
			 (r'(boolean|byte|char|double|float|int|long|short|void)\b',
			  Keyword.Type),
			 (r'(package)(\s+)', bygroups(Keyword.Namespace, Text)),
			 (r'(false|it|null|occurrence|this|true|void)\b', Keyword.Constant),
			 (r'(agent|annotation|artifact|behavior|capacity|class|enum|event|interface|skill|space)(\s+)', bygroups(Keyword.Declaration, Text),
			  'class'),
			 (r'(import)(\s+)', bygroups(Keyword.Namespace, Text), 'import'),
			 (r'"(\\\\|\\"|[^"])*"', String),
			 (r"'(\\\\|\\'|[^'])*'", String),
			 (r'[a-zA-Z_]\w*:', Name.Label),
			 (r'[a-zA-Z_$]\w*', Name),
			 (r'[~^*!%&\[\](){}<>\|+=:;,./?-]', Operator),
			 (r'[0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fFdD]?', Number.Float),
			 (r'0[xX][0-9a-fA-F]+', Number.Hex),
			 (r'[0-9]+[lL]?', Number.Integer),
			 (r'\n', Text)
		],
		'class': [
			(r'[a-zA-Z_]\w*', Name.Class, '#pop')
		],
		'import': [
			(r'[\w.]+\*?', Name.Namespace, '#pop')
		],
	}

