/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 */
module io.sarl.lang.GenerateSARL2

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.xtext.generator.ui.codemining.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*
import org.eclipse.xtext.resource.XtextResourceSet 

import io.sarl.lang.mwe2.* 
import io.sarl.lang.mwe2.binding.* 
import io.sarl.lang.mwe2.externalspec.* 
import io.sarl.lang.mwe2.externalspec.prettify.* 
import io.sarl.lang.mwe2.externalspec.latex.* 
import io.sarl.lang.mwe2.externalspec.gtk.* 
import io.sarl.lang.mwe2.externalspec.gnusrchighlight.* 
import io.sarl.lang.mwe2.externalspec.pygments.* 
import io.sarl.lang.mwe2.externalspec.textmate.* 
import io.sarl.lang.mwe2.externalspec.vim.* 
import io.sarl.lang.mwe2.codebuilder.* 
import io.sarl.lang.mwe2.codebuilder.config.* 
import io.sarl.lang.mwe2.keywords.* 
import io.sarl.lang.mwe2.bugfixes.unpublished.* 
import io.sarl.lang.mwe2.typesystem.* 


// Path to the folder that contains all the Xtext project to be updated by MWE2 script, excluding the UI projects
var rootPathForAllXtextProjects = ".."
// Path to the folder that contains all the Xtext UI project to be updated by MWE2 script
var rootPathForAllUiXtextProjects = "${rootPathForAllXtextProjects}/../sarl-eclipse"

// Project that contains the SARL compiler
var compilerProjectName = "compiler"
var compilerProjectPath = "${rootPathForAllXtextProjects}/${compilerProjectName}"

// Project for testing the SARL compiler
var compilerTestProjectName = "compiler.tests"
var compilerTestProjectPath = "${rootPathForAllXtextProjects}/${compilerTestProjectName}"
var compilerTestProjectSrcGenPath = "${compilerTestProjectPath}/src/main/generated-sources/java"

// Project for the UI that is independent of the framework, i.e., Eclipse and IntelliJ
var genericIdeProjectName = "io.sarl.lang.ide"
var genericIdeProjectPath = "${rootPathForAllUiXtextProjects}/plugins/${genericIdeProjectName}"
var genericIdeProjectMetaInfPath = "${genericIdeProjectPath}/META-INF"
var genericIdeProjectSrcPath = "${genericIdeProjectPath}/src"
var genericIdeProjectSrcGenPath = "${genericIdeProjectPath}/src-gen"

// Project for the UI that is dedicated to the Eclipse framework
var eclipseIdeProjectName = "io.sarl.lang.ui"
var eclipseIdeProjectPath = "${rootPathForAllUiXtextProjects}/plugins/${eclipseIdeProjectName}"
var eclipseIdeProjectMetaInfPath = "${eclipseIdeProjectPath}/META-INF"
var eclipseIdeProjectSrcPath = "${eclipseIdeProjectPath}/src"
var eclipseIdeProjectSrcGenPath = "${eclipseIdeProjectPath}/src-gen"

// Project for the UI tests
var eclipseIdeTestProjectName = "io.sarl.lang.ui.tests"
var eclipseIdeTestProjectPath = "${rootPathForAllUiXtextProjects}/tests/${eclipseIdeTestProjectName}"
var eclipseIdeTestProjectMetaInfPath = "${eclipseIdeTestProjectPath}/META-INF"
var eclipseIdeTestProjectSrcPath = "${eclipseIdeTestProjectPath}/src"
var eclipseIdeTestProjectSrcGenPath = "${eclipseIdeTestProjectPath}/src-gen"

// External syntax formatters
var externalToolPath = "${rootPathForAllXtextProjects}/formatting-styles"
var prettifyToolPath = "${externalToolPath}/prettify"
var latexToolPath = "${externalToolPath}/latex"
var gtkToolPath = "${externalToolPath}/gtk"
var srchighlightToolPath  = "${externalToolPath}/source-highlight"
var pygmentsToolPath  = "${externalToolPath}/pygments/sarllexer"
var textmateToolPath  = "${externalToolPath}/textmate"
var vimToolPath  = "${externalToolPath}/vim"

// File extension for the SARL scripts, separated by coma characters, in preferred order
var file.extensions = "sarl,SARL,Sarl"

// URL of the SARL website
var languageWebsite = "http://www.sarl.io"

// Encoding of the generated source files
var fileEncoding = "UTF-8"

// Line delimiter in the generated source files
var lineDelimiter = "\n"

// Header in the generated source files
var fileHeader = "/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-\${year} SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
 
Workflow {
  	component = DirectoryCleaner {
		directory = "${compilerProjectPath}/src/main/xtext-gen"
	}
  	component = DirectoryCleaner {
		directory = "${compilerTestProjectPath}/src/main/generated-sources/java"
	}
 	component = DirectoryCleaner {
		directory = "${genericIdeProjectSrcGenPath}"
	}
 	component = DirectoryCleaner {
		directory = "${eclipseIdeProjectSrcGenPath}"
	}
 	component = DirectoryCleaner {
		directory = "${eclipseIdeTestProjectSrcGenPath}"
	}
   	component = DirectoryCleaner {
		directory = "${prettifyToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${latexToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${gtkToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${srchighlightToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${pygmentsToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${textmateToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${vimToolPath}"
	}

 	component = XtextGenerator auto-inject {
		// Generation and configuration module for SARL
 		configuration = SarlGeneratorModule {
			// Project configuration
			project = StandardProjectConfig auto-inject {
				baseName = compilerProjectName
				rootPath = rootPathForAllXtextProjects
				mavenLayout = true
				createEclipseMetaData = true
				runtime = auto-inject {
					enabled = true
					name = compilerProjectName
					metaInf = compilerProjectPath
				}
				runtimeTest = auto-inject {
					enabled = true
					name = compilerTestProjectName
					root = compilerTestProjectPath
					srcGen = compilerTestProjectSrcGenPath
				}
				genericIde = auto-inject {
					enabled = true
					name = genericIdeProjectName
					root = genericIdeProjectPath
					src = genericIdeProjectSrcPath
					srcGen = genericIdeProjectSrcGenPath
					metaInf = genericIdeProjectMetaInfPath
					overwriteSrc = false
				}
				eclipsePlugin = auto-inject {
					enabled = true
					name = eclipseIdeProjectName
					root = eclipseIdeProjectPath
					src = eclipseIdeProjectSrcPath
					srcGen = eclipseIdeProjectSrcGenPath
					metaInf = eclipseIdeProjectMetaInfPath
					overwriteSrc = false
				}
				eclipsePluginTest = auto-inject {
					enabled = true
					name = eclipseIdeTestProjectName
					root = eclipseIdeTestProjectPath
					src = eclipseIdeTestProjectSrcPath
					srcGen = eclipseIdeTestProjectSrcGenPath
					metaInf = eclipseIdeTestProjectMetaInfPath
					overwriteSrc = false
				}
			}
			// Code configuration
			code = auto-inject {
				lineDelimiter = lineDelimiter
				encoding = fileEncoding
				fileHeader = fileHeader
				preferXtendStubs = false
			}
			// EMF Builder configuration
			codeBuilder = auto-inject {
				scriptRuleName = "SarlScript"
				topElementRuleName = "Type"
				formalParameterRuleName = "Parameter"
				indirectlyNamedMemberExtensionGrammarName = "rawArguments"
				indirectlyNamedMemberExtensionGrammarName = "names"
				jvmTypeNamedMemberExtensionGrammarName = "capacities"
				multilineCommentedType = "org.eclipse.xtend.core.xtend.XtendMember"
				constructorFreeType = "SarlCapacity"
				constructorFreeType = "SarlInterface"
				constructorFreeType = "SarlEnum"
				constructorFreeType = "SarlAnnotationType"
				defaultSuper = {
					type = "SarlAgent"
					super = "io.sarl.lang.core.Agent"
				}
				defaultSuper = {
					type = "SarlBehavior"
					super = "io.sarl.lang.core.Behavior"
				}
				defaultSuper = {
					type = "SarlCapacity"
					super = "io.sarl.lang.core.Capacity"
				}
				defaultSuper = {
					type = "SarlEvent"
					super = "io.sarl.lang.core.Event"
				}
				defaultSuper = {
					type = "SarlSkill"
					super = "io.sarl.lang.core.Skill"
				}
				defaultImplementedSuper = {
					type = "SarlSkill"
					super = "io.sarl.lang.core.Capacity"
				}
				defaultSuper = {
					type = "SarlSpace"
					super = "io.sarl.lang.core.Space"
				}
				noActionBodyType = "SarlCapacity"
				noActionBodyType = "SarlEvent"
				noActionBodyType = "SarlAnnotationType"
				noActionBodyType = "SarlInterface"
				modifier = {
					type = "SarlAction"
					modifier = "def"
					modifier = "override"
				}
				modifier = {
					type = "SarlField"
					modifier = "var"
					modifier = "val"
				}
			}
			grammarKeywordAccess = auto-inject {
				dependencyGrammarInheritance = true
				
    			literal = "void"
    			literal = "true"
    			literal = "false"
    			literal = "null"
    			literal = "this"
    			literal = "it"
    			literal = "occurrence"

    			ignoreKeyword = "create"
				ignoreKeyword = 'AFTER'
				ignoreKeyword = 'BEFORE'
				ignoreKeyword = 'ELSE'
				ignoreKeyword = 'ELSEIF'
				ignoreKeyword = 'ENDFOR'
				ignoreKeyword = 'ENDIF'
				ignoreKeyword = 'FOR'
				ignoreKeyword = 'IF'
				ignoreKeyword = 'SEPARATOR'
			}
   			// Shared configuration between the generators of syntax highlighting formats
			highlighting = auto-inject {
    			addNativeTypes = true

				inheritFromGrammarKeywordAccesss = true

				specialKeyword = 'package'
				specialKeyword = 'import'

				typeDeclarationKeyword = 'agent'
				typeDeclarationKeyword = 'behavior'
				typeDeclarationKeyword = 'capacity'
				typeDeclarationKeyword = 'skill'
				typeDeclarationKeyword = 'event'
				typeDeclarationKeyword = 'space'
				typeDeclarationKeyword = 'class'
				typeDeclarationKeyword = 'interface'
				typeDeclarationKeyword = 'enum'
				typeDeclarationKeyword = 'annotation'
				typeDeclarationKeyword = 'artifact'

    			colors = auto-inject {
    				color = auto-inject {
    					name = "SARLblue"
    					rgb = "43,88,121"
    				}
    				color = auto-inject {
    					name = "SARLlightblue"
    					rgb = "0,123,191"
    				}
    				color = auto-inject {
    					name = "SARLlightestblue"
    					rgb = "223,239,247"
    				}
    				color = auto-inject {
    					name = "SARLmagenta"
    					rgb = "153,30,102"
    				}
    				color = auto-inject {
    					name = "SARLlightmagenta"
    					rgb = "204,122,170"
    				}
    				color = auto-inject {
    					name = "SARLlightestmagenta"
    					rgb = "250,240,246"
    				}
    				color = auto-inject {
    					name = "SARLgreen"
    					rgb = "0,128,0"
    				}
    				color = auto-inject {
    					name = "SARLdarkgray"
    					rgb = "99,104,110"
    				}
    				commentColor = "SARLgreen"
    				stringColor = "SARLmagenta"
    				keywordColor = "SARLblue"
    				identifierColor = "SARLdarkgray"
    				lineNumberColor = "SARLblue"
    			}
			}
   			// Configuration for type system tools
			typeSystemTools = auto-inject {
				
			}
		}
		
		// Generator for SARL
		language = StandardLanguage auto-inject {
			// Set of resources
			resourceSet = XtextResourceSet : resourceSet {}
			// SARL depends on the Xtend model
			referencedResource = "platform:/resource/org.eclipse.xtend.core/model/Xtend.genmodel"
			// ID for SARL
			name = "io.sarl.lang.SARL"
			// Pointer to the SARL grammar
			grammarUri = "platform:/resource/${compilerProjectName}/src/main/java/io/sarl/lang/SARL.xtext"
			// Definition of the file extensions for SARL
			fileExtensions = file.extensions
			// Specification of the injection that is used by MWE2 (not by the SARL compiler)
			guiceModule = SarlLanguageGeneratorModule {}

			// Lexer
			parserGenerator = auto-inject {
				removeBacktrackingGuards = true
				lookaheadThreshold = '5'
				partialParsing = true
				debugGrammar = true
				options = auto-inject {
					//backtrack = true
				}
			}
			/*fragment = parser.antlr.XtextAntlrGeneratorComparisonFragment auto-inject {
				registerAdvice = "org::eclipse::xtend::core::parser::AntlrGrammarWithTokens"
				registerAdvice = "org::eclipse::xtend::core::parser::ContentAssistAntlrGrammarWithTokens"
			}*/
			
			// EMF Generator
			emfGenerator = auto-inject {
				// Do not update the build.properties in order to avoid the path "model/generated"
				// within the "bin.includes" definition.
				updateBuildProperties = false
			}

			// SARL Validator
			validator = ValidatorFragment2 auto-inject {
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLNamingValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLTypeValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLMemberValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLFeatureModifierValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLBehaviorUnitValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLFeatureCallsValidator"
    			composedCheck = "org.eclipse.xtend.core.validation.AnnotationValidation"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLSynchronizationValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLInheritanceValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLAnnotationValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLScriptValidator"
    			composedCheck = "io.sarl.lang.validation.subvalidators.SARLDocumentationValidator"
    			composedCheck = "io.sarl.lang.extralanguage.validator.ExtraLanguageValidatorSupport"
			}

			// SARL serializer
			serializer = auto-inject {
				generateStub = false
			}

			// Refactoring
			renameRefactoring = auto-inject {
				useJdtRefactoring = true
			}

    		// Generates the required bindings only if the grammar inherits from Xbase
			xbaseSupport = auto-inject {
				generateXtendInferrer = false
			}

    		// Testing infrastructure
			junitSupport = auto-inject {
				generateStub = false
				generateXtendStub = false
				junitVersion = "5"
			}
			
			// Content assist - Bug fixed for avoiding compilation error due to an
			// invalid qualified name for the XtendProposalProvider
			contentAssist = ContentAssistFragment2 auto-inject {
			}

			// Formatter - this fragment should be explicitly defined otherwise the SARLFormatter is not injected. Bug?
			formatter = auto-inject {	
				generateStub = true	
			}

			// Code mining
			fragment = CodeMiningFragment auto-inject {
				generateStub = true
			}

			// ***********************************
			// Fragments that are specific to SARL
			// ***********************************
			
			// Generate an helpful creator of Ecore elements.
			fragment = CodeBuilderFragment2 auto-inject {
				generateStub = false
			}

			// Generate an helpful accessors to the grammar keywords.
			fragment = GrammarKeywordAccessFragment2 auto-inject {
			}

			// Generate the Google Prettify style
    		fragment = GooglePrettifyGenerator2 auto-inject {
				output = prettifyToolPath
    		}

			// Generate the LaTeX Beamer style
    		fragment = LaTeXBeamerGenerator2 auto-inject {
				output = latexToolPath
    		}

			// Generate the LaTeX algorithmic style with colors
    		fragment = LaTeXListingsGenerator2 auto-inject {
				output = latexToolPath
    			basename = "sarl-colorized-listing.sty"
    		}

			// Generate the LaTeX algorithmic style without colors
    		fragment = LaTeXListingsGenerator2 auto-inject {
				output = latexToolPath
    			enableColors = false
    		}

			// generate the language specification for highlighting in Gedit 	
    		fragment = GtkSourceViewerGenerator2 auto-inject {
				output = gtkToolPath
    		}
    		
			// Generate the GNU src-hightlite style
    		fragment = GnuSrcHighlightGenerator2 auto-inject {
				output = srchighlightToolPath
    		}

			// Generate the Pygments style
    		fragment = PygmentsGenerator2 auto-inject {
				output = pygmentsToolPath
				url = languageWebsite
    		}

			// Generate the TextMate style
    		fragment = TextMateGenerator2 auto-inject {
				output = textmateToolPath
    		}

			// Generate the Vim style
    		fragment = VimGenerator2 auto-inject {
				output = vimToolPath
    		}

			// Generate an helpful accessors to the grammar keywords.
			fragment = TypeSystemToolsFragment2 auto-inject {
			}

    		// SARL specific bindings
    		fragment = InjectionFragment2 auto-inject {
    			comment = "Bindings provided by SARL API"
    			overrideAll = true
    			
    			runtime = {
    				bind = "io.sarl.lang.sarl.actionprototype.IActionPrototypeProvider"
    				to = "io.sarl.lang.sarl.actionprototype.DefaultActionPrototypeProvider"
    				singleton = true
    				eager = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.validation.ConfigurableIssueCodesProvider"
    				to = "io.sarl.lang.validation.StandardSarlConfigurableIssueCodesProvider"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.EarlyExitValidator"
    				to = "io.sarl.lang.validation.SARLEarlyExitValidator"
    			}
    			runtime = {
    				bind = "io.sarl.lang.typesystem.SARLExpressionHelper"
    				to = "io.sarl.lang.typesystem.SARLExpressionHelper"
    			}
    			runtime = {
    				bind = "io.sarl.lang.validation.IFeatureCallValidator"
    				to = "io.sarl.lang.validation.DefaultFeatureCallValidator"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.FeatureNameValidator"
    				to = "io.sarl.lang.validation.SARLFeatureNameValidator"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.formatting2.FormatterPreferenceKeys"
    				to = "io.sarl.lang.formatting2.SARLFormatterPreferenceKeys"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.JvmModelGenerator"
    				to = "io.sarl.lang.compiler.SARLJvmGenerator"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.controlflow.IEarlyExitComputer"
    				to = "io.sarl.lang.controlflow.SARLEarlyExitComputer"
    			}
    			runtime = {
    				bind = "io.sarl.lang.controlflow.ISarlEarlyExitComputer"
    				to = "io.sarl.lang.controlflow.SARLEarlyExitComputer"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.util.ExtendedEarlyExitComputer"
    				to = "io.sarl.lang.controlflow.ExtendedSARLEarlyExitComputer"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer"
    				to = "io.sarl.lang.jvmmodel.SARLJvmModelInferrer"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures"
    				to = "io.sarl.lang.scoping.SARLImplicitlyImportedFeatures"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.jvmmodel.JvmModelAssociator"
    				to = "io.sarl.lang.jvmmodel.SarlJvmModelAssociations$Impl"
    			}
    			runtime = {
    				bind = "io.sarl.lang.sarl.SarlFactory"
    				to = "SarlFactory.eINSTANCE"
    				singleton = true
    				instance = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.util.XExpressionHelper"
    				to = "io.sarl.lang.typesystem.SARLExpressionHelper"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.XbaseCompiler"
    				to = "io.sarl.lang.compiler.SarlCompiler"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.internal.DefaultReentrantTypeResolver"
    				to = "io.sarl.lang.typesystem.SARLReentrantTypeResolver"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer"
    				to = "io.sarl.lang.typesystem.SARLTypeComputer"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.IGeneratorConfigProvider"
    				to = "io.sarl.lang.compiler.SARLGeneratorConfigProvider"
   				}
    			runtime = {
    				bind = "io.sarl.lang.compiler.IGeneratorConfigProvider2"
    				to = "io.sarl.lang.compiler.GeneratorConfigProvider2"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.naming.IQualifiedNameConverter"
    				to = "io.sarl.lang.scoping.SARLQualifiedNameConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.scoping.IScopeProvider"
    				annotatedWithName = "ref org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE"
    				to = "io.sarl.lang.scoping.SARLImportedNamespaceScopeProvider"
    				override = true
    				functionName = "configureIScopeProviderDelegate"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IGenerator"
    				to = "io.sarl.lang.extralanguage.compiler.ExtraLanguageGeneratorSupport"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IGenerator2"
    				annotatedWithName = "ref io.sarl.lang.extralanguage.compiler.ExtraLanguageGeneratorSupport.MAIN_GENERATOR_NAME"
    				to = "io.sarl.lang.compiler.SARLJvmGenerator"
    				functionName = "configureIGenerator2ExtraLanguageMainGenerator"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.ReadAndWriteTracking"
    				to = "io.sarl.lang.jvmmodel.SARLReadAndWriteTracking"
   				}
    			runtime = {
    				bind = "io.sarl.lang.extralanguage.IExtraLanguageContributions"
    				to = "io.sarl.lang.extralanguage.JavaPluginExtraLanguageContributions"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IOutputConfigurationProvider"
    				to = "io.sarl.lang.extralanguage.ContributionBasedOutputConfigurationProvider"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IContextualOutputConfigurationProvider"
    				to = "io.sarl.lang.extralanguage.ContributionBasedOutputConfigurationProvider"
    			}
    			runtime = {
    				bind = "io.sarl.lang.extralanguage.compiler.IExtraLanguageGeneratorProvider"
    				to = "io.sarl.lang.extralanguage.ContributionBasedExtraLanguageGeneratorProvider"
   				}
    			runtime = {
    				bind = "io.sarl.lang.extralanguage.validator.IExtraLanguageValidatorProvider"
    				to = "io.sarl.lang.extralanguage.ContributionBasedExtraLanguageValidatorProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.ActiveAnnotationContextProvider"
    				to = "io.sarl.lang.macro.SarlActiveAnnotationContextProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.ProcessorInstanceForJvmTypeProvider"
    				to = "io.sarl.lang.macro.SarlProcessorInstanceForJvmTypeProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.declaration.CompilationUnitImpl"
    				to = "io.sarl.lang.macro.SarlCompilationUnitProvider"
    				provider = true
    				functionName = "configureCompilationUnitImpl"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.parser.antlr.IPartialParsingHelper"
    				to = "io.sarl.lang.compiler.SarlPartialParserHelper"
    				functionName = "bindIPartialParserHelper"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.parser.antlr.ISyntaxErrorMessageProvider"
    				to = "io.sarl.lang.validation.SARLSyntaxErrorMessageProvider"
    				singleton = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.parser.antlr.SyntaxErrorMessageProvider"
    				to = "io.sarl.lang.validation.SARLSyntaxErrorMessageProvider"
    				singleton = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.JvmTypeReferencesValidator"
    				to = "io.sarl.lang.validation.SARLJvmTypeReferencesValidator"
    				singleton = true
    				eager = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter"
    				to = "io.sarl.lang.interpreter.SarlExpressionInterpreter"
    			}

    			ui = {
    				bind = "io.sarl.lang.extralanguage.IExtraLanguageContributions"
    				to = "io.sarl.lang.ui.extralanguage.ExtensionPointExtraLanguageContributions"
    			}
    			ui = {
    				bind = "org.eclipse.xtend.ide.contentassist.javadoc.XtendJavaDocContentAssistProcessor"
    				to = "io.sarl.lang.ui.contentassist.javadoc.SARLJavaDocContentAssistProcessor"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.generator.IShouldGenerate"
    				to = "org.eclipse.xtext.generator.IShouldGenerate$Always"
    				override = true
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.contentassist.IContentProposalPriorities"
    				to = "io.sarl.lang.ui.contentassist.general.SARLContentProposalPriorities"
    				override = true
    			}
    			ui = {
    				bind = "org.eclipse.jface.viewers.ILabelDecorator"
    				annotatedWithName = "DiagnosticDecorator"
    				to = "io.sarl.lang.ui.labeling.SARLDiagnosticLabelDecorator"
    				singleton = true
    			}
    			ui = {
    				bind = "io.sarl.lang.ui.labeling.IQualifiedNameImageProvider"
    				to = "io.sarl.lang.ui.labeling.SARLLabelProvider"
    				singleton = true
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.validation.AbstractValidatorConfigurationBlock"
    				to = "io.sarl.lang.ui.preferences.SARLValidatorConfigurationBlock"
    			}
    			ui = {
    				bind = "org.eclipse.ui.views.contentoutline.IContentOutlinePage"
    				to = "io.sarl.lang.ui.outline.SARLOutlinePage"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution"
    				annotatedWithName = "SARLFieldOutlineFilter"
    				to = "io.sarl.lang.ui.outline.SARLFieldOutlineFilter"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution"
    				annotatedWithName = "SARLOperationOutlineFilter"
    				to = "io.sarl.lang.ui.outline.SARLOperationOutlineFilter"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution"
    				annotatedWithName = "SARLBehaviorUnitOutlineFilter"
    				to = "io.sarl.lang.ui.outline.SARLBehaviorUnitOutlineFilter"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer"
    				annotatedWithName = "RefactoringPreferences"
    				to = "io.sarl.lang.ui.preferences.SARLPreferenceStoreInitializer"
    				functionName = "configureIPreferenceStoreInitializer"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer"
    				annotatedWithName = "smartCaretPreferenceInitializer"
    				to = "io.sarl.lang.ui.preferences.SARLPreferenceStoreInitializer"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer"
    				annotatedWithName = "SarlBuilderPreferences"
    				to = "io.sarl.lang.ui.preferences.SARLBuilderPreferenceAccess$Initializer"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator"
    				to = "io.sarl.lang.ui.highlighting.SARLHighlightingCalculator"
    				functionName = "bindIdeSemanticHighlightingCalculator"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration"
    				to = "io.sarl.lang.ui.highlighting.SARLHighlightingConfiguration"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.tasks.ITaskTagProvider"
    				to = "io.sarl.lang.ui.tasks.SarlTaskTagProvider"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.tasks.ITaskFinder"
    				to = "io.sarl.lang.ui.tasks.SarlTaskFinder"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.impl.OutlineFilterAndSorter$IComparator"
    				to = "io.sarl.lang.ui.outline.SARLOutlineNodeComparator"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.xbase.ui.validation.XbaseUIValidator"
    				to = "io.sarl.lang.ui.validation.SARLUIValidator"
    				singleton = true
    				eager = true
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.contentassist.IContentAssistantFactory"
    				to = "io.sarl.lang.ui.contentassist.SARLContentAssistFactory"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider"
    				to = "io.sarl.lang.ui.contentassist.imports.SARLImportingTypesProposalProvider"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.templates.XtextTemplateContextType"
    				to = "io.sarl.lang.ui.contentassist.templates.SARLTemplateContextType"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.contentassist.ITemplateProposalProvider"
    				to = "io.sarl.lang.ui.contentassist.templates.SARLTemplateProposalProvider"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.refactoring.IRenameStrategy$Provider"
    				to = "io.sarl.lang.ui.refactoring.rename.SARLRenameStrategyProvider"
    				override = true
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.IImageHelper"
    				to = "org.eclipse.xtext.ui.PluginImageHelper"
    				override = true
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.IImageHelper$IImageDescriptorHelper"
    				to = "org.eclipse.xtext.ui.PluginImageHelper"
    				override = true
    				functionName = "bindIImageDescriptorHelper"
    			}
    			ui = {
    				bind = "io.sarl.lang.compiler.IGeneratorConfigProvider2"
    				to = "io.sarl.lang.ui.compiler.EclipseGeneratorConfigProvider2"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.builder.preferences.BuilderConfigurationBlock"
    				to = "io.sarl.lang.ui.preferences.SARLBuilderConfigurationBlock"
    				override = true
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.model.IResourceForEditorInputFactory"
    				to = "org.eclipse.xtext.xbase.ui.editor.XbaseResourceForEditorInputFactory"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.ide.hover.XtendHoverSerializer"
    				to = "io.sarl.lang.ui.hover.SARLHoverSerializer"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.xbase.ui.hover.XbaseDeclarativeHoverSignatureProvider"
    				to = "io.sarl.lang.ui.hover.SARLHoverSignatureProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider"
    				to = "io.sarl.lang.ui.hover.SARLHoverProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.xbase.ui.hover.HoverUiStrings"
    				to = "io.sarl.lang.ui.hover.SARLHoverUIStrings"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.xbase.validation.UIStrings"
    				to = "io.sarl.lang.ui.validation.SARLUIStrings"
   				}
    			ui = {
    				bind = "org.eclipse.jface.viewers.ILabelProvider"
    				annotatedWith = "org.eclipse.xtext.ui.editor.hyperlinking.HyperlinkLabelProvider"
    				to = "io.sarl.lang.ui.labeling.SARLHyperLinkingLabelProvider"
    				functionName = "configureHyperlinkLabelProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.ide.codebuilder.CodeBuilderFactory"
    				to = "io.sarl.lang.ui.codebuilder.SarlCodeBuilderFactory"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.ide.codebuilder.XtendMethodBuilder"
    				to = "io.sarl.lang.ui.codebuilder.SarlMethodBuilder"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.ide.codebuilder.XtendConstructorBuilder"
    				to = "io.sarl.lang.ui.codebuilder.SarlConstructorBuilder"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.ide.codebuilder.XtendParameterBuilder"
    				to = "io.sarl.lang.ui.codebuilder.SarlParameterBuilder"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.ide.codebuilder.XtendFieldBuilder"
    				to = "io.sarl.lang.ui.codebuilder.SarlFieldBuilder"
   				}
    			ui = {
    				bind = "io.sarl.lang.extralanguage.compiler.ExtraLanguageTypeConverter$TypeConverterRuleReader"
    				to = "io.sarl.lang.ui.extralanguage.preferences.PreferenceBasedTypeConverterRuleReader"
   				}
    			ui = {
    				bind = "io.sarl.lang.extralanguage.compiler.FeatureNameConverterRuleReader"
    				to = "io.sarl.lang.ui.extralanguage.preferences.PreferenceBasedFeatureNameConverterRuleReader"
   				}
    			ui = {
    				bind = "io.sarl.lang.compiler.IResourceTypeDetector"
    				to = "io.sarl.lang.ui.compiler.EclipseResourceTypeDetector"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.IXtextEditorCallback"
    				to = "io.sarl.lang.ui.editor.SARLNatureAddingEditorCallback"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.IXtextEditorCallback"
    				annotatedWithName = "IXtextEditorCallBack"
    				to = "io.sarl.lang.ui.editor.SARLEditorErrorTickUpdater"
    				functionName = "configureXtextEditorErrorTickUpdater"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.core.macro.ProcessorInstanceForJvmTypeProvider"
    				to = "io.sarl.lang.ui.macro.SarlJdtProcessorInstanceForJvmTypeProvider"
   				}
    			ui = {
    				bind = "io.sarl.lang.ui.editor.IDocumentAutoFormatter"
    				to = "io.sarl.lang.ui.editor.DocumentAutoFormatter"
    			}
    		}

    		// Xtend-extension bindings
    		fragment = InjectionFragment2 auto-inject {
    			comment = "Bindings required by extended Xtend API"

    			runtime = {
    				bind = "org.eclipse.xtext.findReferences.ReferenceFinder"
    				to = "org.eclipse.xtend.core.findReferences.XtendReferenceFinder"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.scoping.batch.ConstructorScopes"
    				to = "org.eclipse.xtend.core.scoping.AnonymousClassConstructorScopes"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.internal.DefaultBatchTypeResolver"
    				to = "org.eclipse.xtend.core.typesystem.TypeDeclarationAwareBatchTypeResolver"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.EObjectAtOffsetHelper"
    				to = "org.eclipse.xtend.core.linking.XtendEObjectAtOffsetHelper"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.util.HumanReadableTypeNames"
    				to = "org.eclipse.xtend.core.typesystem.LocalClassAwareTypeNames"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy"
    				to = "org.eclipse.xtend.core.resource.XtendResourceDescriptionStrategy"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.conversion.impl.IDValueConverter"
    				to = "org.eclipse.xtend.core.conversion.JavaIDValueConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.documentation.IFileHeaderProvider"
    				to = "org.eclipse.xtend.core.documentation.XtendFileHeaderProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.imports.IImportsConfiguration"
    				to = "org.eclipse.xtend.core.imports.XtendImportsConfiguration"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.linking.ILinker"
    				to = "org.eclipse.xtend.core.linking.RuntimeLinker"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.ILocationInFileProvider"
    				to = "org.eclipse.xtend.core.resource.XtendLocationInFileProvider"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.ImplicitReturnFinder"
    				to = "org.eclipse.xtend.core.validation.XtendImplicitReturnFinder"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.imports.ImportedTypesCollector"
    				to = "org.eclipse.xtend.core.imports.XtendImportedTypesUsageCollector"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.conversion.XbaseValueConverterService$IntUnderscoreValueConverter"
    				to = "org.eclipse.xtend.core.conversion.IntUnderscoreValueConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.naming.IQualifiedNameProvider"
    				to = "org.eclipse.xtend.core.naming.XtendQualifiedNameProvider"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.declaration.IResourceChangeRegistry"
    				to = "org.eclipse.xtend.core.macro.declaration.NopResourceChangeRegistry"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.IResourceDescriptions"
    				to = "org.eclipse.xtext.resource.impl.EagerResourceSetBasedResourceDescriptions"
    				functionName = "configureIResourceDescriptions"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.persistence.IResourceStorageFacade"
    				to = "org.eclipse.xtext.xbase.resource.BatchLinkableResourceStorageFacade"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.validation.IResourceValidator"
    				to = "org.eclipse.xtend.core.validation.CachingResourceValidatorImpl"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IShouldGenerate"
    				to = "org.eclipse.xtext.generator.IShouldGenerate$Always"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.conversion.IValueConverterService"
    				to = "org.eclipse.xtend.core.conversion.XtendValueConverterService"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.IResourceDescription$Manager"
    				to = "org.eclipse.xtend.core.resource.XtendResourceDescriptionManager"
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.lib.macro.file.MutableFileSystemSupport"
    				to = "org.eclipse.xtend.core.macro.JavaIOFileSystemSupport"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.conversion.impl.STRINGValueConverter"
    				to = "org.eclipse.xtend.core.conversion.XtendStringValueConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.findReferences.TargetURICollector"
    				to = "org.eclipse.xtext.xbase.jvmmodel.JvmModelTargetURICollector"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.parser.impl.TokenRegionProvider"
    				to = "org.eclipse.xtext.parser.impl.TokenRegionProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.parser.antlr.TokenSourceProvider"
    				to = "org.eclipse.xtend.core.parser.antlr.XtendTokenSourceProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.output.TraceAwarePostProcessor"
    				to = "org.eclipse.xtend.core.compiler.UnicodeAwarePostProcessor"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.imports.TypeUsageCollector"
    				to = "org.eclipse.xtend.core.imports.XtendTypeUsageCollector"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.XbaseFactory"
    				to = "XbaseFactory.eINSTANCE"
    				singleton = true
    				instance = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtend.core.xtend.XtendFactory"
    				to = "XtendFactory.eINSTANCE"
    				singleton = true
    				instance = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.AbstractFileSystemSupport"
    				to = "org.eclipse.xtend.core.macro.JavaIOFileSystemSupport"
    			}

    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider"
    				to = "org.eclipse.xtend.ide.autoedit.AutoEditStrategyProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.generator.AbstractFileSystemAccess2"
    				to = "io.sarl.lang.ui.compiler.ProjectRelativeFileSystemAccess"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.core.macro.AbstractFileSystemSupport"
    				to = "org.eclipse.xtend.ide.macro.EclipseFileSystemSupportImpl"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.contentassist.PrefixMatcher$CamelCase"
    				to = "org.eclipse.xtend.ide.contentassist.EscapeSequenceAwarePrefixMatcher"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.doubleClicking.DoubleClickStrategyProvider"
    				to = "org.eclipse.xtend.ide.editor.XtendDoubleClickStrategyProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.XtextSourceViewer$Factory"
    				to = "io.sarl.lang.ui.editor.SARLSourceViewer$Factory"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.XtextSourceViewerConfiguration"
    				to = "org.eclipse.xtend.ide.editor.XtendSourceViewerConfiguration"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.XtextEditor"
    				to = "io.sarl.lang.ui.editor.SARLStandardEditor"
    				override = true
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.actions.IActionContributor"
    				annotatedWithName = "OverrideIndicatorRulerAction"
    				to = "org.eclipse.xtend.ide.editor.OverrideIndicatorRulerAction"
   				}
    			ui = {
    				bind = "org.eclipse.jface.text.source.IAnnotationHover"
    				to = "org.eclipse.xtend.ide.hover.XtendAnnotationHover"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider"
    				to = "org.eclipse.xtend.ide.common.editor.bracketmatching.XtendBracePairProvider"
    				singleton = true
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper"
    				to = "org.eclipse.xtend.ide.hyperlinking.XtendHyperlinkHelper"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.occurrences.IOccurrenceComputer"
    				to = "org.eclipse.xtend.ide.editor.OccurrenceComputer"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.refactoring.IRenameStrategy"
    				to = "org.eclipse.xtend.ide.refactoring.XtendRenameStrategy"
    				override = true
   				}
    			ui = {
    				bind = "org.eclipse.xtend.core.macro.declaration.IResourceChangeRegistry"
    				to = "org.eclipse.xtend.ide.builder.UIResourceChangeRegistry"
 				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.resource.IResourceUIServiceProvider"
    				to = "org.eclipse.xtend.ide.XtendResourceUiServiceProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.toggleComments.ISingleLineCommentHelper"
    				to = "org.eclipse.xtend.ide.editor.SingleLineCommentHelper"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.generator.trace.ITraceForStorageProvider"
    				to = "org.eclipse.xtext.ui.generator.trace.TraceForStorageProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.IXtextEditorCallback"
    				annotatedWithName = "OverrideIndicatorModelListener"
    				to = "org.eclipse.xtend.ide.editor.OverrideIndicatorModelListener"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.lib.macro.file.MutableFileSystemSupport"
    				to = "org.eclipse.xtend.ide.macro.EclipseFileSystemSupportImpl"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.toggleComments.ToggleSLCommentAction$Factory"
    				to = "org.eclipse.xtend.ide.editor.RichStringAwareToggleCommentAction$Factory"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.contentassist.IProposalConflictHelper"
    				to = "org.eclipse.xtend.ide.contentassist.antlr.FlexProposalConflictHelper"
    				override = true
   				}
    		}

	    	// Injection recommender for recommending missed injections in the SARL module
    		fragment = InjectionRecommender2 auto-inject {
    			enable = false
    			showRuntimeRecommendations = true
    			showUiRecommendations = false
    		}
		}
 	}
 
   	// SARL Ecore generator
   	// Update the GenModel file with the changes applied by this script.
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator auto-inject {
		resourceSet = resourceSet
		genModel = "platform:/resource/${compilerProjectName}/model/SARL.genmodel"
		srcPath ="platform:/resource/${compilerProjectName}/src/main/java"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
		srcPath ="platform:/resource/org.eclipse.xtend.core/src"
		srcPath ="platform:/resource/org.eclipse.xtend.ide/src"
		lineDelimiter = lineDelimiter
	}
 

 }